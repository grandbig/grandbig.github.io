<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: autolayout | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/autolayout/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2020-02-22T17:53:48+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AutoLayoutの実例（２）]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/18/autolayout-2/"/>
    <updated>2018-08-18T13:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/18/autolayout-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="https://grandbig.github.io/blog/2018/08/11/autolayout-1/">AutoLayoutの実例（１）</a>にて、<br/>
『 <code>UITableViewCell</code> 内に長さの異なる <code>UILabel</code> を持った <code>UIStackView</code> がある場合』の <code>AutoLayout</code> について説明しました。</p>

<p>今回は『 <code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合』<br/>
の <code>AutoLayout</code> について説明したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3><code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合</h3>

<p>下図のようなレイアウトを実現する場合</p>

<p><img src="/images/autolayout_sample_2_1.png" alt="UITableViewCell内に条件次第でisHiddenがtrueになるパーツを持つUIStackViewがある" /></p>

<p>これは前回のサンプルの、</p>

<ul>
<li><code>subTitleLabel</code> は文字列 <code>GOOD</code> 固定</li>
<li><code>titleLabel</code> には可変長の文字列を表示する</li>
<li><code>titleLabel</code> のすぐ右隣に <code>subTitleLabel</code> を表示する(要素は全て左詰め)</li>
<li>画像は固定サイズで表示する</li>
</ul>


<p>に加えて、以下仕様をプラスしました。</p>

<ul>
<li><code>hiddenLabel1</code> (条件次第で非表示になるオレンジ色のラベル)が <code>titleLabel</code> 等の下に配置</li>
<li><code>hiddenLabel2</code> (条件次第で非表示になる茶色のラベル)が更にその下に配置</li>
<li><code>button</code> が更にその下に配置</li>
<li>条件次第で <code>hiddenLabel2</code> と <code>button</code> がセットで非表示になる</li>
<li>条件次第で <code>hiddenLabel1</code> と <code>hiddenLabel2</code> , <code>button</code> が非表示になる</li>
</ul>


<h4>レイアウトの構成</h4>

<p><code>xib</code> 上のUIパーツは下図の通りです。</p>

<p><img src="/images/autolayout_sample_2_2.png" alt="xib上の構成" /></p>

<p>構成について説明します。</p>

<ul>
<li>画像、 <code>titleLabel</code> , <code>subTitleLabel</code> は前回に引き続き1つの <code>UIStackView</code> 内に要素を配置しています

<ul>
<li>これは3つの要素の横の関係性が場合によって変化する仕様に対応するためです。</li>
</ul>
</li>
</ul>


<p><img src="/images/autolayout_sample_2_7.png" alt="画像, titleLabel, subTitleLabelを囲むUIStackView" /></p>

<ul>
<li><code>hiddenLabel2</code> と <code>button</code> は条件次第で同時に非表示になるため、<code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="/images/autolayout_sample_2_4.png" alt="hiddenLabel2とbuttonを囲むUIStackView" /></p>

<ul>
<li>条件次第で <code>hiddenLabel1</code> , <code>hiddenLabel2</code> , <code>button</code> が一気に非表示になるため、さらに <code>UIStackView</code> で囲みます</li>
</ul>


<p><img src="/images/autolayout_sample_2_5.png" alt="hiddenLabel1, hiddenLabel2, buttonを囲むUIStackView" /></p>

<ul>
<li>非表示になったときに、Cellの高さが動的に変わるように、全要素を <code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="/images/autolayout_sample_2_6.png" alt="全要素を囲むUIStackView" /></p>

<h4>Cellの高さを要素の表示/非表示状態次第で可変にする</h4>

<p><code>ContentView</code> と全要素を囲む <code>UIStackView</code>の間に <code>Constraint</code> を付与するだけです。</p>

<p><img src="/images/autolayout_sample_2_3.png" alt="ContentViewと全要素を囲むUIStackViewの間にConstraintを付与する" /></p>

<p>以前、<a href="http://grandbig.github.io/blog/2017/12/10/ios11-stackview-hidden/">iOS10とiOS11で比較するUIStackViewのhiddenとConstraintエラー</a>で説明しましたが、
iOS11からは <code>UIStackView</code> を <code>isHidden = true</code> にしても、<code>Constraint</code> エラーは出なくなったので、  かなり扱いやすくなっています。</p>

<h3>まとめ</h3>

<p>さて、今回の実例は前回の実例の追加版といった位置づけで書いてみました。<br/>
<code>UITableViewCell</code> で、条件により表示/非表示を切り替えて、動的に高さを変更する場面は多いと思います。<br/>
今は <code>AutoLayout</code> さえ正しく使えば簡単に対応できる内容となっていますので、必ず覚えておきましょう。</p>

<p>次回はもう少し複雑な <code>AutoLayout</code> の実例を紹介できればと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS11から使える非常に便利な『setCustomSpacing』]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/12/set-custom-spacing/"/>
    <updated>2018-08-12T23:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/12/set-custom-spacing</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><code>UIStackView</code> は様々なシーンで、 <code>AutoLayout</code> を飛躍的に使いやすくしてくれました。<br/>
一方で、まだまだ改善の余地ありと感じさせられるところも多く、部分的に困るiOSエンジニアもいたのではないかと思います。</p>

<p>例えば、<br/>
『同一スペースを持つ複数Viewをレイアウトする』のには、<br/>
 <code>UIStackView</code> が非常に有効であるものの、<br/>
『一部異なるスペースを持った複数Viewをレイアウトする』には、<br/>
あまり向いているとは言えない<br/>
といったことなどです。</p>

<p>今回はiOS11から上記例が解消されたことを紹介したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>題材の説明</h3>

<p>まずは題材の説明です。</p>

<ul>
<li><code>UILabel</code> 3つを表示

<ul>
<li>上から <code>labelA</code> , <code>labelB</code> , <code>labelC</code> とする</li>
</ul>
</li>
<li>各 <code>UILabel</code> のスペースが異なる

<ul>
<li><code>labelA</code> と <code>labelB</code> 間のスペースは <code>50.0pt</code></li>
<li><code>labelB</code> と <code>labelC</code> 間のスペースは <code>8.0pt</code></li>
</ul>
</li>
</ul>


<h3>iOS10まで</h3>

<p>iOS10までは、多重に <code>UIStackView</code> を利用する必要がありました。<br/>
それぞれに <code>spacing</code> を指定するしか方法がなかったからです。</p>

<p><img src="/images/set_custom_spacing_1.png" alt="多重にUIStackViewを生成" /></p>

<p>複雑な画面であればあるほど、 <code>UIStackView</code> が多重化し、 <code>xib</code> や <code>storyboard</code> の編集が重くなります&hellip;</p>

<h3>iOS11以降</h3>

<p>iOS11では1つの <code>UIStackView</code> でこの状況を打破することができます。</p>

<p>構成はたったのこれだけで&hellip;</p>

<p><img src="/images/set_custom_spacing_2.png" alt="1つのUIStackView" /></p>

<p>あとはソースコードで <code>spacing</code> をカスタム化することで実現できます。</p>

<p>```objective-c
// SampleViewController.swift</p>

<p>import Foundation
import UIKit</p>

<p>class SampleViewController: UIViewController {</p>

<pre><code>@IBOutlet private weak var stackView: UIStackView!
@IBOutlet private weak var labelA: UILabel!
@IBOutlet private weak var labelB: UILabel!
@IBOutlet private weak var labelC: UILabel!

override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.

    if #available(iOS 11.0, *) {
        stackView.setCustomSpacing(50.0, after: labelA) // ここが重要！！！
    } else {
        // iOS10.x以下は利用不能
    }
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}
</code></pre>

<p>}
```</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
昨年までは、iOS10.xカスタマーも健在で、なかなか <code>setCustomSpacing</code> を利用するメリットが少なかったように思われます。<br/>
しかし、今年はiOS12が登場しますし、自然とiOS11以上をサポート対象とするアプリも増えてくることでしょう。<br/>
今年だからこそ <code>setCustomSpacing</code> は重要な改善の1つなのだと筆者は思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayoutの実例（１）]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/11/autolayout-1/"/>
    <updated>2018-08-11T14:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/11/autolayout-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>幾つか現場で経験してきた <code>AutoLayout</code> の実例を少しずつ書き留めておこうと思います。<br/>
<code>AutoLayout</code> がこれだけ当たり前にiOSに使われる世の中になったものの、実例交えて書かれている記事が少ないなと感じたためです。<br/>
(もちろん筆者の記憶に留めておきたい気持ちもあるからですが笑)</p>

<p>では、早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある場合</h3>

<p>下図のようなレイアウトを実現する場合</p>

<p><img src="/images/autolayout_sample_1.png" alt="UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある" /></p>

<p>これは、</p>

<ul>
<li><code>subTitleLabel</code> は文字列 <code>GOOD</code> 固定</li>
<li><code>titleLabel</code> には可変長の文字列を表示する</li>
<li><code>titleLabel</code> のすぐ右隣に <code>subTitleLabel</code> を表示する(要素は全て左詰め)</li>
<li>画像は固定サイズで表示する</li>
</ul>


<p>というサンプルです。</p>

<p><code>xib</code> 上のUIパーツは下図の通りです。</p>

<p><img src="/images/autolayout_sample_2.png" alt="xib上の構成" /></p>

<h4>固定化</h4>

<p>これは説明するまでもありませんが、 <code>width</code> や <code>height</code> に固定で <code>Constraint</code> を付与するだけです。</p>

<p>まずは画像の固定化です。</p>

<p><img src="/images/autolayout_sample_3.png" alt="画像の固定化" /></p>

<p>続いて、 <code>subTitleLabel</code> の固定化です。</p>

<p><img src="/images/autolayout_sample_4.png" alt="subTitleLabelの固定化" /></p>

<h4>可変長のラベル</h4>

<p><code>UIStackView</code> 内に画像, <code>titleLabel</code> , <code>subTitleLabel</code> があります。<br/>
画像と <code>subTitleLabel</code> は長さ指定があり、 <code>titleLabel</code> は内部の文字列が固定でないため、可変長になる必要があります。</p>

<p>その場合は、 <code>Content Hugging Priority</code> と <code>Content Compression Resistance Priority</code> を利用します。</p>

<ul>
<li>画像について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>251</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>750</code></li>
</ul>
</li>
<li><code>titleLabel</code> について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>250</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>751</code></li>
</ul>
</li>
<li><code>subTitleLabel</code> について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>251</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>750</code></li>
</ul>
</li>
</ul>


<p>このように <code>titleLabel</code> は『そのもののサイズにこだわらず』、『小さくなりにくさ』を優先させています。</p>

<p><img src="/images/autolayout_sample_5.png" alt="titleLabelへのContent Hugging PriorityとContent Compression Resistance Priorityの設定" /></p>

<h4>要素の左詰め</h4>

<p><code>UIStackView</code> 内の画像, <code>titleLabel</code> , <code>subTitleLabel</code> を左詰めで表示します。<br/>
( <code>titleLabel</code> の文字列は可変長ですが、文字数が少なければ左に詰めたいという指示があると過程しています。 )</p>

<p>その場合は <code>UIStackView</code> に <code>Constraint</code> を付与します。<br/>
「左詰め = 右端からの <code>Constraint</code> は最低数値『以上』」と読み替えます。</p>

<p><img src="/images/autolayout_sample_6.png" alt="UIStackViewの右端に以上制約を付与" /></p>

<p>以上の3つの対応をすることで、以下のようなレイアウトを実現することができます。</p>

<p><img src="/images/autolayout_sample_1.png" alt="UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある" /></p>

<h3>まとめ</h3>

<p>さて、本記事は実例の初回ということで、シンプル＆簡単なものを採用してみました。<br/>
ですが、 <code>AutoLayout</code> は <code>View</code> を構造的に捉え、デフォルト値を持った優先度 ( <code>Priority</code> )の意味を深く理解する必要があります。<br/>
深く理解した上で意図的に <code>Priority</code> を決めないと作りたい <code>View</code> を作ることはできません。</p>

<p><code>xib</code> で <code>GUI</code> 形式でペタペタ貼るからこその難しさは存在するのです。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更だけど正しく身につけよう『Content Hugging Priority』と『Content Compression Resistance Priority』]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/04/content-hugging-priority/"/>
    <updated>2018-08-04T16:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/04/content-hugging-priority</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は <code>AutoLayout</code> の中でもしっかりと知っておきたい以下2つを紹介します。</p>

<ul>
<li><code>Content Hugging Priority</code></li>
<li><code>Content Compression Resistance Priority</code></li>
</ul>


<p>上記2つを利用することで、各サイズでの想定されたデザインを再現することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>題材の紹介</h3>

<p>今回説明に利用する題材は以下とします。</p>

<ul>
<li><code>UILabel</code> 2つが配置されたカスタム <code>UITableViewCell</code> を持つ <code>UITableView</code> の表示</li>
<li><code>UITableViewCell</code> 内に2つの <code>UILabel</code> を配置するために <code>UIStackView</code> を利用</li>
</ul>


<p><img src="/images/content_hugging_priority_1.png" alt="説明用の題材" /></p>

<p>上記に表示した <code>UITableViewCell</code> に付与された制約は次の通りです。</p>

<ul>
<li><code>UIStackView</code> の左右に <code>SuperView</code> に対して <code>8pt</code> の制約を付与</li>
<li><code>UIStackView</code> のY位置を <code>SuperView</code> の <code>CenterY</code> と一致させる制約を付与</li>
<li><code>subTitleLabel</code> の <code>width</code> を <code>100pt</code> に指定</li>
</ul>


<p><img src="/images/content_hugging_priority_2.png" alt="付与している制約" /></p>

<h3>Content Hugging Priority</h3>

<p>先程の紹介では <code>subTitleLabel</code> に <code>width: 100pt</code> の制約を付与していました。<br/>
もし、この制約が不要で、以下のようなデザイン指定がある場合、どのように対処すれば良いでしょうか。</p>

<ul>
<li><code>titleLabel</code> の <code>width</code> を <code>subTitleLabel</code> よりも広く取りたい</li>
<li>(逆を言えば、) <code>subTitleLabel</code> の <code>width</code> はコンテンツサイズ以上に広くしたくない</li>
</ul>


<p>その場合は、<br/>
<code>titleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> よりも低く設定します。<br/>
※デフォルト値は <code>251</code> です。</p>

<p><img src="/images/content_hugging_priority_3.png" alt="Content Hugging Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="/images/content_hugging_priority_4.png" alt="Content Hugging Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>subTitleLabel</code> のテキストである <code>GOOD</code> が全文表示される最低サイズを優先して設定していることを指しています。<br/>
逆に、 <code>titleLabel</code> は中身のテキストに寄らず、横幅が広くなっているのも同じ理由です。</p>

<p>つまり、<br/>
<code>Content Hugging Priority</code> が高いと、<strong>コンテンツのサイズを優先する</strong> ことがわかります。</p>

<h3>Content Compression Resistance Priority</h3>

<p>上記で説明した際には <code>subTitleLabel</code> のテキストが <code>GOOD</code> でした。<br/>
もしも、 <code>subTitleLabel</code> のテキストが長文だった場合、どうなるでしょうか。</p>

<p>答えは、</p>

<p><img src="/images/content_hugging_priority_5.png" alt="subTitleLabelが長文の場合" /></p>

<p>です。</p>

<p><code>subTitleLabel</code> が長くなり <code>titleLabel</code> の文字が1文字しか表示されなくなってしまいました。</p>

<p>ここで、テキストの表示重要度が <code>titleLabel</code> の方が <code>subTitleLabel</code> よりも高いとしましょう。<br/>
それを実現するために <code>Content Compression Resistance Priority</code> を利用します。</p>

<p><code>titleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> よりも高く設定します。<br/>
※デフォルト値は <code>750</code> です。</p>

<p><img src="/images/content_hugging_priority_6.png" alt="Content Compression Resistance Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="/images/content_hugging_priority_7.png" alt="Content Compression Resistance Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>titleLabel</code> のテキストを極力表示するように優先して設定されていることを指しています。</p>

<p>つまり、 <code>Content Compression Resistance Priority</code> が高いと、<br/>
文字通り、 <strong>小さくなりにくさの優先度を高くしている</strong> ということです。</p>

<h3>おまけ</h3>

<p>因みに、 <code>subTitleLabel</code> を完全に非表示にしたくないと言った要望がある場合には、<br/>
<code>subTitleLabel</code> の <code>width</code> に最低サイズを指定すれば良いでしょう。</p>

<p><img src="/images/content_hugging_priority_8.png" alt="subTitleLabelにwidthを設定" /></p>

<p>これは以下理由により実現されます。</p>

<ul>
<li><code>Content Compression Resistance Priority</code> の <code>Priority</code> は <code>751</code></li>
<li><code>width</code> に付与した <code>Priority</code> は <code>1000</code></li>
</ul>


<p><img src="/images/content_hugging_priority_9.png" alt="subTitleLabelにwidthを指定した結果" /></p>

<h3>まとめ</h3>

<p>上記をまとめます。</p>

<ul>
<li><code>Content Hugging Priority</code> が高い = コンテンツサイズを優先する</li>
<li><code>Content Compression Resistance Priority</code> が高い = 小さくなりにくさを優先する</li>
<li>どの制約が優先して適用されるかは <code>Priority</code> の値に従って決まる</li>
</ul>


<p>さて如何でしたでしょうか？<br/>
今更ながら実例を交えてきちんと整理しておきたい気持ちが強くなり、今回のブログ記事となりました。<br/>
iOSアプリを開発する際に、 <code>AutoLayout</code> スキルをないがしろにすることはできません。</p>

<p>ぜひぜひ今後とも強めていきたいところですね。<br/>
ということで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でAuto Layoutを使おう]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout/"/>
    <updated>2014-02-09T17:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout</id>
    <content type="html"><![CDATA[<h3>Auto Layoutで『iOS6・iOS7』と『3.5-inch・4-inch』対応</h3>

<p>さて、これまで<strong>iOS6/7 deltas</strong>を利用した方法や<strong>全てコードで書く</strong>方法について説明してきました。これとは別に本日は<strong>Auto Layout</strong>を利用した方法について説明します。<br/>
先にこれらの方法の違いについて紹介します。<br/>
・iOS6/7 deltasを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS5以前から対応する場合<br/>
・全てコードで書く方法<br/>
  XIBやStoryboardなどのGUIを利用せずに、全OS・全ディスプレイに対応する場合<br/>
・Auto Layoutを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS6以降から対応する場合</p>

<p>求められている仕様や開発者の技量、プロジェクトの運用から最適な方法を選択する必要があります。<br/>
とは言え、個人的には<strong>全てコードで書く</strong>方法が最も自由がきくと思っているので、これに慣れていると他の手法は案外シンドイです。</p>

<!--more-->


<h4>Auto LayoutでUINavigationBarを調整しよう</h4>

<p>以前、iOS6/7 deltasを利用する方法で説明したことをAuto Layoutで説明します。皆様、ご存知の通りiOS6以前とiOS7以降とではステータスバーの20px分をナビゲーションバーの高さを考慮しなくてはなりません。<br/>
<img src="/images/ios6_7_difference.png" alt="iOS6とiOS7でナビゲーションバーの高さが異なる" /></p>

<p>早速、詳しく説明していきます。<br/>
まず、プロジェクトを作成し終わったら、XIBファイルを表示してください。そしてUINavigationBarを設置します。このUINavigationBarの高さをiOSのバージョンごとに変化させたいので、下記手順でAuto LayoutのConstraintを追加します。<br/>
1: 右下のバーの左から2番目をクリックしてConstraintsのウィンドウを表示<br/>
2: 高さを変更したいのでHeightにチェックを入れる<br/>
3: Add ConstraintボタンをクリックしてConstraintを追加する<br/>
<img src="/images/autolayout1.png" alt="Constraintを追加する" /></p>

<p>これでConstraintsが追加されたのでViewController.hと関連づける。<br/>
1: Constraints > Heightを右クリックしてViewController.hへドラッグ&amp;ドロップ<br/>
2: ウィンドウが表示されるので、名前をつけてConnectをクリックする<br/>
<img src="/images/autolayout2.png" alt="ViewController.hに関連づける" /><br/>
<img src="/images/autolayout3.png" alt="名前をつけてConnect" /></p>

<p>次にViewController.mファイルを開きましょう。<br/>
以下のように編集してください。<br/>
```
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// iOS7の場合は64pxにする
if (floor(NSFoundationVersionNumber) &gt; NSFoundationVersionNumber_iOS_6_1) {
    self.nvBarHeight.constant = 64;
}
</code></pre>

<p>}
```
以上の手順をすることで下記のようにiOS6とiOS7でUINavigationBarを正しく表示することができます。<br/>
<img src="/images/autolayout4.png" alt="UINavigationBarの表示" /></p>

<h4>Auto LayoutでUIViewを中央に配置しよう</h4>

<p>次に主にディスプレイサイズで困るであろう中央配置の方法について説明します。<br/>
まずは、何も考えずに普通にUIViewを追加してみましょう。そしてViewを3.5-inch Full Screenと4-inch Full Screenとで表示を変更して見てみましょう。すると、下記のようにUIViewの高さが変わってしまうことがわかると思います。<br/>
<img src="/images/autolayout5.png" alt="4-inchの場合" /><br/>
<img src="/images/autolayout6.png" alt="3.5-inchの場合" /><br/>
こんなはずでは&hellip;なんて絶句してしまうかもしれません。が、ご安心ください。これは先ほど説明したHeightのConstraintsを追加することで対応できます。先ほどと同様に下記の手順でHeightのConstraintを追加してみてください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 高さを保持したいのでHeightにチェックを入れます。高さが希望の値になっていることを確認してください。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する</p>

<p>これで先ほどと同様にViewのinchを変更させてみてください。追加したUIViewの高さが保持されていることがわかると思います。</p>

<p>はい。本題です。<br/>
UIViewをディスプレイのCenterに表示させたい場合は下記手順を実行してください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から1番目をクリックしてConstraintのウィンドウを表示<br/>
2: Vertical方向に常にディスプレイの中央に表示させたいので、Vertical Center in Containerにチェックを入れます。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="/images/autolayout7.png" alt="Vertical Center in Containerを追加" /></p>

<p>これでUIViewを高さを保持した状態で3.5-inch/4-inchでもディスプレイの中央に表示することができます。</p>

<h4>Auto Layoutでマージンを調整しよう</h4>

<p>そして、Auto Layoutを用いたマージンの調整方法についても説明しましょう。<br/>
先ほど、ディスプレイの中央に表示したい場合を説明したと思いますが、3.5-inchで見るとUINavigationBarに近すぎると感じることがあるかもしれません。<br/>
であるならば、3.5-inchでも4-inchでもUINavigationBarから一定の距離を保持した方が見栄えが良いと思うこともあると思います。<br/>
さて、その方法について説明します。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 上部との距離を変更します。(初期状態は点線表記になっていますが、赤の実線になるように値を変更してください)<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="/images/autolayout8.png" alt="上部マージンを追加" /></p>

<p>これで3.5-inch/4-inchにディスプレイが変更されたとしてもUINavigationBarとUIViewとの距離は一定に保たれます。</p>

<h4>最後に</h4>

<p>いかがだったでしょうか？<br/>
筆者的には完全に手探りな状態で始めたので、わからないことだらけだったのですが、なんとなく理解できてきました。<br/>
現在はiPhone4S以前を利用しているユーザは(日本では？)少なくなってきたと思うのですが、iPadがiPhoneの3.5-inchと同じ比率ですので、Universalアプリを開発するのであれば対応せざるを得ません。<br/>
また、iOS6ユーザはまだまだいると思いますので、仕様として要求される可能性は十分あります。細かい修正が常に要求されるとは思いますが、忍耐強くiOS8, 9, 10&hellip;とリリースされるのを待ちましょう笑<br/>
次回リリースされるiPhoneやiPadまたはリリースされるかもしれない新デバイスがどんなディスプレイの比率になるかもわからないので、今後こういった対応は常に要求されるんでしょうね(汗)</p>

<p>ということでまた次回！<br/>
筆者も継続して勉強します。</p>
]]></content>
  </entry>
  
</feed>
