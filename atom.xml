<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-12-04T22:19:07+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server Side SwiftでMongoDBと遊んでみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/05/swift-perfect-mongo/"/>
    <updated>2016-12-05T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/05/swift-perfect-mongo</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは<a href="http://qiita.com/advent-calendar/2016/swift2">Swift その2 Advent Calendar 2016</a> 5日目の記事です。<br/>
今年は筆者が興味を持っている <strong>Server Side Swift</strong> について書きたいと思います。
Swiftサーバを立てるために、<a href="http://grandbig.github.io/blog/2016/10/30/swift-perfect/">以前の記事</a>でも利用した<a href="https://github.com/PerfectlySoft/Perfect">Perfect</a>を使います。</p>

<p>ただ単にSwiftサーバを立てても面白くないので、提供されているMongoDB接続モジュールを利用して遊んでみようと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>SwiftによるAP・DBサーバの構築</h3>

<p>早速、Perfectを用いてSwiftによるAP・DBサーバを構築しようと思います。<br/>
基本的には<a href="https://github.com/PerfectlySoft/Perfect-MongoDB">ReadMe</a>に従えば良いのですが、丁寧に１つずつ見ていきます。</p>

<h4>必要モジュールのインストール</h4>

<p>流石に <strong>Homebrew</strong> はインストールされている方が多いと思いますが、入れていない方は下記コマンドで入れましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>また今回は <strong>MongoDB</strong> を利用するため、 <strong>mongodb</strong> および <strong>mongo-c</strong> をインストールする必要があります。<br/>
mongodbに関しては、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install mongodb</span></code></pre></td></tr></table></div></figure>


<p>でOKです。(自動起動などに関しては<a href="http://grandbig.github.io/blog/2016/11/20/brew-install-db/">こちら</a>を参照ください。)<br/>
続いて、mongo-cは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install mongo-c</span></code></pre></td></tr></table></div></figure>


<p>でインストール完了できるはずです。</p>

<h4>xcodeprojを作成</h4>

<h5>テンプレートのダウンロード</h5>

<p>0からPerfectを用いてサーバを構築しても良いのですが、Perfectではテンプレートを用意してくれています。<br/>
せっかくなので <code>git clone</code> してテンプレートをダウンロードして使いましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/PerfectlySoft/PerfectTemplate.git
</span><span class='line'>cd PerfectTemplate</span></code></pre></td></tr></table></div></figure>


<h5>MongoDBモジュールを利用するように編集</h5>

<p><strong>Perfect-MongoDB</strong> を利用するので、<code>Package.swift</code>を編集しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PackageDescription</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">package</span> <span class="o">=</span> <span class="n">Package</span><span class="p">(</span>
</span><span class='line'>  <span class="nl">name:</span> <span class="s">&quot;PerfectTemplate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">targets:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nl">dependencies:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span> <span class="s">&quot;https://github.com/PerfectlySoft/Perfect-HTTPServer.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span><span class="s">&quot;https://github.com/PerfectlySoft/PerfectLib.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span><span class="s">&quot;https://github.com/PerfectlySoft/Perfect-MongoDB.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReadMeでは <strong>Perfect-HTTPServer</strong> は書かれていないのですが、これを使った方が便利なので、テンプレートに残したまま進めます。</p>

<h5>Packageからxcodeprojを作成</h5>

<p><code>Package.swift</code>の編集が終わったら、下記コマンドを実行して<code>xcodeproj</code>ファイルを作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">swift</span> <span class="n">package</span> <span class="n">generate</span><span class="o">-</span><span class="n">xcodeproj</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうすれば下図のような結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_1.png" alt="フォルダ構成" /></p>

<h4>MongoDBにデータを作成</h4>

<p>サンプルを作成するためにもデータがなきゃ話になりませんよね？<br/>
ということでデータを入れましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MongoDBにアクセス</span>
</span><span class='line'><span class="n">$</span> <span class="n">mongo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DBとCollectionの作成</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">use</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">createCollection</span><span class="p">(</span><span class="err">&#39;</span><span class="n">testCollection</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;ok&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DBの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">show</span> <span class="n">dbs</span><span class="p">;</span>
</span><span class='line'><span class="n">local</span>  <span class="mf">0.000</span><span class="n">GB</span>
</span><span class='line'><span class="n">test</span>   <span class="mf">0.000</span><span class="n">GB</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Collectionの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">show</span> <span class="n">collections</span>
</span><span class='line'><span class="n">testCollection</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データのインサート</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="nl">name:</span> <span class="err">&#39;</span><span class="n">takahiro</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">30</span><span class="p">,</span> <span class="nl">hobby:</span> <span class="err">&#39;</span><span class="n">blog</span><span class="err">&#39;</span><span class="p">});</span>
</span><span class='line'><span class="n">WriteResult</span><span class="p">({</span> <span class="s">&quot;nInserted&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="nl">name:</span> <span class="err">&#39;</span><span class="n">ichiro</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">43</span><span class="p">,</span> <span class="nl">hobby:</span> <span class="err">&#39;</span><span class="n">baseball</span><span class="err">&#39;</span><span class="p">});</span>
</span><span class='line'><span class="n">WriteResult</span><span class="p">({</span> <span class="s">&quot;nInserted&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MongoDBにアクセスして全データを取得</h4>

<p>データの作成も完了したので、実際にGETリクエストでMongoDBからデータを取得する処理を書いてみましょう。<br/>
(ReadMeではPerfect-HTTPServerを利用しない方法で書かれていたため本記事とは若干異なります。)</p>

<h5>テンプレートファイルの確認</h5>

<p>まずは、初めから作成されている処理内容を確認します。<br/>
説明は下記ソースコードにコメントを書いたので参照ください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// HTTPサーバの生成</span>
</span><span class='line'><span class="n">let</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HTTPServer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// リクエストに対するルーティングを設定</span>
</span><span class='line'><span class="n">var</span> <span class="n">routes</span> <span class="o">=</span> <span class="n">Routes</span><span class="p">()</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// レスポンスヘッダーの設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">setHeader</span><span class="p">(.</span><span class="n">contentType</span><span class="p">,</span> <span class="nl">value:</span> <span class="s">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンスボディの設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;&lt;html&gt;&lt;title&gt;Hello, world!&lt;/title&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンス完了処理</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// サーバにルーティング設定を適用</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">addRoutes</span><span class="p">(</span><span class="n">routes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポートを設定</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">serverPort</span> <span class="o">=</span> <span class="mi">8181</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ドキュメントルートのパスを設定</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">documentRoot</span> <span class="o">=</span> <span class="s">&quot;./webroot&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// arguments.swiftで定義されているメソッド</span>
</span><span class='line'><span class="c1">// 更なるサーバ定義が必要な場合はここを見ましょう(SSLなど)</span>
</span><span class='line'><span class="n">configureServer</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// HTTPサーバの起動</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">PerfectError</span><span class="p">.</span><span class="n">networkError</span><span class="p">(</span><span class="n">let</span> <span class="n">err</span><span class="p">,</span> <span class="n">let</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Network error thrown: \(err) \(msg)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記をXcodeをからRunさせた状態で <code>http://localhost:8181</code> にアクセスしてみましょう。<br/>
Hello Worldの結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_2.png" alt="Hello World" /></p>

<h5>MongoDB関連処理ファイルの作成</h5>

<p>続いて、MongoDBへの接続・切断やデータ取得などの処理を作成していきます。<br/>
これは別クラスの中に書いていきましょう。</p>

<p>今回はMongoDB関連の処理をハンドリングするということで<code>mongoHandler.swift</code>というファイルを作成します。<br/>
因みにただ作成しただけでは、XcodeがCompile対象として正しく認識してくれないので、自身で設定を変えましょう。<br/>
下図のようにTARGETSから実行ファイルを選択して、Compile Sourcesとして<code>mongoHandler.swift</code>を追加してください。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_3.png" alt="Compile Sourcesに追加" /></p>

<p>では実際のソースを見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">MongoHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">client:</span> <span class="n">MongoClient</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">database:</span> <span class="n">MongoDatabase</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">collection:</span> <span class="n">MongoCollection</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBへの接続処理</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// コネクション確立</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MongoClient</span><span class="p">(</span><span class="nl">uri:</span> <span class="s">&quot;mongodb://localhost&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// testデータベースへの接続</span>
</span><span class='line'>    <span class="n">database</span> <span class="o">=</span> <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">getDatabase</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// testCollectionコレクションへの接続</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">getCollection</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;testCollection&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBからの切断処理</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">collection</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchAll</span><span class="p">(</span><span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="n">_</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>    <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データ全件取得のためBSONオブジェクトを初期化してクエリとして設定</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">fnd</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データ格納用に配列を定義</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 取得したデータを配列に格納する</span>
</span><span class='line'>    <span class="c1">// fndはMongoCursor型であり、for文での繰り返し処理が可能</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">fnd</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">asString</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// JSONStringに変換</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">data</span><span class="se">\&quot;</span><span class="s">:[\(arr.joined(separator: &quot;</span><span class="p">,</span><span class="s">&quot;))]}&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MongoDBから切断</span>
</span><span class='line'>    <span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDBへの接続・切断処理は共通処理となることは容易に想像できるため、切り出しました。</p>

<h5>main.swiftからmongoHandler.swiftを呼び出す</h5>

<p>さて、<code>main.swift</code>から<code>mongoHandler.swift</code>を呼び出してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="c1">// MongoHandlerの初期化</span>
</span><span class='line'><span class="n">let</span> <span class="n">mongoHandler</span> <span class="o">=</span> <span class="n">MongoHandler</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GETリクエストでMongoDBのデータ全取得</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">mongoHandler</span><span class="p">.</span><span class="n">searchAll</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>http://localhost:8181</code>にアクセスすれば下図のような結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_4.png" alt="データ全件取得結果" /></p>

<h4>MongoDBにアクセスして指定のクエリでデータを取得</h4>

<p>全件取得の方法はわかったので、続いてクエリありの検索を実行してみましょう。<br/>
先程述べた通り、下記のようなデータが格納されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name</code>、<code>age</code>、<code>hobby</code>を指定して検索するのはそんなに難しくないと思います。</p>

<h5>nameを指定してデータを取得</h5>

<p>わかりやすいところからと言うことで<code>name</code>を指定してデータを取得してみます。<br/>
まずは<code>mongoHandler.swift</code>にクエリ指定のメソッドを追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">MongoHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">client:</span> <span class="n">MongoClient</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">database:</span> <span class="n">MongoDatabase</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">collection:</span> <span class="n">MongoCollection</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// open a connection</span>
</span><span class='line'>        <span class="n">client</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MongoClient</span><span class="p">(</span><span class="nl">uri:</span> <span class="s">&quot;mongodb://localhost&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// set database, assuming &quot;test&quot; exists</span>
</span><span class='line'>        <span class="n">database</span> <span class="o">=</span> <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">getDatabase</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// define collection</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">getCollection</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;testCollection&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// searchAllメソッドは省略</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// =====ここから追加========================================================</span>
</span><span class='line'>      <span class="n">func</span> <span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="n">_</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>          <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">fnd</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="nl">query:</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// データ格納用に配列を定義</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 取得したデータを配列に格納する</span>
</span><span class='line'>      <span class="c1">// fndはMongoCursor型であり、for文での繰り返し処理が可能</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">fnd</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">asString</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// JSONStringに変換</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">data</span><span class="se">\&quot;</span><span class="s">:[\(arr.joined(separator: &quot;</span><span class="p">,</span><span class="s">&quot;))]}&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>      <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>      <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// MongoDBから切断</span>
</span><span class='line'>      <span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>searchAll</code>との違いは引数に<code>BSON</code>型の<code>query</code>を追加しているところです。</p>

<p>続いて、<code>main.swift</code>にGETリクエストで<code>name</code>パラメータをキャッチできるように処理を追加していきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>                  <span class="c1">// ここを追加</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// nameパラメータを指定したGETリクエストのハンドリング</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/name/{name}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// クエリとして渡すパラメータをセット</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけで準備万端です。<br/>
<code>http://localhost:8181/name/takahiro</code>にアクセスすると下記結果が得られます。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_5.png" alt="nameパラメータを指定したGETリクエスト結果" />_</p>

<h5>ObjectIdを指定してデータを取得</h5>

<p>続いて、少しクエリの書き方に迷うかもしれない<code>ObjectId</code>を指定したデータ検索をしてみましょう。<br/>
<code>mongoHandler.swift</code>には特に変更がありません。<br/>
<code>main.swift</code>のみ変更していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'><span class="n">import</span> <span class="n">libmongoc</span>                <span class="c1">// ここを追加</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ObjectIdパラメータを指定したGETリクエストのハンドリング</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/oid/{oid}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// bson_oid_t型のオブジェクトの初期化</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">oid:</span> <span class="n">bson_oid_t</span> <span class="o">=</span> <span class="n">bson_oid_t</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// String型からbson_oid_t型に変換</span>
</span><span class='line'>  <span class="n">bson_oid_init_from_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oid</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;oid&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="c1">// クエリとして渡すパラメータをセット</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;_id&quot;</span><span class="p">,</span> <span class="nl">oid:</span> <span class="n">oid</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>肝なのが、<code>import libmongoc</code>をしているということです。<br/>
このライブラリの各種メソッドを利用することでServer Side Swiftから<code>ObjectId</code>を指定したデータ検索が可能になります。</p>

<p>少し詳しく説明すると、<br/>
クエリとして<code>ObjectId</code>を渡すためには<code>public func append(key k: String, oid: bson_oid_t) -&gt; Bool</code>を利用する必要があります。<br/>
しかし、このメソッドの第二引数をよく見ると、<code>bson_oid_t</code>型となっています。</p>

<p>GETリクエストの時点で<code>bson_oid_t</code>型でパラメータを渡すわけにもいかないので、  サーバサイド側で変換する必要があります。<br/>
そのために利用するメソッドが<code>void bson_oid_init_from_string (bson_oid_t *oid, const char *str);</code>です。<br/>
筆者もSwiftで初めて利用したのですが、このメソッドは戻り値が<code>void</code>型のため何も返ってきません。<br/>
が、第一引数に参照渡しとして<code>bson_oid_t</code>型オブジェクトを設定することで、メソッドの処理結果が<code>oid</code>に格納されます。<br/>
これでめでたくクエリとして<code>ObjectId</code>が設定できるわけです。</p>

<p>では、<code>http://localhost:8181/oid/58392222a8589d99c931303d</code>にアクセスしてみましょう。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_6.png" alt="ObjectIdパラメータを指定したGETリクエスト結果" /></p>

<h4>MongoDBにデータを保存</h4>

<p>検索に関してはざっと見てきたので、MongoDBへの保存処理も見ていきましょう。</p>

<h5>insertメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>insert</code>メソッドを利用します。<br/>
(他にも<code>save</code>メソッドもあります。)</p>

<p>まずは <code>mongoHandler.swift</code> へのメソッド追加からです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">save</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの保存処理</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">insert</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="nl">document:</span> <span class="n">query</span><span class="p">)</span> <span class="n">as</span> <span class="n">MongoResult</span>
</span><span class='line'>  <span class="c1">// データ保存結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">insert</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にPOSTで届いたリクエストパラメータがJSONStringなのでDictionary型に変換します。<br/>
その処理を <code>decode.swift</code> ファイルを新規作成して追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// decode.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">try</span> <span class="n">postBody</span><span class="o">?</span><span class="p">.</span><span class="n">jsonDecode</span><span class="p">()</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span><span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decoded</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にPOSTリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">post</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// JSONString型をDictionary型に変換</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">decodedParam</span> <span class="o">=</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">request</span><span class="p">.</span><span class="n">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 各パラメータ単位でBSONオブジェクトに格納</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;age&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="nl">int32:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">Int</span><span class="p">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;hobby&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;hobby&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// データ保存</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで処理は完成です。<br/>
ではPOSTリクエストを投げてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot;:&quot;Hanako&quot;, &quot;age&quot;: 24, &quot;hobby&quot;: &quot;game&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再度、MongoDBを検索してみると下記のような結果が得られるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;Hanako&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;game&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>main.swift</code>でリクエストパラメータとして取得した<code>age</code>を <strong>Int32</strong> 型に変換しているのには理由があります。<br/>
これを仮に <code>bson.append(key: "age", int: value as! Int)</code> とした場合、MongoDBには <code>NumberLong</code>として保存されてしまいます。 <br/>
これは32bitか64bitかの違いですね。</p>

<h5>insertメソッドのMongoInsertFlagについて</h5>

<p>先程、<code>insert</code>メソッドを利用しましたが、実は第一引数のみ持っている <code>insert</code> メソッドを利用していました。<br/>
実は他にも <code>public func insert(document: BSON, flag: MongoInsertFlag = .none) -&gt; Result</code> といった第二引数を持つ <code>insert</code> メソッドが存在します。</p>

<p>少し気になったのでこの <code>MongoInsertFlag</code>について調べてみました。<br/>
<code>MongoInsertFlag</code>は<code>MongoCollection.swift</code>内に <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoInsertFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">continueOnError</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">noValidate</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_insert_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_INSERT_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">continueOnError:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_INSERT_CONTINUE_ON_ERROR</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">noValidate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mongoc_insert_flags_t</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">MONGOC_INSERT_NO_VALIDATE</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで<code>MONGOC_INSERT_NONE</code>, <code>MONGOC_INSERT_CONTINUE_ON_ERROR</code>, <code>MONGOC_INSERT_NO_VALIDATE</code>の3つがフラグとして用意されていることがわかります。<br/>
これらはそれぞれ次のような意味とのことです。</p>

<ul>
<li><code>MONGOC_INSERT_NONE</code>

<ul>
<li>特別何もしません。</li>
</ul>
</li>
<li><code>MONGOC_INSERT_CONTINUE_ON_ERROR</code>

<ul>
<li>途中でエラーが発生したとしても後続の<code>insert</code>処理がある場合は続ける</li>
</ul>
</li>
<li><code>MONGOC_INSERT_NO_VALIDATE</code>

<ul>
<li>インサート前に値のバリデーションチェックをしない

<ul>
<li>MongoDBへの保存処理前にAPサーバ時点などでバリデーションチェックはした方が良い</li>
</ul>
</li>
<li>これをすることで処理時間を短縮することができる</li>
</ul>
</li>
</ul>


<h4>MongoDBのデータを更新</h4>

<p>MongoDBへの更新処理も見ていきましょう。</p>

<h5>updateメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>update</code>メソッドを利用します。</p>

<p><code>mongoHandler.swift</code>にメソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">selector:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの更新</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">update</span><span class="p">,</span> <span class="nl">selector:</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// データ更新結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">updated</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にPUTリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">post</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(更新内容として渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">updateBson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">selectorBson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">updateBson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>      <span class="n">selectorBson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// JSONString型をDictionary型に変換</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">decodedParam</span> <span class="o">=</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">request</span><span class="p">.</span><span class="n">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 各パラメータ単位でBSONオブジェクトに格納</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;age&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="nl">int32:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">Int</span><span class="p">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;hobby&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;hobby&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// データ更新</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">updateBson</span><span class="p">,</span> <span class="nl">query:</span> <span class="n">selectorBson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的にはPOSTと同じ感じで処理を書くことができます。<br/>
しかしながら気をつけなくてはいけないのが、<strong>$setが利用できない</strong> ということです。<br/>
通常、MongoDBでは、 <strong>$setを使わないと</strong> &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;Hanako&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;game&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの更新</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="nl">_id:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">)},</span> <span class="p">{</span><span class="s">&quot;hobby&quot;</span><span class="o">:</span> <span class="s">&quot;go shopping&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;go shopping&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となってしまいます。<br/>
現状、<code>Perfect-MongoDB</code>に実装されているメソッドを見ると<code>$set</code>はないようです。<br/>
そのため、今回はあえてPOST同様に全てのパラメータをクライアント側から下記のように投げることにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo/583afcaedcab265c1821fb51 -X PUT -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot; : &quot;Hanako&quot;, &quot;age&quot; : 24, &quot;hobby&quot;: &quot;game&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>updateメソッドのMongoUpdateFlagについて</h5>

<p><code>update</code>メソッドにも実は<code>MongoUpdateFlag</code>というオプションを設定できるメソッドが存在します。<br/>
<code>MongoUpdateFlag</code>は<code>MongoInsertFlag</code>と同じく <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoUpdateFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">upsert</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">multiUpdate</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">noValidate</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_update_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">upsert:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_UPSERT</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">multiUpdate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_MULTI_UPDATE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">noValidate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mongoc_update_flags_t</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">MONGOC_UPDATE_NO_VALIDATE</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれのフラグの意味は下記の通りです。</p>

<ul>
<li><code>MONGO_UPDATE_NONE</code>

<ul>
<li>特別何もしません</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_UPSERT</code>

<ul>
<li>検索に引っかからない場合は<code>insert</code>します</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_MULTI_UPDATE</code>

<ul>
<li>検索にヒットする件数が複数の場合は全て更新します</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_NO_VALIDATE</code>

<ul>
<li>アップデート前に値のバリデーションチェックをしません</li>
</ul>
</li>
</ul>


<h4>MongoDBのデータを削除</h4>

<p>MongoDBからのデータ削除処理も見ていきましょう。</p>

<h5>removeメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>remove</code>メソッドを利用します。</p>

<p><code>mongoHandler.swift</code>にメソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">delete</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データ削除処理</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">removed</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="nl">selector:</span> <span class="n">query</span><span class="p">,</span> <span class="nl">flag:</span> <span class="p">.</span><span class="n">none</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// データ削除結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">removed</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にDELETEリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">delete</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/{oid}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">oid:</span> <span class="n">bson_oid_t</span> <span class="o">=</span> <span class="n">bson_oid_t</span><span class="p">()</span>
</span><span class='line'>  <span class="n">bson_oid_init_from_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oid</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;oid&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;_id&quot;</span><span class="p">,</span> <span class="nl">oid:</span> <span class="n">oid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データ削除</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のようなDELETEリクエストを投げてみればデータが削除されていることが確認できるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo/583afcaedcab265c1821fb51 -X DELETE -H &quot;Content-Type: application/json&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>removeメソッドのMongoRemoveFlagについて</h5>

<p><code>remove</code>メソッドにも実は<code>MongoRemoveFlag</code>というオプションを設定できるメソッドが存在します。<br/>
<code>MongoRemoveFlag</code>は<code>MongoUpdateFlag</code>と同じく <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoRemoveFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">singleRemove</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_remove_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_REMOVE_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">singleRemove:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_REMOVE_SINGLE_REMOVE</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>フラグの意味は下記の通りです。</p>

<ul>
<li><code>MONGOC_REMOVE_NONE</code>

<ul>
<li>特に何のオプションもつけません。</li>
<li>検索にヒットしたデータは全て削除します。</li>
</ul>
</li>
<li><code>MONGOC_REMOVE_SINGLE_REMOVE</code>

<ul>
<li>初めに該当したデータ1件のみを削除します。</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>以上で基本的なCRUDに対応したAPサーバとDBサーバをSwiftとMongoDBで構築することができました。<br/>
これから何かサービスでも&hellip;と思っていたら時間切れ&hellip;<br/>
今回は一旦ここまでとしたいと思いますが、今後の展望としてはSwift製iOSアプリと連携させてiOSアプリを作成するか、もしくはReact / Reduxを使ったWebサービスと連携させたいと企んでいます。<br/>
処理速度とかリソースの消費具合とかは全然比較もしていないのでわからないですが、Swiftによるサーバサイド構築によるメリットも今後Appleさんが？明らかにしてくれるかもしれません。</p>

<p>何と言っても新しい技術や取り組みは楽しいですね！！<br/>
と言ったところで本日はここまで。</p>

<h3>参考URL</h3>

<ul>
<li><a href="http://perfect.org/docs/MongoDB.html">Perfect MongoDB Documentation</a></li>
<li><a href="http://mongoc.org/libbson/1.3.5/bson_oid_init_from_string.html">Libbson API Reference: Bson Oid Init</a></li>
<li><a href="http://mongoc.org/libmongoc/1.4.0/updating-document.html">Libbson API Reference: Update Document</a></li>
<li><a href="http://mongoc.org/libmongoc/1.0.0/mongoc_insert_flags_t.html">MongoDB C Driver API Reference: Insert Flag</a></li>
<li><a href="http://mongoc.org/libmongoc/1.2.3/mongoc_update_flags_t.html">MongoDB C Driver API Reference: Update Flag</a></li>
<li><a href="http://mongoc.org/libmongoc/1.3.2/mongoc_remove_flags_t.html">MongoDB C Driver API Reference: Remove Flag</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitのFetchでSSLエラーが出たときの対応]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/25/git-ssl-error/"/>
    <updated>2016-11-25T21:46:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/25/git-ssl-error</id>
    <content type="html"><![CDATA[<h3>突如としてエラーが発生した場合の対応</h3>

<p>先程、思いがけずエラーが出たのでメモします。<br/>
GitでFetchしようとして下記エラーが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/Cellar/git/2.10.2/bin/git -C /Users/&lt;username&gt;/git/iOS/Server\ Side\ Swift/PerfectTemplate/Packages/PerfectLib.git fetch --tags origin
</span><span class='line'>error: RPC failed; curl 56 SSLRead() return error -36
</span><span class='line'>fatal: The remote end hung up unexpectedly
</span><span class='line'>fatal: early EOF
</span><span class='line'>fatal: index-pack failed
</span><span class='line'>
</span><span class='line'>error: exit(128): git -C /Users/&lt;username&gt;/git/iOS/Server\ Side\ Swift/PerfectTemplate/Packages/PerfectLib.git fetch --tags origin</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>これはどうもSSLに関するエラーが出ているようです。<br/>
なので下記をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew reinstall git --with-brewed-curl --with-brewed-openssl</span></code></pre></td></tr></table></div></figure>


<p>これで再度、Gitコマンドを打ってみれば万事OKです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blogを別PCに移行しようとして苦労した話]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/20/move-octopress/"/>
    <updated>2016-11-20T23:55:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/20/move-octopress</id>
    <content type="html"><![CDATA[<h3>新しいPCを購入したので、Octopress Blogを移行してみました</h3>

<p>さて、本日は新しく購入したMacbook Proに本ブログの投稿環境を移行した話を書きます。<br/>
何気に今まで目を背けていたことが仇となって結構苦労しました(汗)</p>

<p>今後、PCを買い換えることがまたあると思うのでメモ代わりに残しておこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>１．ローカルとリモートのソースを合わせる<br/>
当然ではあるのですが、Gitで管理しているローカルとリモートのソースを合わせます。<br/>
筆者は実は2年間くらい放置していたので、結構、デグレっててたいへんで、しかもこれが尾を引くことに&hellip;</p>

<p>２．<code>source</code> ブランチをクローンする<br/>
最新にした<code>source</code>ブランチを新しいMacbook Pro側でクローンします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source https://github.com/XXX/XXX.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>３．<code>master</code>ブランチを<code>_deploy</code>ディレクトリとしてクローンする<br/>
ブランチを<code>master</code>に変更することを忘れずに！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd XXX.github.io
</span><span class='line'>$ git clone https://github.com/XXX/XXX.github.io.git _deploy</span></code></pre></td></tr></table></div></figure>


<p>４．<code>bundler</code>をインストールする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>５．GitHub Pagesを設定する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.com):</span></code></pre></td></tr></table></div></figure>


<p>自分のGitHub Pagesを入力しましょう。</p>

<p>６．GitHub > Settings > SSH Keys に公開鍵を登録する<br/>
まずは下記コマンドで秘密鍵、公開鍵を作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen</span></code></pre></td></tr></table></div></figure>


<p><code>~/.ssh</code>配下に<code>id_rsa.pub</code>と<code>id_rsa</code>が作成されているので、<code>id_rsa.pub</code>を開いて中身をコピーします。<br/>
それを GitHub > Settings > SSH Keys で New SSH Key を選択して、登録します。</p>

<p>これで、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -T git@github.com
</span><span class='line'>Hi username! You've successfully authenticated...</span></code></pre></td></tr></table></div></figure>


<p>という結果が得られます。</p>

<p>７．強制プッシュを設定する<br/>
<code>rake deploy</code>すると下記エラーが出てしまうようになり、かなり悩みました&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>To https://github.com/XXX/XXX.github.io
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'https://github.com/XXX/XXX.github.io'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>Conflictが起こっているわけではないのに&hellip;<br/>
悩んだ挙句、その場しのぎで強制プッシュを設定するようにしました。<br/>
設定は<code>Rakefile</code>を変更することで可能です。<br/>
これまで下記の設定がなされていたので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin #{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<p>これを下記に変えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin +#{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<p>これでプッシュができるようになり、<code>rake deploy</code>が成功したので、ブログも無事に更新できました。<br/>
このままで良いとは思えないものの、他に解決方法わからず&hellip;一旦これで良いかな笑</p>

<p>といったところで本日はここまで。</p>

<p>参考ページ</p>

<ul>
<li><a href="https://help.github.com/articles/error-permission-denied-publickey/">GitHub Help: Error: Permission denied (publickey)</a></li>
<li><a href="http://stackoverflow.com/questions/17609453/rake-gen-deploy-rejected-in-octopress">rake gen_deploy rejected in Octopress</a></li>
<li><a href="http://momota.github.io/blog/2016/01/29/octopress/">複数の環境で Octopress を使ってブログを書く</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewでMongoDBをインストール]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/20/brew-install-db/"/>
    <updated>2016-11-20T00:10:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/20/brew-install-db</id>
    <content type="html"><![CDATA[<h3>PC移行したことで発生したHomebrew対応し直し</h3>

<p>さて、本日はMacbook Proを購入したことでブログ作成環境を移行する必要があったので、その際に気づいたことをメモしておきます。</p>

<p>これまではMongoDBやMySQLなどのDB系はインストールした後に、次回、PCログイン時に自動起動させるために手動でデーモン起動設定をする必要がありました。<br/>
しかし、今回、筆者が <strong>Homebrew</strong> で上記をインストールしてみたところ、新たな記述が出力されるようになっていました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// MongoDBの例
</span><span class='line'>$ brew install mongodb
</span><span class='line'>==&gt; Downloading https://homebrew.bintray.com/bottles/mongodb-3.2.11.sierra.bottle.tar.gz
</span><span class='line'>######################################################################## 100.0%
</span><span class='line'>==&gt; Pouring mongodb-3.2.11.sierra.bottle.tar.gz
</span><span class='line'>==&gt; Caveats
</span><span class='line'>To have launchd start mongodb now and restart at login:
</span><span class='line'>  brew services start mongodb
</span><span class='line'>Or, if you don't want/need a background service you can just run:
</span><span class='line'>  mongod --config /usr/local/etc/mongod.conf
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/mongodb/3.2.11: 18 files, 245.4M</span></code></pre></td></tr></table></div></figure>


<p>上記が実際に出力された記述になります。<br/>
筆者が注目したのは、 <strong>brew services start mongodb</strong> の部分です。<br/>
これを叩けば、デーモン起動設定がされるのでは！？と思った次第です。</p>

<p>では実際にコマンドを叩いてみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew services start mongodb
</span><span class='line'>==&gt; Tapping homebrew/services
</span><span class='line'>Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...
</span><span class='line'>remote: Counting objects: 10, done.
</span><span class='line'>remote: Compressing objects: 100% (7/7), done.
</span><span class='line'>remote: Total 10 (delta 0), reused 6 (delta 0), pack-reused 0
</span><span class='line'>Unpacking objects: 100% (10/10), done.
</span><span class='line'>Tapped 0 formulae (37 files, 46.8K)
</span><span class='line'>==&gt; Successfully started `mongodb` (label: homebrew.mxcl.mongodb)</span></code></pre></td></tr></table></div></figure>


<p>起動しているか下記コマンドで確認してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ps aux | grep mongo
</span><span class='line'>takahiro      5468   0.2  0.2  2584528  25672   ??  S    11:24PM   0:00.22 /usr/local/opt/mongodb/bin/mongod --config /usr/local/etc/mongod.conf
</span><span class='line'>takahiro      5472   0.0  0.0  2432804   1924 s000  S+   11:24PM   0:00.00 grep mongo</span></code></pre></td></tr></table></div></figure>


<p>これで既に起動していることを確認できました。<br/>
すごく便利になりましたね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(3周年)]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/03/blog-3-year-anniversary/"/>
    <updated>2016-11-03T10:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/03/blog-3-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて3周年を迎えました</h3>

<p>なんと、先々月9/4時点で本技術ブログが3周年を迎えました！！
正直な話、すっかり忘れていました笑<br/>
しかも、こんなに長く続くとは夢にも思わず&hellip;<br/>
それを記念しまして年に1回のブログ振り返りをしたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p>まずは今年も、アクセス数の推移から紹介していきましょう。<br/>
データは <strong>Google Analytics</strong> から取得しています。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/3anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
流石にアクセス数の増加は厳しいかと思いきや、傾きは微増していますね。</p>

<p>詳細を見ると、<br/>
<img src="http://grandbig.github.io/images/3anniversary%EF%BC%92.png" alt="1年間でのアクセス数の推移" /><br/>
微増とお伝えした意味がわかるかと思います。<br/>
下記のような推移に思えますね。</p>

<ul>
<li>1周年記念: 280〜320セッション(平日)</li>
<li>2周年記念: 320〜370セッション(平日)</li>
<li>3周年記念: 350〜400セッション(平日)</li>
</ul>


<p>また、2016/10に月額最高のセッション数/ページビュー数を記録しました！<br/>
<img src="http://grandbig.github.io/images/3anniversary3.png" alt="2016/10の記録" /><br/>
なんと今年はセッション数でも10,000を突破しました。</p>

<p>さて、ブログ開始時からの総計の値はどうなったのかと言いますと、<br/>
<img src="http://grandbig.github.io/images/3anniversary4.png" alt="ブログ開始からの各数値" /></p>

<ul>
<li>【セッション数】1周年時: 24,996 → 2周年時: 122,247 → 現在: 227,125</li>
<li>【ユーザー数】1周年時: 16,819 → 2周年時: 72,567 → 現在: 130,823</li>
<li>【ページビュー数】1周年時: 32,022 → 2周年時: 153,541 → 現在: 280,770</li>
<li>【ページ/セッション】1周年時: 1.28 → 2周年時: 1.26 → 現在: 1.24</li>
<li>【平均セッション時間】1周年時: 00:01:11 → 2周年時: 00:01:11 → 現在: 00:01:11</li>
<li>【直帰率】1周年時: 84.54% → 2周年時: 85.36% → 現在: 86.06%</li>
<li>【新規セッション率】1周年時: 67.28% → 2周年時: 59.36% → 現在: 57.60%</li>
</ul>


<p>※ 1周年時とは「ブログ開始〜1年後」で現在とは「ブログ開始〜現在」を指しています。</p>

<p>2年目と比べると、セッション数/ユーザー数/ページビュー数がかなり増えていることがわかります。(2倍とまでは行きませんでしたが&hellip;)<br/>
これは恐らく、安定したアクセスを保てているということでしょう。<br/>
ただ、新規セッション率が年々減っているのが気になりますね。<br/>
全体としてのアクセス数が増えているため、一概に新規ユーザーの取り込みができていないということはできませんが、4年目も新しい情報を入れることを強く意識して、著しい低下を避けたいと思います。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>今年も見てきましょう。<br/>
アクセス数が多かった記事ランキング！！<br/>
筆者も毎年楽しみにしています笑</p>

<p><strong>1位: <a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a></strong><br/>
　　ページビュー数: 7,863 (6.18%)<br/>
　　平均ページ滞在時間: 00:07:16<br/>
<strong>2位: <a href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
　　ページビュー数: 5,348 (4.20%)<br/>
　　平均ページ滞在時間: 00:07:39<br/>
<strong>3位: <a href="http://grandbig.github.io/blog/2015/05/16/swift-base/">Swiftの基礎を理解しよう！(1)</a></strong><br/>
　　ページビュー数: 3,783 (2.97%)<br/>
　　平均ページ滞在時間: 00:06:50<br/>
<strong>4位: <a href="http://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
　　ページビュー数: 3,535 (2.78%)<br/>
　　平均ページ滞在時間: 00:07:03<br/>
<strong>5位: <a href="http://grandbig.github.io/blog/2014/04/16/unixtime/">Objective-cでUNIX時間を取得する方法</a></strong><br/>
　　ページビュー数: 3,179 (2.52%)<br/>
　　平均ページ滞在時間: 00:06:50</p>

<p>以上が上位5記事です。</p>

<p>3年目も <strong>『Backgroundで位置情報を取得しよう！』</strong> が最も多いという結果になりました。<br/>
ただし、去年までと異なるのは、2位以下に2,000ページビュー数の差をつけているものの、その割合が3%以上下がっているという点です。<br/>
総合のページビュー数が増えているにも関わらず、上記の結果が得られているということはアクセスが分散していることを意味しています。<br/>
つまり、それだけ興味をそそる記事を継続的に書けているということでしょう。</p>

<p>続いて、驚いたのがAndroidに関する記事が入ってきているということです。<br/>
毎月、アクセス数が多いなとは思っていたのですが、まさか年間通して2位に入ってくるとは夢にも思っていませんでした。<br/>
筆者の感覚だとiOSに関する記事の方が圧倒的に日本語で探しやすいイメージがあるので、案外、Androidの記事を多数載せた方が全体的なアクセス数が飛躍的に増えるのかもしれませんね。</p>

<p>そして3位にはSwiftの基礎に関する記事がランクインしました。<br/>
今年はSwiftのオープンソース化も相まって、より興味を引き立てられたのかもしれません。<br/>
筆者は最近特にサーバサイドでのSwiftの利用に非常に興味があるため、その辺りの記事も今後増えていくことになるかなと思います。</p>

<p>さてさて、4位はXCTestがランクインしていますね。<br/>
これまでアプリでのテストはオープンソースライブラリを利用するか、目視でのテストをするかに留まっており、自動テストを実施する人も少なかったのかもしれません。<br/>
しかし、Xcode7からAppleが本気で取組み始めた成果が表れており、本家のXCTestを使おうとした人が増えたのかもしれませんね。</p>

<p>最後の5位は筆者も『なぜ！？』と思わざるをえない意外な記事がランクインしました。<br/>
UNIX時間の出し方自体は何も難しいことはないはずなのになぜでしょうか&hellip;<br/>
思いつくとすれば、日本に閉じたアプリではなく、世界に向けたアプリを開発する人が増えたからなのかもしれません。</p>

<p>今年は1位以外は全て去年から入れ替わるという結果になりました。<br/>
特に2016年の記事が2つ入ったことが筆者としては非常に嬉しいです。<br/>
過去の記事が誰かの役に立つことも、もちろん喜ばしいことではあるのですが、自分自身がレベルアップするためにも新しい記事が受け入れられるようにならなくてはと思っています。<br/>
来年はどうなるのか今から楽しみでなりません。</p>

<h4>広告収入の推移</h4>

<p>最後に広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
毎年説明していますが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、推移を見ていきます。<br/>
これまでの全期間の推移(2013/11/15〜2016/11/03での推移)は下図のようになっています。<br/>
<img src="http://grandbig.github.io/images/3anniversary5.png" alt="Google Adsenseの推移" /><br/>
見てお分かりの通り、見積もり収益額が20,000円を超えています。Google Adsenseは8,000円以上で初めてお金がもらえるのですが、今年もGoogle様からお金を頂きました！</p>

<p>しかしながら、今年は新たな取組みにもチェレンジしました。<br/>
それはGoogle Adwordsです。<br/>
Google Adwordsは検索結果にページへ誘導するための謳い文句が綴られた広告を掲載することができるツールです。<br/>
クリック数に応じて、Google社にお金を支払う仕組みとなっています。<br/>
本ブログでは下図のような広告を表示していました。</p>

<p><img src="http://grandbig.github.io/images/3anniversary6.png" alt="本ブログの広告" /></p>

<p>これを掲載し続けた結果が次のとおりです。<br/>
<img src="http://grandbig.github.io/images/3anniversary7.png" alt="Google Adwordsの推移" /></p>

<p>結構、クリックされますし、お金を支払うことになります。<br/>
だいたい、月々2,000円程かかっていたので、どんなにGoogle Adsenseで稼いだとしても、今のところは毎月赤字でした&hellip;笑</p>

<p>そもそもの目的が収入増加ではなく、どんなものなのか知りたいという知的好奇心からきたものなので、勉強代と思えば安い!?</p>

<h3>まとめ</h3>

<p>さて、今年もブログの1年間のまとめを見てきました。<br/>
筆者は月単位で記事をこのくらいは書きたいと決めて書いていることが多いので、何とか継続して書けています。<br/>
一方でタスクになっているなと感じる月も確実に存在しており、ブログ記事としての質の低下に繋がるのではと危惧することも少なくありません。<br/>
ですが、質を重視しすぎるが故に記事を書かなくなることもしたくはありません。<br/>
ここについては今年の課題として紳士に向き合いつつ、折り合いをつけていければと思います。<br/>
ただ、この1年の振り返り記事は書くのが非常に楽しかったな〜<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side Swift: Perfect を使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/30/swift-perfect/"/>
    <updated>2016-10-30T22:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/30/swift-perfect</id>
    <content type="html"><![CDATA[<h3>Server Side SwiftライブラリのPerfect</h3>

<p>本日は以前書いたサーバサイドSwiftの続きを書きます！<br/>
と言いたかったところなのですが、Swift ExpressはSwift3.0やXcode8に対応しておらず、何もできなかったため、方向転換して最もSTAR数の多い<a href="https://github.com/PerfectlySoft/Perfect">PerfectlySoft/Perfect</a>を使うことにしました。</p>

<p>よくよく見るとMySQLだけでなくMongoDB接続用にもモジュールが用意されており、なかなか良さそうではないですか！！<br/>
とは言いつつも、そんなにすぐにMaster Of Perfectにはなれないので少しずつ見ていくことにします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h4>チュートリアルを触ってみる</h4>

<p>まずは何はともあれGitHubの <em>Getting Started</em> からやらないと話になりません。<br/>
手順は簡単です。</p>

<p>１．テンプレートプロジェクトをクローンする<br/>
<code>git clone https://github.com/PerfectlySoft/PerfectTemplate.git</code></p>

<p>２．ビルドを実行する<br/>
クローンした<code>PerfectTemplate</code>フォルダ内に入り、ビルドを実行しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd PerfectTemplate
</span><span class='line'>$ swift build</span></code></pre></td></tr></table></div></figure>


<p>３．サーバを起動します<br/>
なんと後は下記コマンドでサーバを起動するだけです。</p>

<p><code>.build/debug/PerfectTemplate</code></p>

<p>正しく起動すれば、下記ログが出力されます。<br/>
<code>Starting HTTP server on 0.0.0.0:8181 with document root ./webroot</code><br/>
またログの指示通りChromeで<code>http://localhost:8181/</code>にアクセスすれば<code>Hello World</code>が拝めます。</p>

<h4>ルーティングの書き方について学ぶ</h4>

<p>では次に簡単なルーティングについて学んでいきましょう。<br/>
チュートリアルでは、下記GETリクエストのみ受け付けていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(.</span><span class="nx">contentType</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Hello, world!&lt;/title&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>最も単純なGETリクエストですね。<br/>
では、<code>ID: 100</code>のユーザ情報を取得するGETリクエストはどう受け付けるのでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user/{id}&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(.</span><span class="nx">contentType</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;body&gt;You GET UserInfo with \(request.urlVariables)&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけです。<br/>
では、POSTリクエストの受け付けはどうでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">post</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;body&gt;You POSTed user data to catch your POST request.&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これも簡単ですね。<br/>
書き方に若干の違いはあれど、最早Node.jsとそんなに変わらん&hellip;</p>

<p>おまけで、POSTリクエストで届いたJSONStringをバラバラっと分解して返却してみました。<br/>
そのためにまずはJSONStringをデコードする処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// decode.swift</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PerfectHTTPServer</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PerfectLib</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">postBody</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="o">:</span> <span class="nx">Any</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">guard</span> <span class="kd">let</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="k">try</span> <span class="nx">postBody</span><span class="o">?</span><span class="p">.</span><span class="nx">jsonDecode</span><span class="p">()</span> <span class="nx">as</span><span class="o">?</span> <span class="p">[</span><span class="nb">String</span><span class="o">:</span><span class="nx">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">print</span><span class="p">(</span><span class="nx">decoded</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">decoded</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを下記のように利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">post</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">var</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">decodedParam</span> <span class="o">=</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">postBody</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="k">in</span> <span class="nx">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="nx">userInfo</span> <span class="o">=</span> <span class="nx">userInfo</span> <span class="o">+</span> <span class="s2">&quot;name is \(value as! String).\n&quot;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s2">&quot;email&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="nx">userInfo</span> <span class="o">=</span> <span class="nx">userInfo</span> <span class="o">+</span> <span class="s2">&quot;email is \(value as! String).&quot;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;POST handler: \(userInfo)&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、実装できたのでクライアントからリクエストを投げてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// クライアントからPOSTリクエストを投げます</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8181/user -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot;:&quot;Ichiro&quot;, &quot;email&quot;: &quot;xxx@gmail.com&quot;}&#39;</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;&lt;</span><span class="nx">body</span><span class="o">&gt;</span><span class="nx">POST</span> <span class="nx">handler</span><span class="o">:</span> <span class="nx">name</span> <span class="nx">is</span> <span class="nx">Ichiro</span><span class="p">.</span>
</span><span class='line'><span class="nx">email</span> <span class="nx">is</span> <span class="nx">xxx</span><span class="err">@</span><span class="nx">gmail</span><span class="p">.</span><span class="nx">com</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/body&gt;&lt;/html&gt;xxxx:PerfectTemplate</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて今回は<code>Perfect</code>を使ったサーバサイドSwiftを見てみました。<br/>
まだまだ基本的なリクエストの受付しかみていませんが、既にいろいろなモジュールが用意されているようなので、継続的に見ていきたいと思います。<br/>
やっぱりライブラリを作るなら、最新の状況についていかないと見捨てられるな〜と思ってしまいました。<br/>
(今回で言うと、Swift3やXcode8とかですね。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsでrouterモジュールでルーティング！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/30/node-router/"/>
    <updated>2016-10-30T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/30/node-router</id>
    <content type="html"><![CDATA[<h3>Expressなしで簡単にルーティングしよう！</h3>

<p>さて、久しぶりにNode.jsについて書きます。<br/>
筆者が本格的にNode.jsを利用していたのは3〜4年前だったため、Expressをよく利用していました。<br/>
その後、Expressを利用するほどのリッチな機能を必要としない、簡易的なデモ用のサーバサイドの仕組みを作るのにバリバリ自作ルーティングをしていました。<br/>
しかし、ここにきてExpressを利用するでもなく、かと言って自作でルーティング処理を書くのも若干面倒だと感じるとき果たしてどうすれば良いのかふと気になりました。<br/>
「きっと今の世の中なら何らかのモジュールが出ているはず！」と思った筆者は早速探してみることに&hellip;</p>

<p>そこで見つけたのが<a href="https://github.com/pillarjs/router">router</a>です。<br/>
このモジュールを利用すれば、次のように簡単にルーティングを実装することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">finalhandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;finalhandler&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">start</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">finalhandler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// GETリクエストのハンドリング</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users/:path&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// POSTリクエストのハンドリング</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">users</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">users</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Invalid API Syntax\n&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;server has started.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、 <code>server.js</code> はモジュールとして切り出しています。<br/>
実際には <code>app.js</code> で呼び出すようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./server&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、今後たくさんのリクエストを捌くことを考えると、もう少しリクエスト内容ごとにファイルを分けた方が良いですよね&hellip;<br/>
と言うことで少々修正します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">finalhandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;finalhandler&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./users&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   サーバ起動処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">finalhandler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users/:path&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>  <span class="c1">// GETリクエスト</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>        <span class="c1">// POST, PUT, DELETEリクエスト</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;server has started.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように<code>server.js</code>はサーバ起動だけに絞りました。<br/>
そしてリクエストを受け付けたあとの処理は下記のように<code>users.js</code>に書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// users.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s2">&quot;text/plain; charset=utf-8&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Invalid API Syntax\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにまとめることで可読性高くなるので、ルーティングの意味も出てくるというものですね。<br/>
因みに、GETとPOSTリクエストを送れば下記のような結果が得られます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8888/users/20161029</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="mi">20161029</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// POSTリクエスト</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8888/users -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;value&quot;:&quot;Sample&quot;}&#39;</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="nx">Sample</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Node.jsでデバッグ</h3>

<p>筆者はこれまで <code>node-inspector</code> を利用していたのですが、何とv6.3.0からデバッグ機能が標準装備されているらしいですね！<br/>
早速ですが使ってみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Node.jsでデバッグ起動</span>
</span><span class='line'><span class="nx">node</span> <span class="o">--</span><span class="nx">inspect</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9229</span><span class="p">.</span>
</span><span class='line'><span class="nx">Warning</span><span class="o">:</span> <span class="nx">This</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">experimental</span> <span class="nx">feature</span> <span class="nx">and</span> <span class="nx">could</span> <span class="nx">change</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">start</span> <span class="nx">debugging</span><span class="p">,</span> <span class="nx">open</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">URL</span> <span class="k">in</span> <span class="nx">Chrome</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="o">-</span><span class="nx">devtools</span><span class="o">:</span><span class="c1">//devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/f1478fd8-33f2-4bca-8ab4-4ac9be3515cb</span>
</span><span class='line'><span class="nx">server</span> <span class="nx">has</span> <span class="nx">started</span><span class="p">.</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">attached</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力される <code>chrome-devtools://devtools/remote/serve_file/@....</code> の部分をChromeのアドレスバーに貼りましょう！<br/>
<code>node-inspcetor</code> さながらのデバッグができるはずです。</p>

<p>因みに、起動時のオプションとして <code>--debug-brk</code> をつけると必ず1行目でデバッグが停止します。<br/>
一度停めたい場合はオプションを使いましょう。</p>

<h3>まとめ</h3>

<p>今回はNode.jsに触る機会があったため、どうすれば簡単にルーティングが実装できるのか調べてみました。<br/>
Expressを使っても良かったのですが、極力不要なモジュールを取り込みたくない気持ちがあったので割りと最低限にできて良かったなと思いました。<br/>
Node.jsは少しずつリハビリしながら思い出していくことにしようかな。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NoSQLの特性を調べよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/09/nosql/"/>
    <updated>2016-10-09T11:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/09/nosql</id>
    <content type="html"><![CDATA[<h3>NoSQLとは</h3>

<p>本日は珍しくiOS以外について書きます。<br/>
今やそんなに目新しい技術ではなくなってきたNoSQLですが、改めてどんなものか復習してみようと思います。<br/>
筆者が馴染みのあるNoSQLはMongoDBとRedisくらいなのでまだまだ知らないことも多く、一度まとめてみます。</p>

<p>NoSQLとは「Not only SQL」の略でMySQLやOracleなどの所謂RDBMSではないデータベースを指します。<br/>
その名の通りSQLは使いません(SQL相当のものはあったりします)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>NoSQLの代表例</h3>

<p>NoSQLには様々なものが存在します。<br/>
特によく取り上げられるものを見ていきましょう。<br/>
(今回取り上げるのはオープンソースなものに限ります。)</p>

<h4>MongoDB</h4>

<p>筆者が最も馴染みのあるNoSQLはMongoDBです。<br/>
普通ならあり得ないかもしれませんが、筆者にとって初めて触れたデータベースでもあります。</p>

<p>【概要】</p>

<ul>
<li>ドキュメントと呼ばれるJSONっぽいデータ構造でデータを保存する

<ul>
<li>JavaScript好きな人には見やすいデータ形式</li>
<li>サーバサイドもJavaScriptで書きたいNode.js好きな人が寵愛するポイントでもある</li>
</ul>
</li>
<li>ドキュメントの集合をコレクションと言う

<ul>
<li>RDBMSのテーブルのイメージで考えればRDBMSしか触っていない人も理解しやすい</li>
</ul>
</li>
<li>データベースに直接JavaScriptを流し込むことができる</li>
<li>CRUDクエリが高速

<ul>
<li>筆者の中では特にinsertが得意なイメージ</li>
</ul>
</li>
<li>v3.0からパフォーマンスが大幅に改善されている

<ul>
<li>昔MongoDBを見限った人は再度見ることを勧める</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>WEBシステムでの利用

<ul>
<li>結局、RDBMSでないと&hellip;みたいな意見もあるが、割りと実例多いし普通に使える</li>
</ul>
</li>
<li>位置情報系サービスでの利用

<ul>
<li>位置情報関連のIndexが充実して使いやすいイメージ</li>
</ul>
</li>
<li>大量データの蓄積に利用

<ul>
<li>ログの蓄積として活躍できる</li>
<li>NoSQLがそもそもビッグデータに最適な作りになっているパターンが多い</li>
</ul>
</li>
</ul>


<h4>Redis</h4>

<p>続いて馴染みのあるNoSQLがRedisです。</p>

<p>【概要】</p>

<ul>
<li>メモリ上にKVS(key-value store)を構築する</li>
<li>メモリ上にデータを持つのでRead/Write共に高速</li>
<li>ディスクにも定期的にデータを保存するがリアルタイムではない</li>
</ul>


<p>【用途】</p>

<ul>
<li>キャッシュ用のDBとして利用

<ul>
<li>セッション情報の格納で使われることはかなり多い</li>
<li>WebSocketを使ったリアルタイムな処理にも向いている</li>
</ul>
</li>
</ul>


<h4>CouchDB</h4>

<p>今まで触ったことのないDBですが、調べてみました。<br/>
MongoDBに似ているイメージだったのですが、全然違うんですね&hellip;</p>

<p>【特徴】</p>

<ul>
<li>ドキュメント指向データベース

<ul>
<li>JSON形式でデータ保存</li>
<li>MongoDBと同じくデータをドキュメントと呼ぶ</li>
</ul>
</li>
<li>RESTful APIでCRUD操作

<ul>
<li>DBに馴染みがないと逆に入りやすい特徴かもしれません</li>
<li>URIでドキュメントがマッピングされている</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>ローカルストレージとして利用

<ul>
<li>iOSやAndroidアプリ内のローカルストレージとして利用する</li>
</ul>
</li>
<li>1リクエストで単体データを取得する場面

<ul>
<li>まさに紙ドキュメントをPDF化したようなデータを格納して、URIマッピング特性活かすような場面</li>
</ul>
</li>
</ul>


<p>あまり複雑なデータ構造に適しているようには思えなかったのが正直なところです。<br/>
NoSQLどころかRDBMSにも馴染みがない一方でAPサーバ周りの構築はしたことがある人が触るときにとっつきやすそうなイメージを持ちました。</p>

<h4>Cassandra</h4>

<p>これまた触ったことのないDBですが、調べてみました。</p>

<p>【特徴】</p>

<ul>
<li>分散型データベースシステム

<ul>
<li>列指向型</li>
<li>KVSの一種でもある</li>
</ul>
</li>
<li>リッチなデータモデルを持つ

<ul>
<li>データの最小単位をカラムと呼ぶ</li>
<li>カラムの集合をスーパーカラムと呼ぶ(5次元配列として持つ場合のみ)</li>
<li>RDBMSで言うところのテーブルに当たるのがカラムファミリ</li>
</ul>
</li>
<li>耐障害性が高い

<ul>
<li>マスターノードのないアーキテクチャ</li>
<li>データは各ノードに分散や複製されるためデータ損失のリスクも低い</li>
</ul>
</li>
<li>世界的に有名な企業がこぞって利用

<ul>
<li>Facebook, Twitter, Adobe, Cisco, Netflix など</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>DBを止めたくない耐障害性を求められるシステム</li>
<li>超大規模案件

<ul>
<li>そもそもFacebookでその用途で開発されていたし&hellip;</li>
<li>Twitterでも新着ツイートのデータ格納に使われていたとか&hellip;</li>
<li>データマイニングとか分析系に強そう</li>
</ul>
</li>
</ul>


<p>Cassandraはかなり堅牢かつ大規模サービスでの利用に最適なイメージを持ちました。<br/>
逆に特性を知っていないと持て余しそうなくらい&hellip;</p>

<h3>最後に</h3>

<p>さて如何でしたでしょうか？<br/>
結局、興味があるものに少し触れただけになってしまいましたが、筆者自身の見解も広がりました。<br/>
MongoDBやRedisも中途半端にかじって終わってる感があるのでもっと勉強したいと思っていましたが、Cassandraとかかなり実用途ありそうなのでだいぶ興味を惹かれました。<br/>
一方でそんな大規模なサービスを日本企業初でやることって世界に比べたら相当少ないんだろうなと思いました。<br/>
ま、機会を見つつ1つ1つ身につけていければ良いかなというところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ内課金: 自動更新購読]]></title>
    <link href="http://grandbig.github.io/blog/2016/09/25/ios-in-app-purchase/"/>
    <updated>2016-09-25T17:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/09/25/ios-in-app-purchase</id>
    <content type="html"><![CDATA[<h3>アプリ内課金とは</h3>

<p>アプリ内課金とはiTunes Storeを通してアプリ内の様々なものを購入する機能です。<br/>
例えば、</p>

<ol>
<li>電子書籍アプリの購読</li>
<li>コミュニケーションアプリのスタンプ</li>
<li>ゲームアプリの協力なアイテム</li>
</ol>


<p>などが該当します。<br/>
2と3に関しては買い切りプランとして、1は一定の購読期間を持ったプランとしてAppleから提供されています。<br/>
本記事では一定の購読期間を持ったプラン <strong>自動更新購読(Auto-Renewing subscription)</strong> について書きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>自動更新購読(Auto-Renewing subscripion)とは</h3>

<p>アプリ内課金をアプリに実装する場合、もちろん事前にできる限りのテストをしなければいけません。Appleはテスト用にSandbox環境を用意しています。<br/>
では、Sandbox環境と本番環境は何が違うのでしょう。<br/>
また、アプリがどの状態のときにSandbox環境で試すことができ、どこから本番環境となるのでしょう。</p>

<h4>購読期間の違い</h4>

<p>まず、Sandbox環境では、テストをしやすくするために実際の購読期間よりも短い期間となっています。<br/>
1年を1時間と考えれば、1〜12ヶ月まで空で時間を計算できますが、7日のみ3分が割り当てられていることに注意しましょう。<br/>
(同じ割合で行くと、流石に短すぎるからだと思われます。)</p>

<p>Sandbox環境</p>

<ul>
<li>7日 → 3分</li>
<li>1ヶ月 → 5分</li>
<li>2ヶ月 → 10分</li>
<li>3ヶ月 → 15分</li>
<li>6ヶ月 → 30分</li>
<li>12ヶ月 → 60分</li>
</ul>


<h4>Sandbox環境では自動更新キャンセルができない</h4>

<p>Sandbox環境では、iTunes Connectで作成するテスト用のApple IDアカウントを使用します。<br/>
しかしながら、本物のアカウントでないため、設定アプリから購読の自動更新をキャンセルすることはできません。</p>

<p><img src="http://grandbig.github.io/images/in-app-purchase-1.png" alt="設定アプリから管理画面には遷移できない" /></p>

<p>自動更新をキャンセルすることができない代わりに、自動で5回だけ購読が更新されます。<br/>
つまり、1回購読を始めれば、計6回分だけ購読が続きます。</p>

<p>しかしながら、自動で購読が更新されると言っても、即時更新ではありません。<br/>
(恐らく、Apple側のサーバでもバッチを回しているのではないでしょうか&hellip;)</p>

<p>例えば、Sandbox環境で1ヶ月プランを購入したとしましょう。</p>

<ul>
<li>1回目の購入日: 2016/09/25 10:00:00.000</li>
<li>1回目の期限日: 2016/09/25 10:05:00.000</li>
<li>2回目の購入日: 2016/09/25 10:07:00.000</li>
</ul>


<p>このように「1回目の期限日」と「2回目の購入日」が完全一致するわけではないのです。<br/>
こういった仕様を理解した上でテストを進めないと思わぬ誤った結果を出してしまうかもしれません。</p>

<h4>請求の有無について</h4>

<p>開発中に最も気になるのは請求の有無ではないでしょうか？<br/>
心配しなくともSandbox環境では請求は発生しません。<br/>
もちろん本番環境では請求が発生します。</p>

<h4>アプリの状態別環境</h4>

<p>iOSアプリは様々な状態が存在します。<br/>
それは次の5つです。<br/>
Develop / Adhoc / TestFlight / Promotion Code / Release</p>

<p>各状態で本番環境とSandbox環境のどちらが使えるのかまとめると下記のようになります。</p>

<ul>
<li>Sandbox環境

<ul>
<li>Develop</li>
<li>Adhoc</li>
<li>TestFlight</li>
</ul>
</li>
<li>本番環境

<ul>
<li>Promotion Code</li>
<li>Release</li>
</ul>
</li>
</ul>


<p>Promotion Codeでアプリを配布するには、Appleの審査を通過する必要があります。</p>

<h3>レシート検証</h3>

<p>自動更新購読は買い切りと違って、継続した結果をサービス提供側のサーバで保持しておく必要があります。<br/>
(サービス特性上、それがないのはサーバを使わずにアプリ内で完結する場合のみでしょう。)<br/>
そこで避けては通れないのが <strong>レシート検証</strong> です。</p>

<p>レシート検証には2種類の方法があります。</p>

<ul>
<li>ローカル検証

<ul>
<li>アプリ内で独自実装します。</li>
<li>独自実装する理由は公開されたサードパーティ製ライブラリを使うと仕組みがバレてしまうからです。</li>
</ul>
</li>
<li>App Store検証

<ul>
<li>信頼できるサーバを用意してサーバサイド処理として実装します。</li>
<li>アプリから直接App Storeに検証しに行くことは脆弱性があるため推奨されていません。</li>
</ul>
</li>
</ul>


<h4>App Store検証</h4>

<p>App Store検証できるように、Appleは <strong>レシート検証API</strong> を用意しています。<br/>
ここでも本番環境とSandbox環境でアクセス先URLに違いがあります。</p>

<ul>
<li>Sandbox環境URL: <a href="https://sandbox.itunes.apple.com/verifyReceipt">https://sandbox.itunes.apple.com/verifyReceipt</a></li>
<li>本番環境URL: <a href="https://buy.itunes.apple.com/verifyReceipt">https://buy.itunes.apple.com/verifyReceipt</a></li>
</ul>


<p>共にリクエストパラメータは2種類になります。</p>

<ul>
<li><code>receipt_data</code>

<ul>
<li>base64エンコードを施したレシートデータ</li>
</ul>
</li>
<li><code>password</code>

<ul>
<li>iTunes Connectで発行した共有シークレットキー</li>
</ul>
</li>
</ul>


<p>また、レスポンスデータも同じになります。<br/>
ここでは重要なものだけ書きます。</p>

<ul>
<li><code>status</code>

<ul>
<li>有効なレシートの場合は <strong>0</strong> 。それ以外は幾つかの理由で無効なレシートとなっています。</li>
</ul>
</li>
<li><code>receipt</code>

<ul>
<li><code>bundle_id</code>: iOSアプリの<code>CFBundleIdentifier</code></li>
<li><code>application_version</code>: iOSアプリの<code>CFBundleVersion</code></li>
<li><code>in_app</code>: 購買履歴(自動更新購読の場合、更新された段階で追加されます。)</li>
<li><code>original_application_version</code>: iOSアプリの<code>CFBundleVersion</code></li>
<li><code>product_id</code>: 購入アイテムのプロダクトID</li>
<li><code>transaction_id</code>: 購入アイテムのトランザクションID</li>
</ul>
</li>
<li><code>latest_receipt</code>

<ul>
<li>base64エンコードを施した直近の更新に対応するトランザクションレシート</li>
</ul>
</li>
<li><code>latest_receipt_info</code>

<ul>
<li>購読履歴(自動更新購読の場合、更新された段階で追加されます。)</li>
</ul>
</li>
</ul>


<p>上記のレスポンスデータ概要を見ると、<br/>
<code>receipt.in_app</code>と<code>latest_receipt_info</code>は同じものに見えます。<br/>
実際にはレシート検証APIを叩いたタイミングで取得できるデータは異なります。<br/>
Appleは<code>in_app</code>を利用することを推奨しており、<code>latest_receipt</code>と<code>latest_receipt_info</code>は「 <strong>iOS 6型のトランザクションレシートの場合のみ。</strong> 」としています。<br/>
しかしながら、iOS7以降でもこれらの値は返却されてきます。<br/>
ここがネット上で調べてもはっきりしない部分ではあるのですが、筆者の試した感覚では<code>latest_receipt_info</code>は<code>in_app</code>よりもリアルタイムに情報が更新されている気がしています。<br/>
<code>in_app</code>は自動で更新された後にレシート検証APIを叩いても1回目は必ず情報が更新されていません。<br/>
1回目で返却された<code>latest_receipt</code>を<code>receipt_data</code>として利用すると正しく更新された<code>in_app</code>が返却されます。<br/>
(Sandbox環境の場合であって、本番環境では検証できていません。)</p>

<p>このことを考えると、<code>in_app</code>は非常に使いにくいものに思われますが、使い方に寄るのかもしれません&hellip;<br/>
今後、<code>latest_receipt</code>と<code>latest_receipt_info</code>が廃止されてしまうかもしれませんし、そうなったときにAppleは事前に告知をするのか&hellip;などなど不安要素は実にたくさんあります。</p>

<p>アプリ側では、起動時に課金周りの監視処理を必ず実行する必要があります。<br/>
これを実行することで、自動更新購読の場合に更新を検知してサーバに送信するといったフローができるためでしょう。</p>

<p>冒頭に上げた2種類のレシート検証APIの使い道は様々あるのかもしれませんが、<br/>
筆者としては今のところ</p>

<ul>
<li>ローカル検証

<ul>
<li>必ずアプリ側の処理に組み込む</li>
</ul>
</li>
<li>App Store検証

<ul>
<li>アプリ不具合やクラッシュなどで漏れたユーザへの対応</li>
<li>アプリを起動しないユーザへの対応</li>
</ul>
</li>
</ul>


<p>と考えています。<br/>
つまりはどちらも必要なんですね。</p>

<h3>まとめ</h3>

<p>さて、筆者的にはもう少しローカル検証やリストアに関しての理解が乏しいと感じています。<br/>
これからまだまだ関わる気もするので、また理解が進んだら続きを書こうかなと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="https://developer.apple.com/jp/documentation/ValidateAppStoreReceipt.pdf">レシート検証 プログラミングガイド</a></li>
<li><a href="http://ameblo.jp/principia-ca/entry-12071724382.html">自動購買課金について</a></li>
<li><a href="http://qiita.com/monoqlo/items/24d36e3a95bc813a7276">In-App Purchaseを実装する際に調べたことまとめ</a></li>
<li><a href="http://qiita.com/koyopro/items/c6c387b136da1698f666">iOSアプリの課金検証環境</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode8を始めてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/09/19/start-xcode8/"/>
    <updated>2016-09-19T14:31:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/09/19/start-xcode8</id>
    <content type="html"><![CDATA[<h3>Xcode8が登場！</h3>

<p>先日、Xcode8がiOS10と共に一般公開されました。本ブログの初期の頃に<a href="http://grandbig.github.io/blog/2013/09/05/start-xcode/">Xcodeを始めてみよう！</a>という記事を書きましたが、この頃がXcode4.6.3であったことを考えると何だか感慨深いですね。<br/>
なんて感傷に浸りたい気持ちとは裏腹にXcode8ではこれまでと大きく変わっている部分があるとのことで、少しではありますが見ていこうと思います。</p>

<!-- more -->


<h3>プロジェクトの新規作成</h3>

<p>まずはプロジェクトの新規作成フローから見ていきます。</p>

<p>１．Xcode8を起動する</p>

<p><img src="http://grandbig.github.io/images/xcode8_1.png" alt="Xcode8起動時のウィンドウ" /></p>

<p>２．作成するプロジェクトの形式を選択する</p>

<p><img src="http://grandbig.github.io/images/xcode8_2.png" alt="プロジェクトの形式を作成" /></p>

<p>３．プロジェクトの詳細を決める</p>

<p><img src="http://grandbig.github.io/images/xcode8_3.png" alt="プロジェクトの詳細を入力" /></p>

<p>４．プロジェクトを保存する</p>

<p><img src="http://grandbig.github.io/images/xcode8_4.png" alt="プロジェクトを保存" /></p>

<p>レイアウト構成やTeamの入力項目が増えただけで大きな違いはなさそうです。</p>

<h3>Xcode8のGeneral</h3>

<p>続いて、Xcode8で変わったと話題の <strong>General</strong> を見ていきましょう。</p>

<p><img src="http://grandbig.github.io/images/xcode8_5.png" alt="General" /></p>

<p>上図を見ると、</p>

<ul>
<li>Display Nameの追加</li>
<li>Automatically manage signing機能の新規追加</li>
<li>Provisioning ProfileとCertificate状況の閲覧項目の追加</li>
</ul>


<p>が増えたことがわかります。</p>

<h4>Automatically manage signing</h4>

<p>これは一見、自動で最適なProvisioning ProfileとCertificateを選択してくれる機能に見えますが、下記機能を含んでいます。</p>

<ul>
<li>署名付き証明書の作成

<ul>
<li>複数Macで開発する際に必要な鍵付き証明書を作成してくれます</li>
<li>作成可能な証明書数は1 Apple IDあたり10個とのこと</li>
</ul>
</li>
<li>App IDの作成と更新

<ul>
<li>アプリ固有のIDであり、存在しないBundle identifierを指定していたとしても自動作成</li>
</ul>
</li>
<li>Provisioning Profileの作成と更新

<ul>
<li>アプリのビルドに必要な証明書でApp IDに紐づく証明書がないときは自動作成</li>
</ul>
</li>
</ul>


<p>実際に、機能をONにした場合、下図のように自動で最適なものが選択されていることがわかります。</p>

<p><img src="http://grandbig.github.io/images/xcode8_6.png" alt="Automatically manage signingをON" /></p>

<p>因みにこれをOFFにした場合は下図のように全て自身で選択できる項目が表示されます。</p>

<p><img src="http://grandbig.github.io/images/xcode8_7.png" alt="Automatically manage signingをOFF" /></p>

<p>気をつけたいのは想定通りのTeamが選択されていないと意図したProvisioning Profileを選択できない場合があることです。<br/>
しかし、GeneralからはTeamの選択ができません。<br/>
筆者は結局、 <strong>Build Settings</strong> からTeamを選択しました。(他にも方法はあるかもしれません。)<br/>
ま、ここまで来たら、いっそのことProvisioning Profileも選択しちゃいましたが&hellip;笑<br/>
Apple的にはGeneralで全て完結させることを推奨しているようですが、課題がありそうな気がしています。</p>

<p><img src="http://grandbig.github.io/images/xcode8_8.png" alt="Build SettingsからTeamを選択" /></p>

<h3>Build Settings > Signing</h3>

<p>先程、Build SettingsからTeamを選択する話をしましたが、よくよく見ると&hellip;</p>

<ul>
<li>Provisioning Profile</li>
<li>Provisioning Profile (Deprecated)</li>
</ul>


<p>の2つがあることに気づいたのではないでしょうか？？<br/>
これは、GeneralからProvisioning Profileを自動 or 手動で設定できるようになった弊害と考えられます。<br/>
これまで、Provisioning Profileの名称とUUIDが紐付けられる形でXcodeプロジェクトに保存されていたため、Provisioning Profileを設定した状態でGitにアップすると、他の人がPullした際に、Provisioning ProfileにUUIDの値が表示されるということがありました。<br/>
今後はTeamに開発メンバーとして含まれていれば、こういったことが解消されることでしょう。</p>

<h3>Storyboard</h3>

<p>続いて、筆者が目を惹かれたのはStoryboardです。<br/>
これまでは特定のデバイスの形によらない正方形の形をデフォルトとしていました。<br/>
これを右メニューからデバイスの形を選択することで変更していました。</p>

<p>Xcode8からは下部に新しいメニューが表示され、そこから簡単に特定のデバイス型にStorybaordを変更することができます。</p>

<p><img src="http://grandbig.github.io/images/xcode8_9.png" alt="新しいStoryboard" /></p>

<h3>App Icons</h3>

<p>さて、ここはそんなに大きな変更はありませんでした。<br/>
強いて言えば、右メニューのUIがチェックボックス形式からセレクトボックス形式に変更になったくらいです。</p>

<p><img src="http://grandbig.github.io/images/xcode8_10.png" alt="App IconsのUI" /></p>

<p>因みに、Xcode8は正式にiOS7以前のサポートを排除しました。(Deployment Targetを見るとiOS8.0からの選択になっていることがわかります。)<br/>
筆者が疑問なのは、上図のApp Iconsを見ると<code>iOS 5, 6</code>とか<code>iOS7 - 10</code>のように古いiOSのナンバリングが未だになぜ残っているのだとう&hellip;ということです。<br/>
開発する上で特別気にする必要はないんでしょうが&hellip;</p>

<h3>まとめ</h3>

<p>さて、本日はXcode8の変更点を少しだけ見てみました。<br/>
まだ筆者もXcode8で十分な数のサンプルアプリを開発できているわけではないため、見つけられていない新機能がたくさんあることでしょう。<br/>
これから少しずつではありますが、役に立つ新情報を見つけていければと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://possiblemobile.com/2016/06/code-signing-xcode-8/">Code Signing in Xcode 8</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple Developer Program(チーム活用編)]]></title>
    <link href="http://grandbig.github.io/blog/2016/09/11/apple-developer-program/"/>
    <updated>2016-09-11T20:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/09/11/apple-developer-program</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はいつもと少し違う視点でブログを書きたいと思います。<br/>
今回取り上げるのは『チームでのApple Developer Programの活用方法』です。<br/>
iPhoneが世に出てから数年の月日が経っているものの、未だにApple Developer Programの使い方が成立していないところも多いです。<br/>
そこで、筆者が考える手法について備忘録の意を含めて書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Apple Developer Programとは</h3>

<p>まずはApple Developer Programを簡単に説明していきます。<br/>
Apple Developer ProgramのMembershipを購入することで下記のことができるようになります。</p>

<ul>
<li>iPhone, iPad, Apple Watch, Mac用のアプリを世界中に配信できます</li>
<li>Appleが開発者向けに提供しているAppの高度な機能を利用できます</li>
<li>一般公開されていない最新のβ版OSを利用できます</li>
<li>TestFlightを利用することで公開前のアプリをテスト利用することができます</li>
<li>App Analyticsを利用することでアプリのインストール数, 利用頻度, 収益などを確認できます</li>
</ul>


<p>また、Apple Developer Programには下記2つの登録種別があります。</p>

<ul>
<li>個人として登録する</li>
<li>法人として登録する</li>
</ul>


<p>さらに法人として利用する場合は次の2つのMembershipが存在します。</p>

<ul>
<li>Apple Developer Program: 基本的には個人のApple Developer Programと同じ</li>
<li>Apple Developer Enterprise Program: 従業員のみを対象として設計および配布する独自の App を作成する場合に利用</li>
</ul>


<h3>Apple Developer Programでの役割</h3>

<p>次に、Apple Developer Programでの役割と権限について説明します。<br/>
個人契約の場合は役割や権限が存在しないため、法人契約視点で話します。</p>

<p>Apple Developer Programでの役割は次の3種類です。</p>

<ul>
<li>Team Agent: 登録者(契約者)本人で、チームに唯一の存在です</li>
<li>Admin: 契約関連の作業以外の全てを扱うことができます</li>
<li>Member: 開発に必要な最低限の作業のみを許されています</li>
</ul>


<p>具体的に各役割で何ができるのか見ていきましょう。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">　　</th>
<th align="right">　Team Agent　</th>
<th align="center">　Admin　</th>
<th>　Member　</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">法的な契約の締結</td>
<td align="right">　◯ </td>
<td align="center">　☓ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Membershipの更新</td>
<td align="right">　◯ </td>
<td align="center">　☓ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Developer ID 証明書の作成</td>
<td align="right">　◯ </td>
<td align="center">　☓ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Memberの招待と役割の割り当て</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Provisioning Profileの作成</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">証明書署名リクエストの承認</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">UDID の追加と無効化</td>
<td align="right">　◯ </td>
<td align="center">　☓ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">App ID の登録、設定、削除</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">iOS配布用証明書と配布用Provisioning Profileの作成</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">APNS証明書とPass Type IDの作成</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Mac App / Mac Installer配布証明書の作成</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　☓</td>
</tr>
<tr>
<td></td>
<td align="left">Technical Support Incident の購入と送信</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">Developer Forums への投稿</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">プレリリース版ソフトウェアのDL</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">Provisioning ProfileのDL</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">証明書署名リクエストの送信</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">Safari 拡張機能証明書の作成</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
<tr>
<td></td>
<td align="left">Safari Extensions GalleryへのSafari拡張機能の提出</td>
<td align="right">　◯ </td>
<td align="center">　◯ </td>
<td>　◯</td>
</tr>
</tbody>
</table>


<p>ここでポイントとなるのは(実は先にも述べていたのですが)、 <strong>Admin</strong> は <strong>ほとんどの作業を許可されている</strong> ということです。</p>

<h3>MemberCenterでできること(iOS, tvOS, watchOS)</h3>

<p>上記で説明した役割をどのように組織やチームに割り振るのかを考える前に、Apple Developer Programの管理サイトであるMemberCenterで何ができるのかを見ていきます。<br/>
今回はiOS, tvOS, watchOS共通の操作のみを説明します。</p>

<p>MemberCenterでできることは下記です。</p>

<ul>
<li>Certificatesの作成/DL/削除</li>
<li>アプリ関連の固有IDの登録/DL/編集/削除

<ul>
<li>App IDsなど一部自由には削除できないものあり</li>
</ul>
</li>
<li>端末の登録/編集/削除

<ul>
<li>削除は年1回のみ可能</li>
</ul>
</li>
<li>Provisioning Profilesの登録/DL/編集/削除</li>
</ul>


<p>実際の画面のメニューは次のとおりです。</p>

<p><img src="http://grandbig.github.io/images/apple_member_center_menu.png" alt="Apple Developer ProgramのMember Centerのメニュー" /></p>

<h4>Certificatesについて</h4>

<p>CertificatesはMemberCenterにサインインしたアカウントに紐づきます。<br/>
Development系の証明書に関しては大きな影響はないものの、Production系の証明書に関してはリリースに影響が出るため慎重に扱う必要があります。<br/>
しかも、このCertificatesはTeam AgentのみならずAdminも作成と削除が可能になっています。<br/>
法人としてアプリをリリースする場合、Production用の <strong>App Store and Ad Hoc</strong> のCertificatesは統一します。(個人アカウント名義での証明書でリリースするわけにはいかないためです。)<br/>
Developmentはあくまでも開発用に利用するため統一の必要はありません。</p>

<h4>App IDsについて</h4>

<p>アプリ関連の固有IDの中で <strong>App IDs</strong> というものがあります。<br/>
これはアプリ固有のIDであり、Development用とProduction用を兼ねて扱います。<br/>
Push用の証明書もDevelopment用とProduction用の2つを1つの <strong>App IDs</strong> に紐付けることができます。</p>

<p>これも安易に削除できないため不要なものを作り過ぎないようにしましょう。</p>

<h4>Devicesについて</h4>

<p>iPhone, iPadなどの端末を登録します。<br/>
最大登録数が100台と決まっているため、登録する端末は厳選する必要があります。<br/>
端末の削除は1年に1回であり、例外は認められていません。</p>

<p>Xcode7からここで登録していない端末でも開発用のアプリをインストールすることが可能になっていますが、利用可能な機能に制限があります。<br/>
例えば、Push通知の動作確認をするためにはここで登録する必要があります。</p>

<h4>Provisioning Profilesについて</h4>

<p>これは簡単に言えば、アプリ単位でのビルド用証明書です。<br/>
編集や削除は簡単にできますので、MemberCenterの中でも比較的、気兼ねせずに利用できる機能となっています。</p>

<h3>組織での権限の割り振り方について</h3>

<p>さて、ここまでくれば、既に何となく想像できているかもしれません。<br/>
しかしながら、Appleが定義している役割はTeam Agent / Admin / Memberの3つのみであるため、権限の差異はかなり大雑把なものとなっています。<br/>
そのため、ある程度、組織内でのルールを定義して扱わざるを得ません。</p>

<p>筆者が提案したい組織内での権限の割り振り方は2つあります。</p>

<h4>強固なパターン</h4>

<p>まずは強固なパターンを説明します。</p>

<ul>
<li>Team Agent

<ul>
<li>契約に関する作業を実施</li>
<li>Production用のCertificatesの作成</li>
<li>上記以外で依頼されたCertificatesの作成</li>
<li>依頼されたApp IDsの作成</li>
<li>依頼された端末の登録</li>
<li>依頼されたProvisioning Profilesの作成</li>
</ul>
</li>
<li>Admin

<ul>
<li>この権現を持つアカウントは登録しない(この権限は利用しません)</li>
</ul>
</li>
<li>Member

<ul>
<li>App IDsの作成をTeam Agentに依頼する</li>
<li>端末の登録をTeam Agentに依頼する</li>
<li>Provisioning Profilesの作成をTeam Agentに依頼する</li>
</ul>
</li>
</ul>


<p>Team AgentとAdminの権限は契約以外同じであるため、いっそのことAdminを利用しないことで、オペレーションミスを回避することができます。<br/>
証明書は安易に削除されてはよくないですし、登録数が限られているにも関わらず無造作に端末が登録されてしまうことも非常にリスクが高いと考えられます。</p>

<h4>緩和なパターン</h4>

<p>次に緩和なパターンを説明します。</p>

<ul>
<li>Team Agent

<ul>
<li>契約に関する作業を実施</li>
<li>Production用のCertificatesの作成</li>
<li>(開発者かつ自身のプロジェクトを持つ場合)上記以外のCertificatesの作成</li>
<li>(開発者かつ自身のプロジェクトを持つ場合)自身のプロジェクト用のApp IDsの作成</li>
<li>(開発者かつ自身のプロジェクトを持つ場合)自身のプロジェクトに必要な端末の登録</li>
<li>(開発者かつ自身のプロジェクトを持つ場合)自身のプロジェクト用のProvisioning Profilesの作成</li>
</ul>
</li>
<li>Admin

<ul>
<li>プロジェクトごとに代表者を1名選出してAdminとする</li>
<li>Production用以外の自身のプロジェクト用のCertificatesの作成</li>
<li>自身のプロジェクト用のApp IDsの作成</li>
<li>自身のプロジェクトに必要な端末の登録</li>
<li>自身のプロジェクト用のProvisioning Profilesの作成</li>
</ul>
</li>
<li>Member

<ul>
<li>自身のプロジェクトに必要なCertificates, App IDs, Provisioning ProfilesのDL</li>
</ul>
</li>
</ul>


<p>Team Agentは契約作業もしますが、開発者が兼ねている場合は基本的にAdminと同じ扱いで考えます。<br/>
Adminは『Production用以外の自身のプロジェクト用のCertificatesの作成』であれば許可し、あくまでも『Production用のCertificatesの作成』はTeam Agentが担います。<br/>
流石に強力な権限を持つAdminを乱立させるのは危険であるため、プロジェクト内で代表者を選出するのが良いでしょう。<br/>
同プロジェクト内の他の開発者はMemberで十分なはずです。</p>

<h3>まとめ</h3>

<p>如何でしたでしょうか？<br/>
実際の様々な企業ではそれぞれの管理の仕方があるのかもしれませんが、筆者はどちらかというと強固なパターンで管理した方が良い派です。<br/>
なぜなら、iOSアプリ開発者でも、MemberCenterの仕組みや証明書を理解している人は案外多くないからです。<br/>
正しく理解した人が全てのアプリに影響を与えない形で管理することが結局は皆に安心安全な仕組みを提供することができるのです。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReSwiftを勉強してみよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2016/09/03/reswift-1/"/>
    <updated>2016-09-03T19:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/09/03/reswift-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は最近JavaScript界では浸透してきている<code>Redux</code>についてSwiftを通して勉強していきたいと思います。<br/>
<code>Redux</code>に関する日本語の記事はそれなりにあるもののSwift版ライブラリである<code>ReSwift</code>に関する日本語の記事は少ないため、筆者が少しでも記事を増やせたら良いなという思いがあります。<br/>
と言いつつも、いきなり有効性の高い有良記事を書くことはハードルが高いため、簡単な勉強から始めて行く次第です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>ReSwiftとは</h3>

<p><code>ReSwift</code>とは<code>Redux</code>のSwift版ライブラリです。<br/>
<a href="https://github.com/ReSwift/ReSwift">GitHub: ReSwift/ReSwift</a>が公式ページとなります。</p>

<p>上記公式ページのイントロをざっくり訳すと&hellip;<br/>
(意味が間違っていたらごめんなさい&hellip;)</p>

<p>ReSwiftはSwiftで<a href="https://github.com/reactjs/redux">Redux</a>ライクな一方向のデータフローアーキテクチャを実装したものです。ReSwiftを使うことで、次の3つの関係性でアプリを構成することを手助けします。</p>

<ul>
<li><strong>State</strong> : 全てのアプリの状態を管理します。複雑な状態の管理やデバッグのし易さを手助けするなど、メリットは数多くあります。</li>
<li><strong>Views</strong> : 状態変化したときにViewを更新します。状態に対してシンプルなビジュアルを実現します。</li>
<li><strong>State Changes</strong> : <code>actions</code>を通した状態変化の実行のみを担当します。<code>actions</code>は状態変化を表現する小さなモジュールを指します。限られた状態変化を担うため、大人数で開発する際にアプリを簡単に理解することができるメリットがあります。</li>
</ul>


<p>また、ReSwiftは下記の3つの原則に従って構成されます。</p>

<ul>
<li><strong>The Store</strong> : アプリの状態(State)を保持するアプリ内で唯一の存在です。StoreにActionsが発送されることによってのみ状態(State)は変化します。状態(State)が変化したら必ず、Storeが全てのオブザーバに通知します。</li>
<li><strong>Actions</strong> : アプリの状態(State)がどんな変化なのかを宣言します。Storeによって消費され、Reducerに渡されます。Reducerは各Actionで引き起こされる異なる状態変化を実装することによってActionを扱います。</li>
<li><strong>Reducers</strong> : 現在のActionとStateに基いて、新しいStateを生成する純粋な関数を提供します。</li>
</ul>


<p>というように、何となく、この辺りを理解すれば良さそうですね。<br/>
まずは、公式ページに載っている最も簡単な『Counterサンプルアプリ』から上記の内容を直にコードで理解していきたいと思います。</p>

<h3>CounterサンプルアプリからReSwiftを理解しよう</h3>

<p>公式ページのREADMEには<a href="https://github.com/ReSwift/CounterExample">CounterExample</a>が紹介されています。<br/>
公開されているサンプルアプリの中で最も簡単なサンプルなはずなので、これを見ていきたいと思います。</p>

<p>最終的なフォルダ構成は下記になります。<br/>
(関係のないファイルは除いています。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">ReSwiftSample</span>
</span><span class='line'><span class="err">┣━━</span> <span class="n">State</span>
</span><span class='line'><span class="err">┃</span>   <span class="err">┗━━</span> <span class="n">AppState</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">┣━━</span> <span class="n">Actions</span>
</span><span class='line'><span class="err">┃</span>   <span class="err">┗━━</span> <span class="n">CounterActions</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">┣━━</span> <span class="n">Reducers</span>
</span><span class='line'><span class="err">┃</span>   <span class="err">┗━━</span> <span class="n">CounterReducers</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">┣━━</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">┣━━</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">┗━━</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span></code></pre></td></tr></table></div></figure>


<p>では早速、1つずつ見ていきましょう。</p>

<h4>ReSwiftをCocoaPodsでインストール</h4>

<p>例によってCocoaPodsでインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">ReSwiftSample</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">ReSwift</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">ReSwiftSampleTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">ReSwift</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">ReSwiftSampleUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">ReSwift</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>pod install</code>すればOKです。</p>

<h4>State</h4>

<p>準備が整ったところでコードを具体的に見ていきましょう。
まずは<code>AppState.swift</code>を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//AppState.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">AppState:</span> <span class="n">StateType</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">counter:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回のアプリは単純なカウントアップアプリなので、上記では<code>AppState</code>の1つのプロパティとして <strong>カウントの状態(counter)</strong> を定義しています。</p>

<h4>Action</h4>

<p>続いて<code>CounterActions.swift</code>を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CounterActions.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">CounterActionIncrease:</span> <span class="n">Action</span> <span class="p">{}</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">CounterActionDecrease:</span> <span class="n">Action</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>カウントアップの動作には <strong>『増加(Increase)』</strong> と <strong>『減少(Decrease)』</strong> の2つがあるため、それぞれのActionを定義します。<br/>
ここで注意したいのはActionは関数(<code>func</code>)ではなく構造体(<code>struct</code>)であるということです。<br/>
先に述べたようにActionは状態の宣言であり、Reducerに渡されて、処理を判別するために利用されるからです。</p>

<h4>Reducer</h4>

<p>そして、<code>CounterReducers.swift</code>を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CounterReducers.swift</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">CounterReducer:</span> <span class="n">Reducer</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">handleAction</span><span class="p">(</span><span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">AppState</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AppState</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">state</span> <span class="o">=</span> <span class="n">state</span> <span class="o">??</span> <span class="n">AppState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">_</span> <span class="n">as</span> <span class="nl">CounterActionIncrease:</span>
</span><span class='line'>              <span class="n">state</span><span class="p">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">_</span> <span class="n">as</span> <span class="nl">CounterActionDecrease:</span>
</span><span class='line'>              <span class="n">state</span><span class="p">.</span><span class="n">counter</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先に述べましたが、Reducerは引数として渡されたStateとActionの2つから新規のStateを返却します。<br/>
重要なのは、 <strong>新規のStateを返却する</strong> ということです。<br/>
これは<code>var state = state ?? AppState()</code>を見るとわかるかと思います。<br/>
既に<code>state</code>オブジェクトがある場合は値渡しで新規<code>AppState</code>型に内容を格納しています。<br/>
もし、<code>state</code>オブジェクトがなければ、初期化して作成しています。</p>

<p>そして<code>switch</code>文で各Actionごとに最適な処理を実行しています。<br/>
(今回の場合は『Increase』と『Decrease』)</p>

<h4>Store</h4>

<p>モジュールの作成が完了したので、実装していきます。<br/>
先に述べたように<code>Store</code>はアプリの状態(State)を保持するアプリ内で <strong>唯一の存在</strong> です。<br/>
よって、<code>AppDelegate.swift</code>で次のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">mainStore</span> <span class="o">=</span> <span class="n">Store</span><span class="o">&lt;</span><span class="n">AppState</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>  <span class="nl">reducer:</span> <span class="n">CounterReducer</span><span class="p">(),</span>
</span><span class='line'>  <span class="nl">state:</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では<code>Store</code>型の<code>mainStore</code>を定義しています。<br/>
Reducerとして<code>CounterReducer</code>を定義しています。<br/>
Stateは初期値<code>nil</code>として定義しています。</p>

<h4>View層への実装</h4>

<p>最後にユーザの操作が走った際の処理の実装について見ていきます。<br/>
状態変化の監視開始/終了を下記で実施します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">StoreSubscriber</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillAppear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mainStore</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="c1">// 状態変化の監視開始</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>                              
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillDisappear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewWillDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mainStore</span><span class="p">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>   <span class="c1">// 状態変化の監視終了</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、ユーザ操作からのReducerへのAction発送部分です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">increaseButtonTapped</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>      <span class="n">CounterActionIncrease</span><span class="p">()</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">decreaseButtonTapped</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>      <span class="n">CounterActionDecrease</span><span class="p">()</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>『増加』ボタンタップ時にStoreが『CounterActionIncreaseというAction』をReducerへdispatch(発送)します。</li>
<li>『減少』ボタンタップ時にStoreが『CounterActionDecreaseというAction』をReducerへdispatch(発送)します。</li>
</ul>


<p>そして、新しいStateが返却された際に実行すべき処理を書くために<code>StoreSubscriber</code>プロトコルに<code>newState</code>メソッドが定義されています。<br/>
よって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">StoreSubscriber</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">counterLabel:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">newState</span><span class="p">(</span><span class="nl">state:</span> <span class="n">AppState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">counterLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;\(state.counter)&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように実装することで<code>newState</code>メソッド内で任意の処理を書くことができます。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
今回は公式の最も簡単なサンプルについて見ていきましたが、少々ReSwiftの扱い方が見えてきた気がします。<br/>
また、ReSwiftが有能であるが故にReduxであればもっと自分で書かなければいけなさそうなところもカバーしてくれているように見えました。<br/>
実践での活用なRxSwift同様にいろいろなリスク管理的な意味で難しいのかもしれませんが、もっとReSwiftを理解することで想定を上回るメリットを示し、実践で利用できるかもしれません。</p>

<p>そんなことを夢見ながら今後は、別の公式サンプルを見つつ理解を深めていきたい思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！(3)]]></title>
    <link href="http://grandbig.github.io/blog/2016/08/30/rxswift-3/"/>
    <updated>2016-08-30T16:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/08/30/rxswift-3</id>
    <content type="html"><![CDATA[<h3>RxSwiftのメソッドを見てみよう</h3>

<p>前回に引き続きRxSwiftを勉強したいと思います。<br/>
今回は<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md">GitHub: Reactive/RxSwift API一覧</a>からメインのメソッドを見ていきたいと思います。</p>

<h4>asObservable</h4>

<p>これは<code>ReactiveX</code>で定義されている<code>From</code>オペレータと同義です。<br/>
様々なオブジェクトを<code>Observable</code>型のデータに変換するためのオペレータです。</p>

<p>利用例は下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">array:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">variable</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="n">variable</span><span class="p">.</span><span class="n">asObservable</span><span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Event is \(event)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Event</span> <span class="n">is</span> <span class="n">Next</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="n">Event</span> <span class="n">is</span> <span class="n">Next</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
</span><span class='line'><span class="n">Event</span> <span class="n">is</span> <span class="n">Completed</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>create</h4>

<p>0から<code>Observable</code>型のデータを生成するためのオペレータです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">create</span> <span class="p">{</span> <span class="p">(</span><span class="nl">observer:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">observer</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">observer</span><span class="p">.</span><span class="n">onCompleted</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">AnonymousDisposable</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;Disposed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Event is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です</span>
</span><span class='line'><span class="n">Event</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Disposed</span>
</span></code></pre></td></tr></table></div></figure>


<h4>deferred</h4>

<p>Subscribeされたタイミングで<code>Observable</code>型のデータを生成するオペレータです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です</span>
</span><span class='line'><span class="n">Event</span> <span class="n">is</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>empty</h4>

<p>空の(何の値も持たない)<code>Observable</code>型のデータを生成するオペレータです。<br/>
通常通り、終了処理は実行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">source:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="c1">// 空のため何も出力されません</span>
</span></code></pre></td></tr></table></div></figure>


<h4>never</h4>

<p>空の(何の値も持たない)<code>Observable</code>型のデータを生成するオペレータです。<br/>
<code>empty</code>と異なるのは終了処理が実行されないことです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">source:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">never</span><span class="p">()</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="c1">// 空のため何も出力されません</span>
</span></code></pre></td></tr></table></div></figure>


<h4>error</h4>

<p>空の(何の値も持たない)<code>Observable</code>型のデータを生成するオペレータです。<br/>
<code>empty</code>, <code>never</code>と異なり、エラーを持った終了処理を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">NSError</span><span class="p">(</span><span class="nl">domain:</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="nl">code:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">userInfo:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="nl">source:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeError</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Error is \(error)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Error</span> <span class="n">is</span> <span class="n">Error</span> <span class="n">Domain</span><span class="o">=</span><span class="n">test</span> <span class="n">Code</span><span class="o">=-</span><span class="mi">1</span> <span class="s">&quot;(null)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>toObservable</h4>

<p>様々なオブジェクトを<code>Observable</code>型のデータに変換するためのオペレータです。<br/>
<code>asObservable</code>とは利用方法が異なります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">array:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">toObservable</span><span class="p">().</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Number is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Number</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Number</span> <span class="n">is</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Number</span> <span class="n">is</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h4>interval</h4>

<p>一定期間あけて処理を実行するためのオペレータです。<br/>
<code>JavaScript</code>で言うところの<code>setTimeInterval</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">timer:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">interval</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="nl">scheduler:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'><span class="n">timer</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;log output&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="c1">// 5秒後に実行されます。</span>
</span><span class='line'><span class="n">log</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h4>just</h4>

<p>引数に指定した特定の型を返却する<code>Observable</code>型のデータを生成するためのオペレータです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>of</h4>

<p>様々なオブジェクトを<code>Observable</code>型のデータに変換するためのオペレータです。<br/>
<code>asObservable</code>や<code>toObservable</code>とは利用方法が異なります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">of</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>range</h4>

<p>特定の範囲の<code>Int</code>型を持つ<code>Observable</code>型データを生成するオペレータです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="nl">source:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">range</span><span class="p">(</span><span class="nl">start:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">count:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h4>repeatElement</h4>

<p>指定した回数、処理を実行するときに利用する<code>Observable</code>型データを生成するオペレータです。<br/>
<code>take</code>メソッドを利用して回数を指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>   <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">repeatElement</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">take</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">source</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Elem is \(elem)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果は下記です。</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Elem</span> <span class="n">is</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>timer</h4>

<p>一定時間経過後に処理を実行したい場合に利用するオペレータです。<br/>
<code>JavaScript</code>で言うところの<code>setTimeout</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="nl">timer:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">timer</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="nl">scheduler:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'><span class="n">timer</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;log output&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて、今回は<code>Creating Observables</code>のみを取り上げさせて頂きましたが、いかがでしたでしょうか？<br/>
筆者もイマイチ使い方がわからなかったオペレータがたくさんあったので、多少なりとも使えそうな気がしてきました。<br/>
<code>Transforming Observables</code>, <code>Filtering Observables</code> &hellip;. と全て見ていけると良いのですが、結構数が多いですね。<br/>
時間があるときに続きを書きたいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2016/08/29/rxswift-2/"/>
    <updated>2016-08-29T22:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/08/29/rxswift-2</id>
    <content type="html"><![CDATA[<h3>RxSwiftの公式Exampleを覗いてみる(2)</h3>

<p>前回に引き続きRxSwiftの公式Exampleを見ていきたいと思います。<br/>
公式ソースは<a href="https://github.com/ReactiveX/RxSwift">GitHub: ReactiveX/RxSwift</a>からダウンロードできます。</p>

<h4>GeolocationExample</h4>

<p>位置情報を用いたときのRxの有効性が表現されているのでしょうか？<br/>
早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まずは、<code>CoreLocation</code>のコア部分をラップしている<code>GeolocationService</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">let</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// (1)</span>
</span><span class='line'>  <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">locationManager</span><span class="p">.</span><span class="n">distanceFilter</span> <span class="o">=</span> <span class="n">kCLDistanceFilterNone</span>
</span><span class='line'>      <span class="n">locationManager</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBestForNavigation</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// (2)</span>
</span><span class='line'>      <span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">locationManager</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">locationManager</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// (3)</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>              <span class="p">.</span><span class="n">rx_didChangeAuthorizationStatus</span>
</span><span class='line'>              <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="c1">// (4)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">NotDetermined</span><span class="p">)</span> <span class="c1">// (5)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">case</span> <span class="p">.</span><span class="nl">AuthorizedAlways:</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>                  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ソースでポイントとなる部分を見ていきます。</p>

<p>(1): <code>Driver</code><br/>
末尾に参考URLとして上げさせて頂いた記事に書かれているのですが、<br/>
<code>Driver</code>型で定義することで、エラー発生時の処理<code>asDriver</code>オペレータで続けて書くことができます。</p>

<p>(2): <code>deferred</code><br/>
ObserverがSubscribe(購読)されたタイミングで動的にObservableを生成します。<br/>
※ 因みに新規ObservableをSubscribeタイミングで毎回生成します。</p>

<p>(3): <code>just</code><br/>
引数に取った特定の型を返却するObservableを生成します。<br/>
この場合は<code>CLAuthorizationStatus</code>型のObservableです。</p>

<p>(4): <code>startWith</code><br/>
想定したemit対象値の前に何らかの値をemitしたい場合に利用します。<br/>
この場合、<code>rx_didChangeAuthoricationStatus</code>をemitする前にということでしょうか。<br/>
(これが恐らく、一番わかりやすい例です → <a href="http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#StartWith">Introduction to Rx: startWith</a>)</p>

<p>(5): <code>asDriver</code><br/>
(1)で説明した<code>Driver</code>に関係するオペレータです。<br/>
エラーが発生した場合に<code>onErrorJustReturn</code>で指定した値を返却して処理を続けます。</p>

<p>続いて、<code>GeolocationService</code>を利用している<code>GeolocationViewController</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (6)</span>
</span><span class='line'><span class="n">private</span> <span class="n">extension</span> <span class="n">UILabel</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">rx_driveCoordinates:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">UIBindingObserver</span><span class="p">(</span><span class="nl">UIElement:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">label</span><span class="p">,</span> <span class="n">location</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Lat: \(location.latitude)</span><span class="se">\n</span><span class="s">Lon: \(location.longitude)&quot;</span>
</span><span class='line'>      <span class="p">}.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (7)</span>
</span><span class='line'><span class="n">private</span> <span class="n">extension</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">rx_driveAuthorization:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">UIBindingObserver</span><span class="p">(</span><span class="nl">UIElement:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">view</span><span class="p">,</span> <span class="n">authorized</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">authorized</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">view</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>              <span class="n">view</span><span class="p">.</span><span class="n">superview</span><span class="o">?</span><span class="p">.</span><span class="n">sendSubviewToBack</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">view</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>              <span class="n">view</span><span class="p">.</span><span class="n">superview</span><span class="o">?</span><span class="p">.</span><span class="n">bringSubviewToFront</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">GeolocationViewController:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">noGeolocationView:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button2:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">label:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">geolocationService</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">.</span><span class="n">instance</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">geolocationService</span><span class="p">.</span><span class="n">authorized</span>
</span><span class='line'>          <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">noGeolocationView</span><span class="p">.</span><span class="n">rx_driveAuthorization</span><span class="p">)</span> <span class="c1">// (8)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">geolocationService</span><span class="p">.</span><span class="n">location</span>
</span><span class='line'>          <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">rx_driveCoordinates</span><span class="p">)</span> <span class="c1">// (8)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">button</span><span class="p">.</span><span class="n">rx_tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>              <span class="n">self</span><span class="o">?</span><span class="p">.</span><span class="n">openAppPreferences</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">button2</span><span class="p">.</span><span class="n">rx_tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>              <span class="n">self</span><span class="o">?</span><span class="p">.</span><span class="n">openAppPreferences</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">func</span> <span class="n">openAppPreferences</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">openURL</span><span class="p">(</span><span class="n">NSURL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">UIApplicationOpenSettingsURLString</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(6): <code>rx_driveCoordinates</code><br/>
見ての通りここで<code>UILabel</code>の<code>extension</code>をしています。<br/>
<code>UILabel</code>の<code>text</code>内容を任意の値で返却するために作成しています。<br/>
(<code>asObserver</code>をつけることで<code>rx_driveCoordinates</code>という<code>AnyObserver</code>型の変数定義を実現しています。)</p>

<p>(7): <code>rx_driveAuthorization</code><br/>
同じく<code>UIView</code>の<code>extension</code>をしています。<br/>
<code>authorized</code>の値でViewの表示/非表示を切り替えています。</p>

<p>(8): <code>drive</code><br/>
ここで新たにSubscriptionを生成して、引数に取ったObserverに処理の実行を要請しています。</p>

<p>今回のExampleを見てみると下記のようなメリットが感じられます。</p>

<ul>
<li>Rxを利用することで非同期処理を直列的に書ける</li>
<li>エラーハンドリングを直列的に書けることで後処理も直列的に統一して見れる(<code>jQuery</code>の<code>ajax</code>メソッドの<code>always</code>的なイメージ)</li>
<li>処理の拡張がRxで用意されたメソッドで比較的に容易に書ける</li>
</ul>


<h3>Rxで把握しておきたいAPI一覧</h3>

<p>RxSwiftをインストールすると中にドキュメントが含まれています。<br/>
<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md">API.md</a>を読むだけでもかなり理解が進むと思われます。</p>

<p>特に言語がSwiftであるが故に他のRxフレームワークとはメソッド名が異なる場合があります。<br/>
(<code>defer</code>でなく<code>deferred</code>、<code>repeat</code>でなく<code>repeatElement</code>など)</p>

<p>一度は目を通しておくと良いかもしれません。<br/>
と言いつつ、筆者も全然見れていませんが&hellip;</p>

<h3>まとめ</h3>

<p>さて、今回は公式Exampleの1つを見るだけに留まりましたが如何でしたでしょうか？<br/>
筆者としてはRxの使い方の理解がだいぶ進んだ気がしております。<br/>
引き続きRxに関する勉強は続けていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/yuzushioh/items/0a4483502c5c8569790a">RxSwift/RxCocoa Driver Unitについてまとめてみた。</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/08/21/rxswift-1/"/>
    <updated>2016-08-21T18:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/08/21/rxswift-1</id>
    <content type="html"><![CDATA[<h3>RxSwiftとは</h3>

<p>Reactive Extensions(以下、Rx)のSwift版です。<br/>
と一言で言っても、「Rxとはなんぞや？？」となってしまうかと思います。<br/>
(多分に漏れず、筆者もそうです&hellip;)<br/>
そこで、いろいろと調べてみると、</p>

<ul>
<li>「非同期/イベント/時間に関する処理をLINQの形式で簡潔かつ宣言的に記述すること」ができるのが特徴</li>
<li>観測可能 (observable) なシーケンスと LINQ スタイルのクエリ演算子を使って、非同期なイベントベースのプログラムを合成するライブラリ</li>
</ul>


<p>なんて話が出てきます。<br/>
確かに非同期処理はソースコードが複雑になりやすいので、何となくRxは良さそうな気がしてきました。<br/>
今回はまず触って慣れてみようということで見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>RxSwiftでUI</h3>

<p>まずはRxSwiftの書き方を覚えるためにUI関連から見てきましょう。</p>

<h4>サンプル画面</h4>

<p>下記のように画面を作成します。<br/>
<img src="http://grandbig.github.io/images/rxswift_1.png" alt="サンプル画面" /></p>

<h4>RxSwiftのインストール</h4>

<p>下記のように<code>Podfile</code>を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSample</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxSwift</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxCocoa</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSampleTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTests</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSampleUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTests</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、<code>pod install</code>を実行します。</p>

<h4>RxSwiftを用いたUIアクションを実装</h4>

<p>下記のようにアクションを実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// UI部品</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleBtn:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleTextField:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleLabel:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ボタンタップアクション</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleBtn</span><span class="p">.</span><span class="n">rx_tap</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">unowned</span> <span class="n">self</span><span class="p">]</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">showAlert</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// テキストフィールドの入力アクション</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleTextField</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="s">&quot;Your Text is \($0)&quot;</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sampleTextField</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;Sample Alert&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;Can you see a sample alert?&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// 特に何もしない</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>
</span><span class='line'>      <span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のUIアクションはあまりにも単純な例であるため、恩恵を受けられている気はしないですね&hellip;<br/>
いつものようにXcodeでアクションを繋げているのと同じ気がする&hellip;</p>

<h3>RxSwiftの公式Exampleを覗いてみる</h3>

<p>先ほどの例ではイマイチ良さがわからなかったので、公式のExampleを覗いてみます。<br/>
公式のExampleは<a href="https://github.com/ReactiveX/RxSwift">GitHub: ReactiveX/RxSwift</a>からダウンロードできます。</p>

<h4>NumbersViewController</h4>

<p>最も簡単なExampleはこれになるかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">NumbersViewController:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number1:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number2:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number3:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">result:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// 注目！！</span>
</span><span class='line'>      <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">number1</span><span class="p">.</span><span class="n">rx_text</span><span class="p">,</span> <span class="n">number2</span><span class="p">.</span><span class="n">rx_text</span><span class="p">,</span> <span class="n">number3</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span> <span class="p">{</span> <span class="n">textValue1</span><span class="p">,</span> <span class="n">textValue2</span><span class="p">,</span> <span class="n">textValue3</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue1</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue2</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue3</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">description</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目したいのは<code>Observable.combineLatest</code>です。<br/>
Exampleではこれを利用して一気に3つの<code>UITextField</code>から値を取得して、合計値を計算しています。<br/>
<code>Obsertvable.combineLatest</code>は名前から察することができると思いますが、3つの<code>UITextField</code>のいずれかの値が変わったタイミングで合計値が再計算されます。</p>

<p>これだけでも少し便利な感じが伝わってきました。</p>

<h4>SimpleValidationViewController</h4>

<p>続いて着手しやすいExampleはこちらになりそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">minimalUsernameLength</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">let</span> <span class="n">minimalPasswordLength</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SimpleValidationViewController</span> <span class="o">:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">usernameOutlet:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">usernameValidOutlet:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">passwordOutlet:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">passwordValidOutlet:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">doSomethingOutlet:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValidOutlet</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Username has to be at least \(minimalUsernameLength) characters&quot;</span>
</span><span class='line'>      <span class="n">passwordValidOutlet</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Password has to be at least \(minimalPasswordLength) characters&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 注目！！</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">usernameValid</span> <span class="o">=</span> <span class="n">usernameOutlet</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">minimalUsernameLength</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">passwordValid</span> <span class="o">=</span> <span class="n">passwordOutlet</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">minimalPasswordLength</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">everythingValid</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">usernameValid</span><span class="p">,</span> <span class="n">passwordValid</span><span class="p">)</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&amp;&amp;</span> <span class="n">$1</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">passwordOutlet</span><span class="p">.</span><span class="n">rx_enabled</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">usernameValidOutlet</span><span class="p">.</span><span class="n">rx_hidden</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">passwordValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">passwordValidOutlet</span><span class="p">.</span><span class="n">rx_hidden</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">everythingValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">doSomethingOutlet</span><span class="p">.</span><span class="n">rx_enabled</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">doSomethingOutlet</span><span class="p">.</span><span class="n">rx_tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="k">in</span> <span class="n">self</span><span class="o">?</span><span class="p">.</span><span class="n">showAlert</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">alertView</span> <span class="o">=</span> <span class="n">UIAlertView</span><span class="p">(</span>
</span><span class='line'>          <span class="nl">title:</span> <span class="s">&quot;RxExample&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">message:</span> <span class="s">&quot;This is wonderful&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">delegate:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">cancelButtonTitle:</span> <span class="s">&quot;OK&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">alertView</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目したいのは<code>shareReplay(1)</code>という記述です。<br/>
このExampleでは、<br/>
<code>username</code>のバリデーションをクリアしていれば、<code>passwordOutlet.rx_enabled</code>と<code>usernameValidOutlet.rx_hidden</code>の2つを実行するように実装されています。</p>

<p>通常だと、<code>usernameValid</code>が2回実行されてしまうところを<code>shareReplay(1)</code>をつけることで、最適な回数だけ実行してくれます。<br/>
詳しくは、<a href="http://qiita.com/kazu0620/items/bde4a65e82a10bd33f88">hareReplayをちゃんと書いてお行儀良くストリームを購読しよう</a>を読むと良いでしょう。</p>

<p>ここまで来ると<code>RxSwift</code>の有効性を許容せざるを得ませんね。</p>

<h3>まとめ</h3>

<p>今回簡単に触っただけでも、Rxはかなり有効なものであると感じました。<br/>
非同期処理や互いに関連性を持つ複雑な処理を実装する際にはぜひRxを使ってみたいと思いました。</p>

<p>本当はもっとExampleを追っていきたいのですが、一旦ここまでとさせて頂きます。<br/>
(単なる時間切れなので、続きは必ず書きたいを思っています。)</p>

<p>ということで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://github.com/ReactiveX/RxSwift">GitHub: ReactiveX/RxSwift</a></li>
<li><a href="http://qiita.com/nakailand/items/8b54dc9b4b39b0809c57">RxSwiftの道標</a></li>
<li><a href="http://qiita.com/usamik26/items/2bbd0b8d304ab42b2279">RxSwift で UIKit を扱う基本</a></li>
<li><a href="http://okapies.hateblo.jp/entry/2015/03/04/031148">関数型プログラマのための Rx 入門（前編）</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift ExpressでAjax通信してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/31/swift-express-2/"/>
    <updated>2016-07-31T23:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/31/swift-express-2</id>
    <content type="html"><![CDATA[<h3>Swift ExpressでPOSTリクエスト投げてみよう！</h3>

<p>さて、本日は<a href="https://github.com/crossroadlabs/Express">Swift Express</a>の続きを試してみます。<br/>
<a href="http://grandbig.github.io/blog/2016/07/10/swift-express/">前回</a>はインストール方法とデフォルト画面の表示までを紹介しましたが、<br/>
今回はAjax通信によるPOSTリクエストを投げてみたいと思います。</p>

<h4>サーバサイドの対応</h4>

<p>まずは、サーバサイドの準備です。<br/>
<code>main.swift</code>を修正しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Express</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">app</span> <span class="o">=</span> <span class="n">express</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">views</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">StencilViewEngine</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">ここを追加</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">views</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">JsonView</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;/assets/:file+&quot;</span><span class="p">,</span> <span class="nl">action:</span> <span class="n">StaticAction</span><span class="p">(</span><span class="nl">path:</span> <span class="s">&quot;public&quot;</span><span class="p">,</span> <span class="nl">param:</span><span class="s">&quot;file&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">request:</span><span class="n">Request</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">,</span> <span class="nl">context:</span> <span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="o">:</span> <span class="s">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s">&quot;swift&quot;</span><span class="o">:</span> <span class="s">&quot;Swift&quot;</span><span class="p">,</span> <span class="s">&quot;express&quot;</span><span class="o">:</span> <span class="s">&quot;Express!&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">ここを追加</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">&quot;/:param&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">request:</span><span class="n">Request</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="s">&quot;ok&quot;</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="o">:</span> <span class="s">&quot;Post Request Succesfully&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Action</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">JsonView</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nl">context:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">9999</span><span class="p">).</span><span class="n">onSuccess</span> <span class="p">{</span> <span class="n">server</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Express was successfully launched on port&quot;</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>app.views.register(JsonView())</code>を追加することで、JSON形式のデータを返却できるようになります。<br/>
また、返却レスポンスは<code>dictionary</code>型で書けばOKなようです。</p>

<h4>クライアントサイドの対応</h4>

<p>続いて、クライアントサイドの準備です。<br/>
手っ取り早くjQuery使いましょう。<br/>
<a href="https://jquery.com/">こちらのページ</a>から最新のjQueryをダウンロードしてきます。</p>

<p>そして、<code>index.js</code>をさくっと作っちゃいましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#touch&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Ajax通信</span>
</span><span class='line'>      <span class="nx">ajax</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">ajax</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://localhost:9999/1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;error!!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらjsファイルを読み込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>// index.stencil
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>  <span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;https://fonts.googleapis.com/css?family=Source+Sans+Pro:700italic,700&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;/assets/css/main.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span> <span class="na">src=</span><span class="s">&quot;/assets/logo.png&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span> <span class="nt">&lt;i&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;swift&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;/i&gt;&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;touch&quot;</span><span class="nt">&gt;</span>ここをタッチ！！<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                                                          
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/js/jquery-3.1.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/js/index.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけで下図のようにPOSTリクエストが通りました。</p>

<p><img src="http://grandbig.github.io/images/swift-express-3.png" alt="POSTリクエスト" /></p>

<p>というところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitでリモートにPushした内容を取り消したい！！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/16/git-reset/"/>
    <updated>2016-07-16T22:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/16/git-reset</id>
    <content type="html"><![CDATA[<h3>SourceTreeでgit resetを使いこなそう！</h3>

<p>さて、本日は <strong>Git</strong> について書きます。<br/>
皆さんは、GitでリモートにPushした内容を取り消したくなることがありませんでしょうか？<br/>
そんなときに利用するのが<code>git reset</code>コマンドです。</p>

<p>リモートにPushした内容ということは自分だけの範疇では収まらないため、他の人に影響が出るかもしれません。<br/>
それって考えてみると非常に怖いですよね&hellip;。<br/>
しかし、どうしてもリモートの内容を修正したいことが出てきます。<br/>
今回はそんな不安を跳ね飛ばすべく実際に練習してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>git reset</h3>

<p>今回扱うGitのRepositoryはこちらです。<br/>
<img src="http://grandbig.github.io/images/git_reset_1.png" alt="Git Repository" /></p>

<p>では実際に<code>git reset</code>を実行してみましょう。</p>

<h4>git reset &mdash;soft</h4>

<p>まずは<code>git reset --soft</code>を実行してみます。<br/>
SourceTreeでは下記の手順で実行します。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Soft</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_2.png" alt="Softモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>master</code>に反映した分を別ブランチに持って行きたい場合は別ブランチを切って、そちらにコミットすれば良いです。</p>

<p><img src="http://grandbig.github.io/images/git_reset_3.png" alt="別ブランチに反映" /></p>

<p>続いて、リモートの<code>master</code>からプッシュ分を取り除くためには、ローカルの<code>master</code>の状態をプッシュしなくてはなりません。<br/>
SourceTreeでは強制プッシュはデフォルトでOFFになっているため、設定を変更する必要があります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_4.png" alt="SourceTreeで強制プッシュをONに変更" /></p>

<p>4．強制プッシュを実行する</p>

<p>これにより、Gitの状態は下図のようになります。<br/>
<img src="http://grandbig.github.io/images/git_reset_5.png" alt="Git Repositoryの結果" /></p>

<h4>git reset &mdash;mixed</h4>

<p>続いて<code>git reset --mixed</code>を実行してみます。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Mixed</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_6.png" alt="Mixedモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>soft</code>と異なるのは <strong>コミットだけでなくaddも取り除ける</strong> ということです。</p>

<p><img src="http://grandbig.github.io/images/git_reset_7.png" alt="mixedを実行した状態" /></p>

<p>もちろん<code>soft</code>のときと同様に別ブランチに内容を反映させることができます。</p>

<p><img src="http://grandbig.github.io/images/git_reset_8.png" alt="別ブランチに反映" /></p>

<p>4．強制プッシュを実行する</p>

<p>強制プッシュ実行後は下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_9.png" alt="Git Repositoryの結果" /></p>

<h4>git reset &mdash;hard</h4>

<p>最後に<code>git reset --hard</code>を実行してみます。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Hard</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_10.png" alt="Hardモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>soft</code>や<code>mixed</code>と異なり、作業内容が一切削除されます。</p>

<p><img src="http://grandbig.github.io/images/git_reset_11.png" alt="hardを実行した状態" /></p>

<p>4．強制プッシュを実行する</p>

<p>強制プッシュ実行後は下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_9.png" alt="Git Repositoryの結果" /></p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
通常はあまりやりたくない操作ではありますが、必要となるタイミングは必ずくるはずなので知っておいて損はないでしょう。<br/>
筆者も早速3連休明けから使いそうな予感が&hellip;。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Expressを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/10/swift-express/"/>
    <updated>2016-07-10T22:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/10/swift-express</id>
    <content type="html"><![CDATA[<h3>今注目のサーバーサイドSwift</h3>

<p>本日はサーバーサイドSwiftのWebフレームワークの1つである<a href="https://github.com/crossroadlabs/Express">Swift Express</a>を紹介したいと思います。<br/>
近年、AppleからSwiftのOSS化が発表されたことで一気に動き出したのがGitHub上でのWebフレームワーク作成合戦です。<br/>
筆者が知っているだけでも、</p>

<ul>
<li><a href="https://github.com/PerfectlySoft/Perfect">Perfect</a></li>
<li><a href="https://github.com/qutheory/vapor">Vapor</a></li>
<li><a href="https://github.com/IBM-Swift/Kitura-Starter-Bluemix">Kitura</a></li>
<li><a href="https://github.com/slimane-swift">Sliman</a></li>
</ul>


<p>などが上げられます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>そんな中、筆者の目に止まったのが、 <strong>Swift Express</strong> でした。<br/>
本ブログでも度々 <strong>Node.js</strong> を触ったことがあると述べてきたように、筆者は <strong>Node.js</strong> でサーバサイド実装の経験があります。<br/>
その際に利用していたWebフレームワークに<a href="http://expressjs.com/">Express</a>というものがありました。<br/>
Expressは <strong>Node.js</strong> でいとも簡単にベースとなるサーバサイド実装を提供してくれます。</p>

<p>Swiftの経験はあるものの、サーバサイドSwiftの実装経験がない筆者にとっては『願ってもないWebフレームワークじゃないか！』ということで <strong>Swift Express</strong> に惹かれたのです。<br/>
さて、本日はそんな <strong>Swift Express</strong> を見ていきたいと思います。</p>

<h3>Swift Expressをインストールしよう</h3>

<p>まずは、Swift Expressをインストールしてみます。<br/>
<code>homebrew</code>でインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">brew</span> <span class="nx">tap</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">brew</span> <span class="nx">install</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span>
</span></code></pre></td></tr></table></div></figure>


<p>手順(1)を実行すると、下記のように結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">==&gt;</span> <span class="nx">Tapping</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'><span class="nx">Cloning</span> <span class="nx">into</span> <span class="s1">&#39;/usr/local/Library/Taps/crossroadlabs/homebrew-tap&#39;</span><span class="p">...</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Counting</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Compressing</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">7</span><span class="o">/</span><span class="mi">7</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Total</span> <span class="mi">8</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">reused</span> <span class="mi">6</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">pack</span><span class="o">-</span><span class="nx">reused</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">Unpacking</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">8</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Checking</span> <span class="nx">connectivity</span><span class="p">...</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Tapped</span> <span class="mi">2</span> <span class="nx">formulae</span> <span class="p">(</span><span class="mi">34</span> <span class="nx">files</span><span class="p">,</span> <span class="mf">72.7</span><span class="nx">K</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、手順(2)を実行すると、下記のように結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">from</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">dependencies</span> <span class="k">for</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">:</span> <span class="nx">openssl</span><span class="p">,</span> <span class="nx">cmake</span><span class="p">,</span> <span class="nx">libevent</span><span class="p">,</span> <span class="nx">libevhtp</span><span class="p">,</span> <span class="nx">carthage</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">dependency</span><span class="o">:</span> <span class="nx">openssl</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Downloading</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//homebrew.bintray.com/bottles/openssl-1.0.2h_1.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="err">########################################################################</span> <span class="mf">100.0</span><span class="o">%</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Pouring</span> <span class="nx">openssl</span><span class="o">-</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">2</span><span class="nx">h_1</span><span class="p">.</span><span class="nx">el_capitan</span><span class="p">.</span><span class="nx">bottle</span><span class="p">.</span><span class="nx">tar</span><span class="p">.</span><span class="nx">gz</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Caveats</span>
</span><span class='line'><span class="nx">A</span> <span class="nx">CA</span> <span class="nx">file</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">bootstrapped</span> <span class="nx">using</span> <span class="nx">certificates</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">system</span>
</span><span class='line'><span class="nx">keychain</span><span class="p">.</span> <span class="nx">To</span> <span class="nx">add</span> <span class="nx">additional</span> <span class="nx">certificates</span><span class="p">,</span> <span class="nx">place</span> <span class="p">.</span><span class="nx">pem</span> <span class="nx">files</span> <span class="k">in</span>
</span><span class='line'>  <span class="err">/usr/local/etc/openssl/certs</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">and</span> <span class="nx">run</span>
</span><span class='line'>    <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">opt</span><span class="o">/</span><span class="nx">openssl</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">c_rehash</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">This</span> <span class="nx">formula</span> <span class="nx">is</span> <span class="nx">keg</span><span class="o">-</span><span class="nx">only</span><span class="p">,</span> <span class="nx">which</span> <span class="nx">means</span> <span class="nx">it</span> <span class="nx">was</span> <span class="nx">not</span> <span class="nx">symlinked</span> <span class="nx">into</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Apple</span> <span class="nx">has</span> <span class="nx">deprecated</span> <span class="nx">use</span> <span class="nx">of</span> <span class="nx">OpenSSL</span> <span class="k">in</span> <span class="nx">favor</span> <span class="nx">of</span> <span class="nx">its</span> <span class="nx">own</span> <span class="nx">TLS</span> <span class="nx">and</span> <span class="nx">crypto</span> <span class="nx">libraries</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Generally</span> <span class="nx">there</span> <span class="nx">are</span> <span class="nx">no</span> <span class="nx">consequences</span> <span class="nx">of</span> <span class="k">this</span> <span class="k">for</span> <span class="nx">you</span><span class="p">.</span> <span class="nx">If</span> <span class="nx">you</span> <span class="nx">build</span> <span class="nx">your</span>
</span><span class='line'>  <span class="nx">own</span> <span class="nx">software</span> <span class="nx">and</span> <span class="nx">it</span> <span class="nx">requires</span> <span class="k">this</span> <span class="nx">formula</span><span class="p">,</span> <span class="nx">you</span><span class="s1">&#39;ll need to add to your</span>
</span><span class='line'><span class="s1"> build variables:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">     LDFLAGS:  -L/usr/local/opt/openssl/lib</span>
</span><span class='line'><span class="s1">     CPPFLAGS: -I/usr/local/opt/openssl/include</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; Summary</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/openssl/1.0.2h_1: 1,691 files, 12M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: cmake</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://homebrew.bintray.com/bottles/cmake-3.6.0.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring cmake-3.6.0.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">==&gt; Caveats</span>
</span><span class='line'><span class="s1">Emacs Lisp files have been installed to:</span>
</span><span class='line'><span class="s1">  /usr/local/share/emacs/site-lisp/cmake</span>
</span><span class='line'><span class="s1">  ==&gt; Summary</span>
</span><span class='line'><span class="s1">  🍺  /usr/local/Cellar/cmake/3.6.0: 2,028 files, 27.8M</span>
</span><span class='line'><span class="s1">  ==&gt; Installing crossroadlabs/tap/swift-express dependency: libevent</span>
</span><span class='line'><span class="s1">  ==&gt; Downloading https://homebrew.bintray.com/bottles/libevent-2.0.22.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring libevent-2.0.22.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/libevent/2.0.22: 53 files, 1.6M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: libevhtp</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://github.com/ellzey/libevhtp/archive/1.2.10.tar.gz</span>
</span><span class='line'><span class="s1">==&gt; Downloading from https://codeload.github.com/ellzey/libevhtp/tar.gz/1.2.10</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">Warning: SHA1 support is deprecated and will be removed in a future version.</span>
</span><span class='line'><span class="s1">Please switch this formula to SHA256.</span>
</span><span class='line'><span class="s1">==&gt; cmake . -DEVHTP_DISABLE_REGEX:STRING=ON -DEVHTP_BUILD_SHARED:STRING=ON -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=/usr/local/Cell</span>
</span><span class='line'><span class="s1">==&gt; make install</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/libevhtp/1.2.10: 9 files, 151.5K, built in 48 seconds</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: carthage</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://homebrew.bintray.com/bottles/carthage-0.17.2.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring carthage-0.17.2.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/carthage/0.17.2: 45 files, 11.9M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express</span>
</span><span class='line'><span class="s1">==&gt; Cloning https://github.com/crossroadlabs/ExpressCommandLine.git</span>
</span><span class='line'><span class="s1">Cloning into &#39;</span><span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">kato_takahiro</span><span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Caches</span><span class="o">/</span><span class="nx">Homebrew</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">--</span><span class="nx">git</span><span class="s1">&#39;...</span>
</span><span class='line'><span class="s1">remote: Counting objects: 67, done.</span>
</span><span class='line'><span class="s1">remote: Compressing objects: 100% (63/63), done.</span>
</span><span class='line'><span class="s1">remote: Total 67 (delta 21), reused 25 (delta 1), pack-reused 0</span>
</span><span class='line'><span class="s1">Unpacking objects: 100% (67/67), done.</span>
</span><span class='line'><span class="s1">Checking connectivity... done.</span>
</span><span class='line'><span class="s1">Note: checking out &#39;</span><span class="nx">fae821f4d52c9dfb4e4c34ab0a4297ea700c9db1</span><span class="s1">&#39;.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">You are in &#39;</span><span class="nx">detached</span> <span class="nx">HEAD</span><span class="err">&#39;</span> <span class="nx">state</span><span class="p">.</span> <span class="nx">You</span> <span class="nx">can</span> <span class="nx">look</span> <span class="nx">around</span><span class="p">,</span> <span class="nx">make</span> <span class="nx">experimental</span>
</span><span class='line'><span class="nx">changes</span> <span class="nx">and</span> <span class="nx">commit</span> <span class="nx">them</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">discard</span> <span class="nx">any</span> <span class="nx">commits</span> <span class="nx">you</span> <span class="nx">make</span> <span class="k">in</span> <span class="k">this</span>
</span><span class='line'><span class="nx">state</span> <span class="nx">without</span> <span class="nx">impacting</span> <span class="nx">any</span> <span class="nx">branches</span> <span class="nx">by</span> <span class="nx">performing</span> <span class="nx">another</span> <span class="nx">checkout</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">If</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="nx">create</span> <span class="nx">a</span> <span class="k">new</span> <span class="nx">branch</span> <span class="nx">to</span> <span class="nx">retain</span> <span class="nx">commits</span> <span class="nx">you</span> <span class="nx">create</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">may</span>
</span><span class='line'><span class="k">do</span> <span class="nx">so</span> <span class="p">(</span><span class="nx">now</span> <span class="nx">or</span> <span class="nx">later</span><span class="p">)</span> <span class="nx">by</span> <span class="nx">using</span> <span class="o">-</span><span class="nx">b</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">checkout</span> <span class="nx">command</span> <span class="nx">again</span><span class="p">.</span> <span class="nx">Example</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">git</span> <span class="nx">checkout</span> <span class="o">-</span><span class="nx">b</span> <span class="o">&lt;</span><span class="k">new</span><span class="o">-</span><span class="nx">branch</span><span class="o">-</span><span class="nx">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">tag</span> <span class="mf">0.2</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">carthage</span> <span class="nx">update</span> <span class="o">--</span><span class="nx">platform</span> <span class="nx">Mac</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">use</span><span class="o">-</span><span class="nx">binaries</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">build</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Commandant</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Nimble</span> <span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Commandant</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Quick</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">carthage</span> <span class="nx">build</span> <span class="o">--</span><span class="nx">platform</span> <span class="nx">Mac</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">xcodebuild</span> <span class="nx">SYMROOT</span><span class="o">=</span><span class="nx">build</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Caveats</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">app</span> <span class="nx">bundles</span> <span class="nx">were</span> <span class="nx">installed</span><span class="p">.</span>
</span><span class='line'>      <span class="nx">Run</span> <span class="err">`</span><span class="nx">brew</span> <span class="nx">linkapps</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="err">`</span> <span class="nx">to</span> <span class="nx">symlink</span> <span class="nx">these</span> <span class="nx">to</span> <span class="o">/</span><span class="nx">Applications</span><span class="p">.</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Summary</span>
</span><span class='line'>      <span class="err">🍺</span>  <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">Cellar</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">/</span><span class="mf">0.2</span><span class="p">.</span><span class="mi">2</span><span class="o">:</span> <span class="mi">30</span> <span class="nx">files</span><span class="p">,</span> <span class="mf">7.3</span><span class="nx">M</span><span class="p">,</span> <span class="nx">built</span> <span class="k">in</span> <span class="mi">3</span> <span class="nx">minutes</span> <span class="mi">5</span> <span class="nx">seconds</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、見過ごしがちですが、<br/>
最後の方に『<code>brew linkapps swift-express</code> to symlink these to /Applications.』と書かれているので、</p>

<p><code>brew linkapps swift-express</code>を実行しておきましょう。</p>

<p>ここまで来たら、<code>swift-express</code>を実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Available</span> <span class="nx">commands</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bootstrap</span>   <span class="nx">download</span> <span class="nx">and</span> <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="nx">build</span>       <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">help</span>        <span class="nx">Display</span> <span class="nx">general</span> <span class="nx">or</span> <span class="nx">command</span><span class="o">-</span><span class="nx">specific</span> <span class="nx">help</span>
</span><span class='line'><span class="nx">init</span>        <span class="nx">Creates</span> <span class="k">new</span> <span class="nx">Express</span> <span class="nx">application</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">run</span>         <span class="nx">run</span> <span class="nx">Express</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">update</span>      <span class="nx">update</span> <span class="nx">and</span> <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="nx">version</span>     <span class="nx">Display</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">version</span> <span class="nx">of</span> <span class="nx">Swift</span> <span class="nx">Express</span> <span class="nx">Command</span> <span class="nx">Line</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにコマンド種別が表示されたら、正しく <strong>Swift Express</strong> がインストールされた証拠です。</p>

<h3>Swift Expressのプロジェクトを作ろう！</h3>

<p>Swift Expressのインストールが完了したので、早速プロジェクト作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">init</span> <span class="o">&lt;</span><span class="err">プロジェクト名</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">cd</span> <span class="o">&lt;</span><span class="err">プロジェクト名</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(3)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">bootstrap</span>
</span></code></pre></td></tr></table></div></figure>


<p>手順(1)を実行すると、下記の結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cloning</span> <span class="nx">into</span> <span class="s1">&#39;/var/folders/hj/p9y9d00s3sb5nn_x04961z2m0000gn/T/swift-express-827699&#39;</span><span class="p">...</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Counting</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">124</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Total</span> <span class="mi">124</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">reused</span> <span class="mi">0</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">pack</span><span class="o">-</span><span class="nx">reused</span> <span class="mi">124</span>
</span><span class='line'><span class="nx">Receiving</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">124</span><span class="o">/</span><span class="mi">124</span><span class="p">),</span> <span class="mf">79.66</span> <span class="nx">KiB</span> <span class="o">|</span> <span class="mi">0</span> <span class="nx">bytes</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Resolving</span> <span class="nx">deltas</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">33</span><span class="o">/</span><span class="mi">33</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Checking</span> <span class="nx">connectivity</span><span class="p">...</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;init&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、手順(2)で作成したプロジェクトフォルダ配下に移動すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HelloExpress</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Cartfile</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">HelloExpress</span><span class="p">.</span><span class="nx">xcodeproj</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Info</span><span class="p">.</span><span class="nx">plist</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Package</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">app</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">main</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">dist</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="kr">public</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┣━━</span> <span class="nx">css</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">main</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">logo</span><span class="p">.</span><span class="nx">png</span>
</span><span class='line'>  <span class="err">┗━━</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった形で構成されていることを確認できます。</p>

<p>最後に手順(3)を実行すると、下記の結果が表示されます。<br/>
(ここが最も時間のかかる工程になります。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">***</span> <span class="nx">No</span> <span class="nx">Cartfile</span><span class="p">.</span><span class="nx">resolved</span> <span class="nx">found</span><span class="p">,</span> <span class="nx">updating</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Express</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Stencil</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">GRMustache</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">CEVHTP</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">PathToRegex</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Regex</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">TidyJSON</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">BrightFutures</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">PathKit</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">ExecutionContext</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Result</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">CEVHTP</span> <span class="nx">at</span> <span class="s2">&quot;0.1.0&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">ExecutionContext</span> <span class="nx">at</span> <span class="s2">&quot;0.3.1&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Result</span> <span class="nx">at</span> <span class="s2">&quot;1.0.3&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">GRMustache</span><span class="p">.</span><span class="nx">swift</span> <span class="nx">at</span> <span class="s2">&quot;bf7d6031d7e0dd862519eaba2b36b2e11a0d25a9&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Regex</span> <span class="nx">at</span> <span class="s2">&quot;0.5.2&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">PathToRegex</span> <span class="nx">at</span> <span class="s2">&quot;0.2.2&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">PathKit</span> <span class="nx">at</span> <span class="s2">&quot;0.6.1&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">BrightFutures</span> <span class="nx">at</span> <span class="s2">&quot;0.4.0&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Stencil</span> <span class="nx">at</span> <span class="s2">&quot;0.5.3&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Express</span> <span class="nx">at</span> <span class="s2">&quot;0.3.6&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">TidyJSON</span> <span class="nx">at</span> <span class="s2">&quot;1.1.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/Users/</span><span class="o">******</span><span class="cm">/****/</span><span class="nx">HelloExpress</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Express</span><span class="o">/</span><span class="nx">Express</span><span class="o">/</span><span class="nx">Content</span><span class="p">.</span><span class="nx">swift</span><span class="o">:</span><span class="mi">39</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="nx">warning</span><span class="o">:</span> <span class="nx">use</span> <span class="nx">of</span> <span class="s1">&#39;typealias&#39;</span> <span class="nx">to</span> <span class="nx">declare</span> <span class="nx">associated</span> <span class="nx">types</span> <span class="nx">is</span> <span class="nx">deprecated</span><span class="p">;</span> <span class="nx">use</span> <span class="s1">&#39;associatedtype&#39;</span> <span class="nx">instead</span>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;bootstrap&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでプロジェクトの作成は完了です。</p>

<h3>プロジェクトを実行してみよう！</h3>

<p>先ほど作成したプロジェクトを実行してみたいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">build</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>早速、ビルドを実行するために手順(1)のコマンドを叩いてください。<br/>
すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Building</span> <span class="nx">HelloExpress</span> <span class="k">in</span> <span class="nx">Debug</span> <span class="nx">mode</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="nx">BUILD</span> <span class="nx">TARGET</span> <span class="nx">HelloExpress</span> <span class="nx">OF</span> <span class="nx">PROJECT</span> <span class="nx">HelloExpress</span> <span class="nx">WITH</span> <span class="nx">CONFIGURATION</span> <span class="nx">Debug</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span> <span class="nx">BUILD</span> <span class="nx">SUCCEEDED</span> <span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;build&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>という結果が表示されます。<br/>
問題がなければ<code>BUILD SUCCEEDED</code>が表示されるはずです。</p>

<p>ビルドが成功したら、手順(2)を実行しましょう。<br/>
すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Running</span> <span class="nx">HelloExpress</span><span class="p">...</span>
</span><span class='line'><span class="nx">Express</span> <span class="nx">was</span> <span class="nx">successfully</span> <span class="nx">launched</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9999</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように表示されます。デフォルトでポート番号が <strong>9999</strong> になっていることがわかると思います。<br/>
<code>http://localhost:9999</code>にアクセスしてみると、</p>

<p><img src="http://grandbig.github.io/images/swift-express-1.png" alt="Swift Express TOPページ" /></p>

<p>という画面が得られます。</p>

<p>因みにですが、Xcodeからも<code>Build</code>＆<code>Run</code>はできます。</p>

<p><img src="http://grandbig.github.io/images/swift-express-2.png" alt="XcodeからBuild &amp; Run" /></p>

<h3>Swift Expressの中身を見てみよう！</h3>

<p>最後にざっくり中身のソースを見てみようと思います。<br/>
Swift Expressのメインソースである<code>main.swift</code>を見てみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app/main.swift</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">Express</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (1)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">views</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">StencilViewEngine</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (2)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/assets/:file+&quot;</span><span class="p">,</span> <span class="nx">action</span><span class="o">:</span> <span class="nx">StaticAction</span><span class="p">(</span><span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="nx">param</span><span class="o">:</span><span class="s2">&quot;file&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (3)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nx">request</span><span class="o">:</span><span class="nx">Request</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="nx">Action</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Action</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="nx">context</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s2">&quot;swift&quot;</span><span class="o">:</span> <span class="s2">&quot;Swift&quot;</span><span class="p">,</span> <span class="s2">&quot;express&quot;</span><span class="o">:</span> <span class="s2">&quot;Express!&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (4)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9999</span><span class="p">).</span><span class="nx">onSuccess</span> <span class="p">{</span> <span class="nx">server</span> <span class="k">in</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="s2">&quot;Express was successfully launched on port&quot;</span><span class="p">,</span> <span class="nx">server</span><span class="p">.</span><span class="nx">port</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <strong>Node.js</strong> 経験者としてはかなりExpressに酷似してるなと感じます。<br/>
順に追ってみていきます。</p>

<p>(1): 描画エンジンを設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(2): 静的ファイルの格納場所を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(3): リクエストのアクションパスと処理を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// route/index.js</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(4): ポート番号を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bin/www</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">normalizePort</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="s1">&#39;3000&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;listening&#39;</span><span class="p">,</span> <span class="nx">onListening</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onListening</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addr</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bind</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">addr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="o">?</span> <span class="s1">&#39;pipe &#39;</span> <span class="o">+</span> <span class="nx">addr</span>
</span><span class='line'>      <span class="o">:</span> <span class="s1">&#39;port &#39;</span> <span class="o">+</span> <span class="nx">addr</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Listening on &#39;</span> <span class="o">+</span> <span class="nx">bind</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
これだけNode.jsのExpressに似ているのですから、<br/>
<strong>Swift Express</strong> はこれからサーバサイドSwiftを学んでいく上で強力なWebフレームワークとなるかもしれません。<br/>
新しくNode.jsを学ぶ人も将来的にサーバサイドSwiftを触る機会が出てくるかもしれませんので知っておいて損はないでしょう。<br/>
筆者もこれまら益々注目されるであろうサーバサイドSwiftの情報は追っていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昔関わったNode.jsを思い出してみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/09/remember-node-js/"/>
    <updated>2016-07-09T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/09/remember-node-js</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は久しぶりにNode.jsについて書きたいと思います。<br/>
筆者が本格的にNode.jsを触っていたのは、3〜4年ほど前で、当時は今ほど存在が浸透してはいませんでした。<br/>
それが今やサーバサイドの処理作成の選択肢の1つとして普通に検討される時代になりました。<br/>
正直なところ、最新のNode.jsを追えているわけではないのですが、<br/>
その本質は今も昔も大きくは変わっていないだろうと思いつつ、筆者の経験を元にNode.jsを見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Node.jsとは</h3>

<p>Node.jsは2009年にライアン・ダールによって作成された『JavaScriptをサーバサイドで実行可能にしてくれるプログラム』です。<br/>
JavaScriptエンジンは <strong>Google V8 JavaScript エンジン</strong> を使っています。<br/>
因みに、 <strong>Google V8 JavaScript エンジン</strong> とは、</p>

<ul>
<li>ECMAScript5に準拠</li>
<li>C++で記述されている</li>
<li>スタンドアローンで動作可能</li>
<li>Google Chromeでも使われている</li>
</ul>


<p>というものです。<br/>
これを見ただけでも何となくすごいな〜と思ってしまいますね笑。</p>

<p>Node.jsの公式サイトは<a href="https://nodejs.org/en/">こちら</a>です。<br/>
日本ユーザグループサイトもありますが、今は活動的に更新されていません。</p>

<h3>Node.jsの特徴</h3>

<p>続いて、Node.jsの特徴を見ていきましょう。<br/>
Node.jsの特徴は、何と言っても</p>

<ul>
<li>イベントループモデル</li>
<li>Non-blocking I/O</li>
<li>シングルスレッド</li>
</ul>


<p>ではないでしょうか。<br/>
筆者がNode.jsを触っていた時は正直全く理解していなかったのですが、<br/>
これらこそがNode.jsの本質でしょう。</p>

<h4>イベントループモデル</h4>

<p>イベントループモデルと一言聞くと、「なんぞや！？」となってしまいそうですが、</p>

<ul>
<li>イベントの発火を常に監視しているループ</li>
<li>イベントの発火を受け付けると、イベントキューに格納される</li>
<li>受付順にイベントを処理していく</li>
</ul>


<p>という方式のことです。</p>

<h4>Non-blocking I/O</h4>

<p>I/O処理を受け付けた場合、I/O処理が完了するまで待つ(Blockされる)のが通常です。<br/>
Node.jsではI/O処理を投げつけた間、他にやるべき処理があれば進んで実行してくれます。<br/>
よって <strong>Non-blocking I/O</strong> と呼ばれています。</p>

<h4>シングルスレッド</h4>

<p>言葉のとおりですが、複数のリクエストを1つのスレッドで実行するということです。<br/>
複数スレッドを生成するわけではないため、メモリ消費を抑えることができると言われています。</p>

<h3>Node.jsのメリット/デメリット</h3>

<p>Node.jsが全てのアプリケーションに最適なのかと言うとそんなことは当然ありません。<br/>
Node.jsのメリット/デメリットを理解した上で、採用を検討する必要があるのです。</p>

<h4>Node.jsのメリット</h4>

<p>まずはメリットを見ていきましょう。</p>

<ol>
<li>大量の軽量な同時リクエストを捌くのが得意</li>
<li>NoSQLとの親和性が高い</li>
<li>JavaScriptで書ける</li>
<li>充実したライブラリが存在している</li>
</ol>


<p>筆者の経験に基づくメリットを4つ上げさせて頂きました。</p>

<p>1つ目の <strong>大量の軽量な同時リクエストを捌くのが得意</strong> というメリットですが、<br/>
これはNode.jsの特徴で上げたことが関わってきます。<br/>
Non-blocking I/Oなので、I/Oブロックしないとは言うものの、Node.jsはシングルスレッドなんです。<br/>
なので、1つのイベント処理の中に非常に時間のかかる処理が含まれていると、そこがネックとなってしまい大量のリクエストを待たせてしまいます。<br/>
場合によってはクライアント側で設定したタイムアウト時間を上回り期待した結果をユーザが得られなくなるでしょう。</p>

<p>なので1つのイベント(1回のリクエスト)で非常に重い処理を実行させなくてはならない仕様が求められるサービスには向きません。<br/>
逆に、細かくイベントを分割できて、複数回のリクエストをクライアントから送っても問題のない仕様のサービスには適切と言えます。</p>

<p>2つ目の <strong>NoSQLとの親和性が高い</strong> というメリットですが、<br/>
筆者は主に <strong>MongoDB</strong> と一緒に利用してきました。<br/>
MongoDBはドキュメント指向データベースであるため、JSON型のデータをそのまま突っ込めるため非常に使いやすいのです。<br/>
スキーマレスかつスケールアウトの特徴を存分に活かしたい場合はNoSQLを選択すると思いますが、<br/>
そこから遡ってNode.jsを選択しても良いでしょう。</p>

<p>3つ目と4つ目のメリットですが、<br/>
フロントエンドエンジニアであれば、基本的にはJavaScriptを扱えるという人もたくさんいるかと思います。<br/>
であれば同じ言語のJavaScriptで書けるNode.jsを採用しない手はないでしょう。<br/>
また、MongoDBもNode.jsもJavaScriptにも言えることですが、初心者を割りとすんなり受け入れてくれる土台が整っているため、<br/>
1人でサービス提案時のモック作成をしなくてはならないときなどに最適です。<br/>
(誤解されたくないのが、どの技術も極めるにはかなり大変ということに変わりはないということです。)</p>

<h4>Node.jsのデメリット</h4>

<p>続いてデメリットを見ていきましょう。</p>

<ol>
<li>重いリクエストを捌くのが苦手</li>
<li>コールバック地獄</li>
</ol>


<p>1つ目のデメリットはメリットで書いた内容です。<br/>
2つ目はまさに筆者が3〜4年前に感じていたデメリットです。<br/>
Non-blocking I/Oの特徴を持つ代わりにソースコードを書いた際に複数回ネストすることが少なくありません。<br/>
(サーバダウンを防ぐために<code>try-catch</code>を入れようものなら尚更です。)</p>

<p>ただし、v0.12から<code>yield</code>が追加されましたし、<br/>
今やWebに限らずスマホネイティブの世界でも<code>Promise</code>の利用が珍しくはないため、最早デメリットとも言えなくなったと思われます。</p>

<p>また、筆者的には<br/>
HTML, CSS, JavaScriptや画像などの静的ファイルを返却するようなWebサーバとしての役割はNginxやApacheに任せてしまって良いという感覚です。<br/>
むか〜し、計測したイメージが強く残っているからかもしれませんが&hellip;</p>

<h3>Nodeモジュール</h3>

<p>今も忘れない当時使っていた or 助けられたNodeモジュールについて紹介します。</p>

<h4>Express</h4>

<p>これは最も有名なNodeモジュールではないでしょうか？<br/>
( <strong>Express</strong> の公式サイトは<a href="http://expressjs.com/">こちら</a>です。)</p>

<p><strong>Express</strong> はWebアプリケションフレームワークであり、Webアプリケーションを作成するために必要な機能を提供してくれます。<br/>
このモジュールがあるため、サーバサイドを非常に簡単に作成することができるのです。<br/>
(玄人になればなるほどアンチExpressが多い気もしますが&hellip;)</p>

<h4>node-inspector</h4>

<p>続いて、こちらも使わない人の方が少ないのでは？と思うくらい重要な <strong>node-inspector</strong> について紹介します。<br/>
(GitHubは<a href="https://github.com/node-inspector/node-inspector">こちら</a>です。)</p>

<p>サーバサイドエンジニアはeclipse, IntelliJなどのIDEを利用して開発すると思います。<br/>
IDEを利用する理由は様々ですが、その中の1つにデバッグ機能があります。<br/>
<strong>node-inspector</strong> はまるでフロントエンドを開発しているかのごとく、ブラウザ上でデバッグ機能を提供してくれます。</p>

<h4>forever</h4>

<p>次は、 <strong>forever</strong> の紹介です。<br/>
Node.jsでは想定外のエラーが発生した際にサーバがダウンしてしまいます。<br/>
サーバがダウンし、イベントループが停止してしまうと、クライアント側からのリクエストを受け付けることができません。<br/>
そのため、サーバを再起動する必要があるのですが、これを自動的に実行してくれるモジュールが <strong>forever</strong> です。<br/>
(GitHubは<a href="https://github.com/foreverjs/forever">こちら</a>です。)</p>

<h4>log4js-node</h4>

<p>先ほども説明した通り、プログラムは所詮、人間が作り上げたものなので、想定外なことは起こりえます。<br/>
それに対処するためにエンジニアとしては失敗をただの失敗として放置するのではなく、経験として蓄積し、次に活かすのです。<br/>
その手助けとなるのがログです。</p>

<p><strong>log4js-node</strong> を利用することで、<code>info</code>, <code>debug</code>, <code>warn</code>, <code>error</code>など各種ログを仕込むことが可能となります。</p>

<h4>async</h4>

<p>実は筆者が最も思い出深いモジュールがこの <strong>async</strong> です。<br/>
Node.jsのデメリットで紹介しましたが、筆者がNode.jsをメインで触っていた3〜4年前はまさにコールバック地獄でした。<br/>
また、1回のイベント発火内で非同期処理を繰り返し順番に実行したい要望があり、非常に手を焼きました。<br/>
これを救ってくれたのが <strong>async</strong> なのです。</p>

<p>特に、<code>async.waterfall</code>, <code>async.parallel</code>, <code>async.series</code>, <code>async.eachSeries</code>は必見の価値ありです。<br/>
(GitHubは<a href="https://github.com/caolan/async">こちら</a>です。)</p>

<h4>その他</h4>

<p>その他にも便利なものがたくさん用意されているので必要に応じて利用すると良いでしょう。</p>

<ul>
<li><a href="https://github.com/mochajs/mocha">mocha</a>: Node.jsのためのテストフレームワーク</li>
<li><a href="http://socket.io/">socket.io</a>: WebSocket機能を実装できるモジュール</li>
<li><a href="http://mongoosejs.com/">mongoose</a>: Node.jsからMongoDBを利用するためのモジュール</li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a>: Node.jsからMySQLを利用するためのモジュール</li>
<li><a href="https://github.com/balderdashy/sails">sails</a>: Ruby on RailsライクなMVCフレームワーク</li>
</ul>


<h3>Node.jsを勉強するための近道</h3>

<p>最後にNode.jsの勉強方法について紹介したいと思います。<br/>
筆者的には、まずは <strong>JavaScript</strong> をきちんと学ぶことが必要だと思います。<br/>
クライアントサイドから始めても、サーバサイドから始めても構わないのですが、クライアントサイドからの方が始めやすいのではないでしょうか。</p>

<p>また、サーバサイドでNode.jsというものが何かを学ぶのであれば、<br/>
<a href="http://www.nodebeginner.org/index-jp.html">Nodeビギナーズブック</a>を1回は読んでおくことをオススメします。<br/>
市販されている本を読むよりも本質的な部分を理解できると思います。<br/>
(あと、未だにNode.js関連の本って全然ないので&hellip;。)</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
Node.jsはまだまだ新しい技術ですし、これからもっと学ぶべきことが増えてくることでしょう。<br/>
筆者も極力最新を追えるように精進したいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1103/23/news101_2.html">naveでNode.jsのバージョン管理＆イベントループ詳説 </a></li>
<li><a href="http://www.slideshare.net/shigeki_ohtsu/processnext-tick-nodejs">そうだったのか！ よくわかる process.nextTick() node.jsのイベントループを理解する</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftとJava8でOptional型を比較してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/19/swift-java-optional/"/>
    <updated>2016-06-19T21:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/19/swift-java-optional</id>
    <content type="html"><![CDATA[<h4>SwiftとJava8のOptional型を比較してみよう！</h4>

<p>本日はSwiftとJava8のOptional型について比較してみたいと思います。<br/>
最近チラチラとJava8を見かける機会が多いのですが、Swiftと同じくOptional型という概念があるんだ〜と何となく思っていました。<br/>
が、実際に全く同じというわけではないと思うので比較したいと思ったわけです。<br/>
ということで早速見ていきましょう！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>SwiftのOptional型とは</h5>

<p>まずはSwiftのOptional型から見ていきましょう。<br/>
SwiftはObjective-Cでよく発生していた『思いがけず<code>nil</code>が入ったプロパティにアクセスしてExceptionが発生する』という事象を回避できる <strong>Optional型</strong> という概念があります。<br/>
Swiftでは <strong>Optional型</strong> と <strong>非Optional型</strong> を変数定義時に明示的に利用することでこういったExceptionを回避することが可能なのです。</p>

<ul>
<li>Optional型: 変数に<code>nil</code>を代入することを <strong>許容します</strong>

<ul>
<li>Optional型はデータ型の末尾に <strong>『?』</strong> か <strong>『!』</strong> をつけます

<ul>
<li>『?』: 一般的なOptional型です</li>
<li>『!』: 暗黙的Optional型です</li>
</ul>
</li>
</ul>
</li>
<li>非Optional型: 変数に<code>nil</code>を代入することを <strong>許容しません</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Optional型</span>
</span><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="n">var</span> <span class="nl">fuga:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 非Optional型</span>
</span><span class='line'><span class="n">var</span> <span class="n">piyo</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Optional型から値を取得する方法は</h5>

<p>さて、Optional型の宣言方法は先程話した通りです。<br/>
実際に値を取得する際はOptional型で定義された変数を <strong>アンラップ</strong> する必要があります。</p>

<p>ここで注意したいのが、先に紹介した『!』を使った暗黙的Optional型の場合は <strong>自動的にアンラップする</strong> ので開発者側はアンラップさせる必要がないということです。</p>

<p>アンラップ方法は下記の3通りです。</p>

<ul>
<li>Forced Unwrapping: 変数に『!』をつけます</li>
<li>Optional Binding: <code>if</code>文を利用します</li>
<li>Optional Chaining: 変数に『?』をつけます</li>
</ul>


<p>Forced UnwrappingとOptional Bindeingの例は下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Forced Unwrapping</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">hoge</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional Binding</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">fuga</span> <span class="o">=</span> <span class="n">hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">fuga</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてOptional Chainingの例を書きます。<br/>
まずは下記のようなクラスを定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">Hoge:</span> <span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">func</span> <span class="n">hogehoge</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;hogehogeメソッドを実行しました&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記で定義したクラスの<code>hogehoge</code>メソッドをOptional Chaningを利用して実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Hoge</span><span class="o">?</span> <span class="o">=</span> <span class="n">Hoge</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional Chaining</span>
</span><span class='line'><span class="n">hoge</span><span class="o">?</span><span class="p">.</span><span class="n">hogehoge</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにSwiftではコーディングしていく段階でかなり<code>nil</code>に注意する必要があることがわかります。</p>

<h5>Java8のOptional型とは</h5>

<p>次にJava8のOptional型について見ていきましょう！<br/>
Java8ではOptionalを利用することで</p>

<ul>
<li><code>null</code>の可能性がある変数をラップしておくことで、値を安全に取り出せる</li>
<li>実行したメソッドが<code>null</code>を返却する可能性がある場合に、場合分けを短く書ける</li>
</ul>


<p>というメリットがあります。<br/>
では実際に使い方を見ていきましょう！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">hoge</span> <span class="o">=</span> <span class="s">&quot;hoge&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional型にラップする</span>
</span><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hogeOpt</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">hoge</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional型から値を取り出す</span>
</span><span class='line'><span class="c1">// getメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// orElseメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;default data&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// orElseGetメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&quot;default data&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ifPresentメソッドを使う</span>
</span><span class='line'><span class="n">hogeOpt</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span> <span class="n">hoge</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 値があったときにログ出力</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hoge</span><span class="o">);</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を見ると幾つか値の取得方法があることがわかると思います。<br/>
それぞれSwiftの表記に近しいところがあると感じました。</p>

<p>例えば、<code>get</code>メソッドは値が<code>null</code>だった場合に<code>NoSuchElementException</code>を投げます。<br/>
逆に言えば、確実に<code>null</code>が来ない場合の<code>get</code>メソッドが利用できると言えます。<br/>
これはSwiftで言うところの『Forced Unwrapping』です。</p>

<p><code>orElse</code>や<code>orElseGet</code>はSwiftで言うところのnil合体演算子である『??』を利用しているのとほぼ同等です。<br/>
(Swiftであれば<code>let val = hoge ?? "default data"</code>みたいな感じですね。)</p>

<p><code>ifPresent</code>メソッドもSwiftで言うところの『Optional Binding』と言えるでしょう。</p>

<h4>まとめ</h4>

<p>さて如何でしたでしょうか？<br/>
Android Studio 2.2からJava8のラムダ式サポートなんて話も聞こえてきますし、<br/>
スマートフォンのアプリ開発者は今後、SwiftにもJava8にも関わっていく可能性が十分ありえます。<br/>
そうなったときに学習コストが高いな〜と避けるのではなく、案外触ってみると「あれ！？似てる&hellip;」なんてことがあるかもしれません。<br/>
そんな近未来！？を夢見つつブログを書いてみたのでした。<br/>
ということで今日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/maiki055/items/b24378a3707bd35a31a8">どこよりも分かりやすいSwiftの&#8221;?&ldquo;と&rdquo;!&#8221;</a></li>
<li><a href="http://www.task-notes.com/entry/20150708/1436324400">Java8のOptionalの使い方について</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
