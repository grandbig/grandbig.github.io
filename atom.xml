<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2018-04-25T00:49:26+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PromiseKitを使ってみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/24/swift-promisekit-2/"/>
    <updated>2018-04-24T23:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/24/swift-promisekit-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は久しぶりに<a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>について書きたいと思います。<br/>
今から約2年前に<a href="http://grandbig.github.io/blog/2016/04/09/c/">PromiseKitを使ってみよう！</a>で少し触れていたのですが、<br/>
最近業務で扱うことも増えてきたので改めて書き留めておこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Promiseとは</h3>

<p><code>PromiseKit</code> に記載されている内容を訳すと(若干、意訳してますが&hellip;)、</p>

<ul>
<li>シンプルな非同期プログラミングを実現できる</li>
<li>上記によって、開発者がより重要な課題に集中することができる</li>
<li>学習ハードルが低いため、マスターすることが簡単である</li>
<li>可読性の高いコードが実現できるため、チーム開発にも向いている</li>
</ul>


<p>といった感じです。<br/>
これを見る限り、非常に期待できますよね。<br/>
では、具体的な使い方を見ていきましょう。</p>

<h3>アラートでの利用例</h3>

<p><code>UIAlertViewController</code> を利用した時に、通常は以下のように <code>completion</code> を引数に持って実装するかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">internal</span> <span class="n">func</span> <span class="nf">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                          <span class="nl">message:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                          <span class="nl">okCompletion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">),</span>
</span><span class='line'>                          <span class="nl">cancelCompletion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">title</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">alert</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">okAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">okCompletion</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cancelAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;キャンセル&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">cancelCompletion</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと引数が多くなってしまいますし、呼び出し側でも下記のように書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;OKとキャンセルどちらをタップしますか&quot;</span><span class="p">,</span> <span class="nl">okCompletion:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// OKボタンをクリックした場合に呼び出される</span>
</span><span class='line'><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// キャンセルボタンをクリックした場合に呼び出される</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを <code>PromiseKit</code> を使って書くとどうなるでしょうか？<br/>
まずは、アラートのメソッドは下記のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">AlertError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="n">func</span> <span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">title</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">alert</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">okAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">ok</span><span class="p">(),</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cancelAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">cancel</span><span class="p">(),</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">AlertError</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>呼び出し側では、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;OKとキャンセルどちらをタップしますか&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// OKをタップした場合に呼び出される処理</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// キャンセルをタップした場合に呼び出される処理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くことができ、ネストも浅くなるし、非常にわかりやすく後続の処理を書くことができます。</p>

<h3>API呼び出しの利用例</h3>

<p>続いて、API呼び出しの場合の利用例を見ていきましょう。<br/>
今回API通信処理では <a href="https://github.com/Moya/Moya">Moya</a> を利用します。<br/>
また、叩くAPIは <a href="https://developers.google.com/places/?hl=ja">Google Places API</a> を利用します。</p>

<p>まずは <code>Moya</code> の書き方ですが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Moya</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// APIエラーの定義</span>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">APIError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="n">SampleAPITarget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">places</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">SampleAPITarget:</span> <span class="n">TargetType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 以下はGoogleのAPIキーをkey.plistで保持していると仮定した処理です。</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistが見つかりません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistの中身が想定通りではありません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Google APIのKeyが設定されていません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiKey</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ベースURLを文字列で定義</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">_baseURL:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;https://maps.googleapis.com/maps/api/place/nearbysearch/json&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">baseURL:</span> <span class="n">URL</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">_baseURL</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したパスを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">path:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したHTTPメソッドを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">method:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">get</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// スタブデータの設定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">sampleData:</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Stub data&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">using:</span> <span class="n">String</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// パラメータの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">task:</span> <span class="n">Task</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">places</span><span class="p">(</span><span class="n">let</span> <span class="n">lat</span><span class="p">,</span> <span class="n">let</span> <span class="n">lng</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">requestParameters</span><span class="p">(</span><span class="nl">parameters:</span> <span class="p">[</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">()</span><span class="o">:</span> <span class="n">apiKey</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">locationKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;\(lat),\(lng)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">radiusKeyName</span><span class="p">()</span><span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>                <span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ヘッダーの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">headers:</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">String</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SampleAPI</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように書きます。<br/>
( <code>Moya</code> はUnitテストが書きやすいので良いんですよね〜という話はまた後日&hellip; )</p>

<p>では、本題の <code>PromiseKit</code> を用いたAPI通信処理です。<br/>
先程の <code>SampleAPI</code> クラスにメソッドを追加してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="n">SampleAPI</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Placeの定義は</span>
</span><span class='line'>    <span class="c1">// https://grandbig.github.io/blog/2018/04/23/codable-swift4-1/</span>
</span><span class='line'>    <span class="c1">// の『オマケ：Google Places APIでCodableを利用する』を参照のこと</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchPlaces</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">places</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">))</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Places</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">places</span><span class="p">.</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように定義できます。<br/>
これを呼び出すときは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">SampleAPI</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">worker</span><span class="p">.</span><span class="n">fetchPlaces</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように書くことができます。<br/>
こちらも縦に浅いネストで読むことができるため、可読性が高いと言えますね。</p>

<h3>PromiseKitの公式Readme</h3>

<p><code>PromiseKit</code> のドキュメントは非常に丁寧なので、これを読むだけでも理解を相当深められると思います。</p>

<ul>
<li><a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/GettingStarted.md">GettingStarted</a></li>
<li><a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/CommonPatterns.md">CommonPatterns</a></li>
</ul>


<p>を読んでおけばOKかと。<br/>
(上記の話も別機会でかければと思います。)</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
筆者は割りと <code>completion</code> で書くのが好きだったのですが、 <code>PromiseKit</code> に慣れていくと、その良さにどんどん気づいていくことができました。<br/>
リトライ処理は遅延実行も簡単に対応できたりするので、ぜひ使ってみることをオススメします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レバテック キャリアにて本ブログが紹介されました！]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/23/levtech-blog/"/>
    <updated>2018-04-23T02:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/23/levtech-blog</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>先日、<a href="http://leverages.jp/">レバレジーズ株式会社</a> 様より『レバテックキャリア』の『Swift』に関する記事にて、本ブログを紹介したいとご連絡頂きました。<br/>
ブログを始めて4年半、こういったお誘いを頂くことは初めてで、正直全く想定していませんでした。</p>

<p>今回は、紹介記事を逆に紹介すると共に、当時のことを深掘りしながら振り返ってみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>紹介記事について</h3>

<p>今回掲載された紹介記事は<a href="https://career.levtech.jp/guide/knowhow/article/406/">プログラミング学習の参考に！パワフルかつ直感的な言語&#8221;Swift&#8221;に関する記事特集</a>です。<br/>
この記事のテーマは『これからSwiftを用いたiOSアプリ開発を志す人達へのお役立ち情報を提供すること』と筆者は捉えました。<br/>
その中で本ブログは <strong>『(5) Swiftを使ってアプリを作ろう！！』</strong> で紹介されています。</p>

<p>記事の内容としては、<a href="https://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/">Swiftを使って、iBeaconのCentralアプリを作ろう！！</a>で、<br/>
当時、筆者がObjective-CをメインにiOSアプリを開発していた頃にSwiftを勉強しようと思い立った時のものです。</p>

<h3>当時の状況</h3>

<p>あの頃はSwiftも登場したばかりで、iOSアプリ開発の現場ではObjective-Cが主流でした。<br/>
( 会社の業務ではSwiftを扱うことはありませんでした。 )<br/>
と同時に、筆者は正直なところ、</p>

<ul>
<li>これからはSwiftがiOSアプリのメイン言語として受け入れられていくかもしれない&hellip;</li>
<li>Objective-Cと全然違う言語っぽいので、パット見、書き方がよくわからない&hellip;</li>
<li>これまでの知識を全て捨てて0からiOSエンジニアを目指さなくてはならないのだろうか&hellip;</li>
</ul>


<p>と戦々恐々としていました。</p>

<p>そんな気持ちがあるからこそ、早めにキャッチアップした方が良いだろうということでSwiftの勉強を始めたのだと思います。<br/>
勉強の題材としては、当時、業務で触れる機会の多かったiBeaconを選択しました。<br/>
勉強の目的を達成するための最良な選択は、現場に近い題材を扱うことだと思ったためです。</p>

<h3>Swift思考へシフトしてわかったこと</h3>

<p>続いて、Objective-CからSwiftに脳をシフトして苦労したこと、良かったことなどについて振り返りたいと思います。</p>

<h4>苦労したこと</h4>

<p>筆者がSwiftの勉強を開始して特に苦労した点は以下でした。</p>

<ul>
<li><strong>Optional型</strong> と <strong>Optional型のアンラップ</strong> の理解</li>
<li>様々な文法の省略記法 (クロージャなど) の理解</li>
</ul>


<p>今思えば、その魅力には絶賛せざるを得ないのですが、なにせ当初はObjective-C脳だったので、苦労しました。<br/>
打開策はただひたすら、その魅力や意味を理解するためにサンプルを書き続けたことだと思います。</p>

<h4>良かったこと</h4>

<p>Swiftを勉強して特に良かったと感じることは以下でしょうか。</p>

<ul>
<li>Java8やKotlinでのOptionalの理解が早い</li>
<li>様々な現場でSwiftの書けるiOSエンジニアが求められているが、そこにも入っていける</li>
</ul>


<p>SpringBootでのサーバサイド開発でJava8を利用することがあったり、<br/>
アプリ開発時は往々にしてiOSとAndroidを並行して進めることが多いので、Androidでどんな感じに書いているのか見に行くのが楽だったりしました。</p>

<p>もちろんiOS開発単体での素晴らしさはあると思いますが、派生して行けるのが強みなのかなと思ったりします。</p>

<h4>現在のiOSアプリ開発の現場</h4>

<p>今、私が所属している現場ではバリバリSwiftを書いています。<br/>
Objective-Cも当然ありますが、私の業務で言うと、ソースコードをたまに見るくらいですかね。</p>

<p>因みに、Swiftを利用していると一言で言っても、以下のように状況が分かれている場合もあるようです。</p>

<ul>
<li>Swift2.xを継続利用している</li>
<li>Swift3.xを継続利用している</li>
<li>Swift4を継続利用している</li>
<li>Swift4.1に対応できている</li>
</ul>


<p>この辺りもObjective-C時代には気にしなくても良かったところですね。<br/>
特にSwift2.xからSwift3.xへの移行はコストもかかるため、どっぷりSwift化してしまったプロダクトは困っていることでしょう&hellip;<br/>
圧倒的にSwift3およびSwift4以降の方がコーディングが楽なので、Swift2.xは辛そう&hellip;</p>

<h3>まとめ</h3>

<p>さて、今回は思わぬ本ブログの紹介依頼を起点に、当時を振り返ってみました。<br/>
1つ改めて思い出したことは、時代の流れに乗って、常に新しいことを勉強することは大切だということです。<br/>
忙しくてなかなかブログを更新できないこともありましたが、やっぱり『継続は力なり』ですね。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift4.1で利便性が向上したCodable]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/23/codable-swift4-1/"/>
    <updated>2018-04-23T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/23/codable-swift4-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はSwift4.1でさらに利便性が向上した <code>Codable</code> について紹介したいと思います。<br/>
Swift4で登場した <code>Codable</code> ですが、何がより便利になったかというと、 <strong>スネークケース</strong> から <strong>キャメルケース</strong> への変換処理です。</p>

<p>早速、実例を交えて何が変わったのか見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>スネークケースからキャメルケースへの変換処理</h3>

<p>まずは、説明のために扱うAPIについて説明したいと思います。</p>

<h4>サンプルとして利用するAPIについて</h4>

<p>今回は、 <a href="https://developers.google.com/places/web-service/?hl=ja">Google Places API</a>を元に説明します。<br/>
<code>Google Places API</code> で返却されるレスポンスの一例は以下の通りです。</p>

<p><img src="http://grandbig.github.io/images/swift4_1_codable.png" alt="Google Places APIのレスポンスの一部" /></p>

<h4>Swift4での対応方法</h4>

<p>これまでのSwift4では以下のようにスネークケースからキャメルケースへの対応をしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Place:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">placeId:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">enum</span> <span class="nl">CodingKeys:</span> <span class="n">String</span><span class="p">,</span> <span class="n">CodingKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">placeId</span> <span class="o">=</span> <span class="s">&quot;place_id&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、自身で <code>CodingKey</code> プロトコルに準拠した <code>CodingKeys</code> を定義していました。</p>

<h4>Swift4.1での対応方法</h4>

<p>スネークケースからキャメルケースへの変換はほぼほぼ確実に発生しうる命名規則と考えられるので対応したのでしょうか？<br/>
Swift4.1では実に簡単に対応できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Place:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">placeId:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift4.1では <code>CodingKeys</code> 内で設定する必要がありません。<br/>
サーバレスポンスの変換前に以下の1行を追加するだけで自動で判断してくれるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Moyaを利用したAPIレスポンスを扱う例</span>
</span><span class='line'><span class="c1">// 今回はMoyaが説明のメインではないため、深くは説明しない</span>
</span><span class='line'><span class="n">provider</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">places</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">))</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 下記を追加</span>
</span><span class='line'>            <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>            <span class="c1">// 上記を追加</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Places</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;places: \(places)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;error: 変換エラー&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>オマケ：Google Places APIでCodableを利用する</h3>

<p>今回説明するにあたって定義した <code>Google Places API</code> 用の <code>Codable</code> を折角なので書いておきたいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Location:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lat:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lng:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Viewport:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">northeast:</span> <span class="n">Location</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">southwest:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Geometry:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">viewport:</span> <span class="n">Viewport</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">OpeningHours:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">weekdayText:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openNow:</span> <span class="n">Bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Photos:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photoReference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">width:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">height:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Place:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">placeId:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">icon:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">rating:</span> <span class="n">Double</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">scope:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">vicinity:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">reference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">priceLevel:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">types:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">geometry:</span> <span class="n">Geometry</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openingHours:</span> <span class="n">OpeningHours</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photos:</span> <span class="p">[</span><span class="n">Photos</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Places:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">places:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">status:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">enum</span> <span class="nl">CodingKeys:</span> <span class="n">String</span><span class="p">,</span> <span class="n">CodingKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">places</span> <span class="o">=</span> <span class="s">&quot;results&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">status</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">htmlAttributions</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
オープンソース化された効果なのか、Swiftも現場で必要とされる使われ方にどんどん適応していっている感じがしますね。<br/>
今後に更なる期待を寄せつつ、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新年度を迎えたからこそ考えよう『ブランチルール』]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/07/git-flow/"/>
    <updated>2018-04-07T14:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/07/git-flow</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、2018年も4月を迎え、新年度が始まりました。<br/>
このタイミングで新チーム体制となる職場も多いことでしょう。<br/>
筆者も例外ではなく、新たなプロダクト方針の下、開発フローを整える必要がありました。<br/>
そんな中、必ず考えなくてはならないことの1つとして <strong>ブランチルール</strong> があるかと思います。</p>

<p>今回はその <strong>ブランチルール</strong> に特化した記事を書き留めていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>なぜブランチルールを考えるのか</h3>

<p>そもそも『なぜ <strong>ブランチルール</strong> を考えなくてはいけないのか？』と疑問に思う方もいるでしょう。<br/>
例えば、開発者一人でアプリケーションの開発業務をするのであれば、以下でも特に問題ないかもしれません。</p>

<ul>
<li><code>master</code> ブランチから任意の名称のブランチを切る</li>
<li>切ったブランチで完成するまで作り続ける</li>
<li>作り終わったら <code>master</code> にマージする</li>
</ul>


<p>しかし、そこに <strong>『新たなメンバーの参画による引き継ぎ業務』</strong> が入ったらどうなるでしょうか？</p>

<p>『アプリケーションの内容だけ引き継いで、ブランチルールは引き継がなくても良い』<br/>
(と言うか、ブランチルールなんてないようなものなので引き継げない&hellip;)<br/>
と簡単に切り離せるものでしょうか？</p>

<p>業務でこれまでの経緯を知る必要が出てきた時に、恐らくそれは成り立たないことでしょう。<br/>
であるならば、例え一人での開発だったとしても <strong>ブランチルール</strong> を明確にしておいて損はないと思います。</p>

<p>さらに、『複数人で案件を並行させながら開発する』必要が出てきた場合には最早議論の余地はないでしょう。<br/>
もしもそこに <strong>ブランチルール</strong> が存在しなかったとしたら、代わりにそこには必ず <strong>障害</strong> が存在していると思うべきでしょう。</p>

<h3>一般的なブランチルール</h3>

<p>前段はこのくらいにして、一般的なブランチルールを見ていきましょう。</p>

<h4>git-flow</h4>

<p>まずは何と言っても有名なのが <strong>git-flow</strong> でしょう。<br/>
これは<a href="http://nvie.com/about/">Vincent Driessen</a>氏が提唱しているブランチルール(ブランチモデル)です。</p>

<p><img src="http://grandbig.github.io/images/git-flow.png" alt="git-flow model" /><br/>
※ <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a> より抜粋</p>

<p>各ブランチは以下の役割を持っています。</p>

<p><img src="http://grandbig.github.io/images/git-flow-2.png" alt="git-flowの各ブランチの役割" /></p>

<p><strong>git-flow</strong> の良いところは、</p>

<ul>
<li>長期間かかる案件の開発に向いている</li>
<li>各ブランチの役割が1つ1つ明確に分かれており、(ルールを覚えれば)作業に迷わない</li>
</ul>


<p>だと思っています。</p>

<h4>github-flow</h4>

<p>続いてこちらも超有名 <strong>github-flow</strong> ですね。<br/>
これは <strong>git-flow</strong> のような複雑性は皆無と言っても過言ではないくらいシンプルな <strong>ブランチルール</strong> です。</p>

<p><img src="http://grandbig.github.io/images/git-flow-3.png" alt="github-flow" /></p>

<p>各ブランチは以下の役割を持っています。</p>

<p><img src="http://grandbig.github.io/images/git-flow-4.png" alt="github-flowの各ブランチの役割" /></p>

<p><strong>github-flow</strong> の良いところは、</p>

<ul>
<li>リリースサイクルの早い開発に向いている</li>
<li>シンプルなブランチ運用であるため、作業に迷わない</li>
</ul>


<h3>開発現場で必ず生まれる既存ブランチルールのオマージュ</h3>

<p><strong>git-flow</strong> や <strong>github-flow</strong> など優秀な <strong>ブランチルール</strong> があることがわかりました。<br/>
が、しかし、開発現場ではなかなかそのままの <strong>ブランチルール</strong> を利用するということが意外にもないのではないでしょうか。</p>

<p>その理由の1つとして、『プロダクトフェーズへの <strong>ブランチルール</strong> の依存』が考えられます。<br/>
以下、具体的に求められうる事象を取り上げます。</p>

<ul>
<li>ライバルを追う立場のプロダクトは、勝ち手の見えている大規模機能を早く提供する必要がある

<ul>
<li>並行して大規模な追加機能を開発することが求められる</li>
<li>並行して小さな改善と大規模な追加機能を開発することが求められる
リリースサイクルの長さが明らかに異なる案件が混ざっている</li>
</ul>
</li>
</ul>


<p>こういった現場の状況に耐えうる <strong>ブランチルール</strong> はどういったものが考えられるでしょうか？<br/>
例えば&hellip;</p>

<ul>
<li><code>feature/案件名/master</code> ブランチを作成し、それらには <code>develop</code> と同じ役割を与える<br/>
<code>feature/案件名/master</code> から機能追加単位で <code>feature/案件名/xxxx</code> ブランチを切って開発を進める</li>
<li><code>develop</code> ブランチを用意せず、<code>feature</code> ブランチは <code>release</code> ブランチにマージする</li>
</ul>


<p>など様々な手段があるかもしれません。<br/>
上記はあくまでも一例ですが、各開発現場にとって最適な <strong>ブランチルール</strong> は必ず存在するはずです。<br/>
オマージュする/しないが善悪なのではなく、プロダクトを推進する上での善悪で判断することで、メンバーの納得感を得ることもできるでしょう。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
最近、「ブランチルールを考えて、相談して、図示化して&hellip;」ということが多かったので、少し整理してみました。<br/>
筆者の現場でも必ずブラッシュアップが発生すると思っているので、また考え方が変わったらブログに書いていこうと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ストレングス・ファインダー2.0で自分の強みを把握してみた]]></title>
    <link href="http://grandbig.github.io/blog/2018/03/26/strength-finder-v2/"/>
    <updated>2018-03-26T23:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/03/26/strength-finder-v2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>筆者が初めて <strong>ストレングス・ファインダー</strong> に出会ったのは社会人3年目に差し掛かる頃だったと思います。<br/>
研修で自身の強みを知るために、 <strong>ストレングス・ファインダー</strong> を活用したことが、つい最近のように思い出されます。<br/>
ただし、当時は、興味半分&amp;面白半分といった感情でしかなく、そこまで真剣に自身の強みを考えてはいませんでした。</p>

<p>それから月日は流れ&hellip;<br/>
なんと、 <a href="https://www.amazon.co.jp/%E3%81%95%E3%81%82%E3%80%81%E6%89%8D%E8%83%BD-%E3%81%98%E3%81%B6%E3%82%93-%E3%81%AB%E7%9B%AE%E8%A6%9A%E3%82%81%E3%82%88%E3%81%86-%E6%96%B0%E7%89%88-%E3%82%B9%E3%83%88%E3%83%AC%E3%83%B3%E3%82%B0%E3%82%B9%E3%83%BB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%80%E3%83%BC2-0/dp/4532321433">ストレングス・ファインダー2.0</a> が発売されました。<br/>
「これはやらねば！！」ということで、久々に自身の強みを出してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>34の強みリスト</h3>

<p>早速、 <strong>ストレングス・ファインダー2.0</strong> のアンケートに答えて、34の強みを出してみました。<br/>
※34全ての強みを知るには書籍購入に加えて$69支払う必要があります。</p>

<p><img src="http://grandbig.github.io/images/strength_finder_v2.png" alt="34の強み" /></p>

<p>上記を見ると、</p>

<ul>
<li><strong>実行力</strong> のほとんどが上位</li>
<li><strong>影響力</strong> のほとんどが下位</li>
<li><strong>人間関係構築力</strong> が真ん中に集まっている</li>
<li><strong>戦略的思考力</strong> は全体的に散らばっている</li>
</ul>


<p>ことがわかります。<br/>
また、34の強みの中でのTOP5は</p>

<ol>
<li>達成欲</li>
<li>学習欲</li>
<li>慎重さ</li>
<li>内省</li>
<li>調和性</li>
</ol>


<p>となっています。<br/>
これはストレングス・ファインダーの書籍に書かれた説明を読むと『しっくりくるとしか言いようがないくらい』しっくり来ています笑</p>

<p>例えば、</p>

<ol>
<li>達成欲<br/>
昔からなんだかんだ言って、忙しいこと自体は嫌いじゃない。</li>
<li>学習欲<br/>
自己研鑽が大好き。結構、本を読む。</li>
<li>慎重さ<br/>
最近、リーダー業務が多く、決断を下すことが増えてきたからかも。</li>
<li>内省<br/>
脳内フル回転を人知れずよくしている。集中しすぎて降車駅を過ぎることもしばしば&hellip;</li>
<li>調和性<br/>
基本的に衝突が嫌いなので、どうすれば納得感を持った整理できるか追いかけがち</li>
</ol>


<p>みたいな感じです。</p>

<h3>便利なストレングス・ファインダーアプリ</h3>

<p>確か、4〜5年前はなかったと思うのですが、今はWEBだけではなく、アプリでも自身の強みを簡単に確認することができます。<br/>
<a href="https://itunes.apple.com/jp/app/cliftonstrengths/id650833234?mt=8">CliftonStrengths™</a>をぜひ使ってみましょう。</p>

<p><img src="http://grandbig.github.io/images/strength_finder_v2_2.PNG" alt="CliftonStrengths™ アプリ" /></p>

<h3>まとめ</h3>

<p>さて、今回は趣向を変えて、自身の強みを見てみました。<br/>
折角の機会なので、更に <strong>ストレングス・ファインダー</strong> を読み込んで、自分の強みをどう活かしていくと良いのか理論的に考えられるようになれればと思っています。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextField 豆知識]]></title>
    <link href="http://grandbig.github.io/blog/2018/02/24/uitextfield-mame-knowledge/"/>
    <updated>2018-02-24T15:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/02/24/uitextfield-mame-knowledge</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、<code>UITextField</code> を何かとカスタマイズすることが多いので、忘れないように豆知識的に残しておこうと思います。</p>

<p>アジェンダ<br/>
① <code>UITextField</code> の色変更<br/>
② <code>UITextField</code> のマージン変更<br/>
③ <code>UITextField</code> の <code>Attribute</code> 対応</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3><code>UITextField</code>の色変更</h3>

<p><code>UITextField</code>を以下のように定義しているとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">textField:</span> <span class="n">UITextField</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<h4>入力した文字色の変更</h4>

<p>以下のようにすれば、テキストカラーを赤色に変更できます。<br/>
<code>textField.textColor = UIColor.red</code></p>

<h4>文字入力時のキャレットの変更</h4>

<p>以下のようにすれば、キャレット色を赤色に変更できます。<br/>
<code>textField.tintColor = UIColor.red</code></p>

<h4><code>Placeholder</code> の色の変更</h4>

<p>以下のようにすれば、<code>Placeholder</code>の色を赤色に変更できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">attributedPlaceholder</span> <span class="o">=</span> <span class="n">NSAttributedString</span><span class="p">(</span><span class="nl">string:</span> <span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">??</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nl">attributes:</span> <span class="p">[</span><span class="n">NSAttributedStringKey</span><span class="p">.</span><span class="nl">foregroundColor:</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">red</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>UITextField</code>のマージン変更</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="mi">16</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">leftView</span> <span class="o">=</span> <span class="n">UIView</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">leftViewMode</span> <span class="o">=</span> <span class="p">.</span><span class="n">always</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>textRect</code>, <code>editingRect</code>, <code>placeholderRect</code> を <code>override</code> する方法もありますが、<br/>
上記であれば、1つの処理で入力後/入力中/Placeholder全てに適用されます。</p>

<p><img src="http://grandbig.github.io/images/uitextfield_custom.png" alt="UITextFieldにマージンを追加" /></p>

<h3><code>Attribute</code> 対応</h3>

<p>例えば、文字入力後にボタンを押下した後にバリデーションチェックをかけたいことがあるかもしれません。<br/>
バリデーションチェックの結果、違反文字の色を変更する必要がある場合は以下のように <code>attributedText</code> に変更内容を反映させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="nf">setupAttributedString</span><span class="p">(</span><span class="nl">textField:</span> <span class="n">UITextField</span><span class="p">,</span> <span class="nl">attributeText:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">color:</span> <span class="n">UIColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textField</span><span class="p">.</span><span class="n">text</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="n">attributedString</span> <span class="o">=</span> <span class="n">NSMutableAttributedString</span><span class="p">(</span><span class="nl">string:</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">colorRange</span> <span class="o">=</span> <span class="p">(</span><span class="n">text</span> <span class="n">as</span> <span class="n">NSString</span><span class="p">).</span><span class="n">range</span><span class="p">(</span><span class="nl">of:</span> <span class="n">attributeText</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">font</span> <span class="o">=</span> <span class="n">UIFont</span><span class="p">.</span><span class="n">systemFont</span><span class="p">(</span><span class="nl">ofSize:</span> <span class="n">textField</span><span class="p">.</span><span class="n">font</span><span class="o">!</span><span class="p">.</span><span class="n">pointSize</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">fontRange</span> <span class="o">=</span> <span class="n">NSRange</span><span class="p">(</span><span class="nl">location:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">length:</span> <span class="n">text</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attributedString</span><span class="p">.</span><span class="n">addAttribute</span><span class="p">(.</span><span class="n">foregroundColor</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">color</span><span class="p">,</span> <span class="nl">range:</span> <span class="n">colorRange</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attributedString</span><span class="p">.</span><span class="n">addAttribute</span><span class="p">(.</span><span class="n">font</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">font</span><span class="p">,</span> <span class="nl">range:</span> <span class="n">fontRange</span><span class="p">)</span>
</span><span class='line'>  <span class="n">textField</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">attributedString</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/uitextfield_custom_2.png" alt="UITextFieldにAttributeを追加" /></p>

<h3>まとめ</h3>

<p>意外に <code>UITextField</code> のカスタマイズってするんですよね〜<br/>
今後も利用するシーンが多いと思うので覚えておかなきゃ。<br/>
本日は以上。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewで任意のスクロール位置に移動させる方法]]></title>
    <link href="http://grandbig.github.io/blog/2018/01/28/tableview-scroll/"/>
    <updated>2018-01-28T21:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/01/28/tableview-scroll</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、開発していて微妙にハマった <code>UITableView</code> を <code>reloadData</code> 後に、スクロール位置を移動させる方法についてメモしておきたいと思います。<br/>
<code>UITableView</code> で一覧表示をするアプリを開発している際に、<br/>
新規データに更新後、スクロール位置を変更したい場合があるかと思います。<br/>
その方法について書いていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>スクロール位置を変更させる方法</h3>

<p>ざっとググってみるだけで幾つか方法が見つかると思います。</p>

<p>例えば&hellip;</p>

<ul>
<li><code>self.tableView.contentOffset = CGPoint(x: 0, y: -self.tableView.contentInset.top)</code> を設定する</li>
<li><code>self.tableView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 1), animated: false)</code> を設定する</li>
<li><code>self.tableView.scrollToRow(at: indexPath, at: UITableViewScrollPosition.top, animated: false)</code> を設定する</li>
</ul>


<p>これらを以下のように実行してみても想定通りにスクロール位置が動いてくれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// UITableViewのデータ更新処理</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// - Parameters:</span>
</span><span class='line'><span class="c1">///   - data: 更新したいデータ</span>
</span><span class='line'><span class="n">func</span> <span class="nf">configure</span><span class="p">(</span><span class="nl">data:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// データ更新処理など実行 (今回は省略)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="n">indexPath</span> <span class="o">=</span> <span class="n">IndexPath</span><span class="p">(</span><span class="nl">row:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">section:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">scrollToRow</span><span class="p">(</span><span class="nl">at:</span> <span class="n">indexPath</span><span class="p">,</span> <span class="nl">at:</span> <span class="n">UITableViewScrollPosition</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <code>reloadData()</code> が実行されて、描画が完了する前に次の <code>scrollToRow</code> が実行されているからだと思われます。</p>

<p>これをどうやって解決すれば良いかと言うと&hellip;<br/>
データ更新後の <code>UITableView</code> が描画された後にスクロール位置が変わるように、タイミングをずらしてやる必要があります。<br/>
こんな感じで&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// UITableViewのデータ更新処理</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// - Parameters:</span>
</span><span class='line'><span class="c1">///   - data: 更新したいデータ</span>
</span><span class='line'><span class="n">func</span> <span class="nf">configure</span><span class="p">(</span><span class="nl">data:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// データ更新処理など実行 (今回は省略)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">indexPath</span> <span class="o">=</span> <span class="n">IndexPath</span><span class="p">(</span><span class="nl">row:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">section:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">scrollToRow</span><span class="p">(</span><span class="nl">at:</span> <span class="n">indexPath</span><span class="p">,</span> <span class="nl">at:</span> <span class="n">UITableViewScrollPosition</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>恐らく <code>reloadData</code> 実行指示の中にメインスレッドで実行する処理がキューとして溜められているはずです。<br/>
その後に実行される <code>scrollToRow</code> を <code>DispatchQueue.main.async</code> 内で実行することで、メインスレッドのキューに処理を追加しています。<br/>
こうすれば <code>reloadData</code> が終わった後に <code>UI</code> 処理を続けて実行できるというわけですね。</p>

<h3>まとめ</h3>

<p>今回の考え方は他の処理でも利用できるところがある気がするので覚えておいて損はないはず！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS10とiOS11で比較するUIStackViewのhiddenとConstraintエラー]]></title>
    <link href="http://grandbig.github.io/blog/2017/12/10/ios11-stackview-hidden/"/>
    <updated>2017-12-10T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/12/10/ios11-stackview-hidden</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>この記事は<a href="https://qiita.com/advent-calendar/2017/ios2">iOS2 Advent Calendar 2017</a>の10日目の記事です。</p>

<p>本記事では今年発表されたiOS11で改善された <code>UIStackView</code> 周りの <code>Constraint</code> 対応について紹介したいと思います。<br/>
<code>UIStackView</code> はiOS8以前に、開発者が <code>AutoLayout</code> を駆使して <code>View</code> と <code>View</code> 間のマージンやパディングを設定していた状況を一変させました。<br/>
そんな便利な存在である一方で使い方に慣れるまでに時間がかかったり、なぜかうまくいかないと悩んだりすることもしばしばあることと思います。</p>

<p>その中でも厄介だったのが、 <code>UIStackView</code> の子要素に <code>UIStackView</code> があり、元の <code>UIStackView</code> を非表示にすると <code>Constraint</code> エラーが発生するパターンです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>iOS10で発生するConstraintエラー</h3>

<p>例えば、下図のような構成の <code>View</code> を作成する必要があったとします。</p>

<p><img src="http://grandbig.github.io/images/ios11_stackview_1.png" alt="Constraintエラーが発生するパターン" /></p>

<p>このレイアウトは、</p>

<ul>
<li><code>width</code> と <code>height</code> が 固定幅の <code>UIView</code> 3つを子要素として持つ <code>Child Stack View</code></li>
<li>その <code>Child Stack View</code> と <code>UIButton</code> を子要素に持つ <code>Parent Stack View</code></li>
</ul>


<p>で構成されています。<br/>
このような <code>UIStackView</code> の子要素に <code>UIStackView</code> を持つレイアウトを実装し、<br/>
何らかの条件で『表示/非表示』を切り替える仕様があったとします。<br/>
※今回のサンプルでは、<code>SHOW or HIDE</code> ボタンをタップ時に表示/非表示を切り替えるように実装するとします。</p>

<p>その場合、非表示にしたタイミングで、iOS10では下記の <code>Constraint</code> エラーが発生します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">LayoutConstraints</span><span class="p">]</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">simultaneously</span> <span class="n">satisfy</span> <span class="n">constraints</span><span class="p">.</span>
</span><span class='line'>  <span class="n">Probably</span> <span class="n">at</span> <span class="n">least</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">constraints</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">list</span> <span class="n">is</span> <span class="n">one</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">want</span><span class="p">.</span>
</span><span class='line'>  <span class="n">Try</span> <span class="nl">this:</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">look</span> <span class="n">at</span> <span class="n">each</span> <span class="n">constraint</span> <span class="n">and</span> <span class="n">try</span> <span class="n">to</span> <span class="n">figure</span> <span class="n">out</span> <span class="n">which</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">expect</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">find</span> <span class="n">the</span> <span class="n">code</span> <span class="n">that</span> <span class="n">added</span> <span class="n">the</span> <span class="n">unwanted</span> <span class="n">constraint</span> <span class="n">or</span> <span class="n">constraints</span> <span class="n">and</span> <span class="n">fix</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x618000095a90 UIView:0x7ffc6dc04350.height == 44   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097020 &#39;UISV-canvas-connection&#39; UIStackView:0x7ffc6de08680.top == UIView:0x7ffc6df0b170.top   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097980 &#39;UISV-canvas-connection&#39; V:[UIView:0x7ffc6dc04350]-(0)-|   (active, names: &#39;|&#39;:UIStackView:0x7ffc6de08680 )&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x6080000944b0 &#39;UISV-hiding&#39; UIStackView:0x7ffc6de08680.height == 0   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x6100000979d0 &#39;UISV-spacing&#39; V:[UIView:0x7ffc6df0b170]-(16)-[UIView:0x7ffc6dc088c0]   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097a20 &#39;UISV-spacing&#39; V:[UIView:0x7ffc6dc088c0]-(16)-[UIView:0x7ffc6dc04350]   (active)&gt;&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Will</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">recover</span> <span class="n">by</span> <span class="n">breaking</span> <span class="n">constraint</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">NSLayoutConstraint:</span><span class="mh">0x618000095a90</span> <span class="nl">UIView:</span><span class="mh">0x7ffc6dc04350</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="mi">44</span>   <span class="p">(</span><span class="n">active</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Make</span> <span class="n">a</span> <span class="n">symbolic</span> <span class="n">breakpoint</span> <span class="n">at</span> <span class="n">UIViewAlertForUnsatisfiableConstraints</span> <span class="n">to</span> <span class="n">catch</span> <span class="n">this</span> <span class="k">in</span> <span class="n">the</span> <span class="n">debugger</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">methods</span> <span class="k">in</span> <span class="n">the</span> <span class="n">UIConstraintBasedLayoutDebugging</span> <span class="n">category</span> <span class="n">on</span> <span class="n">UIView</span> <span class="n">listed</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIView</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span> <span class="n">may</span> <span class="n">also</span> <span class="n">be</span> <span class="n">helpful</span><span class="p">.</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">09</span> <span class="mi">16</span><span class="o">:</span><span class="mi">46</span><span class="o">:</span><span class="mf">15.542896</span><span class="o">+</span><span class="mi">0900</span> <span class="n">FacebookManagerSample</span><span class="p">[</span><span class="mi">94864</span><span class="o">:</span><span class="mi">5445545</span><span class="p">]</span> <span class="p">[</span><span class="n">LayoutConstraints</span><span class="p">]</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">simultaneously</span> <span class="n">satisfy</span> <span class="n">constraints</span><span class="p">.</span>
</span><span class='line'>  <span class="n">Probably</span> <span class="n">at</span> <span class="n">least</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">constraints</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">list</span> <span class="n">is</span> <span class="n">one</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">want</span><span class="p">.</span>
</span><span class='line'>  <span class="n">Try</span> <span class="nl">this:</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">look</span> <span class="n">at</span> <span class="n">each</span> <span class="n">constraint</span> <span class="n">and</span> <span class="n">try</span> <span class="n">to</span> <span class="n">figure</span> <span class="n">out</span> <span class="n">which</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">expect</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">find</span> <span class="n">the</span> <span class="n">code</span> <span class="n">that</span> <span class="n">added</span> <span class="n">the</span> <span class="n">unwanted</span> <span class="n">constraint</span> <span class="n">or</span> <span class="n">constraints</span> <span class="n">and</span> <span class="n">fix</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097020 &#39;UISV-canvas-connection&#39; UIStackView:0x7ffc6de08680.top == UIView:0x7ffc6df0b170.top   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097980 &#39;UISV-canvas-connection&#39; V:[UIView:0x7ffc6dc04350]-(0)-|   (active, names: &#39;|&#39;:UIStackView:0x7ffc6de08680 )&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x6080000944b0 &#39;UISV-hiding&#39; UIStackView:0x7ffc6de08680.height == 0   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x6100000979d0 &#39;UISV-spacing&#39; V:[UIView:0x7ffc6df0b170]-(16)-[UIView:0x7ffc6dc088c0]   (active)&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;&lt;NSLayoutConstraint:0x610000097a20 &#39;UISV-spacing&#39; V:[UIView:0x7ffc6dc088c0]-(16)-[UIView:0x7ffc6dc04350]   (active)&gt;&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Will</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">recover</span> <span class="n">by</span> <span class="n">breaking</span> <span class="n">constraint</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">NSLayoutConstraint:</span><span class="mh">0x610000097a20</span> <span class="err">&#39;</span><span class="n">UISV</span><span class="o">-</span><span class="n">spacing</span><span class="err">&#39;</span> <span class="nl">V:</span><span class="p">[</span><span class="nl">UIView:</span><span class="mh">0x7ffc6dc088c0</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="nl">UIView:</span><span class="mh">0x7ffc6dc04350</span><span class="p">]</span>   <span class="p">(</span><span class="n">active</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Make</span> <span class="n">a</span> <span class="n">symbolic</span> <span class="n">breakpoint</span> <span class="n">at</span> <span class="n">UIViewAlertForUnsatisfiableConstraints</span> <span class="n">to</span> <span class="n">catch</span> <span class="n">this</span> <span class="k">in</span> <span class="n">the</span> <span class="n">debugger</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">methods</span> <span class="k">in</span> <span class="n">the</span> <span class="n">UIConstraintBasedLayoutDebugging</span> <span class="n">category</span> <span class="n">on</span> <span class="n">UIView</span> <span class="n">listed</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIView</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span> <span class="n">may</span> <span class="n">also</span> <span class="n">be</span> <span class="n">helpful</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>これには2つの要因があります。</p>

<ol>
<li>子要素の <code>UIView</code> の <code>height</code> が <code>44pt</code> 固定にも関わらず、 <code>UIStackView</code> が非表示 ( = <code>height</code> が <code>0pt</code> ) になる</li>
<li><code>UIStackView</code> 内の子要素同士は <code>16pt</code> ごとに間隔を空ける指定をしているにも関わらず、 <code>UIStackView</code> が非表示 ( = <code>height</code> が <code>0pt</code> )になる</li>
</ol>


<p>上記2要素を解決すれば <code>Constraint</code> エラーを解消することができます。</p>

<h3>iOS10でConstraintエラーを解消する方法</h3>

<p>では、具体的に <code>Constraint</code> エラーを解消してみましょう。</p>

<h4>1つ目の原因の解決方法</h4>

<p>先程上げた要因の1点目は <code>Storyboard</code> 上で解決可能です。</p>

<p><img src="http://grandbig.github.io/images/ios11_stackview_2.png" alt="Storyboard上でConstraintの指定を変更する" /></p>

<p>親の <code>UIStackView</code> が非表示になることで、子要素の <code>UIView</code> が <code>0pt</code> になる可能性があるので、<code>Constraint</code> の <code>Priority</code> を <code>999</code> 以下にします。<br/>
これは、デフォルトの <code>Priority</code> が <code>1000</code> だからです。</p>

<h4>2つ目の原因の解決方法</h4>

<p>続いて要点の2点目の解決方法です。<br/>
<code>Child Stack View</code> が非表示になることで、3つの子要素の <code>UIView</code> も強制的に非表示になってしまいます。<br/>
しかし、 <code>Child Stack View</code> は3つの子要素である <code>UIView</code> に <code>16pt</code> の間隔を空けるように指定しています。<br/>
これを解消するためには、親要素が非表示になるときに合わせて子要素も非表示にする必要があります。<br/>
※あくまでも <code>UIStackView</code> 内に <code>UIStackView</code> を持つ場合に発生し、 <code>UIStackView</code> 単体の場合は発生しません。</p>

<p>具体的に実装した解決方法は以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">stackView:</span> <span class="n">UIStackView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">childrenView1:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">childrenView2:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">childrenView3:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">isHidden</span> <span class="o">=</span> <span class="n">false</span>  <span class="c1">// 現在の表示・非表示の状態を保持</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">private</span> <span class="n">func</span> <span class="n">onTappedButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ボタンタップ時に表示・非表示の切り替え</span>
</span><span class='line'>        <span class="n">showOrHideSubView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">showOrHideSubView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">isHidden</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 表示する場合</span>
</span><span class='line'>            <span class="c1">// 自身を表示</span>
</span><span class='line'>            <span class="n">stackView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>            <span class="c1">// 子要素を表示</span>
</span><span class='line'>            <span class="n">stackView</span><span class="p">.</span><span class="n">subviews</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">$0</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// 表示・非表示状態の更新</span>
</span><span class='line'>            <span class="n">isHidden</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 非表示にする場合</span>
</span><span class='line'>        <span class="c1">// 自身を非表示</span>
</span><span class='line'>        <span class="n">stackView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="c1">// 子要素を非表示</span>
</span><span class='line'>        <span class="n">stackView</span><span class="p">.</span><span class="n">subviews</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">$0</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 表示・非表示状態の更新</span>
</span><span class='line'>        <span class="n">isHidden</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記2点の改修を加えた上でiOS10で実行すると <code>Constraint</code> エラーが発生していないことがわかると思います。</p>

<h3>iOS11でどうなるか&hellip;</h3>

<p>ではでは、iOS11ではどうなっているのかというと&hellip;<br/>
なんとiOS10で必要だった2つの手段を取らずとも自動的に <code>Constraint</code> エラーが解決されています！！<br/>
いちいち <code>@999</code> つけたり、 <code>subViews</code> を <code>hidden</code> にしなくて良いのは手間がかからず非常に助かりますね！</p>

<h3>まとめ</h3>

<p>如何でしたでしょうか？<br/>
少々短めな紹介記事になってしまいましたが、地味ながら開発者が喜ぶ改善がされているiOSは改めて素晴らしいですね。<br/>
これからもバシバシ <code>UIStackView</code> を利用する気になってきますね！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook APIで試すCodable]]></title>
    <link href="http://grandbig.github.io/blog/2017/12/03/facebook-and-codable/"/>
    <updated>2017-12-03T15:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/12/03/facebook-and-codable</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは <a href="https://qiita.com/advent-calendar/2017/swift2">Swift その2 Advent Calendar 2017</a> の3日目の記事です。<br/>
今年の後半戦から久々に業務にてiOSアプリを開発することが決まっていたため、実に1年半ぶりにSwiftを扱うことになりました。</p>

<p>Swift4を積極的に利用していた際に、便利と名高い <code>Codable</code> に触れる機会があったため、<br/>
本記事では実際に使ってみた <code>Codable</code> の例を書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Codableとは</h3>

<p>これまで <code>JSON</code> をパースするためには、<br/>
<code>JSONSerialization</code> や <code>SwiftyJSON</code> などのOSSライブラリを利用して値を取り出す形で書いていたことと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// これまでの例</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// レスポンスデータ用の構造体</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Restaurant</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データ取得クラス</span>
</span><span class='line'><span class="n">class</span> <span class="n">HogeHoge</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 省略 (API等でデータを取得)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSON</span><span class="p">(</span><span class="nl">data:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// APIから返却されたjsonデータが以下だったとします。</span>
</span><span class='line'>          <span class="c1">// {</span>
</span><span class='line'>          <span class="c1">//    &quot;id&quot;: &quot;1&quot;</span>
</span><span class='line'>          <span class="c1">//    &quot;name&quot;: &quot;hogehoge&quot;</span>
</span><span class='line'>          <span class="c1">//    &quot;latitude&quot;: &quot;37&quot;</span>
</span><span class='line'>          <span class="c1">//    &quot;longitude&quot;: &quot;135&quot;</span>
</span><span class='line'>          <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">let</span> <span class="kt">id</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ID不明&quot;</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ショップ名不明&quot;</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;latitude&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;longitude&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">restaurant</span> <span class="o">=</span> <span class="n">Restaurant</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">,</span> <span class="nl">name:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、 <code>SwiftyJSON</code> を利用して <code>JSON</code> 化したオブジェクトから、<br/>
<code>let id = json["id"].string</code> や <code>let name = json["name"].string</code> のように返却レスポンスである <code>Restaurant</code> に自身でマッピングする必要がありました。
これがなんと、 <code>Codable</code> を利用することで、毎回のように書いていたマッピング処理が簡素化されるようです。</p>

<h3>実際の利用例</h3>

<p>今回はFacebookログインによる認証処理が機能の1つとして必要でした。<br/>
また、Facebookの <code>Graph API</code> を叩いて幾つかのプロフィール情報を取得するのですが、<br/>
その中で <code>gender</code> の項目のみ「Facebookが返却する値」と「こちらのシステムが担保する <code>gender</code> の値」が異なっていました。</p>

<p>形式の違いは以下の通りです。<br/>
まずは、Facebookが返却するgenderの値です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">男性の場合</span> <span class="err">→</span> <span class="s">&quot;male&quot;</span>
</span><span class='line'><span class="err">女性の場合</span> <span class="err">→</span> <span class="s">&quot;female&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて必要だった形式です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">男性の場合</span> <span class="err">→</span> <span class="mi">0</span>
</span><span class='line'><span class="err">女性の場合</span> <span class="err">→</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん上記違いがあったとしても <code>Codable</code> は利用可能ですので、実際に書いてみました。<br/>
※ Facebookログインを利用するための前準備は <a href="http://grandbig.github.io/blog/2016/05/14/facebook-login-for-swift/">SwiftでFacebookログインを始めよう！</a> を参考にしてください。</p>

<h4>システム固有の性別のEnumの定義</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 性別のEnum定義</span>
</span><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">Gender:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">male</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">female</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Codableに準拠する構造体の定義</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Facebookから取得するユーザ情報の構造体 (Codableに準拠)</span>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">FacebookUserProfile:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>     <span class="c1">// FacebookID</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">email:</span> <span class="n">String</span><span class="o">?</span> <span class="c1">// Facebookに登録されているメールアドレス</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">gender:</span> <span class="n">Gender</span> <span class="c1">// Facebookに登録されている性別</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// APIとアプリ間でありがちなプロパティ名の違いをココで吸収できる</span>
</span><span class='line'>    <span class="c1">// 今回は全て同じなので問題なし</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">enum</span> <span class="nl">CodingKeys:</span> <span class="n">String</span><span class="p">,</span> <span class="n">CodingKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">gender</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// デコード処理をカスタマイズ</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">from</span> <span class="nl">decoder:</span> <span class="n">Decoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">values</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decodeIfPresent</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// APIから取得した性別の値をこちらのシステムの形式に変更する</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">genderString</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">genderString</span> <span class="o">==</span> <span class="s">&quot;male&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">male</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">female</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// エンコード処理をカスタマイズ</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">encode</span><span class="p">(</span><span class="n">to</span> <span class="nl">encoder:</span> <span class="n">Encoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">container</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="kt">id</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encodeIfPresent</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// システム固有の形式をAPIから取得した形式に戻す</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">gender</span> <span class="o">==</span> <span class="p">.</span><span class="n">male</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;male&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;female&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JSONDecoderの拡張定義</h4>

<p>少々困ったのが、Facebookの <code>Graph API</code> から返却される <code>response</code> を <code>data</code> 型に変換するメソッドが予め用意されていないことでした。<br/>
毎回、 <code>JSONSerialization</code> を利用する処理を1行加えるのも手間なので、以下のように拡張メソッドを用意することにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">extension</span> <span class="n">JSONDecoder</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any型をdecode可能なメソッドを追加</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">decode</span><span class="o">&lt;</span><span class="nl">T:</span> <span class="n">Decodable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">type:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">withJSONObject</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">options</span> <span class="nl">opt:</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">WritingOptions</span> <span class="o">=</span> <span class="p">[])</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">withJSONObject:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">opt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">decode</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Facebook Graph APIによるプロフィール情報取得処理</h4>

<p>準備は整ったので、実際に <code>Graph API</code> を叩く部分の処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookCore</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookLogin</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">final</span> <span class="n">class</span> <span class="n">FacebookManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">let</span> <span class="n">shared</span> <span class="o">=</span> <span class="n">FacebookManager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="nl">FacebookError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">cancel</span>       <span class="c1">// Facebook認証をキャンセルした場合</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">apiError</span>     <span class="c1">// APIからエラーが返却された場合</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">decodeError</span>  <span class="c1">// デコード処理に失敗した場合</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">enum</span> <span class="nl">FacebookUserField:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span> <span class="o">=</span> <span class="s">&quot;email&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">gender</span> <span class="o">=</span> <span class="s">&quot;gender&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Facebookからユーザのプロフィール情報を取得する</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter facebookUserFields: 取得するプロフィール情報の指定</span>
</span><span class='line'>    <span class="c1">/// - Returns: ユーザのプロフィール情報</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">getUserProfile</span><span class="p">(</span><span class="nl">facebookUserFields:</span> <span class="p">[</span><span class="n">FacebookUserField</span><span class="p">]</span> <span class="o">=</span> <span class="p">[.</span><span class="kt">id</span><span class="p">,</span> <span class="p">.</span><span class="n">email</span><span class="p">,</span> <span class="p">.</span><span class="n">gender</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">FacebookUserProfile</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">FacebookUserProfile</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">fulfill</span><span class="p">,</span> <span class="n">reject</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">facebookUserFields</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">rawValue</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">field</span> <span class="o">=</span> <span class="n">fields</span><span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="nl">separator:</span> <span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GraphRequest</span><span class="p">(</span><span class="nl">graphPath:</span> <span class="s">&quot;me&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">parameters:</span> <span class="p">[</span><span class="s">&quot;fields&quot;</span><span class="o">:</span> <span class="n">field</span><span class="p">],</span>
</span><span class='line'>                         <span class="nl">accessToken:</span> <span class="n">AccessToken</span><span class="p">.</span><span class="n">current</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">httpMethod:</span> <span class="p">.</span><span class="n">GET</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">apiVersion:</span> <span class="p">.</span><span class="n">defaultVersion</span><span class="p">).</span><span class="n">start</span> <span class="p">{</span> <span class="n">response</span><span class="p">,</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                                    <span class="n">let</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">FacebookUserProfile</span><span class="p">.</span><span class="n">self</span><span class="p">,</span>
</span><span class='line'>                                                                     <span class="nl">withJSONObject:</span> <span class="n">response</span><span class="p">.</span><span class="n">dictionaryValue</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>                                    <span class="n">_</span> <span class="o">=</span> <span class="n">fulfill</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">FacebookError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="k">case</span> <span class="p">.</span><span class="n">failed</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">FacebookError</span><span class="p">.</span><span class="n">apiError</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の通り、 <code>let profile = try decoder.decode(...)</code> だけで済んでいますね。<br/>
今回は1つのメソッドしか書いていませんが同様のレスポンスを持つ複数メソッドを定義する必要がある場合などにより効力を発揮しそうな気がします。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
<code>Codable</code> は今後更なる進化も予定されていると聞きますし、楽しみな機能の1つですね。<br/>
筆者も引き続き積極的にSwift4の機能を利用していきたいと思います。</p>

<p>最後にソースコード全体を載せておきます。<br/>
(説明上、関係のないところは割愛していたので&hellip;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookCore</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookLogin</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">Gender:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">male</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">female</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">FacebookUserProfile:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">email:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">gender:</span> <span class="n">Gender</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">enum</span> <span class="nl">CodingKeys:</span> <span class="n">String</span><span class="p">,</span> <span class="n">CodingKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">gender</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">from</span> <span class="nl">decoder:</span> <span class="n">Decoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">values</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decodeIfPresent</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">genderString</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">genderString</span> <span class="o">==</span> <span class="s">&quot;male&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">male</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">female</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">encode</span><span class="p">(</span><span class="n">to</span> <span class="nl">encoder:</span> <span class="n">Encoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">container</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="kt">id</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encodeIfPresent</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">gender</span> <span class="o">==</span> <span class="p">.</span><span class="n">male</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;male&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;female&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">final</span> <span class="n">class</span> <span class="n">FacebookManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">let</span> <span class="n">shared</span> <span class="o">=</span> <span class="n">FacebookManager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="nl">FacebookError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">apiError</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">enum</span> <span class="nl">FacebookPermission:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span> <span class="o">=</span> <span class="s">&quot;email&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">publicProfile</span> <span class="o">=</span> <span class="s">&quot;public_profile&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">enum</span> <span class="nl">FacebookUserField:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span> <span class="o">=</span> <span class="s">&quot;email&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">gender</span> <span class="o">=</span> <span class="s">&quot;gender&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="nl">didFinishLaunchingWithOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SDKApplicationDelegate</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="nl">didFinishLaunchingWithOptions:</span> <span class="n">didFinishLaunchingWithOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">app:</span> <span class="n">UIApplication</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">open</span> <span class="nl">url:</span> <span class="n">URL</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">options:</span> <span class="p">[</span><span class="nl">UIApplicationOpenURLOptionsKey:</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">SDKApplicationDelegate</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">application</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="nl">open:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">isLoggedIn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">AccessToken</span><span class="p">.</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">login</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">UIViewController</span><span class="p">,</span>
</span><span class='line'>                      <span class="nl">permissions:</span> <span class="p">[</span><span class="n">FacebookPermission</span><span class="p">]</span> <span class="o">=</span> <span class="p">[.</span><span class="n">email</span><span class="p">,</span> <span class="p">.</span><span class="n">publicProfile</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">isLoggedIn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">logout</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">fulfill</span><span class="p">,</span> <span class="n">reject</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">readPermissions</span> <span class="o">=</span> <span class="p">[</span><span class="n">ReadPermission</span><span class="p">]()</span>
</span><span class='line'>            <span class="n">permissions</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">readPermissions</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ReadPermission</span><span class="p">.</span><span class="n">custom</span><span class="p">(</span><span class="n">$0</span><span class="p">.</span><span class="n">rawValue</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">LoginManager</span><span class="p">().</span><span class="n">logIn</span><span class="p">(</span><span class="nl">readPermissions:</span> <span class="n">readPermissions</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nl">viewController:</span> <span class="n">viewController</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nl">completion:</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">let</span> <span class="n">accessToken</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">fulfill</span><span class="p">(</span><span class="n">accessToken</span><span class="p">.</span><span class="n">authenticationToken</span><span class="p">)</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="nl">cancelled:</span>
</span><span class='line'>                                        <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">FacebookError</span><span class="p">.</span><span class="n">cancel</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="n">failed</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">}</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LoginManager</span><span class="p">().</span><span class="n">logOut</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Facebookからユーザのプロフィール情報を取得する</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter facebookUserFields: 取得するプロフィール情報の指定</span>
</span><span class='line'>    <span class="c1">/// - Returns: ユーザのプロフィール情報</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">getUserProfile</span><span class="p">(</span><span class="nl">facebookUserFields:</span> <span class="p">[</span><span class="n">FacebookUserField</span><span class="p">]</span> <span class="o">=</span> <span class="p">[.</span><span class="kt">id</span><span class="p">,</span> <span class="p">.</span><span class="n">email</span><span class="p">,</span> <span class="p">.</span><span class="n">gender</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">FacebookUserProfile</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">FacebookUserProfile</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">fulfill</span><span class="p">,</span> <span class="n">reject</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">facebookUserFields</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">rawValue</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">field</span> <span class="o">=</span> <span class="n">fields</span><span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="nl">separator:</span> <span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GraphRequest</span><span class="p">(</span><span class="nl">graphPath:</span> <span class="s">&quot;me&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">parameters:</span> <span class="p">[</span><span class="s">&quot;fields&quot;</span><span class="o">:</span> <span class="n">field</span><span class="p">],</span>
</span><span class='line'>                         <span class="nl">accessToken:</span> <span class="n">AccessToken</span><span class="p">.</span><span class="n">current</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">httpMethod:</span> <span class="p">.</span><span class="n">GET</span><span class="p">,</span>
</span><span class='line'>                         <span class="nl">apiVersion:</span> <span class="p">.</span><span class="n">defaultVersion</span><span class="p">).</span><span class="n">start</span> <span class="p">{</span> <span class="n">response</span><span class="p">,</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                                    <span class="n">let</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">FacebookUserProfile</span><span class="p">.</span><span class="n">self</span><span class="p">,</span>
</span><span class='line'>                                                                     <span class="nl">withJSONObject:</span> <span class="n">response</span><span class="p">.</span><span class="n">dictionaryValue</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>                                    <span class="n">_</span> <span class="o">=</span> <span class="n">fulfill</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">FacebookError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="k">case</span> <span class="p">.</span><span class="n">failed</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">FacebookError</span><span class="p">.</span><span class="n">apiError</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">JSONDecoder</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any型をdecode可能なメソッドを追加</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">decode</span><span class="o">&lt;</span><span class="nl">T:</span> <span class="n">Decodable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">type:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">withJSONObject</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">options</span> <span class="nl">opt:</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">WritingOptions</span> <span class="o">=</span> <span class="p">[])</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">withJSONObject:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">opt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">decode</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更だけど試してみようUniversalLink]]></title>
    <link href="http://grandbig.github.io/blog/2017/12/02/universallink/"/>
    <updated>2017-12-02T18:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/12/02/universallink</id>
    <content type="html"><![CDATA[<h3>UniversalLinkとは</h3>

<p>UniversalLinkとはiOS9と共に登場したカスタムURLスキームに代わるアプリ起動支援の仕組みです。<br/>
例えばどんなことができるかというと&hellip;</p>

<p>アプリの宣伝用のLPへのURLリンクをタップした時にアプリがインストール済みであれば、<br/>
Safariを開かずにアプリを起動する</p>

<p>といったことができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>どういったシーンで利用できるかというと&hellip;</p>

<ul>
<li>既にインストール済みのアプリであれば、宣伝用ページではなくアプリに飛ばしたい</li>
<li>会員登録時に仮メールを送信して、メール内リンクをタップしたらアプリを起動させたい</li>
<li>キャンペーン期間中のみ、特定のリンクを踏むと、アイテムやクーポンがもらえる</li>
</ul>


<p>などが考えられます。</p>

<h3>UniversalLinkの設定方法</h3>

<p>では、具体的にどうすればUniversalLinkが利用できるのでしょうか。</p>

<h4>Apple Developer Program上での設定</h4>

<p>Xcode上で設定すれば、Apple Developer Programから設定する必要はないとの記事も見かけましたが、<br/>
未確認であること、いずれにしても必須設定であることから説明します。</p>

<p>① Apple Developer Programにアクセス<br/>
② <code>Certificates, Identifiers &amp; Profiles</code> > <code>Identifier</code> > <code>App IDs</code> を選択<br/>
③ 利用する <code>App IDs</code> を編集して <code>Associated Domains</code> を <code>Enabled</code> に変更</p>

<p><img src="http://grandbig.github.io/images/universallink_1.png" alt="Apple Developer Program上の設定" /></p>

<p>たったこれだけの設定でOKです。</p>

<h4>Xcode上での設定</h4>

<p>ここからはアプリ側の設定を説明します。<br/>
と言っても難しいことはありません。</p>

<p>① 先程の手順で設定した <code>App IDs</code> が <code>Bundle Identifier</code> に設定されたプロジェクトを作成<br/>
② <code>Capabilities</code> > <code>Associated Domains</code> を <code>ON</code> に変更<br/>
③ <code>Domains</code> に飛ばしたいドメインを追加</p>

<p><img src="http://grandbig.github.io/images/universallink_2.png" alt="Xcode上の設定" /></p>

<p>このとき、 <code>Steps</code> の2行が <code>✔</code> 状態になっているかどうかも重要なポイントです。</p>

<p>たったのこれだけの設定でOKです。</p>

<h4>サーバサイドの設定</h4>

<p>最後にサーバサイドで必要な設定について説明します。<br/>
サーバサイドの環境や設定次第では少々苦労することがあるかもしれません。</p>

<p>① <code>apple-app-site-association</code> ファイルを作成する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;applinks&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;apps&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>      <span class="s2">&quot;details&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;appID&quot;</span><span class="o">:</span><span class="s2">&quot;xxxxxx.com.hogehoge.AppSample&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;paths&quot;</span><span class="o">:</span><span class="p">[</span> <span class="s2">&quot;*&quot;</span> <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記で重要なポイントは&hellip;</p>

<ul>
<li><code>json</code> 形式だが、拡張子に <code>json</code> はつけない</li>
<li><code>apps</code> は必ず <code>[]</code> で中身は何も書かない</li>
<li><code>appIDs</code> は <strong><Team ID>.<Bundle Identifier></strong> の形式で書く</li>
<li><code>paths</code> はアクセス時に飛ばしたいパスの詳細設定を書く ( <code>"*"</code> は全て飛ばします )</li>
</ul>


<p>になります。<br/>
<code>Team ID</code> は <code>Apple Developer Program</code> 上から確認できます。</p>

<p><img src="http://grandbig.github.io/images/universallink_3.png" alt="Team IDの記載場所" /></p>

<p>② 作成したファイルを <code>https</code> サーバのドキュメントルートに配置する<br/>
<code>http</code> サーバの場合は <code>apple-app-site-association</code> をTLS証明書で署名する必要がありますが、今回は割愛します。</p>

<p>ドキュメントルートはWebサーバの設定ファイルから確認することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Apacheの場合</span>
</span><span class='line'><span class="c1">// httpd.conf</span>
</span><span class='line'>
</span><span class='line'><span class="nx">DocumentRoot</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">www</span><span class="o">/</span><span class="nx">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えば、上記のように設定されているのであれば、 <code>/home/user/www/html</code> 配下に <code>apple-app-site-association</code> ファイルを置きましょう。</p>

<p>③ Webサーバの設定を確認する<br/>
UniversalLinkの機能を利用するにはWebサーバが下記設定になっている必要があります。</p>

<ul>
<li><code>apple-app-site-association</code> ファイルにリダイレクトすることなくアクセスできる</li>
<li>署名していない場合は <code>Content-type</code> に <code>application/json</code> を指定する<br/>
署名している場合は <code>Content-type</code> を <code>application/pkcs7-mime</code> に設定する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Apacheの場合</span>
</span><span class='line'><span class="c1">// httpd.conf</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="err">リダイレクトによるアクセス防止</span>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="err">/apple-app-site-association - [L]</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Content</span><span class="o">-</span><span class="nx">type</span><span class="err">の設定</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Directory</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">www</span><span class="o">/</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Files</span> <span class="nx">apple</span><span class="o">-</span><span class="nx">app</span><span class="o">-</span><span class="nx">site</span><span class="o">-</span><span class="nx">association</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">Header</span> <span class="nx">set</span> <span class="nx">Content</span><span class="o">-</span><span class="nx">type</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Files&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでできれば完成です。</p>

<h3>設定完了後の動作確認方法</h3>

<p>さて、動作確認には以下2つの方法があります。</p>

<p>前提として、起動させたいアプリをインストールする必要があります。</p>

<p>【動作確認方法】<br/>
① Safariで直接URLにアクセス後、ページを上から下にスワイプすると、アプリの表示バーが出て来るので、それをタップする<br/>
② メール等に記載されたURLをタップする</p>

<p>①または②の方法でアプリが起動すればUniversalLinkの設定は完了したと言えます。<br/>
※Appleが提供している公式ツールもあるのですが、テスト環境用サーバだとアクセスを制限している可能性があるので、上記方法が良いかなと思っています。</p>

<h3>まとめ</h3>

<p>さて、iOS11が登場して1ヶ月ほど経過しているにも関わらず、今更ながらUniversalLinkの設定方法について書いてみました。<br/>
自分でいざ設定しようとすると案外ハマりどころがあったりするので、対応する機会がある方はぜひ試しに対応してみることをオススメします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneXのステータスバーの高さ]]></title>
    <link href="http://grandbig.github.io/blog/2017/11/27/iphonex-statusbar/"/>
    <updated>2017-11-27T01:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/11/27/iphonex-statusbar</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日は、今月発売されたiPhoneXについてのメモ書きです。<br/>
iPhoneXはホームボタンがなくなり、全画面がディスプレイになっています。<br/>
ということはステータスバーの高さも変わっているんじゃないかという話です。</p>

<!-- more -->


<h3>iPhoneXのステータスバーの高さ</h3>

<p>iPhoneXで画面キャプチャを取ってみると下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/iphonex_statusbar_1.png" alt="iPhoneXの画面キャプチャ" /></p>

<p>これは確実にステータスバーの高さが変わっているに違いないということで調べてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="nl">statusBarHeight:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">statusBarFrame</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;statusBarの高さ: \(statusBarHeight)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は以下の通りです。</p>

<p>iPhone8: 20.0pt<br/>
iPhoneX: 44.0pt</p>

<p>ステータスバーを扱う際にはご注意を&hellip;</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Swiftを勉強してみよう！(3)]]></title>
    <link href="http://grandbig.github.io/blog/2017/10/09/clean-swift-3/"/>
    <updated>2017-10-09T22:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/10/09/clean-swift-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="https://grandbig.github.io/blog/2017/10/08/clean-swift-2/">前回</a>に引き続き、<a href="https://clean-swift.com/">Clean Swift</a>の実例サンプルについて書いていきたいと思います。<br/>
今回は、下記要件をアプリに追加して見ていきます。</p>

<p><img src="http://grandbig.github.io/images/clean-swift-3_1.png" alt="アプリ追加要件" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの追加要件</h3>

<p>追加要件は以下です。</p>

<ul>
<li>マップのマーカをタップした後に表示されるInfoWindowをタップすると、レストラン情報ページに遷移する</li>
</ul>


<h3>フォルダ構成</h3>

<p>1つ画面を追加することになったため、今回のフォルダ構成としては下記になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">CleanFoodLogger</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Views</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">ViewController</span><span class="o">+</span><span class="nx">Alert</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Models</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">Restaurant</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomGMSMarker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Workers</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Services</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperAPI</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Scenes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapView</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">xib</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapViewController</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapInteractor</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapModels</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapPresenter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">MapRouter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="nx">MapWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformation</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformationViewController</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformationInteractor</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformationModels</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformationPresenter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="nx">RestaurantInformationRouter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="nx">RestaurantInformationWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">AppDelegate</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Main</span><span class="p">.</span><span class="nx">storyboard</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Assets</span><span class="p">.</span><span class="nx">xcassets</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">key</span><span class="p">.</span><span class="nx">plist</span>
</span></code></pre></td></tr></table></div></figure>


<h3>アプリの実装</h3>

<p>レストラン情報ページに遷移する機能に関しては下図のようなデータフローになります。</p>

<p><img src="http://grandbig.github.io/images/clean-swift_4.png" alt="データフロー" /></p>

<h4>RestaurantInformation</h4>

<p>今回追加したファイルはこのフォルダ配下のみになるので、ここのみ説明します。</p>

<h5>RestaurantInformationModels.swift</h5>

<p><code>Model</code> は非常にシンプルです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">RestaurantInformation</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Load</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">url:</span> <span class="n">String</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">url:</span> <span class="n">String</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Load</code>

<ul>
<li>レストラン情報を読み込む際に利用します</li>
</ul>
</li>
</ul>


<h5>RestaurantInformationInteractor.swift</h5>

<p><code>ViewController</code> から受けた依頼を必要があれば <code>Worker</code> を経由して実行し、 <code>Presenter</code> にデータを渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">RestaurantInformationBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">loadRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">RestaurantInformationDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">urlString:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">RestaurantInformationInteractor:</span> <span class="n">RestaurantInformationBusinessLogic</span><span class="p">,</span> <span class="n">RestaurantInformationDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">RestaurantInformationPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">worker:</span> <span class="n">RestaurantInformationWorker</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">urlString:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Load restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">loadRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">url:</span> <span class="n">urlString</span><span class="p">)</span>
</span><span class='line'>        <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>loadRestaurantInformation</code>

<ul>
<li>レストラン情報ページのURLが格納された <code>urlString</code> を <code>Presenter</code> に渡します</li>
</ul>
</li>
</ul>


<h5>RestaurantInformationPresenter.swift</h5>

<p><code>Interactor</code> から受け取ったデータを表示形式に変換して、<code>ViewController</code> に描画指示を出します。<br/>
今回は <code>Interactor</code> で保持した <code>urlString</code> を取得したかっただけなので、処理の出し分け等はなく、シンプルになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">RestaurantInformationPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">RestaurantInformationPresenter:</span> <span class="n">RestaurantInformationPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">RestaurantInformationDisplayLogic</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">url:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displayRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>RestaurantInformationViewController.swift</h5>

<p>そして <code>ViewController</code> について説明します。<br/>
下記で</p>

<ul>
<li><code>Interactor</code> に具体的な処理内容(表示ロジック)を問い合わせる</li>
<li><code>Presenter</code> からの指示を受けて、最適な <code>View</code> を描画する</li>
</ul>


<p>を実現しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">WebKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">RestaurantInformationDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">RestaurantInformationViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">RestaurantInformationDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">RestaurantInformationBusinessLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">RestaurantInformationRoutingLogic</span> <span class="o">&amp;</span> <span class="n">RestaurantInformationDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">webView:</span> <span class="n">WKWebView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Object lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil:</span> <span class="n">Bundle</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="n">nibNameOrNil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="n">nibBundleOrNil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Setup</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewController</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">interactor</span> <span class="o">=</span> <span class="n">RestaurantInformationInteractor</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">presenter</span> <span class="o">=</span> <span class="n">RestaurantInformationPresenter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">RestaurantInformationRouter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
</span><span class='line'>        <span class="n">presenter</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">dataStore</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Routing</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">&quot;routeTo\(scene)WithSegue:&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span><span class="p">,</span> <span class="n">router</span><span class="p">.</span><span class="n">responds</span><span class="p">(</span><span class="nl">to:</span> <span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">router</span><span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">segue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: View lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;RestaurantInformation&quot;</span>
</span><span class='line'>        <span class="n">configuraWebView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">loadRestaurantInformation</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Configuration</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">configuraWebView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">webConfiguration</span> <span class="o">=</span> <span class="n">WKWebViewConfiguration</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="n">webView</span> <span class="o">=</span> <span class="n">WKWebView</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">,</span> <span class="nl">configuration:</span> <span class="n">webConfiguration</span><span class="p">)</span>
</span><span class='line'>        <span class="n">webView</span><span class="p">.</span><span class="n">uiDelegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>        <span class="n">webView</span><span class="p">.</span><span class="n">navigationDelegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">webView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Load restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">loadRestaurantInformation</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span><span class='line'>        <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">loadRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">RestaurantInformation</span><span class="p">.</span><span class="n">Load</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">urlRequest</span> <span class="o">=</span> <span class="n">URLRequest</span><span class="p">(</span><span class="nl">url:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>            <span class="n">webView</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">urlRequest</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">RestaurantInformationViewController:</span> <span class="n">WKUIDelegate</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">RestaurantInformationViewController:</span> <span class="n">WKNavigationDelegate</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>loadRestaurantInformation()</code>

<ul>
<li>レストラン情報の読み込みを <code>Interactor</code> に依頼しています</li>
</ul>
</li>
<li><code>displayRestaurantInformation(viewModel: RestaurantInformation.Load.ViewModel)</code>

<ul>
<li><code>Presenter</code> から受けた指示に従って描画を実行しています</li>
<li>ここでは指定URLを用いてWebページを表示しています</li>
</ul>
</li>
</ul>


<p>今回は <code>RestaurantInformationRouter.swift</code> および <code>RestaurantInformationWorker.swift</code> については特に具体的な処理がないため説明は省略します。</p>

<h4>MapView</h4>

<p>マップ上に表示されるInfoWindowをタップしないと、レストラン情報ページに遷移できない要件であるため、 <code>MapView</code> 配下も少々変更が必要です。<br/>
この変更をもって、<code>RestaurantInformationInteractor</code> 内で値の入った <code>urlString</code> を扱うことになります。</p>

<p>関係各所の変更内容も簡単に書いておきます。</p>

<h5>Models</h5>

<p>まずは <code>Models/Restaurant.swift</code> です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">Restaurant:</span> <span class="n">Equatable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">restaurantURL:</span> <span class="n">String</span> <span class="c1">// 追記</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて <code>Models/CustomGMSMarker.swift</code> です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomGMSMarker:</span> <span class="n">GMSMarker</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">restaurantURL:</span> <span class="n">String</span><span class="o">!</span> <span class="c1">// 追記</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 初期化</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>HotpepperAPI.swift</h5>

<p>構造体である <code>Restaurant</code> に変更が入ったので、 <code>Services/HotpepperAPI.swift</code> にも修正が必要になります。<br/>
(返却値である <code>Restaurant</code> を生成する部分で <code>restaurantURL</code> を追加する必要があるためです。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">HotpepperAPI:</span> <span class="n">HotpepperProtocol</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">SessionManager</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">requestWithoutCache</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">for</span> <span class="n">shop</span> <span class="k">in</span> <span class="n">shops</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="kt">id</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ID不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ショップ名不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">category</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;genre&quot;</span><span class="p">][</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;カテゴリ不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">imageURL</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;photo&quot;</span><span class="p">][</span><span class="s">&quot;mobile&quot;</span><span class="p">][</span><span class="s">&quot;l&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lat&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lng&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// ここから修正</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">restaurantURL</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;urls&quot;</span><span class="p">][</span><span class="s">&quot;pc&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">restaurant</span> <span class="o">=</span> <span class="n">Restaurant</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">,</span> <span class="nl">name:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">category:</span> <span class="n">category</span><span class="p">,</span> <span class="nl">imageURL:</span> <span class="n">imageURL</span><span class="p">,</span> <span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">,</span> <span class="nl">restaurantURL:</span> <span class="n">restaurantURL</span><span class="p">)</span>
</span><span class='line'>                <span class="c1">// ここまで修正</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">restaurants</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">restaurant</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">completionHandler</span><span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>MapModels.swift</h5>

<p>レストラン情報ページを見るために、 <code>url</code> を受け渡す必要があります。<br/>
その処理を実行するために <code>Fetch</code> を追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Map</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Fetch restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Fetch</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">urlString:</span> <span class="n">String</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>MapInteractor.swift</h5>

<p><code>MapInteractor.swift</code> では重要な変更を入れています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="c1">// 追記</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">urlString:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span> <span class="c1">// 追記</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapInteractor:</span> <span class="n">MapBusinessLogic</span><span class="p">,</span> <span class="n">MapDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">MapPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">HotpepperWorker</span><span class="p">(</span><span class="nl">hotpepper:</span> <span class="n">HotpepperAPI</span><span class="p">())</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">urlString:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>  <span class="c1">// 追記</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">initView:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 以下、追記</span>
</span><span class='line'>    <span class="c1">// MARK: Tap infoWindow</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">urlString</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">urlString</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Response</span><span class="p">()</span>
</span><span class='line'>        <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentFetchedRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>fetchRestaurantInformation(request: Map.Fetch.Request)</code>

<ul>
<li>マーカのInfoWindowをタップした際に、どのレストラン情報ページを表示すべきか把握する必要があります</li>
<li>そのため、 <code>Map.Fetch.Request</code> に格納された <code>urlString</code> を <code>MapDataStore</code> で定義された <code>urlString</code> に入力しています</li>
</ul>
</li>
<li><code>MapDataStore.urlString</code>

<ul>
<li>画面遷移時に値の受け渡しが必要な場合は <code>DataStore</code> プロトコルにフィールドを定義します</li>
<li>画面内で共通して使いまわしたい場合にも定義しておくと良いでしょう</li>
</ul>
</li>
</ul>


<h5>MapPresenter.swift</h5>

<p>一連の処理の流れ( <code>ViewController</code> → <code>Interactor</code> → <code>Presenter</code> )を書くために、具体的な実行処理はないものの、 <code>Presenter</code> を追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentFetchedRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapPresenter:</span> <span class="n">MapPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">MapDisplayLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present fetched restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentFetchedRestaurantInformation</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">transitRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>presentFetchedRestaurantInformation</code>

<ul>
<li><code>ViewController</code> に画面遷移処理を依頼します</li>
</ul>
</li>
</ul>


<h5>MapViewController.swift</h5>

<p>ユーザからのアクションの受取口や、 <code>Interactor</code> への依頼処理、 <code>Presenter</code> からの指示を実行する処理などを変更しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">MapDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 以下、追記</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">transitRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">MapDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">MapBusinessLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">MapRoutingLogic</span> <span class="o">&amp;</span> <span class="n">MapDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 以下追記</span>
</span><span class='line'>    <span class="c1">// MARK: Browse restaurant information</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurantInformation</span><span class="p">(</span><span class="nl">urlString:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="nl">urlString:</span> <span class="n">urlString</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">fetchRestaurantInformation</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">transitRestaurantInformation</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Fetch</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">router</span><span class="o">?</span><span class="p">.</span><span class="n">routeToRestaurantInformation</span><span class="p">(</span><span class="nl">segue:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">MapViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 以下追記</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="p">,</span> <span class="n">didTapInfoWindowOf</span> <span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">cMarker</span> <span class="o">=</span> <span class="n">marker</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomGMSMarker</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">fetchRestaurantInformation</span><span class="p">(</span><span class="nl">urlString:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">restaurantURL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>func mapView(_ mapView: GMSMapView, didTapInfoWindowOf marker: GMSMarker)</code>

<ul>
<li>InfoWindowのタップ処理を <code>delegate</code> でキャッチすることができるため、追記しています</li>
<li>ここで、レストラン情報URLを <code>Interactor</code> に受け渡すメソッドを実行します</li>
</ul>
</li>
<li><code>fetchRestaurantInformation(urlString: String)</code>

<ul>
<li>レストラン情報URLを <code>Interactor</code> に渡すメソッドです</li>
</ul>
</li>
<li><code>transitRestaurantInformation</code>

<ul>
<li><code>Presenter</code> から指示を受けた後に、 <code>Router</code> に画面遷移を依頼しています</li>
</ul>
</li>
</ul>


<h5>MapRouter.swift</h5>

<p>今回、新たに画面遷移の処理を実装するため、 <code>MapRouter.swift</code> の処理を大幅に追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">objc</span> <span class="n">protocol</span> <span class="n">MapRoutingLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">routeToRestaurantInformation</span><span class="p">(</span><span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="o">?</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapDataPassing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">dataStore:</span> <span class="n">MapDataStore</span><span class="o">?</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapRouter:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">MapRoutingLogic</span><span class="p">,</span> <span class="n">MapDataPassing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">MapViewController</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">dataStore:</span> <span class="n">MapDataStore</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Routing</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">routeToRestaurantInformation</span><span class="p">(</span><span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">segue</span> <span class="o">=</span> <span class="n">segue</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">destinationVC</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">destination</span> <span class="n">as</span><span class="o">!</span> <span class="n">RestaurantInformationViewController</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">destinationDS</span> <span class="o">=</span> <span class="n">destinationVC</span><span class="p">.</span><span class="n">router</span><span class="o">!</span><span class="p">.</span><span class="n">dataStore</span><span class="o">!</span>
</span><span class='line'>        <span class="n">passDataToRestaurantInformation</span><span class="p">(</span><span class="nl">source:</span> <span class="n">dataStore</span><span class="o">!</span><span class="p">,</span> <span class="nl">destination:</span> <span class="o">&amp;</span><span class="n">destinationDS</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">storyboard</span> <span class="o">=</span> <span class="n">UIStoryboard</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;Main&quot;</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">destinationVC</span> <span class="o">=</span> <span class="n">storyboard</span><span class="p">.</span><span class="n">instantiateViewController</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="s">&quot;RestaurantInformationViewController&quot;</span><span class="p">)</span> <span class="n">as</span><span class="o">!</span> <span class="n">RestaurantInformationViewController</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">destinationDS</span> <span class="o">=</span> <span class="n">destinationVC</span><span class="p">.</span><span class="n">router</span><span class="o">!</span><span class="p">.</span><span class="n">dataStore</span><span class="o">!</span>
</span><span class='line'>        <span class="n">passDataToRestaurantInformation</span><span class="p">(</span><span class="nl">source:</span> <span class="n">dataStore</span><span class="o">!</span><span class="p">,</span> <span class="nl">destination:</span> <span class="o">&amp;</span><span class="n">destinationDS</span><span class="p">)</span>
</span><span class='line'>        <span class="n">navigateToRestaurantInformation</span><span class="p">(</span><span class="nl">source:</span> <span class="n">viewController</span><span class="o">!</span><span class="p">,</span> <span class="nl">destination:</span> <span class="n">destinationVC</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Navigation</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">navigateToRestaurantInformation</span><span class="p">(</span><span class="nl">source:</span> <span class="n">MapViewController</span><span class="p">,</span> <span class="nl">destination:</span> <span class="n">RestaurantInformationViewController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">source</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">destination</span><span class="p">,</span> <span class="nl">sender:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Passing data</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">passDataToRestaurantInformation</span><span class="p">(</span><span class="nl">source:</span> <span class="n">MapDataStore</span><span class="p">,</span> <span class="nl">destination:</span> <span class="n">inout</span> <span class="n">RestaurantInformationDataStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">destination</span><span class="p">.</span><span class="n">urlString</span> <span class="o">=</span> <span class="n">source</span><span class="p">.</span><span class="n">urlString</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>MapRoutingLogic</code>

<ul>
<li>画面遷移するためのメソッドを定義します</li>
</ul>
</li>
<li><code>MapDataPassing</code>

<ul>
<li><code>MapDataStore</code> をフィールドとして定義しています</li>
<li><code>MapInteractor</code> 内で定義したプロトコルが <code>MapDataStore</code> であり、先程定義した <code>urlString</code> を含みます</li>
</ul>
</li>
<li><code>routeToRestaurantInformation</code>

<ul>
<li>内部処理は基本的に毎回同じのお決まりと考えて良いでしょう</li>
</ul>
</li>
<li><code>navigateToRestaurantInformation</code>

<ul>
<li>実際の画面遷移処理として <code>show</code> メソッドを実行しています</li>
</ul>
</li>
<li><code>passDataToRestaurantInformation</code>

<ul>
<li>画面遷移元の <code>DataStore</code> から、画面遷移先の <code>DataStore</code> に値を受け渡しています</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>以上が今回の要件追加に合わせて実装し直した内容になります。<br/>
本記事で扱ったソースコードは<a href="https://github.com/grandbig/CleanFoodLogger">CleanFoodLogger</a>にて公開しています。</p>

<p>今後は <code>RealmSwift</code> を用いた <code>CRUD</code> 処理だったり、 アプリでよく利用するUI面の話をできればと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Swiftを勉強してみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/10/08/clean-swift-2/"/>
    <updated>2017-10-08T22:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/10/08/clean-swift-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://clean-swift.com/">Clean Swift</a>を用いた具体的な例について見ていきたいと思います。<br/>
題材として、下記のような要件を持つアプリを扱います。</p>

<p><img src="http://grandbig.github.io/images/clean-swift-2_1.png" alt="Clean Swiftの題材アプリ" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの要件</h3>

<p>要件としては、下記の通りです。</p>

<ul>
<li>現在地を中心にマップを表示する</li>
<li>検索ボタンをタップして、現在地周辺のレストラン情報を取得する</li>
<li>マップに表示されたレストランのマーカをタップすると、レストラン情報の概要ウィンドウが表示される</li>
</ul>


<h3>フォルダ構成</h3>

<p>フォルダ構成は以下のようになっています。<br/>
※ 今回のアプリの名称を <code>CleanFoodLogger</code> とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">CleanFoodLogger</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Views</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">ViewController</span><span class="o">+</span><span class="nx">Alert</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Models</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">Restaurant</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomGMSMarker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Workers</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Services</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperAPI</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Scenes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">MapView</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">View</span>
</span><span class='line'><span class="err">│</span>         <span class="err">│</span>    <span class="err">├──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">xib</span>
</span><span class='line'><span class="err">│</span>         <span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewController</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapInteractor</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapModels</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapPresenter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapRouter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">└──</span> <span class="nx">MapWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">AppDelegate</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Main</span><span class="p">.</span><span class="nx">storyboard</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Assets</span><span class="p">.</span><span class="nx">xcassets</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">key</span><span class="p">.</span><span class="nx">plist</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれの構成の意味について説明します。</p>

<h4>Views</h4>

<p><code>Scene</code> に寄らない共通ビュー系を格納します。</p>

<ul>
<li><code>ViewController+Alert.swift</code>

<ul>
<li><code>UIViewController</code> を拡張する形で実装</li>
<li>共通アラート表示処理を実装</li>
</ul>
</li>
</ul>


<h4>Models</h4>

<p><code>Scene</code> に寄らないモデル系を格納します。</p>

<ul>
<li><code>Restaurant.swift</code>

<ul>
<li>APIを通して取得したレストラン情報を格納するモデル</li>
</ul>
</li>
<li><code>CustomGMSMarker</code>

<ul>
<li><code>GMSMarker</code>を継承したカスタムクラス</li>
<li>マーカにショップ情報を追加して持たせたモデル</li>
</ul>
</li>
</ul>


<h4>Workers</h4>

<p><code>Scene</code> に寄らない <code>Clean Swift</code> で言うところの <code>Worker</code> 系を格納します。<br/>
※ 今回は、レストラン情報を取得するのに<a href="https://webservice.recruit.co.jp/hotpepper/reference.html">ホットペッパーAPI</a>を利用しています。</p>

<ul>
<li><code>HotpepperWorker.swift</code>

<ul>
<li>ホットペッパーAPI管理マネージャに当たる <code>Services/HotpepperAPI.swift</code> を通じて取得したレストラン情報を扱う</li>
</ul>
</li>
</ul>


<h4>Services</h4>

<p><code>Scene</code> に寄らない管理マネージャ系の共通処理を扱います。</p>

<ul>
<li><code>HotpepperAPI.swift</code>

<ul>
<li>ホットペッパーAPIを用いた具体的なロジックを実装</li>
</ul>
</li>
</ul>


<h4>Scenes</h4>

<p>ここは画面単位に <code>Clean Swift</code>のテンプレートを当て込んだ構成になります。<br/>
今回は簡単なサンプルなので1画面しかありません。<br/>
よって、 <code>Scenes</code> に格納しているのも <code>MapView</code> 1つになります。<br/>
<code>MapView</code> の配下は <code>Clean Swift</code> テンプレート一式になっています。</p>

<h3>アプリの実装</h3>

<p>続いて具体的なアプリの実装について見ていきます。<br/>
データフローとしては、下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/clean-swift_3.png" alt="データフロー図" /></p>

<p>ではまずは、共通系の処理から説明します。</p>

<h4>Models</h4>

<p>この後の <code>Services</code> や <code>Workers</code> にも出てくるので、まずは <code>Models</code> から説明します。</p>

<h5>Restaurant.swift</h5>

<p>ホットペッパーAPIで取得したレストラン情報の一部を抜粋して格納するため、下記のような構成になっています。<br/>
今回は <code>==</code> で比較する処理を利用している箇所はありませんが、 <a href="https://github.com/Clean-Swift/CleanStore">Clean Store</a> を参考にしたので、そのまま残しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">Restaurant:</span> <span class="n">Equatable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">lhs:</span> <span class="n">Restaurant</span><span class="p">,</span> <span class="nl">rhs:</span> <span class="n">Restaurant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="kt">id</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">category</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">category</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">imageURL</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">imageURL</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">latitude</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">longitude</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>CustomGMSMarker.swift</h5>

<p>マーカをタップした際に、ショップ情報を表示する <code>InfoWindow</code> を表示する要件があるため、 <code>GMSMarker</code> クラスを継承して、ショップ情報を追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomGMSMarker:</span> <span class="n">GMSMarker</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 初期化</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Workers</h4>

<p><code>Services</code> の説明に移る前に、<code>Protocol</code> を提供している <code>Workers</code> について見ていきます。</p>

<h5>HotpepperWorker.swift</h5>

<p>これは、</p>

<ul>
<li>API処理を扱うための <code>Worker</code> クラスを提供</li>
<li>外部へのインターフェースを定義したプロトコルの定義</li>
</ul>


<p>の役目を果たしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Hotpepper worker</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperWorker</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">hotpepper:</span> <span class="n">HotpepperProtocol</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">hotpepper:</span> <span class="n">HotpepperProtocol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">hotpepper</span> <span class="o">=</span> <span class="n">hotpepper</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hotpepper</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Hotpepper API</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">HotpepperProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: CRUD operations</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - CRUD operation errors</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="nl">HotpepperError:</span> <span class="n">Equatable</span><span class="p">,</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">CannotFetch</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">lhs:</span> <span class="n">HotpepperError</span><span class="p">,</span> <span class="nl">rhs:</span> <span class="n">HotpepperError</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">(.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">let</span> <span class="n">a</span><span class="p">),</span> <span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">let</span> <span class="n">b</span><span class="p">))</span> <span class="n">where</span> <span class="n">a</span> <span class="o">==</span> <span class="nl">b:</span> <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Services</h4>

<p><code>Worker</code> で定義された外部へのインターフェースの挙動を実装したクラスに当たります。</p>

<h5>HotpepperAPI.swift</h5>

<p>今回は <code>HotpepperProtocol</code> を継承した <code>HotpepperAPI</code> 内で実際にホットペッパーAPIを叩いて処理しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">HotpepperAPI:</span> <span class="n">HotpepperProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">/// Geocoding APIのベースURL</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 初期化処理</span>
</span><span class='line'>    <span class="c1">// key.plistに定義したAPIKeyを取得してセット</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HotpepperWorker.swift内のHotpepperProtocolインターフェースの具体的な処理</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>        <span class="n">Alamofire</span><span class="p">.</span><span class="n">SessionManager</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">requestWithoutCache</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">isFailure</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">defaultErrorMessage</span> <span class="o">=</span> <span class="s">&quot;レストラン情報を取得できませんでした。&quot;</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">([],</span> <span class="n">HotpepperError</span><span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span> <span class="o">??</span> <span class="n">defaultErrorMessage</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">shops</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">].</span><span class="n">array</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">defaultErrorMessage</span> <span class="o">=</span> <span class="s">&quot;レストラン情報を取得できませんでした。&quot;</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">([],</span> <span class="n">HotpepperError</span><span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span> <span class="o">??</span> <span class="n">defaultErrorMessage</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="n">shop</span> <span class="k">in</span> <span class="n">shops</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="kt">id</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ID不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ショップ名不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">category</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;genre&quot;</span><span class="p">][</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;カテゴリ不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">imageURL</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;photo&quot;</span><span class="p">][</span><span class="s">&quot;mobile&quot;</span><span class="p">][</span><span class="s">&quot;l&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lat&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lng&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">restaurant</span> <span class="o">=</span> <span class="n">Restaurant</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">,</span> <span class="nl">name:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">category:</span> <span class="n">category</span><span class="p">,</span> <span class="nl">imageURL:</span> <span class="n">imageURL</span><span class="p">,</span> <span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>                <span class="n">restaurants</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">restaurant</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">completionHandler</span><span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Clean Swiftとは無関係ですが、キャッシュなしリクエストをAlamofireを通して実装する処理</span>
</span><span class='line'><span class="n">extension</span> <span class="n">Alamofire</span><span class="p">.</span><span class="n">SessionManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">discardableResult</span>
</span><span class='line'>    <span class="n">open</span> <span class="n">func</span> <span class="n">requestWithoutCache</span><span class="p">(</span>
</span><span class='line'>        <span class="n">_</span> <span class="nl">url:</span> <span class="n">URLConvertible</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">method:</span> <span class="n">HTTPMethod</span> <span class="o">=</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">parameters:</span> <span class="n">Parameters</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">encoding:</span> <span class="n">ParameterEncoding</span> <span class="o">=</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">headers:</span> <span class="n">HTTPHeaders</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span> <span class="n">DataRequest</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">urlRequest</span> <span class="o">=</span> <span class="n">try</span> <span class="n">URLRequest</span><span class="p">(</span><span class="nl">url:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">method:</span> <span class="n">method</span><span class="p">,</span> <span class="nl">headers:</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>                <span class="n">urlRequest</span><span class="p">.</span><span class="n">cachePolicy</span> <span class="o">=</span> <span class="p">.</span><span class="n">reloadIgnoringCacheData</span> <span class="c1">// &lt;&lt;== Cache disabled</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">encodedURLRequest</span> <span class="o">=</span> <span class="n">try</span> <span class="n">encoding</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">urlRequest</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">request</span><span class="p">(</span><span class="n">encodedURLRequest</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">request</span><span class="p">(</span><span class="n">URLRequest</span><span class="p">(</span><span class="nl">url:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;http://example.com/wrong_request&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MapView</h4>

<p>ここから重要な <code>Clean Swift</code> を使った実装に入っていきます。<br/>
今回は共通 <code>Worker</code> のみ利用しているため、 <code>MapWorker.swift</code> は省略します。<br/>
また、画面遷移の処理もないため、 <code>MapRouter.swift</code> についても省略します。</p>

<h5>MapModels.swift</h5>

<p>Clean Swiftで今回扱う <code>Model</code> は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Map</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Init</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Search</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Init</code>

<ul>
<li>マップ画面の初期描画時に「現在地を中心としたマップ位置に移動する」際に利用</li>
</ul>
</li>
<li><code>Search</code>

<ul>
<li>「現在地周辺のレストランを検索する」際に利用</li>
</ul>
</li>
</ul>


<h5>MapInteractor.swift</h5>

<p><code>ViewController</code> から受け取った依頼を <code>Worker</code> を経由して取得した値を <code>Presenter</code> に渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapDataStore</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapInteractor:</span> <span class="n">MapBusinessLogic</span><span class="p">,</span> <span class="n">MapDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">MapPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">HotpepperWorker</span><span class="p">(</span><span class="nl">hotpepper:</span> <span class="n">HotpepperAPI</span><span class="p">())</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">initView:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">initView</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>            <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>            <span class="n">initView</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">worker</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">restaurants:</span> <span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>initMapView</code>

<ul>
<li>APIやローカルDBを利用する必要がないため、<code>Worker</code>は利用していません</li>
<li>初回だけ、実行すれば良い処理なので内部で定義した <code>initView</code> でハンドリングしています</li>
</ul>
</li>
<li><code>searchRestaurants</code>

<ul>
<li>ホットペッパーAPIによるデータ取得は <code>HotpepperWorker</code> に任せています</li>
<li><code>HotpepperWorker</code> を介して取得したデータを <code>Map.Search.Response</code> 形式に変換</li>
<li>それを <code>MapPresenter</code> に渡しています</li>
</ul>
</li>
</ul>


<h5>MapPresenter.swift</h5>

<p><code>Interactor</code> から受け取ったデータを表示形式に変換して、<code>ViewController</code> に描画指示を出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapPresenter:</span> <span class="n">MapPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">MapDisplayLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">,</span> <span class="nl">zoomLevel:</span> <span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present searched restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">restaurants</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">restaurants</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">restaurants:</span> <span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">restaurants</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>presentInitMapView</code>

<ul>
<li>「現在地を中心としたマップ位置に移動する」ために <code>ViewController</code> に緯度/経度/ズームレベルを渡します</li>
</ul>
</li>
<li><code>presentSearchedRestaurants</code>

<ul>
<li>レストラン情報の有無で <code>ViewController</code> に出す指示を変えています</li>
<li>今回はシンプルな実装のため、<code>Map.Search.Response</code> から <code>Map.Search.ViewModel</code> に変換はありません</li>
</ul>
</li>
</ul>


<h5>MapViewController.swift</h5>

<p>最後に <code>ViewController</code> について説明します。<br/>
下記で</p>

<ul>
<li><code>Interactor</code> に具体的な処理内容(表示ロジック)を問い合わせる</li>
<li><code>Presenter</code> からの指示を受けて、最適な <code>View</code> を描画する</li>
</ul>


<p>を実現しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">MapDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">MapDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">MapBusinessLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">MapRoutingLogic</span> <span class="o">&amp;</span> <span class="n">MapDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Object lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil:</span> <span class="n">Bundle</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="n">nibNameOrNil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="n">nibBundleOrNil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Setup</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewController</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">interactor</span> <span class="o">=</span> <span class="n">MapInteractor</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">presenter</span> <span class="o">=</span> <span class="n">MapPresenter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">MapRouter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
</span><span class='line'>        <span class="n">presenter</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">dataStore</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Routing</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">&quot;routeTo\(scene)WithSegue:&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span><span class="p">,</span> <span class="n">router</span><span class="p">.</span><span class="n">responds</span><span class="p">(</span><span class="nl">to:</span> <span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">router</span><span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">segue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: View lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">configureMapView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">configureLocationManager</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Configuration</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">configureMapView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// GoogleMapの初期化</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">isMyLocationEnabled</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">mapType</span> <span class="o">=</span> <span class="n">GMSMapViewType</span><span class="p">.</span><span class="n">normal</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">myLocationButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">configureLocationManager</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 位置情報関連の初期化</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBest</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">requestWhenInUseAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 初期描画時のマップ中心位置の移動</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">camera</span> <span class="o">=</span> <span class="n">GMSCameraPosition</span><span class="p">.</span><span class="n">camera</span><span class="p">(</span><span class="nl">withTarget:</span> <span class="n">coordinate</span><span class="p">,</span> <span class="nl">zoom:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="n">camera</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">restaurants</span> <span class="o">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">restaurants</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">restaurant</span> <span class="k">in</span> <span class="n">restaurants</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">putMarker</span><span class="p">(</span><span class="nl">restaurant:</span> <span class="n">restaurant</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">showAlert</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;周辺にレストランは見つかりませんでした。&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tappedSearchButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">searchRestaurants</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Other</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">putMarker</span><span class="p">(</span><span class="nl">restaurant:</span> <span class="n">Restaurant</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">CustomGMSMarker</span><span class="p">()</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="kt">id</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">category</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">imageURL</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">imageURL</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">icon</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;RestaurantIcon&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">appearAnimation</span> <span class="o">=</span> <span class="n">GMSMarkerAnimation</span><span class="p">.</span><span class="n">pop</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="n">mapView</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">MapViewController:</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// マップの初期描画</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>            <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">MapViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="p">,</span> <span class="n">markerInfoWindow</span> <span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">cMarker</span> <span class="o">=</span> <span class="n">marker</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomGMSMarker</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cMarker</span><span class="p">.</span><span class="n">tracksInfoWindowChanges</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">CustomInfoWindow</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="mi">250</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">265</span><span class="p">))</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">setup</span><span class="p">(</span><span class="nl">name:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nl">category:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">category</span><span class="p">,</span> <span class="nl">imageURL:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>configureMapView</code> / <code>configureLocationManager</code>

<ul>
<li>最低限必要な <code>ViewController</code> 上での設定処理</li>
<li>ここで <code>startUpdatingLocation</code> を実行することで現在地の更新を開始</li>
</ul>
</li>
<li><code>didUpdateLocations</code> → <code>displayInitMap</code>

<ul>
<li>初期起動時は <code>mapView.myLocation</code> から現在地の即時取得ができないため、<code>startUpdatingLocation</code> を利用しています</li>
<li>現在地が取得できたタイミングで <code>didUpdateLocations</code> を通るため、 <code>Interactor</code> にマップ中心位置の移動を依頼しています</li>
<li>位置を移動させるか否かは <code>ViewController</code> では判断しません</li>
</ul>
</li>
<li><code>tappedSearchButton</code> → <code>searchRestaurants</code> → <code>displaySearchedSuccess</code> / <code>displaySearchedFailure</code>

<ul>
<li>検索ボタンをタップした時に <code>searchRestaurants</code> を呼び出しています</li>
<li><code>Interactor</code> にレストラン情報の検索を依頼しています</li>
<li><code>Presenter</code> から <code>displaySearchedSuccess</code> または <code>displaySearchedFailure</code> の描画指示を受けて描画します</li>
<li><code>Presenter</code> から返却された <code>Map.Search.ViewModel</code> を利用して <code>putMarker</code> を実行することでマップにマーカをプロットします。</li>
<li><code>displaySearchedFailure</code> では、失敗したことをアラート表示することで表現しています</li>
</ul>
</li>
<li><code>GMSMapViewDelegate</code>

<ul>
<li>マーカタップ時の処理を実装しています</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
次回は今回扱ったサンプルを拡張する形で実装し、説明していきたいと思います。<br/>
因みに、本記事のソースは <a href="https://github.com/grandbig/CleanFoodLogger">CleanFoodLogger</a>にて公開しています。<br/>
※ バージョン <code>1.0</code> を参照してください。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Swiftを勉強してみよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/25/clean-swift/"/>
    <updated>2017-09-25T23:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/25/clean-swift</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は<a href="https://clean-swift.com/">Clean Swift</a>について書いていきたいと思います。</p>

<h3>Clean Swiftとは</h3>

<p>Clean Swiftは簡単に言うと『<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>のSwift版』です。  <br/>
参考までにClean Architectureの有名な図を掲載します。<br/>
※ <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>より抜粋させて頂きました。<br/>
<img src="http://grandbig.github.io/images/clean-swift_1.jpg" alt="Clean Architecture" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>Clean Swiftアーキテクチャを採用することで受けられる恩恵として下記が考えられます。</p>

<ul>
<li>各種コンポーネントの責務を細分化することで、Massive ViewControllerの解消に繋がる</li>
<li>データの方向性が一方向になるため、各種コンポーネントの相互依存性が減り、TDD開発が進めやすくなる</li>
<li>各種コンポーネントの責務がはっきりしているため、チーム開発する際に、実装が平準化される</li>
</ul>


<h3>コンポーネントの関係性</h3>

<p>各種コンポーネントの関係性を表した全体像が下図になります。<br/>
<img src="http://grandbig.github.io/images/clean-swift_2.png" alt="Clean Swift Architectureの図" /></p>

<p>この関係性を説明するにあたって、各種コンポーネントの責務を理解しておく必要があるのでそれぞれ見ていきましょう。</p>

<h3>各コンポーネントの説明</h3>

<h4>View</h4>

<p>特に他のアーキテクチャと大きく違わない認識です。</p>

<p><strong>責務：</strong><br/>
① iOSアプリの見た目を表現する</p>

<h4>ViewController</h4>

<p><code>Massive ViewController</code> になりがちな部分ですが、Clean Swiftでの責務は以下になります。</p>

<p><strong>責務：</strong><br/>
① <code>Interactor</code> に具体的な処理内容(表示ロジック)を問い合わせる<br/>
② <code>Presenter</code> からの指示を受けて、最適な <code>View</code> を描画する<br/>
③ <code>Router</code> に画面遷移を依頼する</p>

<p>具体例は下記になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">SampleViewDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">transitionToSomeWhere</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">SampleViewDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">SampleViewBusinessLogic</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">SampleViewRoutingLogic</span> <span class="o">&amp;</span> <span class="n">SampleViewDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Object lifecycle</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil:</span> <span class="n">Bundle</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="n">nibNameOrNil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="n">nibBundleOrNil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Setup</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">viewController</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">interactor</span> <span class="o">=</span> <span class="n">SampleViewInteractor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">presenter</span> <span class="o">=</span> <span class="n">SampleViewPresenter</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">SampleViewRouter</span><span class="p">()</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'>    <span class="n">interactor</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
</span><span class='line'>    <span class="n">presenter</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>    <span class="n">router</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>    <span class="n">router</span><span class="p">.</span><span class="n">dataStore</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Routing</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">&quot;routeTo\(scene)WithSegue:&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span><span class="p">,</span> <span class="n">router</span><span class="p">.</span><span class="n">responds</span><span class="p">(</span><span class="nl">to:</span> <span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">segue</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: View lifecycle</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fetchSomethingOnLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ① Interactorに具体的な処理内容を問い合わせる</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">fetchSomethingOnLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span><span class='line'>    <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ② Presenterからの指示を受けてViewを描画する</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do error something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ③ Routerに画面遷移を依頼する</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">transitionToSomeWhere</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 画面遷移</span>
</span><span class='line'>    <span class="n">router</span><span class="o">?</span><span class="p">.</span><span class="n">routeToSomeWhere</span><span class="p">(</span><span class="nl">segue:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、ユーザによるアクション起因の場合は下記のようにするだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tapSomeAction</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ① Interactorに具体的な処理内容を問い合わせる</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span><span class='line'>  <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Presenter</code> からの指示を受けて、 <code>ViewController</code> は描画処理を実行するため、見た目の整形などの <strong>描画処理自体</strong> は <code>ViewController</code> 内に書きます。</p>

<p>例えば、</p>

<p>・正方形の <code>UIView</code> を角丸にする/背景色を変更する/非表示にする etc<br/>
・マップにマーカを配置する/図形を描画する etc</p>

<h4>Interactor</h4>

<p><code>ViewController</code> から依頼を受け、 <code>Interactor</code> は下記を実施する責務を持っています。</p>

<p><strong>責務：</strong><br/>
① <code>Worker</code> と <code>Presenter</code> を仲介する<br/>
② どんな条件で、 <code>Worker</code> に何の処理を依頼するのかハンドリングする<br/>
③ <code>Worker</code> 経由で取得したレスポンスを <code>Presenter</code> に渡す</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewDataStore</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 画面遷移時にパラメータを受け取れるように定義</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">something:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewInteractor:</span> <span class="n">SampleViewBusinessLogic</span><span class="p">,</span> <span class="n">SampleViewDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">SampleViewPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">SampleViewWorker</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">something:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ① WorkerとPresenterを仲介する</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="nl">success:</span> <span class="p">{</span> <span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 処理が成功した場合</span>
</span><span class='line'>        <span class="c1">// ③ Worker経由で取得したレスポンスをPresenterに渡す  </span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">isError:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="p">},</span> <span class="nl">failure:</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 処理が失敗した場合</span>
</span><span class='line'>        <span class="c1">// ③ Worker経由で取得したレスポンスをPresenterに渡す  </span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">isError:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ② どんな条件で、Workerに何の処理を依頼するのかハンドリングする</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">time</span> <span class="o">&gt;</span> <span class="n">Date</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">future:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSometime</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">future:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>      <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSometime</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomeWhat</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">SomeWhat</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 画面遷移時に渡されたパラメータを利用した描画を実施したい場合</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">something</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Worker</h4>

<p><code>Interactor</code> から受けた依頼を実行します。</p>

<p><strong>責務：</strong><br/>
① <code>API</code> 処理や <code>Core Data</code> / <code>Realm</code> などのアプリ内ローカルデータの処理をハンドリングする<br/>
② 成功/失敗レスポンスをハンドリングする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SampleViewWorker</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetch</span><span class="p">(</span><span class="nl">success:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">SomeObject</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">),</span> <span class="nl">failure:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">Error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// APIリクエストまたはローカルDBへのアクセスを実行してデータを取得</span>
</span><span class='line'>      <span class="c1">// 具体的な処理は省略</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">obj:</span> <span class="n">SomeObject</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'>      <span class="n">success</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Presenter</h4>

<p><code>Interactor</code> から <code>Worker</code> 経由で取得したレスポンスを受け取った後に、 <code>Presenter</code> は下記を実行することを責務とします。</p>

<p><strong>責務：</strong><br/>
① 受け取ったレスポンスを元に最適な表示(成功/失敗などの表示)になるようハンドリングする<br/>
② 受け取ったレスポンスを <code>Model.ViewModel</code> 形式に変換する<br/>
③ <code>ViewController</code> に <code>Model.ViewModel</code> を渡して描画を依頼する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewPresenter:</span> <span class="n">SampleViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">SampleViewDisplayLogic</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Present something</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ② 受け取ったレスポンスをModel.ViewModel形式に変換する</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">object:</span> <span class="n">response</span><span class="p">.</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ① 受け取ったレスポンスを元に最適な表示(成功/失敗などの表示)になるようハンドリングする</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">isError</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// エラーがある場合</span>
</span><span class='line'>      <span class="c1">// ③ ViewControllerにModel.ViewModelを渡して描画を依頼する  </span>
</span><span class='line'>      <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ③ ViewControllerにModel.ViewModelを渡して描画を依頼する</span>
</span><span class='line'>    <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Model</h4>

<p>Clean Swiftアーキテクチャの肝といっても過言ではないのが <code>Model</code> です。</p>

<p><strong>責務：</strong><br/>
① 各種コンポーネントを切り離し、各種コンポーネント間のやり取りに利用される<br/>
② <code>Request</code> / <code>Response</code> / <code>ViewModel</code> の3つの構造体を持つ</p>

<p><strong>3つの構造体の説明：</strong><br/>
・ <code>Request</code><br/>
　　・ ユーザの操作をInputパラメータとして内包したデータ形式<br/>
　　・ <code>ViewController</code> から <code>Interactor</code> に渡される<br/>
・ <code>Response</code><br/>
　　・ <code>Worker</code> 処理結果を内包しているデータ形式<br/>
　　・ <code>Interactor</code> から <code>Presenter</code> に渡される<br/>
・ <code>ViewModel</code><br/>
　　・ <code>ViewController</code> での描画に即したデータ形式<br/>
　　・ <code>Presenter</code> から <code>ViewController</code> に渡される</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">SampleView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Fetch something</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">Something</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">object:</span> <span class="n">SomeObject</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">isError:</span> <span class="n">Bool</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">object:</span> <span class="n">SomeObject</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Fetch sometime</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">Sometime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>データフローの例</h3>

<p>各コンポーネントの責務を理解した上で、コンポーネント間のフローの流れを見ていきましょう。</p>

<h4>ユーザがボタンをタップして通信処理後に取得データを描画するフロー</h4>

<p>ユーザが <code>View</code> 上のボタンをタップした後に、外部APIを叩いて取得したデータで <code>View</code> 描画するデータフローは下記になります。</p>

<p>① <code>ViewController</code> が <code>View</code> に対するユーザアクションを検知<br/>
② <code>ViewController</code> が <code>Interactor</code> に <code>Model.Request</code> を送って具体的な処理を依頼<br/>
③ <code>Interactor</code> が <code>Worker</code> に処理を依頼<br/>
④ <code>Worker</code> が通信処理した結果を <code>Interactor</code> に返却<br/>
⑤ <code>Interactor</code> が返却データを <code>Model.Response</code> に変換して、 <code>Presenter</code> に処理を依頼 <br/>
⑥ <code>Presenter</code> が受け渡されたデータを <code>Model.ViewModel</code> に変換して、 <code>ViewController</code> に描画を指示<br/>
⑦ <code>ViewController</code> が <code>View</code> に描画を反映</p>

<p><img src="http://grandbig.github.io/images/clean-swift_3.png" alt="データのフロー例１" /></p>

<p>※このフローでは画面遷移がないため、Routerへの繋がりはありません。</p>

<h4>ユーザがボタンをタップしてローカルDBからデータ取得して画面遷移するフロー</h4>

<p>ユーザが <code>View</code> 上のボタンをタップした後に、ローカルDB内データを取得して、画面遷移するデータフローは下記になります。</p>

<p>① <code>ViewController</code> が <code>View</code> に対するユーザアクションを検知<br/>
② <code>ViewController</code> が <code>Interactor</code> に <code>Model.Request</code> を送って具体的な処理を依頼<br/>
③ <code>Interactor</code> が <code>Worker</code> に処理を依頼<br/>
④ <code>Worker</code> がローカルDBから処理した結果を <code>Interactor</code> に返却<br/>
⑤ <code>Interactor</code> が返却データを <code>Model.Response</code> に変換して、 <code>Presenter</code> に処理を依頼 <br/>
⑥ <code>Presenter</code> が受け渡されたデータを <code>Model.ViewModel</code> に変換して、 <code>ViewController</code> に描画を指示<br/>
⑦ <code>ViewController</code> が <code>Router</code> に画面遷移を依頼<br/>
⑧ <code>Router</code> が依頼された画面先にデータを受け渡し、画面遷移を実行</p>

<p><img src="http://grandbig.github.io/images/clean-swift_4.png" alt="データのフロー例２" /></p>

<h3>まとめ</h3>

<p>まず、各種コンポーネントの責務と、そのコンポーネント間の関係性および抽象的なデータフローについて説明しました。<br/>
次回は具体的なサンプルを元にClean Swiftについて説明したいと思います。</p>

<p>参考URL:</p>

<ul>
<li><a href="https://clean-swift.com/clean-swift-ios-architecture/">Clean Swift公式ページ</a></li>
<li><a href="https://hackernoon.com/introducing-clean-swift-architecture-vip-770a639ad7bf">Introducing Clean Swift Architecture (VIP)</a></li>
<li><a href="https://swifting.io/blog/2016/09/07/architecture-wars-a-new-hope/">swifting.io: #24 Architecture Wars – A New Hope</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プッシュ通知をnode-apnで送ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/node-apn/"/>
    <updated>2017-09-18T20:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/node-apn</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="https://grandbig.github.io/blog/2017/09/18/firebase-notification/">前回</a>はFirebaseを利用してiOSにRemote Notificationを送信することについて書きました。<br/>
今後は自作せずにFirebaseを利用するプロダクトが増えてくると思うことに変わりはないのですが、ふと昔利用していた<a href="https://github.com/node-apn/node-apn">node-apn</a>が気になりました。<br/>
折角の機会なので、この<code>node-apn</code>を利用してRemote Notificationを送信してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>プロジェクトの用意</h3>

<p>ベースプロジェクトは<a href="https://github.com/expressjs/express">Express</a>を使ってしまいましょう。<br/>
今回の各種バージョンは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Node</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span>  <span class="nx">v7</span><span class="p">.</span><span class="mf">3.0</span>
</span><span class='line'><span class="nx">npm</span><span class="o">:</span>      <span class="nx">v3</span><span class="p">.</span><span class="mf">10.10</span>
</span><span class='line'><span class="nx">Express</span><span class="o">:</span>  <span class="nx">v4</span><span class="p">.</span><span class="mf">15.0</span>
</span><span class='line'><span class="nx">nodebrew</span><span class="o">:</span> <span class="nx">v0</span><span class="p">.</span><span class="mf">9.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>① Expressコマンドで<code>pushtest</code>プロジェクトの生成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">express</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">ejs</span> <span class="nx">pushtest</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると下記のプロジェクト構成が出来上がります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pushtest</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">bin</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">www</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">routes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">users</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>express</code>コマンドを打つには<code>express</code>と<code>express-generator</code>のインストールが必要です。<br/>
また、グローバルインストールした<code>node_modules</code>へのパスを<code>.bash_profile</code>に通しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="nx">$HOME</span><span class="o">/</span><span class="p">.</span><span class="nx">nodebrew</span><span class="o">/</span><span class="nx">current</span><span class="o">/</span><span class="nx">bin</span><span class="o">:</span><span class="nx">$PATH</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">NODE_PATH</span><span class="o">=</span><span class="nx">$HOME</span><span class="o">/</span><span class="p">.</span><span class="nx">nodebrew</span><span class="o">/</span><span class="nx">current</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>source ~/.bash_profile</code>で最新状況を読み込むのを忘れずに。</p>

<p>② <code>node-apn</code>のインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">node</span><span class="o">-</span><span class="nx">apn</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、必要なモジュールをインストールしたつもりでも、何度も<code>Cannot find module xxx</code>と出てしまうようであれば、<code>app.js</code>と同じ階層下で<code>npm install -d</code>を実行しましょう。</p>

<h3>処理を実装</h3>

<p>プロジェクトが用意できたので、処理を実装していきましょう。<br/>
今回は簡単のため要件としては下記のみとします。</p>

<p>・特定の端末のデバイストークンを指定<br/>
・GETリクエスト</p>

<p>① <code>app.js</code>に処理を実装<br/>
まずはGETリクエストの受け口を<code>app.js</code>に用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">favicon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;serve-favicon&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;morgan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cookieParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cookie-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/apns&#39;</span><span class="p">);</span><span class="c1">// apns.jsは④で作成しますが、既にある体で追記</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/apns&#39;</span><span class="p">,</span> <span class="nx">apns</span><span class="p">);</span><span class="c1">// GETリクエストを受けられるように追記</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>② <code>routes/apns.js</code>を作成</p>

<p>最後にメインとなる処理を書いていきます。<br/>
専用の<code>routes/apns.js</code>を作成し、その内部に<code>node-apn</code>を利用した処理を書いていきます。<br/>
推奨されている<code>APNS Key</code>を利用するため、別途<code>AuthKey_xxxxxxxxxx.p8</code>を用意しましょう。</p>

<p>その結果、プロジェクト構成としては下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pushtest</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">bin</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">www</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">key</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">AuthKey_xxxxxxxxxx</span><span class="p">.</span><span class="nx">p8</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">routes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">users</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて具体的な処理です。<br/>
昔よりもシンプルに書けるようになっているイメージです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;apn&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;qs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// GETパラメータからトークンを取得</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deviceToken</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// プッシュ通知の設定</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">token</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;./keys/AuthKey_xxxxxxxxxx.p8&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">keyId</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxx&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">teamId</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxx&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">production</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">apnProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apn</span><span class="p">.</span><span class="nx">Provider</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apn</span><span class="p">.</span><span class="nx">Notification</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">badge</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">sound</span> <span class="o">=</span> <span class="s2">&quot;ping.aiff&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">alert</span> <span class="o">=</span> <span class="s2">&quot;プッシュ通知が届きましたよ！&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">topic</span> <span class="o">=</span> <span class="s2">&quot;com.xxx.NotificationSample&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// プッシュ送信</span>
</span><span class='line'>  <span class="nx">apnProvider</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="nx">deviceToken</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;respond with a resource&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>プッシュ通知を送信</h3>

<p>準備ができたのでプッシュ通知を送ってみましょう。</p>

<p>① <code>Node</code>を起動</p>

<p>デバッグしながら起動するために下記を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">node</span> <span class="o">--</span><span class="nx">inspect</span> <span class="o">--</span><span class="nx">debug</span><span class="o">-</span><span class="nx">brk</span> <span class="nx">bin</span><span class="o">/</span><span class="nx">www</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、下記出力がされるのでChromeでアクセスしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Debugger</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9229</span><span class="p">.</span>
</span><span class='line'><span class="nx">Warning</span><span class="o">:</span> <span class="nx">This</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">experimental</span> <span class="nx">feature</span> <span class="nx">and</span> <span class="nx">could</span> <span class="nx">change</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">start</span> <span class="nx">debugging</span><span class="p">,</span> <span class="nx">open</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">URL</span> <span class="k">in</span> <span class="nx">Chrome</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="o">-</span><span class="nx">devtools</span><span class="o">:</span><span class="c1">//devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>② プッシュ通知を送る</p>

<p>下記URLにアクセスしてGETリクエストを投げましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/apns?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけで下図のようにプッシュ通知が届きました。</p>

<p><img src="http://grandbig.github.io/images/node-apn_1.png" alt="node-apnで送ったプッシュ通知" /></p>

<h3>まとめ</h3>

<p>さて今回は<code>node-apn</code>でのプッシュ通知について書きました。<br/>
3年以上前に<a href="https://grandbig.github.io/blog/2014/02/22/silentremotenotification/">Silent Remote Notificationを試そう！</a>で利用したりしていたのですが、今見るといろいろと変わっているなと改めて感じました。<br/>
今更ではありますが、これも一つ勉強になったと思い、<code>Firebase</code>に没頭していこうかなと&hellip;笑<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firebase NotificationをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/firebase-notification/"/>
    <updated>2017-09-18T00:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/firebase-notification</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はFirebase Notificationについて見ていきたいと思います。<br/>
一昔前であれば、プロダクトごとにNotificationの仕組みを作り込んだり、共通基盤としてNotificationプロジェクトを推進していたりといった会社が多かった気がします。<br/>
また、未だにリッチなNotificationのプロダクトを生業として利益を上げている会社もあるので、それだけNotificationの仕組みは自作ではなくあるものを使いたいという需要が大きいのでしょう。<br/>
しかしながら、Firebaseの登場により、Notificationプロダクト市場もより加熱化しているのではないでしょうか。</p>

<p>筆者的にはGoogleが出す、それも無料のプロダクトであるわけなので、使わない手はないと思うわけです。<br/>
なんて偉そうなことを言いつつ、FireabseによるNotificationの仕組みを利用したことがなかったので、今回試しに使ってみることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Firebaseの導入</h3>

<p>こちらの内容は<a href="https://grandbig.github.io/blog/2017/05/14/firebase-ios/">以前書いた記事</a>に任せたいと思います。</p>

<h3>APNs証明書の作成</h3>

<p>こちらに関しては、様々なサイトにて説明がされているので、そちらを見るなどした方が早いので省きます。<br/>
例えば <a href="http://qiita.com/natsumo/items/d5cc1d0be427ca3af1cb#6-apns%E7%94%A8%E8%A8%BC%E6%98%8E%E6%9B%B8cer%E3%81%AE%E4%BD%9C%E6%88%90">プッシュ通知に必要な証明書の作り方2017</a>など参考にすると良いでしょう。</p>

<h3>Firebase Notificationの利用</h3>

<p>さて、本題です。<br/>
Firebase Notificationを利用するための手順について説明します。</p>

<p>① 作成したAPNs証明書をダウンロードする<br/>
先程作成したAPNs証明書はキーチェーンに登録していると思います。<br/>
(Apple Developer Programで作成したAPNs証明書は必ずDLしてキーチェーンに登録しましょう。)<br/>
キーチェーンを開いて、該当の証明書をダウンロードします。</p>

<p>該当のAPNs証明書は <code>Apple Development IOS Push Services: xxxxx</code> のようになっているものです。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_1.png" alt="キーチェーンを開く" /></p>

<p>右クリックして書き出すを選択します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_2.png" alt="証明書を書き出す" /></p>

<p>ファイル名とパスワードをつけて保存します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_3.png" alt="ファイル名とパスワードの付け方" /></p>

<p>② ダウンロードしたAPNs証明書をFirebaseに登録する</p>

<p>FirebaseのConsoleを開き、設定画面に遷移します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_4.png" alt="Firebase Consoleの設定画面" /></p>

<p>クラウドメッセージングタブを開き、APNs証明書をアップロードします。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_5.png" alt="Firebase Console クラウドメッセージングタブ" /></p>

<p>③ Firebaseの必要ライブラリを導入する<br/>
Firebaseの導入で<code>Core</code>ライブラリはインストールできているかもしれませんが、Notificationでは<code>Messaging</code>が必要になります。<br/>
よって、<code>Podfile</code>を下記のように修正して、<code>pod update</code>をする必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;NotificationSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Firebase</span><span class="o">/</span><span class="n">Core</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Firebase</span><span class="o">/</span><span class="n">Messaging</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">abstract_target</span> <span class="err">&#39;</span><span class="n">Tests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">search_paths</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;NotificationSampleTests&quot;</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;NotificationSampleUITests&quot;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>④ ソースコードにFirebase Notificationが利用できるように実装する<br/>
続いて、ソースコードの設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Firebase</span>
</span><span class='line'><span class="n">import</span> <span class="n">UserNotifications</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span><span class="p">,</span> <span class="n">UNUserNotificationCenterDelegate</span><span class="p">,</span> <span class="n">MessagingDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// リモート通知 (iOS10に対応)</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">authOptions:</span> <span class="n">UNAuthorizationOptions</span> <span class="o">=</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">]</span>
</span><span class='line'>    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span>
</span><span class='line'>      <span class="nl">options:</span> <span class="n">authOptions</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">completionHandler:</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UNUserNotificationCenterDelegateの設定</span>
</span><span class='line'>    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="c1">// FCMのMessagingDelegateの設定</span>
</span><span class='line'>    <span class="n">Messaging</span><span class="p">.</span><span class="n">messaging</span><span class="p">().</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// リモートプッシュの設定</span>
</span><span class='line'>    <span class="n">application</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Firebase初期設定</span>
</span><span class='line'>    <span class="n">FirebaseApp</span><span class="p">.</span><span class="n">configure</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// アプリ起動時にFCMのトークンを取得し、表示する</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">token</span> <span class="o">=</span> <span class="n">Messaging</span><span class="p">.</span><span class="n">messaging</span><span class="p">().</span><span class="n">fcmToken</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;FCM token: \(token ?? &quot;&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">userNotificationCenter</span><span class="p">(</span><span class="n">_</span> <span class="nl">center:</span> <span class="n">UNUserNotificationCenter</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">willPresent</span> <span class="nl">notification:</span> <span class="n">UNNotification</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">withCompletionHandler</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">UNNotificationPresentationOptions</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;フロントでプッシュ通知受け取ったよ&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">messaging</span><span class="p">(</span><span class="n">_</span> <span class="nl">messaging:</span> <span class="n">Messaging</span><span class="p">,</span> <span class="n">didRefreshRegistrationToken</span> <span class="nl">fcmToken:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Firebase registration token: \(fcmToken)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけでプッシュ通知の受信ができるようになります。</p>

<h3>Firebase Notificationを利用する</h3>

<p>設定が完了したため、Firebaseからプッシュ通知を送ってみましょう。</p>

<p>方法は簡単です。</p>

<p>① 左メニューから <code>Notification</code> を選択する<br/>
② 「新しいメッセージ」を選択する<br/>
③ 必要項目を入力して「メッセージを送る」を選択する</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_6.png" alt="Firebase Consoleからプッシュ通知を送る" /></p>

<p>これにより、下図のようにプッシュが届くことを確認できます。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_7.png" alt="端末にプッシュ通知が届く" /></p>

<h3>FirebaseにAPNs Keyを登録する方法</h3>

<p>さて、上記まででは、APNs証明書を作成して、Firebaseに登録する方法を説明しましたが、実はAPNs証明書よりも <code>APNs Key</code> というものの利用を推奨されています。<br/>
なので、こちらの方法も説明しておきます。</p>

<p>作成方法はいたって簡単です。</p>

<p>① Apple Developer Programの左メニューから<code>Keys &gt; All</code>を選択する<br/>
② 「＋」ボタンで新規作成する<br/>
③ Keyの名称を設定する<br/>
④ Service種別として<code>APNs</code>を選択する<br/>
⑤ Continueボタンを選択して作成する</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_8.png" alt="APNs Keyの作成方法" /></p>

<p>上記で作成した<code>APNs Key</code>をFirebase Console上で設定します。</p>

<p>Firebase Console > 設定 > クラウドメッセージング > iOSアプリの設定から<code>APNs認証キー</code>に設定します。</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_9.png" alt="APNs認証キーを設定" /></p>

<p>因みに、設定時に利用するIDはそれぞれ下記から取得します。</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_10.png" alt="キーID" /><br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_11.png" alt="App ID Prefix" /></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
まだまだFirebase Console上からプッシュできるNotificationにも制限があるようですが、複雑なことをしない例えば「一斉お知らせ機能」のような形で利用するのであれば非常に良いのではないでしょうか？<br/>
今後もバージョンアップして使いやすくなることを期待しつつ、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(4周年)]]></title>
    <link href="http://grandbig.github.io/blog/2017/08/27/blog-4-year-anniversary/"/>
    <updated>2017-08-27T13:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/08/27/blog-4-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めてもうすぐ4周年</h3>

<p>来月頭に技術ブログ4周年を迎えるため、今年も書いていきたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p><strong>Google Analytics</strong> からデータアクセスの推移を見ていきたいと思います。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/4anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
特にゴールデンウィーク後にアクセス数が急増している様子が見られました。</p>

<p>もう少し詳細化したものを記載します。<br/>
以下、1年間のアクセス数の推移を示しています。  <br/>
<img src="http://grandbig.github.io/images/4anniversary2.png" alt="1年間でのアクセス数の推移" /></p>

<p>特にゴールデンウィーク後からは、平日のページビュー数/日が680〜800を常時維持しています。</p>

<p>また、2017/06に最高のページビュー数を記録しました。<br/>
(もう少しで20,000に届きそうなところまで来ました。)<br/>
<img src="http://grandbig.github.io/images/4anniversary3.png" alt="2017/06の記録" /></p>

<p>因みにですが&hellip;<br/>
ブログ開始当初からの各値の総計は下図の通りです。<br/>
<img src="http://grandbig.github.io/images/4anniversary4.png" alt="ブログ開始からの各数値" /></p>

<h4>アクセス数の多い記事を紹介</h4>

<p>続いてアクセス数が多かった記事ランキングです！！</p>

<p><strong>1位: <a href="https://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary5.png" alt="第1位記事の詳細データ" /></p>

<p><strong>2位: <a href="https://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot/">Spring Bootでリダイレクト先にパラメータを渡す方法</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary6.png" alt="第2位記事の詳細データ" /></p>

<p><strong>3位: <a href="https://grandbig.github.io/blog/2016/07/16/git-reset/">GitでリモートにPushした内容を取り消したい！！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary7.png" alt="第3位記事の詳細データ" /></p>

<p><strong>4位: <a href="http://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary8.png" alt="第4位記事の詳細データ" /></p>

<p><strong>5位: <a href="https://grandbig.github.io/blog/2016/09/19/start-xcode8/">Xcode8を始めてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary9.png" alt="第5位記事の詳細データ" /></p>

<p>以上が上位5記事です。</p>

<p>3年目まで1位をキープしていた <strong>『Backgroundで位置情報を取得しよう！』</strong> がとうとう1位の座を明け渡す結果となりました。<br/>
(因みに今年は7位でした&hellip;)<br/>
そして、昨年2位の位置につけていたAndroidの記事ですが、今年はぶっちぎりの1位という結果となりました。  <br/>
今後はKotlinの記事がアクセス増加に寄与するかもしれませんね。</p>

<p>2位は昨年筆者がSpring Bootに触れる機会があったため、書いていたSpring Boot系の記事でした。<br/>
3位はGitの記事です。<br/>
今やGitを使うことはデファクトスタンダードになっていると思うものの、失敗した時にどうすれば良いのかという部分についてはまだまだ浸透していないということなのかもしれません。<br/>
4位と5位はiOS関連の記事です。<br/>
特に4位の記事はiOSアプリのテストに関するものだったので、ネイティブアプリ開発における自動テストの意識も向上しているのかなと思ったりします。</p>

<h4>広告収入の推移</h4>

<p>広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
毎年説明していますが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。<br/>
本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、今年の推移(2016/09/01〜2017/08/26)を見ていきます。<br/>
<img src="http://grandbig.github.io/images/4anniversary10.png" alt="Google Adsenseの推移" /></p>

<p>上記期間のAdsense収益は <strong>$79.29</strong> (約8,600円)でした。<br/>
1年間で1回Googleから頂けるような形になっているので、成長を実感します。</p>

<h3>まとめ</h3>

<p>さて、いかがでしたでしょうか？<br/>
筆者自身も毎年楽しみにこの記事を書いているので、今年も書けて良かったです。<br/>
毎月1記事は必ず書く目標を何とか貫けているので、これからも続けたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionViewCellをカスタム化しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/08/06/custome-collectionview/"/>
    <updated>2017-08-06T03:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/08/06/custome-collectionview</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は基礎中の基礎ではあるものの、結構忘れがちなカスタム化についてメモ書きしておきたいと思います。<br/>
その題材として <code>UICollectionViewCell</code> を使ってみます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>カスタムファイルの作成</h3>

<p>まずは <code>xib</code> ファイルを作成します。<br/>
今回は下記のように <code>UIImageView</code> を持たせるようにカスタム化させます。<br/>
(<code>CustomCollectionViewCell.xib</code>とします。)</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-1.png" alt="xibファイル" /></p>

<p>これと対となる<code>swift</code>ファイルを作成します。<br/>
(<code>CustomCollectionViewCell.swift</code>とします。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CustomCollectionViewCell.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomCollectionViewCell:</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">imageView:</span> <span class="n">UIImageView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;CustomCollectionViewCell&quot;</span><span class="p">,</span> <span class="nl">owner:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">first</span> <span class="n">as</span><span class="o">?</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この<code>xib</code>と<code>swift</code>ファイルを繋ぐために <code>xib</code>ファイルの<code>File's Owner</code>の<code>Custom Class</code>の<code>Class</code>にクラス名を入力します。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-2.png" alt="xibとswiftの接続" /></p>

<h3>Storyboardにカスタム部品を配置</h3>

<p>続いて、先程作成したカスタム部品を<code>Storyboard</code>に配置します。<br/>
今回は <code>UICollectionViewCell</code> をカスタム化しているので、右メニューから <code>UICollectionView</code> をドラッグ&amp;ドロップして持ってきます。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-3.png" alt="UICollectionViewをドラッグ&amp;ドロップ" /></p>

<p>持ってきた部品とカスタム化クラスを結びつけます。<br/>
<code>右メニュー &gt; Show the Identity inspector &gt; Custom Class &gt; Class</code> にクラス名を入力します。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-4.png" alt="カスタムクラスへの接続" /></p>

<h3>CustomCollectionViewCellの表示</h3>

<p>ここまでくれば後はいつも通り<code>UICollectionView</code>を使えば良いだけです。</p>

<p>・ <code>Storyboard</code> 上で <code>Collection Reusable View</code> の <code>Identifier</code> に値を設定<br/>
・ 下記の通りソースコードを実装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CreateShopMemoViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">UICollectionViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// UICollectionView</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - UICollectionViewDataSource</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">cellForItemAt</span> <span class="nl">indexPath:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withReuseIdentifier:</span> <span class="s">&quot;CustomCell&quot;</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomCollectionViewCell</span>
</span><span class='line'>    <span class="c1">// 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">numberOfItemsInSection</span> <span class="nl">section:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>その結果は下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-6.png" alt="CustomCollectionViewCellの表示" /></p>

<p>因みに、今回のように、Viewを1枚ペタッと貼るだけであれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: - UICollectionViewDataSource</span>
</span><span class='line'><span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">cellForItemAt</span> <span class="nl">indexPath:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withReuseIdentifier:</span> <span class="s">&quot;CustomCell&quot;</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)</span>
</span><span class='line'>  <span class="n">cell</span><span class="p">.</span><span class="n">backgroundView</span> <span class="o">=</span> <span class="n">UIImageView</span><span class="p">(</span><span class="nl">image:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いだけです。</p>

<h3>まとめ</h3>

<p>今回は完全なるメモ書きでしたが、カスタム化の基礎なので、十二分に慣れておかないとですね。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://himaratsu.hatenablog.com/entry/ios/customview">カスタムViewをNibから初期化し、IBDesignableとIBInspectableで便利に使う</a></li>
<li><a href="http://qiita.com/taketomato/items/7bf3f1dc2690c76079fb">xib 化した UITableViewCell を使うときの Tips</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bond, SwiftBondを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/31/swiftbond-1/"/>
    <updated>2017-07-31T20:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/31/swiftbond-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回はiOSで <code>MVVM</code> アーキテクチャで重宝されている<a href="https://github.com/ReactiveKit/Bond">ReactiveKit/Bond</a>(SwiftBond)について勉強したいと思います。<br/>
趣味で個人iOSアプリを作成する分にはそこまで大規模アプリになることも少ないとは思うものの、仕事で大人数で1つのアプリを開発することは当然あることでしょう。<br/>
そんなときに備えて知識を向上させたいと思います。<br/>
(今まで <code>MVC</code> で済んできたこともあり、良い機会なので <code>MVVM</code> を勉強したいと思っています。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>MVVMとは</h3>

<p>まず、 <code>MVVM</code> とはそもそも何なのでしょうか？<br/>
<code>MVVM</code> とは <code>Model View ViewModel</code> の略です。</p>

<p><a href="https://ja.wikipedia.org/wiki/Model_View_ViewModel">Wikipedia</a>を見ると、それぞれ</p>

<ul>
<li><code>Model</code>

<ul>
<li>そのアプリケーションが扱う領域のデータと手続き (ビジネスロジック)を表現する要素</li>
<li>データの格納に永続的な記憶の仕組み(データベース)やサーバ側との通信ロジックなど</li>
</ul>
</li>
<li><code>View</code>

<ul>
<li>ユーザに見せるためのアウトプット描画およびユーザ入力を受け取る(UIへの入力とUIからの出力を担当する)要素</li>
<li>データバインディング機構を通して自動的に描画</li>
<li><code>View</code> そのものに複雑なロジックや状態を持たない</li>
</ul>
</li>
<li><code>ViewModel</code>

<ul>
<li>Viewを描画するための状態の保持と、Viewから受け取った入力を適切な形に変換してModelに伝達する役目を持つ</li>
</ul>
</li>
</ul>


<p>と書かれています。<br/>
他の方のブログ記事を見ても、上記からそう遠くはない印象です。</p>

<h3>Bond, SwiftBondとは</h3>

<p><code>Bond</code> は昔は <code>SwiftBond</code> と呼ばれていたようですが、今はGitHub上でも <code>ReactiveKit</code> の一部として提供されているようです。<br/>
元々、 <code>SwiftBond</code> も <code>ReactiveKit</code> も開発者は同じなので、どこかのタイミングで取り込まれたんですかね&hellip;。<br/>
この <code>Bond</code> を <code>MVVM</code> で言うところのデータバインディング機構を実現するために利用します。</p>

<h3>サンプルを作ってみよう</h3>

<p>今回のサンプルで扱う機能は下記です。</p>

<ul>
<li>Google　Mapに現在地周辺のレストランをマッピングする</li>
<li>レストラン情報はホットペッパーAPIの周辺レストラン検索APIから取得する</li>
</ul>


<p>続いてXcode上のフォルダ構成は下記にします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">SampleApp</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">HotpepperAPI</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewModel</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">HotpepperAPIViewModel</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">└──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、今回は <code>Google Maps SDK for iOS</code> と ホットペッパーのAPIを利用します。<br/>
これらのAPIキーを公式案内を元に取得して、 <code>Info.plist</code> と同じ階層に作成した <code>key.plist</code> に追加します。</p>

<p><img src="http://grandbig.github.io/images/swiftbond_1.png" alt="ホットペッパーAPIキー" /></p>

<p>さて下準備は済んだので、各ファイルの実装を見ていきましょう。</p>

<h4>AppDelegate.swift</h4>

<p><code>Google Maps SDK for iOS</code> を利用するために <code>AppDelegate.swift</code> に下記処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleMapsApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">GMSServices</span><span class="p">.</span><span class="n">provideAPIKey</span><span class="p">(</span><span class="n">apiKey</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HotpepperAPI.swift</h4>

<p>ホットペッパーのグルメサーチAPIを利用する <code>Model</code> ファイルです。<br/>
今回はサンプルということもあって、ほとんど複雑な処理はありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPI.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ホットペッパーAPI</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperAPI</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// ホットペッパーAPIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   ホットペッパーグルメサーチAPI</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter coordinate: 位置</span>
</span><span class='line'><span class="cm">   - parameter completion: レストラン情報を返却するcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">JSON</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HotpepperAPIViewModel.swift</h4>

<p><code>Model</code>である<code>HotpepperAPI.swift</code>と<code>View</code>である<code>ViewController.swift</code>を繋ぐ<code>ViewModel</code>ファイルです。<br/>
<code>View</code>からの入力受付を想定して<code>searchRestaurant</code>メソッドを用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPIViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReactiveKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Bond</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 通信の各状態をEnumで表現</span>
</span><span class='line'><span class="k">enum</span> <span class="n">RequestState</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">requesting</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">finish</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">error</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// HotpepperAPIのViewModelクラス</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="n">HotpepperAPIViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">items:</span> <span class="n">ObservableArray</span><span class="o">&lt;</span><span class="n">JSON</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">ObservableArray</span><span class="p">([])</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">requestState</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">RequestState</span><span class="o">&gt;</span><span class="p">(.</span><span class="n">none</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">hotpepperAPI</span> <span class="o">=</span> <span class="n">HotpepperAPI</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">finishSearchRestaurant:</span> <span class="n">Signal</span><span class="o">&lt;</span><span class="p">[</span><span class="n">JSON</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="n">NoError</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="p">(</span><span class="n">requestState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">JSON</span><span class="p">]</span><span class="o">?</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">requestState</span> <span class="o">==</span> <span class="p">.</span><span class="n">finish</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">array</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">RequestState</span><span class="p">.</span><span class="n">requesting</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hotpepperAPI</span><span class="p">.</span><span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">resultArray</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">array</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">ObservableArray</span><span class="p">(</span><span class="n">resultArray</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">RequestState</span><span class="p">.</span><span class="n">finish</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、<code>searchRestaurant</code>の中で先程紹介した<code>Model</code>の<code>HotpepperAPI</code>クラスにアクセスしてサーバ通信を委託しています。<br/>
また、返却された値を受け取って<code>requestState</code>の状態を変えることが、<code>finishSearchRestaurant</code>の処理のトリガーになっています。<br/>
<code>finishSearchRestaurant</code>では、<code>RequestState</code>の状態が<code>finish</code>になったときのみ正しい値を返却し、それ以外は<code>nil</code>を返却しています。</p>

<h4>ViewController.swift</h4>

<p>最後に <code>View</code> に当たる <code>ViewController.swift</code> について見ていきます。<br/>
iOSでファットになりがちな <code>ViewController</code> を <code>View</code> の定義に則って実装していくというのがキーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// マップビュー</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>  <span class="c1">/// 検索ボタン</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">searchButton:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="c1">/// 現在地</span>
</span><span class='line'>  <span class="n">internal</span> <span class="n">var</span> <span class="nl">currentLocation:</span> <span class="n">CLLocationCoordinate2D</span><span class="o">?</span>
</span><span class='line'>  <span class="c1">/// ViewModel</span>
</span><span class='line'>  <span class="n">internal</span> <span class="n">var</span> <span class="n">hotpepperAPIVM</span> <span class="o">=</span> <span class="n">HotpepperAPIViewModel</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データバインディング機構の設定処理</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">setUpBind</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">func</span> <span class="n">setUpBond</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 検索ボタンをタップ(.touchUpInside)したときに呼び出される処理</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">searchButton</span><span class="p">.</span><span class="n">reactive</span><span class="p">.</span><span class="n">tap</span><span class="p">.</span><span class="n">observeNext</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">hotpepperAPIVM</span><span class="p">.</span><span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">self</span><span class="p">.</span><span class="n">currentLocation</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// finishSearchRestaurantから値が返却されるときに呼び出される処理</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">hotpepperAPIVM</span><span class="p">.</span><span class="n">finishSearchRestaurant</span><span class="p">.</span><span class="n">ignoreNil</span><span class="p">().</span><span class="n">observeNext</span><span class="p">(</span><span class="nl">with:</span> <span class="p">{</span> <span class="p">(</span><span class="n">searchShops</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">searchShop</span> <span class="k">in</span> <span class="n">searchShops</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Google Mapへのマッピング処理</span>
</span><span class='line'>        <span class="c1">// 省略</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように実装することで、データバインディング機構を <code>View</code> に実装することができます。<br/>
ポイントは上記ソース内コメントに書いた通りですが、筆者が苦戦したのは、</p>

<ul>
<li><code>_ =</code> から始めなかったためSwift3の静的解析で怒られた</li>
<li><code>observeNext</code> 内で <code>nil</code> 判定してしまっていたが、 <code>ignoreNil</code> という便利なものがある</li>
</ul>


<p>の2点です。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
筆者的にもまだまだ理解しきれていないところがあり、引き続き勉強する必要があると感じています。<br/>
特にエラーハンドリング周りでは <code>ReactiveKit</code> を利用することで、<br/>
うまく書けるようになるのではという期待感があるのでもう少し見ていきたいと思っています。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://qiita.com/hachinobu/items/27a92d480db24511559a">SwiftBondの魅力 ~実用サンプル編~</a></li>
<li><a href="http://qiita.com/susieyy/items/2af5321b287b8d2f49f6">MVVMをベースに複雑な振る舞いをしっかり把握できるアプリ開発</a></li>
<li><a href="http://qiita.com/ko2ic/items/44c18b07c7f337dfb06b">SwiftBondをSwift3対応するためにv5にマイグレーションする</a></li>
<li><a href="https://www.raywenderlich.com/149753/bond-tutorial-bindings-swift">Bond Tutorial: Bindings in Swift</a></li>
<li><a href="https://github.com/ReactiveKit/ReactiveKit">ReactiveKit/ReactiveKit</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlamofireImageを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/alamofireimage/"/>
    <updated>2017-07-23T15:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/alamofireimage</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は何気に今まで使ってこなかった<a href="https://github.com/Alamofire/AlamofireImage">AlamofireImage</a>についてメモ書きです。<br/>
キャッシュコントロールやら同期/非同期での画像取得など考えなくても良いというのはパワー的にかなり楽になりますね。<br/>
ということで早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>API経由で取得した画像URLを使ってUIImageViewに画像を表示する</h3>

<h4>テストとして利用するAPI</h4>

<p>今回はテスト用APIとして<a href="https://webservice.recruit.co.jp/hotpepper/reference.html">ホットペッパーのグルメサーチAPI</a>を利用しました。</p>

<p>ホットペッパーAPIを利用するには新規登録して<code>API Key</code>をゲットする必要があります。<br/>
また、前提として取得した<code>API Key</code>は<code>key.plist</code>に書いているとします。</p>

<p><img src="http://grandbig.github.io/images/alamofireimage_1.png" alt="API Keyをkey.plistに書き出し" /></p>

<p>上記準備をした上で下記クラスを作成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPI.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ホットペッパーAPI</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperAPI</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// ホットペッパーAPIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   ホットペッパーグルメサーチAPI</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter coordinate: 位置</span>
</span><span class='line'><span class="cm">   - parameter completion: レストラン情報を返却するcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">JSON</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>テストとして用意するUIImageView</h4>

<p>今回はテストとして <strong>マップにプロットしたマーカをタップしたときに表示するInfoWindow内にUIImageViewを用意する</strong> ようにしました。</p>

<p>【準備事項】<br/>
&ndash; Google Maps SDK for iOSをマップとして利用<br/>
&ndash; マーカタップ時に表示されるInfoWindowをカスタム化</p>

<p>表示するViewとしては下図のようになります。<br/>
<img src="http://grandbig.github.io/images/alamofireimage_2.png" alt="MarkerInfoContentsView.xib" /></p>

<h4>AlamofireImageの用意</h4>

<p>では肝心な<code>AlamofireImage</code>の導入を見てみましょう。<br/>
<code>CocoaPods</code>で簡単に導入が可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">10.0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;SampleApp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AlamofireImage</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">3.1</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
</span><span class='line'>  <span class="n">installer</span><span class="p">.</span><span class="n">pods_project</span><span class="p">.</span><span class="n">targets</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">target</span><span class="o">|</span>
</span><span class='line'>    <span class="n">target</span><span class="p">.</span><span class="n">build_configurations</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">SWIFT_VERSION</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mf">3.0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>マーカタップ時に表示するInfoWindowに画像を表示する</h4>

<p>まずは<code>InfoWindow</code>をカスタム化したクラスである<code>MarkerInfoContentsView.swift</code>のソースコードを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MarkerInfoContentsView.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">AlamofireImage</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MarkerInfoContentsView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">shopName:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">categoryName:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">shopImage:</span> <span class="n">UIImageView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;MarkerInfoContentsView&quot;</span><span class="p">,</span> <span class="nl">owner:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">first</span> <span class="n">as</span><span class="o">?</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    データの設定処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    - parameter shopName: 店舗名</span>
</span><span class='line'><span class="cm">    - parameter categoryName: カテゴリ名</span>
</span><span class='line'><span class="cm">    - parameter shopImageURLString: 画像URL</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">setData</span><span class="p">(</span><span class="nl">shopName:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">categoryName:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">shopImageURLString:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 店舗名の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">shopNameTextCount</span> <span class="o">=</span> <span class="n">shopName</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">shopNameTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">shopName</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;店舗名不明&quot;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">gray</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 詳細説明の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">categoryNameTextCount</span> <span class="o">=</span> <span class="n">categoryName</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">categoryNameTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">categoryName</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;カテゴリ不明&quot;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">gray</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 画像の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">shopImageURLStringTextCount</span> <span class="o">=</span> <span class="n">shopImageURLString</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">shopImageURLStringTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">shopImageURL</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">shopImageURLString</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">af_setImage</span><span class="p">(</span><span class="nl">withURL:</span> <span class="n">shopImageURL</span><span class="p">,</span> <span class="nl">placeholderImage:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際に<code>AlamofireImage</code>を利用して画像URLから取得した画像データを格納している箇所は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">af_setImage</span><span class="p">(</span><span class="nl">withURL:</span> <span class="n">shopImageURL</span><span class="p">,</span> <span class="nl">placeholderImage:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>になります。<br/>
続いて、<code>ViewController.swift</code>での<code>GMSMapViewDelegate</code>部分の処理を抜粋して書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">ViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="p">,</span> <span class="n">markerInfoWindow</span> <span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">cMarker</span> <span class="o">=</span> <span class="n">marker</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomGMSMarker</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cMarker</span><span class="p">.</span><span class="n">tracksInfoWindowChanges</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">MarkerInfoContentsView</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="mi">250</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">265</span><span class="p">))</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">setData</span><span class="p">(</span><span class="nl">shopName:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">shopName</span><span class="p">,</span> <span class="nl">categoryName:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">categoryName</span><span class="p">,</span> <span class="nl">shopImageURLString:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重要なのは、 <strong><code>cMarker.tracksInfoWindowChanges = true</code></strong> です。<br/>
これを書かないと <strong>画像URLから画像データを取得したタイミングで<code>InfoWindow</code>の画像を更新する</strong>ということができなくなります。<br/>
(<code>placeholderImage</code>として用意した画像がずっと表示されてしまいます。)</p>

<p>筆者はここでドハマリして試行錯誤してしまいました。<br/>
非同期で画像データを取得しに行っているので、データ取得前に<code>InfoWindow</code>の描画処理に進んでしまうということはわかるのですが、どうすれば想定した挙動が実現できるのか悩みました。<br/>
ですが、蓋を開けてみれば何ということもなかったんですよね。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
画像取得/キャッシュ関連のOSSライブラリは多種多様なものが出ており、好き嫌いもあるかもしれませんが、筆者は通信ライブラリに<code>Alamofire</code>を使うことが多いため、<code>AlamofireImage</code>も嫌いではないんですよね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
