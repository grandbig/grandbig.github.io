<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2013-09-25T23:24:03+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[はっきりさせよう！iOSのデバイストークン]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/"/>
    <updated>2013-09-24T22:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/24/ios-devicetoken</id>
    <content type="html"><![CDATA[<h3>iOSのデバイストークンを理解しよう！</h3>

<p>今回はプッシュ通知をユーザに送る機能を備えたiPhoneアプリを開発したことがあるエンジニアであれば周知の事実であろう『iOSのデバイストークン』について改めて勉強したいと思います。<br/>
筆者は正直、今日まで全くの勘違いをしていました&hellip;。デバイストークンとはアプリ毎に異なるのだと思い込んでいたのです。</p>

<!--more-->


<h4>公式ドキュメントを読もう！</h4>

<p>まずは何と言っても<a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/RemoteNotificationsPG.pdf" title="Local Notificationおよび
Push Notificationプログラミングガイド">Appleの公式ドキュメント</a>から理解してみよう！ということです。<br/>
ドキュメントには『<em>APNsが初めてデバイスに接続したときに、APNsからそのデバイスに渡される不透過なデバイス識別子です。(たとえて言えば、デバイストークンは通知先を識別するための電話番号と同じ機能を果たします)</em>』とあります。ここからわかることはデバイストークンとは個人を特定できるユニークなものだということです。<br/>
次に読み進めていくと、『<em>APNsは、TLSのピアツーピア認証を利用して、接続してきたデバイスの認証を行います</em>』、『<em>プロバイダとAPNs間の接続信頼も、TLSのピアツーピア認証を利用して確立されます。</em>』と書かれています。何だかふ〜んと言った感じで読み飛ばしてしまいそうですが、実はここは結構重要でした。
このTLS接続は『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行う</em>』ことで確立させます。<br/>
最低限ここまで抜粋できれば良しとしましょう笑</p>

<h4>実際に取得してみた結果は？</h4>

<p>百聞は一見にしかずということで、実際に自分の目で確かめてみることにしました。</p>

<p>手順は省き、結果を言うと『デバイストークンは端末ごとにユニークなもの』です。</p>

<p>アプリごとにユニークではない、１端末につき１つのデバイストークンということがポイントです！<br/>
それではアプリAにプッシュを送ろうとすると、アプリBにプッシュが届くのではないか？と思うかもしれません。私も昨日まで完全にそう思っていました。が、ここで先ほど述べた</p>

<p>『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行うことでTLS接続を確立する</em>』</p>

<p>が意味を成すのです。<br/>
そう、秘密鍵と証明書を使用してTLS接続を確立している時点でアプリAへの依頼なのかアプリBへの依頼なのか決まっているのです。</p>

<h4>因みに&hellip;</h4>

<p>因みに、そもそも私がデバイストークンとは端末のアプリごとに異なると思っていた理由を紹介しましょう。<br/>
先ほどの説明の中でデバイストークンは１端末につき１つのデバイストークンと言いましたが、それをいきなり覆します！<br/>
実はDevelopment版とProduction版でデバイストークンは異なるんです！<br/>
これに私は完全に翻弄されてしまったのです(汗)<br/>
そして、プッシュの証明書が異なれば(つまりはアプリごと)デバイストークンは異なるのだと思いこんでしまったのです&hellip;。</p>

<p>ではなぜDevelopmentバントProduction版でデバイストークンは異なるのでしょうか？完全なる答えはわかりませんが、<br/>
Development版はプロバイダアプリケーションの初版の開発とテストに使用されるサンドボックス環境であり、アクセス先として『<em>gateway.sandbox.push.apple.com</em>』を設定します。<br/>
一方でProduction版のアクセス先はsandboxを外した『<em>gateway.push.apple.com</em>』を設定します。<br/>
なるほど、アクセス先が違うのでデバイストークンが変わりそうな気がします&hellip;<br/>
参考までにサイトのページを載せておきます。<br/>
<img src="http://grandbig.github.io/images/apple_developer_site1.png" alt="Apple Developer サイト" /></p>

<p>ここまで説明した内容は全てiOS6.1以前のものであり、iOS7は含みません。<a href="http://blog.katty.in/4162" title="iOS7でプッシュ通知のデバイストークンに大きな変更">iOS7からはアプリごとに異なるといった記事</a>も見られるので、またのちほど実験していくつもりです。</p>

<p>皆さんもぜひ自分の眼でお試しあれ<br/>
しかし、今回は全部、文字になってしまったな〜。気が向いたらもう少しわかりやすく編集し直します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6とiOS7の両方で使えるようにtoolbarを調整する方法]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/22/xcode5-toolbar/"/>
    <updated>2013-09-22T12:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/22/xcode5-toolbar</id>
    <content type="html"><![CDATA[<h3>iOS6/iOS7で使えるようにtoolbarを調整しよう！</h3>

<p>どうも。筆者が先週末から１週間ほど風邪で寝込んでいる間にiPhone5S/5Cが発売されたようですね。また、それに先駆けてiOS7とXcode5の正式版も一般にリリースされたということで完全に乗り遅れてしまいました(泣)<br/>
そろそろ体力も復帰してきたということで気になっていたXcode5に触れてみることにしました。<br/>
今回はiOS7になったことで見た目はささやかな違いなんですが、実は結構面倒かもしれないtoolbarの変換に着目しました。まずはその違いを実際に見て頂きましょう。
<img src="http://grandbig.github.io/images/ios6_7_difference.png" alt="twitterでtoolbarを比較しよう" /></p>

<!--more-->


<p>このようにiOS7対応アプリではステータスバーを含めたtoolbarを作成する必要があります。もちろんiOS6ではステータスバーを含まないのでtoolbarの高さが異なります。<br/>
『単純にtoolbarの高さを調整すれば良いのでは？』と思うかもしれませんが、下記画像を見て頂くとわかるようにdisabledになっていて変更できません&hellip;<br/>
<img src="http://grandbig.github.io/images/noChange_toolbar_height.png" alt="変更できないtoolbarの高さ" /><br/>
これを変更するために、『Show the File inspector』を選択して、『Use Autolayout』のチェックを外します。そして、iOS6からの目線でiOS7を調整するために(慣れの問題ですが…)『View as』をiOS6.1 and Earlierに変更します。<br/>
<img src="http://grandbig.github.io/images/nocheck_use_autolayout.png" alt="Use Autolayoutのチェックを外す" /><br/>
それによって『Show the Size inspector』で<em>iOS6/7 Deltas</em>が表示されるようになります。<br/>
<img src="http://grandbig.github.io/images/iOS6_7_Deltas.png" alt="iOS6/7 Deltasが表示される" /><br/>
ステータスバーのheightは20pxなので、iOS7はiOS6よりもheightが20px高くなります。また、位置はiOS6での最上位置(0px)よりも上に20px つまり-20pxになります。<br/>
<img src="http://grandbig.github.io/images/iOS6_7_Deltas_set.png" alt="iOS6/7 Deltasに値を設定" /></p>

<p>これでtoolbarの設定は完了です。因みにtoolbarと合わせてWebViewやMapViewを使うときには同じくこれらのパーツも調整する必要がありますのでご注意を。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's create an iPhone App]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app/"/>
    <updated>2013-09-13T23:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app</id>
    <content type="html"><![CDATA[<h3>Flash Lightアプリを作ろう！</h3>

<p>最近iPhoneに実装されたLEDライトの点滅間隔を調べる機会がありました。<br/>
そこで、そのときに作った、簡単な『Flash Light アプリ』を紹介しましょう！</p>

<!--more-->


<h4>ViewControllerを新規追加</h4>

<p>まずは表示に必要なViewControllerを追加しましょう！<br/>
1: プロジェクトを右クリックして、『New File&hellip;』を選択<br/>
2: Objective-c Classを選択してNext<br/>
3: Class 『ViewController』, Subclass of 『UIViewController』を選択してNext<br/>
4: xcodeprojファイルと同じ場所に保存</p>

<h4>AppDelegateファイルを編集</h4>

<p>次にViewControllerをアプリ起動時に表示できるように設定しましょう。<br/>
そのためにはAppDelegateファイルを編集する必要があります。では『AppDelegateファイル』とは何でしょうか？<br/>
AppDelegateファイルとは簡単に言えば、アプリの起動/停止をトリガーとして何かアクションを起こす役目を持っています。<br/>
これはアプリを開発する上で非常に重要なファイルと言えるでしょう。</p>

<p>AppDelegate.mファイル内でViewControllerを扱うために</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate</span></code></pre></td></tr></table></div></figure>


<p>とViewControllerをimportしましょう。</p>

<p>では実際にViewControllerをアプリwindowに設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class='line'>  // ウィンドウの初期化と生成
</span><span class='line'>  _window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>  // 背景色を指定(今回は黒色)
</span><span class='line'>  _window.backgroundColor = [UIColor blackColor];
</span><span class='line'>  // ウィンドウを表示
</span><span class='line'>  [_window makeKeyAndVisible];
</span><span class='line'>
</span><span class='line'>  // ViewControllerの初期化と生成
</span><span class='line'>  UIViewController* viewCtl = [[ViewController alloc] init] autorelease];
</span><span class='line'>  // ViewControllerをウィンドウに設定
</span><span class='line'>  _window.rootViewController=viewCtl;
</span><span class='line'>  return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ViewController.h/ ViewController.mを編集</h4>

<p>さて、これでViewControllerに実装したものをウィンドウに表示する設定が終わりました。<br/>
今度はLEDライトの点滅方法を考えるわけですが、そもそもLEDライトってどうやって扱うんでしょうか？</p>

<p>答えは『AVFoundation.framework』を使います！<br/>
因みにライブラリ追加は以下の手順。<br/>
1: プロジェクトを選択<br/>
2: TARGETSを選択<br/>
3: BuildPhasesを選択<br/>
4: Link Binary With Librariesを選択<br/>
5: +を選択して『AVFoundation.framework』を追加<br/>
<img src="http://grandbig.github.io/images/add_framework.png" alt="AVFoundation.frameworkを追加" /></p>

<p>ただ、安心してはいけません。必ず使うものはimportしましょう！<br/>
ViewController.hファイルにimport</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>// 以下のAVFoundationを追加
</span><span class='line'>#import &lt;AVFoundation/AVFoundation.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>いきなり自動点滅は難しいので、まずはスイッチでLEDのON/OFFを切り替えられるようにしてみましょう。<br/>
ViewController.hを引き続き編集</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  // スイッチを定義
</span><span class='line'>  IBOutlet UISwitch *sw;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// スイッチのON/OFF切り替え用関数を宣言
</span><span class='line'>-(IBAction)switchChanged:(id)sender;</span></code></pre></td></tr></table></div></figure>


<p>次にViewController.mを編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// スイッチのON/OFF切り替え用関数の処理を定義
</span><span class='line'>- (IBAction)switchChanged:(id)sender {
</span><span class='line'>  // 背面カメラを初期化
</span><span class='line'>  AVCaptureDevice *captureDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
</span><span class='line'>
</span><span class='line'>  // スイッチがONのとき
</span><span class='line'>  if(sw.on) {
</span><span class='line'>      // LEDの点灯は下記3行
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOn;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>  // スイッチがOFFのとき
</span><span class='line'>  } else {
</span><span class='line'>      // LEDの消灯は下記3行
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOff;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ViewController.xibファイルを編集</h4>

<p>そしてViewController.xibを編集します。<br/>
xibの編集はアプリに表示する画面を直接編集することに相当します。</p>

<p>1: 右下リストからSwitchを選択し、ドラッグ&amp;ドロップでViewにスイッチを持ってきます。<br/>
2: 定義したswとViewに載せたSwitchを結びつけるために、左側メニューにあるPlaceholdersのFile&rsquo;s Ownerを右クリック<br/>
3: Outletsのswの右端◯からドラッグ&amp;ドロップでView上のスイッチまで持っていきます。<br/>
4: 同様にswitchChangedも右端◯からドラッグ&amp;ドロップでView上のスイッチに持っていき、Value Changedを選択</p>

<p><img src="http://grandbig.github.io/images/edit_xib.png" alt="スイッチの結びつけ" /></p>

<p>以上で手動でのLEDのON/OFFができました。動作は実機で確認しましょう！(シミュレータはLEDないので…)</p>

<h4>LEDのON/OFFを自動化</h4>

<p>LEDのON/OFFを自動化するためにNSTimerを使いましょう！<br/>
ViewController.hにNSTimerを宣言</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  ...
</span><span class='line'>  IBOutlet NSTimer *timer;
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ViewController.mを編集</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// LEDの現在のON/OFF状態を判別するためにフラグを設定
</span><span class='line'>static BOOL ledFlag = NO;
</span><span class='line'>...
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  
</span><span class='line'>  // timerを設定(1秒ごとに処理を実行)
</span><span class='line'>  timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(ledChange:)userInfo:nil repeats:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// timerで設定した定期間隔ごとに処理される内容を定義
</span><span class='line'>- (void)ledChange:(NSTimer *)theTimer {
</span><span class='line'>  AVCaptureDevice *captureDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
</span><span class='line'>
</span><span class='line'>  // LEDがOFFだった場合はONにする
</span><span class='line'>  if(ledFlag == NO) {
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOn;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>      ledFlag = YES;
</span><span class='line'>  // LEDがONだった場合はOFFにする
</span><span class='line'>  } else {
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOff;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>      ledFlag = NO;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>これでLEDを1秒ごとに点滅させることができるようになりました。</p>

<p>さ〜て、いかがだったでしょうか？<br/>
今や簡単に誰でもアプリが作れる時代です。ぜひ、皆さんも作ってみて下さい。<br/>
余談ですが、iOS7から懐中電灯機能はアプリをインストールするまでもなく搭載されることとなったので、懐中電灯アプリはAppleに申請しても通らないと思います(汗)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeを始めてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/05/start-xcode/"/>
    <updated>2013-09-05T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/05/start-xcode</id>
    <content type="html"><![CDATA[<h2>Xcodeとは</h2>

<p>アップルが提供している統合開発環境(IDE)の名称です。<br/>
『iPhone/iPadアプリを開発したい！』という方、Mac PCを買ったら速攻インストールです！<br/>
(XcodeはもちろんApp Storeからインストールできます）</p>

<p>この記事時点での最新版は4.6.3ですが、今月中にはXcode5.0が発表されることでしょう。<br/>
さてさて、早速Xcodeを起動してみましょう。</p>

<h3>プログラミングまでの準備</h3>

<p>Xcodeを起動すると次のウィンドウが表示されます。
<img src="http://grandbig.github.io/images/xcode1.png" alt="Welcome to Xcode" /></p>

<!--more-->


<p>プロジェクトを新規作成する場合は『Create a new Xcode project』を選択しましょう。
すると次の画面で『Choose a template for your new project』と言われます。
<img src="http://grandbig.github.io/images/xcode2.png" alt="Choose Project" />
とは言え、何だか選択肢が多いですね…。ここで選択を失敗すると一気に時間がかかってしまいそうな予感がしますね……。<br/>
本来は<em>Single View Application</em>の方が初心者向きかもしれないのですが、筆者はあまり慣れておりません(汗)<br/>
ってことで今回は<em>Empty Application</em>を選択します。(この違いについてはいつの日か説明したいと思います)</p>

<p>すると今度は『Choose options for your new project』と言われます。
<img src="http://grandbig.github.io/images/xcode3.png" alt="Choose Options" />
入力するのは『Product Name』, 『Organization Name』,『Company Identifier』の3つです。後から変更も可能なので、ここでは『blog_test』,『筆者の名前』,『jp.co.test』としておきましょう。</p>

<p>はい！新規プロジェクト作成できました〜。
<img src="http://grandbig.github.io/images/xcode4.png" alt="Choose Options" /></p>

<p>次回はアプリでも作ってみようかな</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressインストールしてみました]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/04/octopress-install/"/>
    <updated>2013-09-04T00:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/04/octopress-install</id>
    <content type="html"><![CDATA[<h2>Octopressとは</h2>

<p>GitHub Pagesと組み合わせて、無料で簡単にブログが作れると噂のフレームワークです。
その噂の真相を確かめるべく、いざOctopressをインストールしてみました。</p>

<p>それがまさかこんな苦労するなんて夢にも思わず…</p>

<!--more-->


<h3>Rubyのインストール</h3>

<p>それではまず以下のコマンドを打ってみよう！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby --version</span></code></pre></td></tr></table></div></figure>


<p>「なんだRubyなんて初めから入っているじゃないか」と油断してはいけません。
確かにMacにはデフォルトでRubyがインストールされています。
しかし、Octopressを使うには1.9.3以上が必要になります。
恐らくデフォルトで入っているのは1.8.7だったのではないでしょうか？</p>

<p>ネットで調べたところ、1.9.3を利用している人が多かったので、ひとまず1.9.3のインストールを目指すことにしました。</p>

<h4>homebrewとFomulaを最新版にアップデート</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update</span></code></pre></td></tr></table></div></figure>


<p>ここでopensslやreadlineなど必要なものをbrewでインストールと書いてあるサイトがあったのですが、
rubyインストール時に必要なものをインストールしてくれるのでrvmのインストールに進みます。<br/>
※筆者は『brew install openssl』を実行してopensslのみ別でインストールしてしまったため後々path周りでハマってしまいました…。(詳細は後ほど)</p>

<h4>rvmをインストール</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>rvm -vでバージョンを確認できればrvmが無事インストールされたことになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -v
</span><span class='line'>rvm 1.22.3 (master) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]</span></code></pre></td></tr></table></div></figure>


<h3>Octopressをインストール</h3>

<p>さあ、いよいよOctopressをインストールしましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress</span></code></pre></td></tr></table></div></figure>


<p>問題なければ次の4行も余裕でパスできるはず！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>筆者はgem install bundlerがうまくいきませんでした。<br/>
エラーメッセージを見る限り、opensslが見つからないらしい…。なぜだ!?ちゃんとopensslをインストールしたはずなのに！<br/>
ちゃんとバージョンだって確認できる!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl version
</span><span class='line'>OpenSSL 0.9.8x 10 May 2012</span></code></pre></td></tr></table></div></figure>


<p>もしやインストールの仕方が違ったからか!?
たぶん見るpathを変えれば良いんだろうけど…<br/>
はい！アンインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew uninstall openssl</span></code></pre></td></tr></table></div></figure>


<p>そして、他のライブラリと同様にrvmでインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm pkg install openssl</span></code></pre></td></tr></table></div></figure>


<p>これで見事4行をパスしました。</p>

<h3>GitHubの設定</h3>

<p>さて、あともうひと踏ん張りです。<br/>
次はGitHubの設定をしましょう。今回は既にGitHubアカウントを作成していたため、アカウント作成周りは省略します。(恐らく思いつきで作ったのだろう…)<br/>
アカウント作成が終わったら、ホーム画面に移動するはずなので、右下から<em>New repository</em>を選択してGitHub page用のレポジトリを作りましょう！<br/>
下の画像のようにRepository nameに<em>username.github.io</em>を入力だ！(usernameにはGitHubアカウント作成時に作ったユーザ名を入れて下さい。)<br/>
<img src="http://grandbig.github.io/images/github_new_repository.png" alt="GitHubページでNew Repositoryを作成" /></p>

<h3>GitHub Pagesを設定</h3>

<p>GitHubの設定で作成したレポジトリをGitHub Pagesに設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>  (For example, 'git@github.com:your_username/your_username.github.io)
</span><span class='line'>  or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url:</span></code></pre></td></tr></table></div></figure>


<p>※末尾に<em>.git</em>はつけないように注意</p>

<h3>静的ページを作成して、デプロイ</h3>

<p>最後に下記2つのコマンドを叩けば、晴れてBlogのできあがり！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>いかがでしたでしょうか？<br/>
筆者もうまくいかずに何度か諦めそうになりましたが、なんとかBlogを書く領域まで辿りつけました。<br/>
情弱プログラマーは日々精進が大切ですね。
ではまた次回！</p>
]]></content>
  </entry>
  
</feed>
