<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-01-14T00:53:55+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gtm-oauth2を使ってGoogle APIをiOSで叩きたい！]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/14/ios-google-oauth2-2/"/>
    <updated>2015-01-14T00:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/14/ios-google-oauth2-2</id>
    <content type="html"><![CDATA[<h4>iOSネイティブアプリでGoogle APIを叩く方法</h4>

<p>以前、 <strong>gtm-oauth2</strong> を使ったiOSでのOAuth2認証について説明しました。<br/>
(<a href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/">iOSでGoogle OAuth認証がしたい</a>を参照のこと)<br/>
今回はOAuth2認証の後の話、そうGoogle APIを叩くメソッドの実装について説明します。</p>

<h5>ユーザ情報の取得</h5>

<p>まずは、ユーザ情報の取得を実装します。<br/>
下記のように、画面上のGETボタンをタップしたときにユーザ情報を取得するという処理を実装してみます。</p>

<p><img src="http://grandbig.github.io/images/gtm-oauth2-1.png" alt="GETボタンでユーザ情報を取得" /></p>

<!-- more -->


<p>念のため、OAuth2認証の処理は下記になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;GTMOAuth2Authentication.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;GTMOAuth2ViewControllerTouch.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">clientId</span> <span class="o">=</span> <span class="s">@&quot;********&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">clientSecret</span> <span class="o">=</span> <span class="s">@&quot;*********&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">redirectURI</span> <span class="o">=</span> <span class="s">@&quot;urn:ietf:wg:oauth:2.0:oob&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">scope</span> <span class="o">=</span> <span class="s">@&quot;https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kKeychainItemName</span> <span class="o">=</span> <span class="s">@&quot;Google&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">hasLoggedIn</span> <span class="o">=</span> <span class="s">@&quot;hasLoggedIn&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">GTMOAuth2Authentication</span> <span class="o">*</span><span class="n">auth</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">startLogin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span> <span class="err">省略</span> <span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OAuth認証の開始</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">startLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 既に認証をしたかどうか確認</span>
</span><span class='line'>  <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">hasLoggedin</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="n">hasLoggedIn</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">hasLoggedin</span> <span class="o">==</span> <span class="n">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 認証済みの場合</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">auth</span> <span class="o">=</span> <span class="p">[</span><span class="n">GTMOAuth2ViewControllerTouch</span> <span class="nl">authForGoogleFromKeychainForName:</span><span class="n">kKeychainItemName</span>
</span><span class='line'>                                                                        <span class="nl">clientID:</span><span class="n">clientId</span>
</span><span class='line'>                                                                    <span class="nl">clientSecret:</span><span class="n">clientSecret</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// アクセストークンの取得</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="n">authorizeRequest</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 未認証の場合</span>
</span><span class='line'>      <span class="n">GTMOAuth2ViewControllerTouch</span> <span class="o">*</span><span class="n">gvc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GTMOAuth2ViewControllerTouch</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithScope:</span><span class="n">scope</span>
</span><span class='line'>                                                                                     <span class="nl">clientID:</span><span class="n">clientId</span>
</span><span class='line'>                                                                                 <span class="nl">clientSecret:</span><span class="n">clientSecret</span>
</span><span class='line'>                                                                             <span class="nl">keychainItemName:</span><span class="n">kKeychainItemName</span>
</span><span class='line'>                                                                                     <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                                                             <span class="nl">finishedSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">viewController:finishedWithAuth:error:</span><span class="p">)];</span>
</span><span class='line'>      <span class="c1">// 認証画面の表示</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">gvc</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 認証後に実行する処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewController:</span><span class="p">(</span><span class="n">GTMOAuth2ViewControllerTouch</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span>
</span><span class='line'>      <span class="nl">finishedWithAuth:</span><span class="p">(</span><span class="n">GTMOAuth2Authentication</span> <span class="o">*</span><span class="p">)</span><span class="n">auth</span>
</span><span class='line'>               <span class="nl">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 認証失敗</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 認証成功</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">auth</span> <span class="o">=</span> <span class="n">auth</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">defaults</span> <span class="nl">setBool:</span><span class="n">YES</span> <span class="nl">forKey:</span><span class="n">hasLoggedIn</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// アクセストークンの取得</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="n">authorizeRequest</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 認証画面を閉じる</span>
</span><span class='line'>  <span class="p">[</span><span class="n">viewController</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アクセストークンの取得処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">authorizeRequest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">req</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">tokenURL</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">auth</span> <span class="nl">authorizeRequest:</span><span class="n">req</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">accessToken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">accessToken</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">accessToken</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにユーザ情報の取得処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="c1">// GETボタンをタップしてユーザ情報を取得</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">getBtnAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">httpGetRequest:</span><span class="s">@&quot;https://www.googleapis.com/oauth2/v2/userinfo&quot;</span> <span class="nl">timeout:</span><span class="mi">10</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;res: %@&quot;</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GETリクエスト処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">httpGetRequest:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'>                       <span class="nf">timeout:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">timeout</span>
</span><span class='line'>                         <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">urlEscapeStr</span><span class="p">]</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalCacheData</span> <span class="nl">timeoutInterval:</span><span class="n">timeout</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ヘッダーにアクセストークンをセット</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;OAuth %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">accessToken</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">request</span> <span class="nl">setValue:</span><span class="n">token</span> <span class="nl">forHTTPHeaderField:</span><span class="s">@&quot;Authorization&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSData</span> <span class="o">*</span><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendSynchronousRequest:</span><span class="n">request</span> <span class="nl">returningResponse:</span><span class="o">&amp;</span><span class="n">response</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ステータスコードの取得</span>
</span><span class='line'>      <span class="n">NSInteger</span> <span class="n">statusCode</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span> <span class="n">statusCode</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">||</span> <span class="n">statusCode</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">res</span> <span class="nl">options:</span><span class="n">NSJSONReadingAllowFragments</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでユーザ情報が取得できるはずです。<br/>
ポイントは</p>

<ul>
<li>初めのOAuth2認証でユーザ情報を取得できるようにscopeを設定していること</li>
<li>リクエスト時にヘッダーにアクセストークンをセットしていること</li>
</ul>


<p>です。</p>

<p>因みに、上記の処理では本来、URLエンコードをするべきですが、GETリクエストパラメータを含まないことから省略しています。</p>

<p>参考:<br/>
・<a href="http://kernhack.hatenablog.com/entry/2013/11/24/164828">gtm-oauth2でOAuth認証してgoogleのAPIを使う</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLVisitとCMPedometerをフィールド検証してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/10/visit-and-step2/"/>
    <updated>2015-01-10T22:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/10/visit-and-step2</id>
    <content type="html"><![CDATA[<h4>CLVisitとCMPedometerのフィールド検証</h4>

<p>2015年初更新です。<br/>
2014年の年末から2015年の年始にかけて海外に行く機会があったため、
以前、本ブログにも掲載したCLVisitとCMPedometerについてフィールド検証をしてみました。<br/>
<a href="http://grandbig.github.io/blog/2014/11/30/visit-and-step/">iOS8.1でCLVisitとCMPedometerを試してみた！</a>を参照ください。<br/>
(思いつきで、出発前夜にアプリを急造しました)</p>

<p>CLVisitは大幅変更位置情報サービスと同様に極力バッテリを消費しない仕組みで作られていることと思います。<br/>
これが『旅行の思い出を残したいというユーザの想いとマッチするのでは？』と考えたこともあり、現実的にどこまで使えるものなのか検証してみました。</p>

<!-- more -->


<h5>アプリの機能</h5>

<p>検証に利用したアプリの機能は下記です。</p>

<ul>
<li>CLVisitで取得した結果を端末内部のDBに保存</li>
<li>CMPedometerで取得した結果を端末内部のDBに保存</li>
<li>CLVisitでデータを取得できたタイミングで、結果をローカルプッシュ</li>
<li>CMPedometerでデータを取得したタイミングで、結果をローカルプッシュ</li>
</ul>


<h5>ソースコード</h5>

<p>ソースは<a href="https://github.com/grandbig/VisitTheWorld">GitHub</a>にアップしています。</p>

<p>CLVisitとCMPedometerの部分のみピックアップすると下記のように実装しています。<br/>
まずはCLVisitの処理は下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="c1">// CLVisitの処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didVisit:</span><span class="p">(</span><span class="n">CLVisit</span> <span class="o">*</span><span class="p">)</span><span class="nv">visit</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 値の取得</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">lat</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">;</span>                              <span class="c1">// 緯度</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">lng</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">;</span>                             <span class="c1">// 経度</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">hacc</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">horizontalAccuracy</span><span class="p">;</span>                              <span class="c1">// 水平精度</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">arrivalDate</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">arrivalDate</span><span class="p">;</span>                            <span class="c1">// 到着日時(NSDate型)</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">departureDate</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">departureDate</span><span class="p">;</span>                        <span class="c1">// 出発日時(NSDate型)</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">arrivalUnixTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">arrivalDate</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>       <span class="c1">// 到着日時(timestamp)</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">departureUnixTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">departureDate</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>   <span class="c1">// 出発日時(timestamp)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// NSDate型の日時をNSString型に変換</span>
</span><span class='line'>  <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">outputFormatter</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="p">];</span>
</span><span class='line'>          
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">arrivalDateString</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">arrivalDate</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">departureDateString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">departureDate</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの挿入</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">insertPlaceData:</span><span class="n">lat</span> <span class="nl">longitude:</span><span class="n">lng</span> <span class="nl">horizontalAccuracy:</span><span class="n">hacc</span> <span class="nl">arrivalDate:</span><span class="n">arrivalDateString</span> <span class="nl">departureDate:</span><span class="n">departureDateString</span> <span class="nl">arrivalDateUT:</span><span class="n">arrivalUnixTime</span> <span class="nl">departureDateUT:</span><span class="n">departureUnixTime</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// ローカルプッシュ</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;lat: %f, lng: %f, hacc: %f, 到着日時: %@, 出発日時: %@&quot;</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">,</span> <span class="n">hacc</span><span class="p">,</span> <span class="n">arrivalDateString</span><span class="p">,</span> <span class="n">departureDateString</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">message</span> <span class="nl">soundFlag:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にCMPedometerの処理を下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// VisitController.m</span>
</span><span class='line'><span class="c1">// CMPedometerの処理</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> 歩数の計測開始処理</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startPedometer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">pmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">CMPedometer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];]</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">pmp</span> <span class="nl">startPedometerUpdatesFromDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span>
</span><span class='line'>                              <span class="nl">withHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">CMPedometerData</span> <span class="o">*</span><span class="n">pedometerData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                      <span class="c1">// step数の取得</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">step</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">numberOfSteps</span><span class="p">;</span>
</span><span class='line'>                                      <span class="n">NSInteger</span> <span class="n">stepInt</span> <span class="o">=</span> <span class="p">[</span><span class="n">step</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 距離</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">distance</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">distance</span><span class="p">;</span>
</span><span class='line'>                                      <span class="n">NSInteger</span> <span class="n">distanceInt</span> <span class="o">=</span> <span class="p">[</span><span class="n">distance</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 開始日時, 終了日時のUnixTimeを取得</span>
</span><span class='line'>                                      <span class="kt">double</span> <span class="n">startDateUnixTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">startDate</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>
</span><span class='line'>                                      <span class="kt">double</span> <span class="n">endDateUnixTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">endDate</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 日時取得のためにFormatを設定</span>
</span><span class='line'>                                      <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">outputFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                                      <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="p">];</span>
</span><span class='line'>                                      <span class="c1">// 開始日時, 終了日時のNSString型を取得</span>
</span><span class='line'>                                      <span class="n">NSString</span><span class="o">*</span> <span class="n">startDateString</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">startDate</span><span class="p">];</span>
</span><span class='line'>                                      <span class="n">NSString</span> <span class="o">*</span><span class="n">endDateString</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">endDate</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 階段の昇降</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">floorsAscended</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">floorsAscended</span><span class="p">;</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">floorsDescended</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">floorsDescended</span><span class="p">;</span>
</span><span class='line'>                                      <span class="n">NSInteger</span> <span class="n">floorsAscendedInt</span> <span class="o">=</span> <span class="p">[</span><span class="n">floorsAscended</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>                                      <span class="n">NSInteger</span> <span class="n">floorsDescendedInt</span> <span class="o">=</span> <span class="p">[</span><span class="n">floorsDescended</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// データの挿入</span>
</span><span class='line'>                                      <span class="p">[</span><span class="n">self</span> <span class="nl">insertMotionData:</span><span class="n">stepInt</span> <span class="nl">distance:</span><span class="n">distanceInt</span> <span class="nl">startDate:</span><span class="n">startDateString</span> <span class="nl">endDate:</span><span class="n">endDateString</span> <span class="nl">startDateUT:</span><span class="n">startDateUnixTime</span> <span class="nl">endDateUT:</span><span class="n">endDateUnixTime</span> <span class="nl">floorsAscended:</span><span class="n">floorsAscendedInt</span> <span class="nl">floorsDescended:</span><span class="n">floorsDescendedInt</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// ローカルプッシュ通知</span>
</span><span class='line'>                                      <span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;Step Count Result</span><span class="se">\n\n</span><span class="s">歩数: %@</span><span class="se">\n</span><span class="s">距離: %@[m]</span><span class="se">\n</span><span class="s">開始時間: %@</span><span class="se">\n</span><span class="s">終了時間: %@</span><span class="se">\n</span><span class="s">上った回数: %@</span><span class="se">\n</span><span class="s">下りた回数: %@&quot;</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">startDateString</span><span class="p">,</span> <span class="n">endDateString</span><span class="p">,</span> <span class="n">floorsAscended</span><span class="p">,</span> <span class="n">floorsDescended</span><span class="p">];</span>
</span><span class='line'>                                      <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">message</span> <span class="nl">soundFlag:</span><span class="n">NO</span><span class="p">];]</span>
</span><span class='line'>                                  <span class="p">});</span>
</span><span class='line'>                              <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>結果</h5>

<p>では、結果を見てみましょう。<br/>
まずは、CLVisitの結果です。</p>

<p><img src="http://grandbig.github.io/images/visit_test1.png" alt="CLVisitの結果" /></p>

<ul>
<li>取得期間: 2014/12/28 14:30 〜 2015/01/03 20:00</li>
<li>取得数: 117点 (オランダ: 66点, ベルギー: 49点, ルクセンブルク: 2点)</li>
<li>精度: 0〜50[m]: 34点, 50〜100[m]: 76点, 100[m]〜: 7点</li>
<li>到着日時と出発日時が正しく取れた: 58点, 到着日時のみ正しく取れた: 0点, 出発日時のみ正しく取れた: 59点

<ul>
<li>CLVisitでは到着日時が正しく取れない場合は <strong>0001-01-01 01:00:00</strong> (月日や日時が異なる値になる場合もある)となり、出発日時が正しく取れない場合は <strong>4001-01-01 01:00:00</strong>  (同じく、月日や日時が異なる値になる場合もある)となる。</li>
</ul>
</li>
<li>10分程度の滞在時間でも取得できる</li>
<li>歩き続けている間は取得できない(歩行速度程度の遅い速度でも移動していると取得できない)</li>
<li>数 [m] 〜 数十 [m]の距離間でも取得できる</li>
</ul>


<p>次に、CMPedometerの結果です。</p>

<ul>
<li>取得期間: 2014/12/28 16:02:07 〜 2015/01/03 12:07:45</li>
<li>取得数: 1120点</li>
<li>ステップ数: 57998</li>
<li>移動距離: 38623 [m]</li>
<li>階段を上がった回数: 36, 階段を下りた回数: 49</li>
<li>計測を開始してから明示的に終了するまで取り続けることができなかった(2度 起動し直した)</li>
<li>歩行時と電車乗車時の区別はできていなかった</li>
</ul>


<h5>今後の展望</h5>

<p>海外旅行の思い出として軌跡を残すことを考えたアプリは既にたくさんあります。<br/>
主にiPhoneで写真を撮影したタイミングで緯度・経度を取得してプロットするというものが多いことと思います。<br/>
CLVisitはこれに対する補助機能としての役割を多少期待できるかもしれません。<br/>
とは言え、『滞在 = 写真を撮る』と考えると同じ地点にプロットが集まるのかもしれませんが&hellip;。<br/>
CMPedometerは歩行時のみであることを保証できないため、iPhoneの移動が停止/歩行/走行/電車などを区別するためにCMMotionActivityを合わせて利用したいと思いました。<br/>
それにより、万歩計としての精度を高めることができるかもしれません。<br/>
(う〜ん。今回、実装しておけば良かった&hellip;)</p>

<p>と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6 Storyboardで多言語対応してみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/12/07/multilanguage/"/>
    <updated>2014-12-07T17:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/12/07/multilanguage</id>
    <content type="html"><![CDATA[<h4>Xcode6を使った多言語対応</h4>

<p>本日はXcode6(正確にはXcode6.1.1)で多言語対応する方法を書きます。<br/>
全スクリーンショットを載せます。</p>

<p>まず、多言語化に使うサンプルプロジェクトは下記です。<br/>
StoryboardにはLabelとButtonを1つずつ配置します。<br/>
<img src="http://grandbig.github.io/images/multiLanguage1.png" alt="StoryboardにLabelとButtonを配置" /></p>

<!-- more -->


<p>ソースは下記とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">UIAlertViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">alert</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アラートの表示</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">showAlert:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;確認&quot;</span>
</span><span class='line'>                                            <span class="nl">message:</span><span class="s">@&quot;テスト&quot;</span>
</span><span class='line'>                                           <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                  <span class="nl">cancelButtonTitle:</span><span class="nb">nil</span>
</span><span class='line'>                                  <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、早速、多言語化を進めていきましょう。</p>

<ol>
<li><p>PROJECT > info > Localizationsに項目を追加<br/>
初めはEnglishのみ項目があります。『＋』をクリックして、追加したい言語を選択しましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage2.png" alt="Localizationsに項目追加" /><br/>
<img src="http://grandbig.github.io/images/multiLanguage3.png" alt="追加したい言語を選択" /><br/>
<img src="http://grandbig.github.io/images/multiLanguage4.png" alt="チェックがついていることを確認" /></p></li>
<li><p>Main.storyboardの追加
次にstoryboardに言語の設定を追加しましょう。<br/>
Main.storyboardを選択し、右メニューの『Show the File inspector』> Localizationを見てください。<br/>
ここで使いたい言語にチェックをつけましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage5.png" alt="Main.storyboardに言語設定を追加" /></p></li>
<li><p>LaunchScreenの追加<br/>
そして、Main.storyboardで実施したのと同様にLaunchScreenでも言語を設定しましょう。<br/>
LaunchScreen.xibを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage6.png" alt="LaunchScreen.xibに言語設定を追加" /></p></li>
<li><p>Info.plistの追加
同様にInfo.plistでも言語を設定しましょう。<br/>
Info.plistを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage13.png" alt="Info.plistに言語設定を追加" /><br/>
アプリ名など言語ごとに変更したいKeyの値を変えましょう。</p></li>
<li><p>Localizable.stringsファイルの追加<br/>
続いて、ソース内の文言を多言語化する手順です。<br/>
Supporting FilesにStrings FileをLocalizable.stringsというファイル名で追加しましょう。<br/>
今は保存場所はあまり気にしなくて構いません。<br/>
ファイルを追加したら、Localizable.stringsを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage7.png" alt="Strings Fileを追加" /><br/>
<img src="http://grandbig.github.io/images/multiLanguage8.png" alt="Baseを選択したまま進む" /><br/>
<img src="http://grandbig.github.io/images/multiLanguage9.png" alt="Localizable.stringsに言語設定を追加" /></p></li>
<li><p>Localizable.stringsファイルに文言を追加
先ほど追加したファイルに文言を追加しましょう。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Localizable.strings(Base)ファイル</span>
</span><span class='line'><span class="s">&quot;alertTitle&quot;</span><span class="o">=</span><span class="s">&quot;Confirm&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertMessage&quot;</span><span class="o">=</span><span class="s">&quot;Test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertOKBtn&quot;</span><span class="o">=</span><span class="s">&quot;OK&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Localizable.strings(English)ファイル</span>
</span><span class='line'><span class="s">&quot;alertTitle&quot;</span><span class="o">=</span><span class="s">&quot;Confirm&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertMessage&quot;</span><span class="o">=</span><span class="s">&quot;Test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertOKBtn&quot;</span><span class="o">=</span><span class="s">&quot;OK&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Localizable.strings(Japanese)ファイル</span>
</span><span class='line'><span class="s">&quot;alertTitle&quot;</span><span class="o">=</span><span class="s">&quot;確認&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertMessage&quot;</span><span class="o">=</span><span class="s">&quot;テスト&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;alertOKBtn&quot;</span><span class="o">=</span><span class="s">&quot;OK&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>反映させたいファイルへは下記のように書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アラートの表示</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">showAlert:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">alertTitle</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;alertTitle&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">alertMessage</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;alertMessage&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">alertOKBtn</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;alertOKBtn&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="n">alertTitle</span>
</span><span class='line'>                                            <span class="nl">message:</span><span class="n">alertMessage</span>
</span><span class='line'>                                           <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                  <span class="nl">cancelButtonTitle:</span><span class="nb">nil</span>
</span><span class='line'>                                  <span class="nl">otherButtonTitles:</span><span class="n">alertOKBtn</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでできれば、多言語化OKです。</p>

<h4>注意点</h4>

<p>途中で躓いた場合の対応を書いておきます。</p>

<ol>
<li><p>Info.plistが見つからないというエラーが出る
下記のようなエラーが出た場合の対処を書いておきます。<br/>
<img src="http://grandbig.github.io/images/multiLanguage10.png" alt="Info.plistが見つからないエラー" /><br/>
これは、多言語化したことにより、当初はAppDelegate.mファイルと同じ階層にあったInfo.plistファイルが多言語ごとのフォルダ配下に移動したために発生しています。<br/>
なので、TARGETS > Build Settings > Packaging > Info.plist Fileのパスを変更しましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage11.png" alt="パスの変更" /></p></li>
<li><p>途中でStoryboardにラベルを追加した場合の対応
開発していれば、途中で表示したいものを増やすこともあるでしょう。<br/>
その場合は、Main.storyboardを選択して、右メニューの『Show the File inspector』> LocalizationからBase以外のチェックを外しましょう。<br/>
それから、ラベルを追加して、再度、Base以外のチェックをつけましょう。<br/>
その際、前のファイルを使うか、新しいファイルに置き換えて使うかを問われます。<br/>
新しいファイルに置き換えて使う方の <strong>Replace file</strong> を選択しましょう。<br/>
<img src="http://grandbig.github.io/images/multiLanguage12.png" alt="Replace fileを選択" /></p></li>
</ol>


<p>以上で多言語化の注意点は終了です。<br/>
世界に羽ばたくアプリを開発するためには多言語化は必須ですね。<br/>
面倒な対応ではありますが、ぜひ取り組んでみてください。</p>

<p>ということで、今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8.1でCLVisitとCMPedometerを試してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2014/11/30/visit-and-step/"/>
    <updated>2014-11-30T17:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/11/30/visit-and-step</id>
    <content type="html"><![CDATA[<h4>iOS8から追加された新しい機能 CLVisitとCMPedometer</h4>

<p>さて、久々の更新です。<br/>
今更ですが、CLVisitとCMPedometerについて調べてみました。<br/>
CLVisitはiOS8以降、CMPedometerはiOS8以降かつM8 モーションコプロセッサを搭載したiPhone6 or iPhone6 Plusでのみ利用可能です。<br/>
iOS8はともかく、まだまだ、iPhone6 or iPhone6 Plusは普及しているとは言い難いことでしょう。<br/>
実質的に多いのはiPhone5かもしれません&hellip;。<br/>
しかし、ここはエンジニアとして、1〜2年後を見て、アプリを開発すべきでしょう。<br/>
ということで早速、見て行きましょう。</p>

<!-- more -->


<h4>CLVisitで滞在時間を検知</h4>

<p>まずは、CLVisitから見ていきます。<br/>
CLVisitは特定の場所の滞在時間を取得できるクラスです。<br/>
最近、Swiftでソースを書いてあるサイトが多いので、あえてObjective-Cで書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label1</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextView</span> <span class="o">*</span><span class="n">textView1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 位置情報の取得許可を求めるメソッド</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を許可していない</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を常に許可している場合</span>
</span><span class='line'>      <span class="c1">// 滞在時間の取得開始</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">startMonitoringVisits</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を使用中のみ許可している場合</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didVisit:</span><span class="p">(</span><span class="n">CLVisit</span> <span class="o">*</span><span class="p">)</span><span class="nv">visit</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">outputFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">arrivalDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">visit</span><span class="p">.</span><span class="n">arrivalDate</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">departureDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">visit</span><span class="p">.</span><span class="n">departureDate</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">latitude</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span><span class="n">visit</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">longitude</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span><span class="n">visit</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;緯度: %@</span><span class="se">\n</span><span class="s">経度: %@</span><span class="se">\n</span><span class="s">到着時間: %@</span><span class="se">\n</span><span class="s">出発時間: %@&quot;</span><span class="p">,</span> <span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">,</span> <span class="n">arrivalDate</span><span class="p">,</span> <span class="n">departureDate</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// ローカルプッシュ通知</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">message</span> <span class="nl">soundFlag:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">textView1</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span> <span class="n">message</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ローカルプッシュ通知処理</span>
</span><span class='line'><span class="cm"> @param message メッセージ</span>
</span><span class='line'><span class="cm"> @param sound 通知音の設定</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span> <span class="nf">soundFlag:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">soundFlag</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">soundFlag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このアプリをインストールしたiPhone6を持って、ぶらぶらしてみたところ&hellip;</p>

<p>緯度: 35.☓☓☓☓☓☓<br/>
経度: 139.☓☓☓☓☓<br/>
到着時間: 2014-11-30 16:00:09<br/>
出発時間: 2014-11-30 16:22:20</p>

<p>といった結果が得られました。<br/>
その場を離れてから5〜6分後にローカルプッシュ通知が来ました。<br/>
※トリガーが時間なのか位置情報なのかは未検証</p>

<p>因みに、 <strong>アプリを1度起動すれば、その後、Backgroundで起動していなくても、検知してくれます。</strong> <br/>
これは滞在時間の取得以外にも何かに使えそうですね。<br/>
また、移動中は検知しなかったので、滞在と見なす時間が決まっているのでしょう。</p>

<h4>CMPedometerで歩行情報を取得</h4>

<p>次に、CMPedometerを見ていきます。<br/>
CMPedometerはiOS7で追加されていたCMStepCounterのパワーアップバージョンです。<br/>
これもObjective-Cでソースを書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreMotion/CoreMotion.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CMPedometer</span> <span class="o">*</span><span class="n">pmp</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label1</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextView</span> <span class="o">*</span><span class="n">textView1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">pmp</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CMPedometer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">check</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">confirmCMPedometer</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">check</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// モーション計測の開始</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="n">startPedometer</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> CMPedometerが利用可能か判断する処理</span>
</span><span class='line'><span class="cm"> return 判断結果(YES: 利用可能, NO: 利用不可能)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">confirmCMPedometer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">CMPedometer</span> <span class="n">isStepCountingAvailable</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CMPedometer</span> <span class="n">isDistanceAvailable</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CMPedometer</span> <span class="n">isFloorCountingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> 歩行動作を計測する処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startPedometer</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">pmp</span> <span class="nl">startPedometerUpdatesFromDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span>
</span><span class='line'>                              <span class="nl">withHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">CMPedometerData</span> <span class="o">*</span><span class="n">pedometerData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                      <span class="c1">// step数の取得</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">step</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">numberOfSteps</span><span class="p">;</span>
</span><span class='line'>                                      <span class="c1">// 距離</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">distance</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">distance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 日時取得のためにFormatを設定</span>
</span><span class='line'>                                      <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">outputFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                                      <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="p">];</span>
</span><span class='line'>                                      <span class="c1">// 開始日時</span>
</span><span class='line'>                                      <span class="n">NSString</span><span class="o">*</span> <span class="n">startDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">startDate</span><span class="p">];</span>
</span><span class='line'>                                      <span class="c1">//終了日時</span>
</span><span class='line'>                                      <span class="n">NSString</span> <span class="o">*</span><span class="n">endDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">outputFormatter</span> <span class="nl">stringFromDate:</span><span class="n">pedometerData</span><span class="p">.</span><span class="n">endDate</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// 階段の昇降</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">floorsAscended</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">floorsAscended</span><span class="p">;</span>
</span><span class='line'>                                      <span class="n">NSNumber</span> <span class="o">*</span><span class="n">floorsDescended</span> <span class="o">=</span> <span class="n">pedometerData</span><span class="p">.</span><span class="n">floorsDescended</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;Step Count Result</span><span class="se">\n\n</span><span class="s">歩数: %@</span><span class="se">\n</span><span class="s">距離: %@[m]</span><span class="se">\n</span><span class="s">開始時間: %@</span><span class="se">\n</span><span class="s">終了時間: %@</span><span class="se">\n</span><span class="s">上った回数: %@</span><span class="se">\n</span><span class="s">下りた回数: %@&quot;</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">,</span> <span class="n">floorsAscended</span><span class="p">,</span> <span class="n">floorsDescended</span><span class="p">];</span>
</span><span class='line'>                                      <span class="n">self</span><span class="p">.</span><span class="n">textView1</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                                      <span class="c1">// ローカルプッシュ通知</span>
</span><span class='line'>                                      <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">str</span> <span class="nl">soundFlag:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>                                  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ローカルプッシュ通知処理</span>
</span><span class='line'><span class="cm"> @param message メッセージ</span>
</span><span class='line'><span class="cm"> @param sound 通知音の設定</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span> <span class="nf">soundFlag:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">soundFlag</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">soundFlag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このアプリをインストールしたiPhone6を持って、ぶらぶらしてみたところ&hellip;</p>

<p>歩数: 1128<br/>
距離: 774.0900000002002 [m]<br/>
開始時間: 2014-11-30 15:57:22<br/>
終了時間: 2014-11-30 16:29:32<br/>
上がった回数: 2<br/>
下がった回数: 0</p>

<p>といった結果が得られました。<br/>
これはローカルプッシュ通知が届くタイミングが任意なのか、法則性はなさそうでした。<br/>
※トリガーが時間なのか、歩数なのか、距離なのか未検証</p>

<p>因みに、 アプリを1度起動すれば、その後、Backgroundで起動していなくても、検知してくれます。<br/>
これは歩数計測以外にも何かに使えそうですね。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8からのLocalNotification]]></title>
    <link href="http://grandbig.github.io/blog/2014/11/09/localnotification-ios8/"/>
    <updated>2014-11-09T17:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/11/09/localnotification-ios8</id>
    <content type="html"><![CDATA[<h4>LocalNotificationでAction</h4>

<p>今日はiOS8から追加されたLocalNotificationの新機能についてお話します。<br/>
これまでのLocalNotificationは</p>

<ul>
<li>通知が通知エリアに表示される</li>
<li>通知をタップすることでアプリを起動</li>
</ul>


<p>くらいの機能しかありませんでした。</p>

<p>しかし、iOS8からは届いた通知に対して、ユーザが答えることができるようになりました。</p>

<!-- more -->


<p>例えば、下記のような感じですね。</p>

<p><img src="http://grandbig.github.io/images/localnotification_1.png" alt="バナー表示" /><br/>
<img src="http://grandbig.github.io/images/localnotification_2.png" alt="ダイアログ表示" /></p>

<p>これまでLocalNotificationを使ってきた人であれば、実に簡単に実装ができます。<br/>
それでは、実際にソースを見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">UIApplication</span> <span class="nl">instancesRespondToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">registerUserNotificationSettings:</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="n">registerUserNotificationSettings</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アプリがBackground起動になったときに処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">applicationDidEnterBackground:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// LocalNotificationの送信</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;TEST&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LocalNotificationでアクションを実行したときの処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">handleActionWithIdentifier:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">identifier</span> <span class="nl">forLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">notification</span> <span class="nl">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="n">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;ACCEPT&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Accepted&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;MAYBE&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Maybe&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;DECLINE&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Declined&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">completionHandler</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notificationの設定</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">registerUserNotificationSettings</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Actionの生成</span>
</span><span class='line'>  <span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">acceptAction</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;ACCEPT&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Accept&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Actionの生成</span>
</span><span class='line'>  <span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">acceptAction</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;MAYBE&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Maybe&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Actionの生成</span>
</span><span class='line'>  <span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">acceptAction</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;DECLINE&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Decline&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">acceptAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Categoryの作成</span>
</span><span class='line'>  <span class="n">UIMutableUserNotificationCategory</span> <span class="o">*</span><span class="n">inviteCategory</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIMutableUserNotificationCategory</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">inviteCategory</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span> <span class="c1">// CategoryのIDを設定</span>
</span><span class='line'>  <span class="p">[</span><span class="n">inviteCategory</span> <span class="nl">setActions:</span><span class="err">@</span><span class="p">[</span><span class="n">acceptAction</span><span class="p">,</span> <span class="n">maybeAction</span><span class="p">,</span> <span class="n">declineAction</span><span class="p">]</span> <span class="nl">forContext:</span><span class="n">UIUserNotificationActionContextDefault</span><span class="p">];</span> <span class="c1">// ダイアログ表示</span>
</span><span class='line'>  <span class="p">[</span><span class="n">inviteCategory</span> <span class="nl">setActions:</span><span class="err">@</span><span class="p">[</span><span class="n">acceptAction</span><span class="p">,</span> <span class="n">declineAction</span><span class="p">]</span> <span class="nl">forContext:</span><span class="n">UIUserNotificationActionContextMinimal</span><span class="p">];</span> <span class="c1">// バナー表示</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSSet</span> <span class="o">*</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="n">inviteCategory</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="n">UIUserNotificationSettings</span> <span class="o">*</span><span class="n">notificationSettings</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes:</span><span class="n">UIUserNotificationTypeAlert</span><span class="o">|</span><span class="n">UIUserNotificationTypeBadge</span><span class="o">|</span><span class="n">UIUserNotificationTypeSound</span> <span class="nl">categories:</span><span class="n">categories</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings:</span><span class="n">notificationSettings</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LocalNotificationを送信</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">timeZone</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimeZone</span> <span class="n">localTimeZone</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">category</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span> <span class="c1">// Action表示させたいCategoryの設定</span>
</span><span class='line'>  <span class="p">[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単に書けますね。<br/>
ぱっと見た感じは、予めAction項目を作成しておく必要があるので、用途は限定的になりそうな気がしますね。<br/>
と言っても、これまでよりユーザ操作のハンドリングの幅が広がるので、嬉しい限りですが&hellip;。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[端末のバッテリ残量を取得(iOS8)]]></title>
    <link href="http://grandbig.github.io/blog/2014/11/08/ios8-battery/"/>
    <updated>2014-11-08T16:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/11/08/ios8-battery</id>
    <content type="html"><![CDATA[<h4>端末のバッテリ残量の取得が細かくなった</h4>

<p>本日はiPhoneのバッテリ残量の取得について書きます。<br/>
これまではソース上、5%刻みでしかバッテリ残量を取得できませんでした。<br/>
しかし、iOS8以上の端末であれば、 <strong>1%刻み</strong> でのバッテリ残量の取得が可能になったようです。</p>

<!-- more -->


<p>バッテリの取得手法は下記のまま変わりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIDevice</span> <span class="o">*</span><span class="n">device</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// デバイス情報の設定</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">device</span><span class="p">.</span><span class="n">batteryMonitoringEnabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// バッテリ残量をログ出力</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">outputDeviceBattery</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">level</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">device</span><span class="p">.</span><span class="n">batteryLevel</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;level: %f&quot;</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">level</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ボタンタップでバッテリ残量ログを出力</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">btnAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">outputDeviceBattery</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで実装できたら、iOS7.xとiOS8.x端末で計測してみてください。<br/>
iOS7.xであれば、『0.450000』のように5%刻みですが、<br/>
iOS8.xであれば、『0.310000』のように1%刻みで値が返ってくることがわかります。<br/>
これで少しは正確にバッテリ情報を取得できるようになりましたね。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today Extensionのサンプルを作ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/26/today-extension/"/>
    <updated>2014-10-26T00:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/26/today-extension</id>
    <content type="html"><![CDATA[<h3>Today Extension</h3>

<p>本日は、iOS8から追加されたToday Extensionを使ったアプリを作ってみたいと思います。<br/>
さて、早速説明していきましょう。</p>

<h4>Today Extensionをプロジェクトに追加</h4>

<p>まず、XcodeでSingle View Applicationを用いてプロジェクトを作成してください。<br/>
これは通常のプロジェクトを作る過程と何ら変わりません(いつもの手順です。)<br/>
次に<strong>App Extensionを追加</strong>しなければなりません。<br/>
手順は下記です。</p>

<ol>
<li>Show the Project navigator > General > + ボタンを選択</li>
<li>iOS > Application Extension > Today Extensionを選択</li>
<li>名前をつけて作成(ここでは<strong>TodayExtensionActivity</strong>とします。)</li>
</ol>


<!--more-->


<p><img src="http://grandbig.github.io/images/today_extension_1.png" alt="+ボタンをクリック" /><br/>
<img src="http://grandbig.github.io/images/today_extension_2.png" alt="Today Extensionを選択" /></p>

<p>ここまで終われば、Runでシミュレータ上で表示してみてください。<br/>
通知センターを表示すると、<strong>Hello World</strong>と表示されることがわかるはずです。<br/>
<img src="http://grandbig.github.io/images/today_extension_3.png" alt="Hello World" /></p>

<h4>余白の削除</h4>

<p>しかし、表示が不格好ですね&hellip;。<br/>
これはデフォルトで余白が設定されているためです。<br/>
文字を表示するだけなら、余白は不要なので、余白を消してみましょう。<br/>
これはソースを追加することで実現できます。</p>

<p>先ほど追加したTodayExtensionActivityのTodayExtensionViewController.mを編集します。<br/>
下記のソースをTodayExtensionViewController.mファイルに追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// TodayExtensionViewController.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIEdgeInsets</span><span class="p">)</span><span class="nf">widgetMarginInsetsForProposedMarginInsets:</span><span class="p">(</span><span class="n">UIEdgeInsets</span><span class="p">)</span><span class="nv">defaultMarginInsets</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">UIEdgeInsetsZero</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、下記のように表示が変わることが確認できます。<br/>
<img src="http://grandbig.github.io/images/today_extension_4.png" alt="余白を削除" /></p>

<h4>高さを調整</h4>

<p>横方向の余白がなくなったので、違和感がなくなったものの、高さはもう少し広くしたいということがあるかもしれません。<br/>
その場合は、ソースで高さを指定しましょう。<br/>
TodayExtensionViewController.mのviewDidLoadメソッド内で高さを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 高さ変更</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">preferredContentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、下記のような表示になると思います。<br/>
<img src="http://grandbig.github.io/images/today_extension_5.png" alt="高さを調整" /></p>

<h4>通知センターに表示されたWidgetタップでアプリを起動</h4>

<p>せっかく通知センターに表示したのですから、アクションを追加したいですよね？<br/>
ここでは、タップでアプリを起動させてみたいと思います。<br/>
まずは、URLスキームを設定しましょう。</p>

<ol>
<li>Show the Project navigator > TARGETS > info > URL Typesを選択</li>
<li>identifier, URL schemesを設定<br/>
<img src="http://grandbig.github.io/images/today_extension_6.png" alt="URL schemeの設定" /></li>
</ol>


<p>次に、TodayExtension側のStoryboardを開きましょう。<br/>
Viewに<strong>Tap Gesture Recognizer</strong>をドラッグ＆ドロップで追加しましょう。<br/>
Today View ControllerにTap Gesture Recognizerの項目が追加されるので、それを右クリックしてSent Actionsを設定しましょう。<br/>
<img src="http://grandbig.github.io/images/today_extension_7.png" alt="Tap Gesture Recognizerを追加" /></p>

<p>今回は、Sent Actionとして、TodayViewController.mにtapActionメソッドを追加しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">tapAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;textension://&quot;</span><span class="p">];</span> <span class="c1">// カスタムURLスキームを指定</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">extensionContext</span> <span class="nl">openURL:</span><span class="n">URL</span> <span class="nl">completionHandler:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでは、URLスキームとして<strong>textension</strong>と設定したため、上記のソースのように指定できます。<br/>
上記設定後にシミュレータを起動して、通知センターのWidgetをタップしてみてください。<br/>
アプリが起動されるはずです。</p>

<p>いかがだったでしょうか？</p>

<p>少しずつ、Today Extension機能を実装したアプリが増えてきています。<br/>
これは開発者にとってもユーザにとっても非常に便利な機能だと思いますので、これから自作アプリには積極的に実装していきたいと思います。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シングルトンパターンとクラスメソッドとインスタンスメソッド]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/21/singleton-pattern/"/>
    <updated>2014-10-21T22:02:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/21/singleton-pattern</id>
    <content type="html"><![CDATA[<h4>シングルトンを使用したクラスでクラスメソッドとインスタンスメソッドを定義する</h4>

<p>本日は、シングルトンを使用したクラスの作成と、その中でクラスメソッドとインスタンスメソッドを定義した場合に、どう扱うのかについて見ていきます。<br/>
早速、シングルトンパターンのクラスを定義しましょう。<br/>
NSObjectを親クラスとしたSingletonSampleクラスを作成します。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SingletonSample.hファイル</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SingletonSample</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンパターンであることを定義</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SingletonSample</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SingletonSample.mファイル</span>
</span><span class='line'><span class="cp">#import &quot;SingletonSample.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SingletonSample</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SingletonSample</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SingletonSample</span> <span class="o">*</span><span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];]</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでシングルトンパターンのクラスとして定義できました。</p>

<p>次にクラスメソッドとインスタンスメソッドを定義してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SingletonSample.hファイル</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SingletonSample</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// インスタンス変数</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンパターンであることを定義</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SingletonSample</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クラスメソッド</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testClassMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// インスタンスメソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testInstanceMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SingletonSample.mファイル</span>
</span><span class='line'><span class="cp">#import &quot;SingletonSample.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SingletonSample</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SingletonSample</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SingletonSample</span> <span class="o">*</span><span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];]</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 初期化処理</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;テスト&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testClassMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testInstanceMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;TEST&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、この定義したシングルトンのクラスを使ってみましょう。<br/>
適当にUIViewControllerクラスのViewController.mで使ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// インスタンス化</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// インスタンス変数を確認</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;num: %ld, str: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">num</span><span class="p">,</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// クラスメソッドの実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">testClassMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// インスタンスメソッドの実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">testInstanceMethod</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// インスタンス変数</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;num: %ld, str: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">num</span><span class="p">,</span> <span class="p">[</span><span class="n">SingletonSample</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">str</span><span class="p">);]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで書いた後にRunを実行すると、下記のログが出力されます。<br/>
2014-10-21 22:19:38.922 SingletonSample[4334:26435] num: 10, str: テスト<br/>
2014-10-21 22:19:46.986 SingletonSample[4334:26435] num: 30, str: TEST</p>

<p>正しく実行されていることがわかりますね。</p>

<p>このようにクラスメソッドは<br/>
<strong>[クラス名 メソッド名]</strong><br/>
で呼び出します。</p>

<p>一方でインスタンスメソッドは<br/>
<strong>[インスタンス メソッド名</strong><br/>
で呼び出します。<br/>
今回はシングルトンパターンであるため、シングルトンパターンのインスタンスである<strong>[SingletonSample sharedInstance]</strong>を用いていることに注意してください。</p>

<p>これからシングルトンのクラスをどしどし使いこなしていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftを使って、位置情報を取得してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/19/developing-cllocation-app-by-using-swift/"/>
    <updated>2014-10-19T22:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/19/developing-cllocation-app-by-using-swift</id>
    <content type="html"><![CDATA[<h3>Swiftを使って位置情報を使ってみよう</h3>

<p>今日はSwiftを使った位置情報の取得を試してみたいと思います。<br/>
今日もObjective-Cの書式と比較しながら進めてみます。</p>

<h4>ライブラリのimport</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.hファイル</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swiftファイル</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>インスタンス変数の宣言</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swiftファイル</span>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">lm:</span><span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Delegate Protocolの宣言</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swiftファイル</span>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>viewDidLoadメソッド</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">respondToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">respondToSelector</span><span class="p">(</span><span class="s">&quot;requestAlwaysAuthorization&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>CLLocationManagerDelegateメソッド</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="c1">// 位置情報の許可設定</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 位置情報の更新ハンドリング処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">CLLocation</span> <span class="o">*</span><span class="n">currentLocation</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">lastObject</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lat</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lng</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">alt</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">altitude</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDirection</span> <span class="n">course</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">course</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationSpeed</span> <span class="n">spd</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">speed</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">hacc</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">horizontalAccuracy</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">vacc</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">verticalAccuracy</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">dt</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">timestamp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swiftファイル</span>
</span><span class='line'><span class="c1">// 位置情報の許可設定</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didChangeAuthorizationStatus</span> <span class="nl">status:</span> <span class="n">CLAuthorizationStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">NotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">Authorized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">AuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 位置情報の更新ハンドリング処理</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">currentLocation:</span><span class="n">CLLocation</span><span class="o">?</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">last</span> <span class="n">as</span><span class="o">?</span> <span class="n">CLLocation</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">lat:</span><span class="n">CLLocationDegrees</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">lng:</span><span class="n">CLLocationDegrees</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">alt:</span><span class="n">CLLocationDegrees</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">altitude</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">course:</span><span class="n">CLLocationDirection</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">course</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">spd:</span><span class="n">CLLocationSpeed</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">speed</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">hacc:</span><span class="n">CLLocationAccuracy</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">horizontalAccuracy</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">vacc:</span><span class="n">CLLocationAccuracy</span><span class="o">?</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">verticalAccuracy</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">dt:</span><span class="n">NSDate</span><span class="o">!</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="o">?</span><span class="p">.</span><span class="n">timestamp</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでコーディングは完了です。<br/>
Swiftでも位置情報が取得できるようになりました。<br/>
次回はSwiftで何を書こうかな。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6で様々な画面サイズに対応しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/07/xcode6-preview/"/>
    <updated>2014-10-07T23:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/07/xcode6-preview</id>
    <content type="html"><![CDATA[<h3>Xcode6でAuto Layoutを使おう！</h3>

<p>昨今はiPhone5, iPhone6, iPhone6 PlusなどiOSアプリでも様々な画面サイズに対応する必要性が出てきました。<br/>
これまでは2画面の対応だけを考えていれば良かったのに、大きな変化ですよね？<br/>
では、この対応をどうすれば良いのかというと、『Auto Layoutを使いましょう』ってことです。</p>

<p>では早速説明していきましょう。<br/>
StoryBoard上で右下にある<strong>Auto Layout</strong>ボタンをクリックします。<br/>
<img src="http://grandbig.github.io/images/xcode6_autolayout1.png" alt="Auto Layout" /></p>

<!--more-->


<p>ここはXcode5と同じようなんですが、Xcode5と何やら様子が異なることに気づきます。<br/>
それは、<strong>左右のConstraintが0</strong>にも関わらず、StoryBoard上では<strong>左右に間隔があいています</strong>。<br/>
Xcode6で慣れれば良い話なのかもしれませんが、気になるのであれば、下記の箇所から変更できます。</p>

<p><img src="http://grandbig.github.io/images/xcode6_autolayout2.png" alt="Constraint Margin" /></p>

<p>左右のConstraintsを選択した状態で、上図の箇所を確認してみましょう。<br/>
Second Itemに<strong>Relative to margin</strong>が紐付けられています。このチェックを外しましょう！
すると、marginがなくなるので、Constraintが0だと下図のようになります。<br/>
<img src="http://grandbig.github.io/images/xcode6_autolayout3.png" alt="marginなし" /></p>

<p>ここで<strong>Constraintを10</strong>にするなど、あけたい間隔を設定しましょう。</p>

<p>さて、ここでポイントなのが、TextFieldにはWidthの設定をつけていないことです。<br/>
これにより、左右のConstraintが適用されるので各画面に対応できます。</p>

<p>本当に対応できているのか、シミュレータや実機で確認する前にプレビューを見てみましょう。<br/>
確認方法としては、<br/>
1: Xcode6右上の<strong>Show the Assistant editor</strong>をクリック<br/>
2: Manual, Automatic, Top Level Objects, Localization, Previewとあるので、<strong>Preview</strong>をクリック</p>

<p><img src="http://grandbig.github.io/images/xcode6_autolayout4.png" alt="Previewの確認方法" /></p>

<p>すると、4インチサイズのPreviewがデフォルトで表示されます。<br/>
<img src="http://grandbig.github.io/images/xcode6_autolayout5.png" alt="デフォルトのPreview画面" /></p>

<p>4.7インチや5.5インチなどを追加する場合は、Previewの左下にある<strong>+ボタン</strong>をクリックして、追加したいディスプレイサイズを選択します。<br/>
これにより、下図のように複数のディスプレイサイズでレイアウトを確認することができます。</p>

<p><img src="http://grandbig.github.io/images/xcode6_autolayout6.png" alt="複数画面" /></p>

<p>いかがでしたでしょうか？<br/>
これからはiPhone6, iPhone6 Plusにも最適化したアプリを開発する必要がありますし、たいへんですが、頑張って行きたいですね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(SunSpider 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/02/wkwebview3/"/>
    <updated>2014-10-02T00:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/02/wkwebview3</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日は<a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
今回はGoogle Octane 2.0と同じく下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<!--more-->


<p>結果は下記になりました。</p>

<p>Totalとしての結果は下記になりました。<br/>
<img src="http://grandbig.github.io/images/wkwebview_bench2.png" alt="Total結果" /></p>

<p>細かく見ていくと、<br/>
<img src="http://grandbig.github.io/images/wkwebview_bench3.png" alt="項目別結果" /><br/>
という結果になりました。</p>

<p>これから</p>

<ul>
<li>iPhone5とiPhone6で差がある</li>
<li>iOSバージョン別に比較すると、<strong>UIWebView &lt; Safari = WKWebView</strong>となる</li>
</ul>


<p>ということが言えます。</p>

<p>Google Octane 2.0でもiPhone6で試してみる価値がありそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftを使って、iBeaconのCentralアプリを作ろう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/"/>
    <updated>2014-09-29T00:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift</id>
    <content type="html"><![CDATA[<h3>Swiftを使ってみよう</h3>

<p>さて、本日はSwiftの勉強を兼ねて、iBeaconのCentralアプリを開発してみようと思います。もちろんiOS8に対応したアプリを開発します。<br/>
これまで、筆者はまともにSwiftを触ってきませんでした。しかし、今後の動向を考えるに、Objective-Cだけでなく、Swiftでの開発もできるようになっておかないと技術者として危険な気がするのです。もし、数年後にXcode上でObjective-Cのサポートを終了するということになったら、途端にiPhoneアプリが開発できない技術者となってしまいます。</p>

<p>とは言え、何もなしに書き方を勉強しようとしても辛いものがあります。なので、これまでObjective-Cで開発してきたアプリをSwiftに移行するという方法でSwiftを学んでいくこととしました。<br/>
では、早速、開発を進めていきましょう！</p>

<p>本ブログでは、Objective-CとSwiftでの書き方を比較しながら進めていきます。<br/>
Objective-Cとの比較が不要な方は<strong>Swiftの場合</strong>の項目のみを読んでください。</p>

<!--more-->


<h4>ライブラリのimport</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.hファイル</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swiftファイル</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span></code></pre></td></tr></table></div></figure>


<h3>インスタンス変数の宣言</h3>

<ul>
<li>Objective-Cの場合
Objective-Cの場合は<code>import</code>のすぐ下のinterface内で書きます。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">locationManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeacon</span> <span class="o">*</span><span class="n">nearestBeacon</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合<br/>
Swiftの場合は<code>class ViewController</code>に全体が囲まれる書式になるため、<code>class ViewController</code>のすぐ下に書きます。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">locationManager:</span><span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">proximityUUID:</span><span class="n">NSUUID</span><span class="o">?</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">beaconRegion:</span><span class="n">CLBeaconRegion</span><span class="o">?</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">nearestBeacon:</span><span class="n">CLBeacon</span><span class="o">?</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">str:</span><span class="n">NSString</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delegate Protocolの宣言</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="p">,</span> <span class="n">UIAlertViewDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span><span class="p">,</span> <span class="n">UIAlertViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>viewDidLoadメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">CLLocationManager</span> <span class="nl">isMonitoringAvailableForClass:</span><span class="p">[</span><span class="n">CLCircularRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;UUID文字列を指定&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="nl">identifier:</span><span class="s">@&quot;Objective-C iBeacon&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;確認&quot;</span> <span class="nl">message:</span><span class="s">@&quot;お使いの端末ではiBeaconを利用できません。&quot;</span> <span class="nl">delegate:</span><span class="n">self</span> <span class="nl">cancelButtonTitle:</span><span class="nb">nil</span> <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">CLLocationManager</span><span class="p">.</span><span class="n">isMonitoringAvailableForClass</span><span class="p">(</span><span class="n">CLCircularRegion</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="n">NSUUID</span><span class="p">(</span><span class="nl">UUIDString:</span> <span class="s">&quot;UUID文字列を指定&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="n">CLBeaconRegion</span><span class="p">(</span><span class="nl">proximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span><span class="p">,</span> <span class="nl">identifier:</span> <span class="s">&quot;Swift iBeacon&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">respondsToSelector</span><span class="p">(</span><span class="s">&quot;requestAlwaysAuthorization&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startMonitoringForRegion</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">alert:</span><span class="n">UIAlertView</span><span class="o">?</span> <span class="o">=</span> <span class="n">UIAlertView</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span><span class="nl">message:</span> <span class="s">&quot;お使いの端末ではiBeaconを利用できません。&quot;</span><span class="p">,</span> <span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">cancelButtonTitle:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">otherButtonTitles:</span> <span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">alert</span><span class="o">?</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>自作メソッドの定義</h3>

<p>ここではローカルプッシュを送信するメソッドを定義します。</p>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="nf">sendLocalNotificationForMessage</span><span class="p">(</span><span class="nl">message:</span> <span class="n">NSString</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">localNotification:</span><span class="n">UILocalNotification</span> <span class="o">=</span> <span class="n">UILocalNotification</span><span class="p">()</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="n">NSDate</span><span class="p">.</span><span class="n">date</span><span class="p">()</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span>
</span><span class='line'>  <span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">scheduleLocalNotification</span><span class="p">(</span><span class="n">localNotification</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CLLocationManagerのDelegateメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域計測が開始した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didStartMonitoringForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Start Monitoring Region&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域に侵入した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Enter Region&quot;</span><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域から退出した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Exit Region&quot;</span><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">stopRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域内にいるかいないかの判断</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didDetermineState:</span><span class="p">(</span><span class="n">CLRegionState</span><span class="p">)</span><span class="nv">state</span> <span class="nf">forRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateInside:</span>
</span><span class='line'>          <span class="k">if</span><span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">]){</span>
</span><span class='line'>              <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Enter %@&quot;</span><span class="p">,</span><span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">);</span>
</span><span class='line'>              <span class="c1">//Beacon の範囲内に入った時に行う処理を記述する</span>
</span><span class='line'>              <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Already Entering&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateOutside:</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateUnknown:</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 距離計測</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//CLBeacon *nearestBeacon = beacons.firstObject;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span> <span class="o">=</span> <span class="n">beacons</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">rangeMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="p">.</span><span class="n">proximity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityImmediate:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Immediate&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityNear:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Near&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityFar:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Far&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Unknown&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%f [m]&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="p">.</span><span class="n">accuracy</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">self</span><span class="p">.</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域観測に失敗した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">monitoringDidFailForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="nf">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Exit Region&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 位置情報の許可設定</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swiftの場合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域観測が開始した場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didStartMonitoringForRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sendLocalNotificationForMessage</span><span class="p">(</span><span class="s">&quot;Start Monitoring Region&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域に侵入した場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didEnterRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sendLocalNotificationForMessage</span><span class="p">(</span><span class="s">&quot;Enter Region&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">region</span><span class="p">.</span><span class="n">isMemberOfClass</span><span class="p">(</span><span class="n">CLBeaconRegion</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">isRangingAvailable</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startRangingBeaconsInRegion</span><span class="p">(</span><span class="n">region</span> <span class="n">as</span> <span class="n">CLBeaconRegion</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域から退出した場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didExitRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sendLocalNotificationForMessage</span><span class="p">(</span><span class="s">&quot;Enter Region&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">region</span><span class="p">.</span><span class="n">isMemberOfClass</span><span class="p">(</span><span class="n">CLBeaconRegion</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">isRangingAvailable</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">stopRangingBeaconsInRegion</span><span class="p">(</span><span class="n">region</span> <span class="n">as</span> <span class="n">CLBeaconRegion</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域内にいるかどうかの判断</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didDetermineState</span> <span class="nl">state:</span> <span class="n">CLRegionState</span><span class="p">,</span> <span class="n">forRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">Inside:</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">region</span><span class="p">.</span><span class="n">isMemberOfClass</span><span class="p">(</span><span class="n">CLBeaconRegion</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">isRangingAvailable</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startRangingBeaconsInRegion</span><span class="p">(</span><span class="n">region</span> <span class="n">as</span> <span class="n">CLBeaconRegion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">Outside:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">Unknown:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 距離計測</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didRangeBeacons</span> <span class="nl">beacons:</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span><span class="o">!</span><span class="p">,</span> <span class="n">inRegion</span> <span class="nl">region:</span> <span class="n">CLBeaconRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span> <span class="o">=</span> <span class="n">beacons</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">CLBeacon</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="nl">proximity:</span><span class="n">CLProximity</span><span class="o">!</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="o">?</span><span class="p">.</span><span class="n">proximity</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">bAccuracy:</span><span class="n">CLLocationAccuracy</span><span class="o">!</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="o">?</span><span class="p">.</span><span class="n">accuracy</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">rangeMessage:</span><span class="n">NSString</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">proximity</span> <span class="o">==</span> <span class="n">CLProximity</span><span class="p">.</span><span class="n">Immediate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">&quot;Range Immediate&quot;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">proximity</span> <span class="o">==</span> <span class="n">CLProximity</span><span class="p">.</span><span class="n">Near</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">&quot;Range Near&quot;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">proximity</span> <span class="o">==</span> <span class="n">CLProximity</span><span class="p">.</span><span class="n">Far</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">&quot;Range Far&quot;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">proximity</span> <span class="o">==</span> <span class="n">CLProximity</span><span class="p">.</span><span class="n">Unknown</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">&quot;Range Unknown&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;\(bAccuracy) [m]&quot;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sendLocalNotificationForMessage</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域観測に失敗した場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">monitoringDidFailForRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="o">!</span><span class="p">,</span> <span class="n">withError</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sendLocalNotificationForMessage</span><span class="p">(</span><span class="s">&quot;Exit Region&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 位置情報の許可設定</span>
</span><span class='line'><span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didChangeAuthorizationStatus</span> <span class="nl">status:</span> <span class="n">CLAuthorizationStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">NotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">Authorized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startMonitoringForRegion</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">AuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startRangingBeaconsInRegion</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上でコーディング終了です。Objective-Cのときと同様にSwiftでもBeaconを検知することができるようになりました。<br/>
Swiftの勉強がてら、こういった取り組みを進めていこうと思います。<br/>
本日はここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/oggata/items/5de43d71692d1abcff7c">SwiftとiBeaconを使ってお母さんが自分の部屋に近づいて来た事を警告するアプリをつくる</a><br/>
<a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(Google Octane2.0 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/23/wkwebview2/"/>
    <updated>2014-09-23T21:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/23/wkwebview2</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日はGoogle Octane2.0を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
まずは、Google Octane2.0とは何かから説明しましょう。<br/>
Octane2.0とはGoogleからオープンソース提供している。ブラウザのパフォーマンスを測定するJavaScriptベンチマークスイートのことです。昨年、バージョン2.0が後悔され、これまでのテスト項目13から17への増えました。<br/>
では、そのテスト項目とは何があるのか説明しましょう。</p>

<!--more-->


<ul>
<li>Richards:

<ul>
<li>OSのタスクディスパッチ(プロセッサが、実行するタスクを切り替える)・シミュレーション・ベンチマーク</li>
<li><a href="http://www.cl.cam.ac.uk/~mr10/">Martin Richards</a>によって<a href="http://ja.wikipedia.org/wiki/BCPL">BCPL</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/richards.js?r=19">ソースコード</a></li>
</ul>
</li>
<li>Deltable:

<ul>
<li>単変数の<a href="http://constraints.cs.washington.edu/deltablue/">制約解法</a></li>
<li>John MaloneyとMario Wolczkoによって<a href="http://ja.wikipedia.org/wiki/Smalltalk">Smalltalk</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/deltablue.js">ソースコード</a></li>
</ul>
</li>
<li>Raytrace:

<ul>
<li>Adam Burmisterのコードを元に作成されたレイトレース(3次元空間内を伝わる波の伝播経路を追跡するシミュレーション)・ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/raytrace.js">ソースコード</a></li>
</ul>
</li>
<li>Regexp:

<ul>
<li>正規表現ベンチマーク</li>
<li>最も人気のある50のWebページから正規表現の処理を抽出して作成</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/regexp.js">ソースコード</a></li>
</ul>
</li>
<li>NavierStokes:

<ul>
<li>二次ナビエ・ストークス方程式解法</li>
<li>倍精度(64ビットの浮動小数点数表現)配列を大量に処理</li>
<li>Oliver Huntのコードを元にしている</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/navier-stokes.js">ソースコード</a></li>
</ul>
</li>
<li>Crypto:

<ul>
<li>Tom Wuのコードを元にして作成した暗号化と復号化ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/crypto.js">ソースコード</a></li>
</ul>
</li>
<li>Splay:

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%BC%E6%9C%A8">スプレー木</a>や自動メモリ管理サブシステムを実行するデータ操作ベンチマーク</li>
<li>ノードへのメモリの割り当て＆古いノードに割り当てたメモリの再利用に要する処理時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/splay.js">ソースコード</a></li>
</ul>
</li>
<li>SplayLatency:

<ul>
<li>VMのGC(不要になったメモリ領域を自動開放する処理)サブシステムに圧力を与えるスプレー試験</li>
<li>GCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>EarleyBoyer:

<ul>
<li>典型的なSchemeベンチをFlorian LoitschのScheme2Jsコンパイラを用いてJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/earley-boyer.js">ソースコード</a></li>
</ul>
</li>
<li>pdf.js:

<ul>
<li>JavaScriptで実装されたMozillaのPDFリーダ</li>
<li>デコード、インタープリター処理の時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/pdfjs.js">ソースコード</a></li>
</ul>
</li>
<li>Mandreel:

<ul>
<li>Mandreelを利用してC++からJavaScriptに移植した<a href="http://bulletphysics.org/wordpress/">3D Bullet 物理エンジン</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/mandreel.js">ソースコード</a></li>
</ul>
</li>
<li>MandreelLatency:

<ul>
<li>Mandreelベンチ時のGCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>GB Emulator:

<ul>
<li>携帯用コンソール(任天堂ゲームボーイ)のアーキテクチャをエミュレートして、厳しい3DシミュレーションをJavaScriptで実行</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part1.js">GB Emulatorソース1</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part2.js">GB Emulatorソース2</a></li>
</ul>
</li>
<li>Code loading:

<ul>
<li>大規模なJavaScriptプログラムをロードしたあと、JavaScriptエンジンがどれだけ速くコードの実行を開始できるかを計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/code-load.js">ソースコード</a></li>
</ul>
</li>
<li>Box2DWeb:

<ul>
<li>Erin Cattoによって書かれた人気の2D物理シミュレーションエンジンである<a href="https://code.google.com/p/box2dweb/">Box2DWeb</a>のJavaScript移植版がベース</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/box2d.js">ソースコード</a></li>
</ul>
</li>
<li>zlib:

<ul>
<li><a href="https://github.com/kripken/emscripten/tree/master/tests/zlib">zlib</a> の試験により、JavaScriptとの互換性を保ちつつ、スクリプトのパフォーマンスをネイティブコード並みに高速化するasm.jsのコードの処理速度を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/zlib.js">ソースコード</a></li>
</ul>
</li>
<li>Typescript:

<ul>
<li>Microsoftが発表したJavaScriptのスーパセットである<a href="http://www.typescriptlang.org/">Typescript</a>はJavaScriptが苦手な大規模アプリケーション開発に最適とされている</li>
<li>この試験ではTypescriptをJavaScriptにコンパイルする時間を計測可能</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/typescript-compiler.js">コンパイラーソースコード</a></li>
</ul>
</li>
</ul>


<p>このOctane2.0を用いて、試験した結果を報告します。<br/>
今回は、下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone5</li>
<li>UIWebView / iOS8.0 / iPhone5</li>
<li>WKWebView / iOS8.0 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<p>結果は下記になりました。<br/>
<img src="http://grandbig.github.io/images/wkwebview_bench.png" alt="Octane2.0によるベンチマーク結果" /></p>

<p>数値としては下記です。<br/>
* Safari / iOS7.1.2 / iPhone5: <strong>2,642</strong><br/>
* UIWebView / iOS7.1.2 / iPhone5: <strong>453</strong><br/>
* Safari / iOS8.0 / iPhone5: <strong>2983</strong><br/>
* UIWebView / iOS8.0 / iPhone5: <strong>447</strong><br/>
* WKWebView / iOS8.0 / iPhone5: <strong>3097</strong><br/>
* Safari / iOS8.0 / iPhone6: <strong>6529</strong><br/>
* UIWebView / iOS8.0 / iPhone6: <strong>1072</strong><br/>
* WKWebView / iOS8.0 / iPhone6: <strong>6763</strong></p>

<p>項目ごとの結果は下記になります。<br/>
<img src="http://grandbig.github.io/images/wkwebview_bench_octane1.png" alt="Octane2.0 ベンチマーク結果: Richards〜Regexp" /><br/>
<img src="http://grandbig.github.io/images/wkwebview_bench_octane2.png" alt="Octane2.0 ベンチマーク結果: Splay〜MandreelLatency" /><br/>
<img src="http://grandbig.github.io/images/wkwebview_bench_octane3.png" alt="Octane2.0 ベンチマーク結果: GB Emulator〜Typescript" /></p>

<p>全て1回だけ計測したため、ある程度の誤差があるかもしれません。<br/>
しかし、UIWebViewとWKWebViewが圧倒的に異なるということはわかりました。また、SafariとWKWebViewの結果がほぼ同じであることから、これまでSafariでしか利用できなかった各種機能が解放されていることがわかりました。<br/>
また、端末によって大きな差が出ました。やはり、iPhone5よりもiPhone6の方がマシンスペックが高いためにかなり良い結果が出ました。<br/>
因みに、UIWebViewで計測するとき、Box2DWebまでは他と大きな差がなく進んだのですが、zlibとTypescriptの試験が非常に時間がかかりました。(もうこれ以上は計測できないのでは？と思ったほどです。)</p>

<p>今日はここまで。</p>

<p>参考:<br/>
<a href="https://developers.google.com/octane/benchmark">Google Octane</a><br/>
<a href="http://jp.techcrunch.com/2013/11/07/20131106google-updates-its-octane-javascript-benchmark-adds-asm-js-and-typescript-tests/">GoogleがJavaScriptベンチマークOctaneをアップデート</a><br/>
<a href="http://www.forest.impress.co.jp/docs/news/20131107_622555.html">Google、JavaScriptベンチマークスイートOctane2.0をリリース</a><br/>
<a href="http://www.infoq.com/jp/news/2012/08/Octane-JavaScript-Benchmark">JavaScript用の新ベンチマークスイートOctaneをGoogleがオープンソース化</a><br/>
<a href="https://code.google.com/p/octane-benchmark/source/browse/#svn%2Flatest">octane benchmark</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8でiBeaconを試してみよう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon/"/>
    <updated>2014-09-22T21:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon</id>
    <content type="html"><![CDATA[<h3>iOS8になって気をつけるべきところについて</h3>

<p>本日はiOS8端末でiBeaconを利用するときの注意点について書きたいと思います。<br/>
iOS8ではユーザの位置情報に関する許可の選択肢が増えました。それは、<strong>『許可しない』/『このAppの使用中のみ許可』/『常に許可』</strong>の3つです。(これまでは単純にON/OFFに切替のみでした。)もちろん、ユーザの選択肢が増えたということは開発者側でも新たな対応が必要になるということです。</p>

<p><img src="http://grandbig.github.io/images/ios8_location_1.png" alt="iOS8端末での位置情報の許可選択画面" /></p>

<!--more-->


<p>具体的な対応としては、<strong>ユーザに許可を求めるメソッドを実装する</strong>というものです。</p>

<p>下記にViewController.mファイルのソースを記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">locationManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeacon</span> <span class="o">*</span><span class="n">nearestBeacon</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">CLLocationManager</span> <span class="nl">isMonitoringAvailableForClass:</span><span class="p">[</span><span class="n">CLCircularRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;8D4DB809-032F-4771-96F3-99BD5C25F924&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span>
</span><span class='line'>                                                               <span class="nl">identifier:</span><span class="s">@&quot;com.kato.ibeaconSample&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// requestAlwaysAuthorizationメソッドが利用できる場合(iOS8以上の場合)</span>
</span><span class='line'>          <span class="c1">// 位置情報の取得許可を求めるメソッド</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// requestAlwaysAuthorizationメソッドが利用できない場合(iOS8未満の場合)</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iBeaconが利用できない端末の場合</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;iBeaconを利用できません。&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ユーザの位置情報の許可状態を確認するメソッド</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="n">status</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を許可していない</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を常に許可している場合</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を使用中のみ許可している場合</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域計測が開始した場合</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didStartMonitoringForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Start Monitoring Region&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 指定した領域に入った場合</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Enter Region&quot;</span><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 指定した領域から出た場合</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Exit Region&quot;</span><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">stopRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域内にいるかどうかを確認する処理</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didDetermineState:</span><span class="p">(</span><span class="n">CLRegionState</span><span class="p">)</span><span class="n">state</span> <span class="nl">forRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateInside:</span>
</span><span class='line'>          <span class="k">if</span><span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">]){</span>
</span><span class='line'>              <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Enter %@&quot;</span><span class="p">,</span><span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">);</span>
</span><span class='line'>              <span class="c1">//Beacon の範囲内に入った時に行う処理を記述する</span>
</span><span class='line'>              <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Already Entering&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateOutside:</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">CLRegionStateUnknown:</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Beacon信号を検出した場合</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="n">manager</span> <span class="nl">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">beacons</span> <span class="nl">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span> <span class="o">=</span> <span class="n">beacons</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%f [m]&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="p">.</span><span class="n">accuracy</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">self</span><span class="p">.</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ローカルプッシュ処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、アプリを起動した際に、ユーザへ位置情報の使用を求めるアラートを表示することができます。<br/>
<img src="http://grandbig.github.io/images/ios8_location_2.png" alt="ユーザへのアラート" /></p>

<p>気をつけたいのが、iOS8からは<strong>Info.plistファイルに位置情報を使用する理由</strong>を記載する必要があります。<br/>
Info.plistにNSLocationWhenInUseUsageDescriptionまたはNSLocationAlwaysUsageDescriptionを設定する必要があります。<br/>
ただし、Info.plistでAdd Rowしようとしても、候補に表示されないので、手打ちで設定しましょう。</p>

<h3>iOS8でWhenInUseとAlwaysの挙動の違い</h3>

<p>続いて、iOS8から追加されたWhenInUse(このAppの使用中のみ許可)とAlways(常に許可)でiBeaconの挙動にどういった差が出るか調べてみたいと思います。<br/>
まずは、Always(常に許可)から説明します。<br/>
こちらは、領域観測(didEnterRegion/didDetermineState/didExitRegion)と距離計測(didRangeBeacons)の両方を実行できます。<br/>
※基本的にはiOS7.1.xと同じ挙動と言えます。</p>

<p>一方でWhenInUseを見てみると、距離計測のみが可能でした。<br/>
領域観測ができないため、startRangingBeaconsInRegionメソッドを実行するタイミングをミスらないように注意が必要です。<br/>
例えば、<strong>didEnterRegion</strong> Delegateメソッドの中でstartRangingBeaconsInRegionメソッドを実行とすると、WhenInUseではiBeaconを一切検知できないようになってしまいます。<br/>
アプリをフォアグラウンドに起動したときだけ、iBeaconの機能を利用したいのであれば、確かにWhenInUseで十分だと思います。</p>

<h3>ローカルプッシュの補足</h3>

<p>因みに、筆者は上記の動作を確認するためにローカルプッシュ処理を組み込んだのですが、そこでハマりました。なぜかというと、iOS8ではローカルプッシュがうまくいかなかったからです。<br/>
いろいろと調べた結果、iOS8からは<strong>ローカルプッシュの設定を記載する</strong>必要があるとのことでした。</p>

<p>以下のようにAppDelegate.mファイルに記載すれば、ローカルプッシュが利用可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">UIApplication</span> <span class="nl">instancesRespondToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">registerUserNotificationSettings:</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings:</span><span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes:</span><span class="n">UIUserNotificationTypeAlert</span><span class="o">|</span><span class="n">UIUserNotificationTypeSound</span> <span class="nl">categories:</span><span class="nb">nil</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一先ず、ここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/koogawa/items/6ec24ca3201977e9642b">iOS8から位置情報を取得する方法が変わるよ</a><br/>
<a href="http://im-sei.tumblr.com/post/91824653043/ios-8">iOS8の位置情報のプライバシー設定に対応する</a><br/>
<a href="http://qiita.com/caesar_cat/items/08018ab22bea27b55443">iOS8からローカル通知が保存されなくなった？</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewをシミュレータで比較してみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/22/wkwebview1/"/>
    <updated>2014-09-22T00:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/22/wkwebview1</id>
    <content type="html"><![CDATA[<h3>WKWebViewを使ってみる</h3>

<p>さて、本日はiOS8 SDKで新たに利用可能となった <strong>WKWebView</strong> を試してみたいと思います。<br/>
これまでSafariにしか解放されていなかった機能がいろいろと使えるとのことでこれから期待が膨らみます。<br/>
まずは、WKWebViewをアプリに実装するとことから始めましょう。</p>

<p>WKWebViewはUIWebViewと異なり、Storyboard上からドラッグ＆ドロップで追加することができません。<br/>
よって、ソース上から追加する必要があります。</p>

<p>WKWebViewExampleという名前でプロジェクトを作成しましょう。<br/>
<img src="http://grandbig.github.io/images/wkwebview1.png" alt="WKWebViewExampleプロジェクト" /></p>

<!--more-->


<p>ViewController.mファイルを下記のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;WebKit/WebKit.h&gt;  </span><span class="c1">// WebKitをimport</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 表示するWebサイトのURlを設定</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">InitialURL</span> <span class="o">=</span> <span class="s">@&quot;http://localhost/testWeb/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Delegateメソッドを利用できるように設定</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="n">WKNavigationDelegate</span><span class="p">,</span> <span class="n">WKUIDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">// WKWebViewを宣言</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span><span class="kt">IBOutlet</span> <span class="n">WKWebView</span> <span class="o">*</span><span class="n">webView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// WKWebViewをインスタンス化</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="o">=</span> <span class="p">[</span><span class="n">WKWebView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// WKWebViewをViewControllerのViewのsubViewとして追加</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Delegateの設定</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="p">.</span><span class="n">navigationDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="p">.</span><span class="n">UIDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Web画面の表示</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">InitialURL</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">loadRequest:</span><span class="n">request</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけでWKWebViewを実装することができました。</p>

<h3>WKWebViewとUIWebViewの性能を比較してみる</h3>

<p>気になっていた本題に入ります。<br/>
UIWebViewはJavaScriptの実行速度がSafariの約1/4と言われてきました。それが、WKWebViewの出現により、Safariと同等のJavaScript実行速度にまで引き上げられました。<br/>
という話から実際にWKWebViewとUIWebViewのJavaScript実行速度を比較してみようと思います。<br/>
今回利用するWebソースは下記です。</p>

<p>index.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">content=</span><span class="s">&quot;text/css&quot;</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Style-Type&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&quot;width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0&quot;</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>テストサイト<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">style=</span><span class="s">&quot;background-color: blue;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>テストサイトです。<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;testBtn&quot;</span> <span class="na">onclick=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>テストボタン<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/jquery-2.1.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/index.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>jQueryは最新のバージョン2.1.1を利用しています。</p>

<p>index.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click touchEnd&quot;</span><span class="p">,</span> <span class="s2">&quot;#testBtn&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//window.alert(&quot;test&quot;);</span>
</span><span class='line'>      <span class="c1">//$(&quot;body&quot;).css(&quot;background-color&quot;, &quot;red&quot;);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5000000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="s2">&quot;回目のログ&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">endTime</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;div&gt;時間: &quot;</span> <span class="o">+</span> <span class="nx">diff</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは簡単に言うと、大量のforループを実行し、その処理時間を画面に表示するというものです。<br/>
結果は下記になりました。<br/>
※iOS8に対応した実機がないため、シミュレータでのテストになります。</p>

<p>UIWebView: <strong>5,098.4</strong> [ms]<br/>
WKWebView: <strong>4,495.6</strong> [ms]</p>

<p>4倍とまではいかなくても確かに実行速度は向上しているようです。<br/>
近々、実機でも試してみる予定です。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6でSingle View Applicationにチャレンジ]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/"/>
    <updated>2014-09-20T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard</id>
    <content type="html"><![CDATA[<h3>Xcode6でプロジェクトを作成しよう</h3>

<p>さて、先日、一般ユーザ向けにXcode6のバージョンアップが解放されました。<br/>
それに合わせて、今回はXcode6の基本的な使い方を確認していきたいと思います。</p>

<p>それでは早速、Xcode6を起動してみましょう。<br/>
<img src="http://grandbig.github.io/images/xcode6_1.png" alt="Xcode6起動後の初期ウィンドウ" /></p>

<!--more-->


<p>さて、 <strong>Get started with a playground</strong> が先頭に来ている以外はあまり気になりませんね。<br/>
SwiftやPlaygroundの話は別の機会にということで、 <strong>Create a new Xcode project</strong> を選択してみましょう。</p>

<p>すると、次のようなウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/xcode6_2.png" alt="Xcode6でCreate a new Xcode projectを選択後に表示されるウィンドウ" /></p>

<p>筆者はここで、『あれ！？いつも使っていた <strong>Empty Application</strong> がない&hellip;.』と気づきました。<br/>
まさかと思い、あれやこれやと探し、『OtherにEmptyってのがある。これって前からあったっけ？』と思いつつEmptyでプロジェクトを作成してみると&hellip;.<br/>
<img src="http://grandbig.github.io/images/xcode6_3.png" alt="OtherにEmpty..." /><br/>
<img src="http://grandbig.github.io/images/xcode6_4.png" alt="超Empty...何もないよ..." /><br/>
TARGETもなければ、ソースも何もない。超Empty&hellip;..(泣)</p>

<p>この瞬間、時代は次に進んでいるのだと諦めて、筆者はこれまで使ってこなかったSingle View Applicationに手を伸ばすことにしました。<br/>
最大の障壁となるのが、今更ながら <strong>Storyboardを使ったことがない</strong> ということでした。<br/>
これを機に覚えよう＆Xcode6でも基本操作は変わっていないよ(たぶん)と証明するために先に進み始めました。</p>

<p>下記の手順でプロジェクトを作成します。<br/>
1. Single View Applicationを選択<br/>
2. ProductNameにStoryboardExampleと入力<br/>
3. DevicesはiPhoneを選択</p>

<p>そうして作成されたプロジェクトが下記になります。<br/>
<img src="http://grandbig.github.io/images/xcode6_5.png" alt="StoryboardExample" /></p>

<p>Main.storyboardを見てみると、『何の画面サイズ？？』といったViewControllerが表示されています。<br/>
今回はiPhoneのみに対応したアプリということで、サイズを変更したいと思います。<br/>
サイズは下記の手順で変更ができます。</p>

<ol>
<li>左ウィンドウでView Controllerを選択</li>
<li>右ウィンドウのメニューの右から3つ目の項目を選択</li>
<li>Simulated MetricksのSizeから変更したいiPhoneのサイズを選択</li>
</ol>


<p><img src="http://grandbig.github.io/images/xcode6_6.png" alt="サイズ変更方法" /></p>

<p>筆者の場合はせっかくなので、iPhone6のサイズである <strong>iPhone 4.7-inch</strong> に変更しました。<br/>
<img src="http://grandbig.github.io/images/xcode6_7.png" alt="4.7inchのViewController" /></p>

<h3>StoryboardでUINavigationControllerを使おう</h3>

<p>筆者がよく使っていたUINavigationControllerを使ってみようと思います。先ほどのView ControllerにはNavigationBarらしきものが見当たりません。これはUINavigationControllerが付与されていないためです。では、UINavigationControllerを付与しましょう。</p>

<p>XcodeメニューバーのEditor > Embed in > Navigation Controllerを選択してください。<br/>
<img src="http://grandbig.github.io/images/xcode6_8.png" alt="Navigation Controllerを追加する" /></p>

<p>すると、下記のようにNavigation Controllerが追加されます。(下図は見やすさのため表示倍率を変更しています。表示倍率はViewが配置されているウィンドウで右クリックするとサイズを選択可能なウィンドウが表示されます。)<br/>
<img src="http://grandbig.github.io/images/xcode6_9.png" alt="Navigation Controllerを追加した" /><br/>
また、初めからStoryboard上に表示されていたView ControllerにNavigationBarが表示されたことがわかります。<br/>
Navigation Controllerの大きさも先ほどと同じ手順で変えてしまいましょう。(変えなくてもコーディング上は問題ありませんが&hellip;.)</p>

<p>NavigationBarの良い所は画面遷移後に前の画面に戻るボタンを作らなくて良いということですね。</p>

<p>続いて、Storyboard上での画面遷移の実装方法について見て行きましょう。<br/>
画面遷移をするためには当然ながら画面が必要となるので、View Controllerを追加しましょう。また、画面遷移のアクションを起こすボタンを追加しましょう。<br/>
<img src="http://grandbig.github.io/images/xcode6_10.png" alt="View Controllerとボタンを追加" /></p>

<p>そして、画面遷移の実装は、<br/>
1. NEXTボタンを右クリックして遷移後の画面にドラッグ＆ドロップ<br/>
2. 表示されるウィンドウから <strong>show</strong> を選択<br/>
と超簡単にできます。<br/>
その証拠に遷移後の画面にも先ほどまでなかったNavigationBarが付与されています。</p>

<p><img src="http://grandbig.github.io/images/xcode6_11.png" alt="NEXTボタンからドラッグ＆ドロップ" /><br/>
<img src="http://grandbig.github.io/images/xcode6_12.png" alt="showを選択" /><br/>
<img src="http://grandbig.github.io/images/xcode6_13.png" alt="画面遷移が実装完了" /></p>

<p>さて、ここまで対応が完了したら、シミュレータで表示してみましょう。<br/>
利用するシミュレータはもちろんiPhone6です。<br/>
<img src="http://grandbig.github.io/images/xcode6_14.png" alt="シミュレータで表示" /></p>

<p>上記のような表示ができましたでしょうか？<br/>
Storyboardの使い方は案外簡単ですね！まだまだ触り程度の話ですが、これから使い込んでいこうかと思います。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS技術ブログのアクセスと収入の推移]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/14/blog-1-year-anniversary/"/>
    <updated>2014-09-14T00:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/14/blog-1-year-anniversary</id>
    <content type="html"><![CDATA[<h3>iOS技術ブログを書き始めて1周年を迎えました</h3>

<p>なんと、iOS技術を中心として書き始めた本ブログが先日9/4時点で1周年を迎えました！！<br/>
それを記念してこれまでの軌跡を振り返りたいと思います。</p>

<p>本日の紹介内容の概要は下記です。  <br/>
* アクセス数の推移<br/>
* アクセス数の多い記事を紹介<br/>
* 広告収入の推移</p>

<!--more-->


<h4>アクセス数の推移</h4>

<p>まずは、アクセス数の推移から紹介していきましょう。<br/>
データは<strong>Google Analytics</strong>で取得しています。<br/>
結果をお見せすると、<br/>
<img src="http://grandbig.github.io/images/1anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
このようになっています。<br/>
初めの1ヶ月(2013/09/04〜2013/10/04)は1日の最大セッション数が20もいけば良い方でした。それがここ最近の1ヶ月(2014/08/04〜2014/09/04)の平日のセッション数は120〜200の間を推移するまでに成長しました。しかも8月はお盆休み期間があったにも関わらず、平日は120以上のセッション数をキープしました。<br/>
ブログを書き始めた当初は想像もできない成長を魅せることができました。</p>

<p>さらに、ちょうど1周年経った日に過去最高のセッション数を記録できました。これも予想外でした。</p>

<p>さて、ブログ開始からこれまでの各数値も見て行きましょう。<br/>
結果は下図です。<br/>
<img src="http://grandbig.github.io/images/1anniversary2.png" alt="ブログ開始からの各数値" /></p>

<ul>
<li>セッション数: 24,996</li>
<li>ユーザ数: 16,819</li>
<li>ページビュー数: 32,022</li>
<li>ページ/セッション: 1.28</li>
<li>平均セッション時間: 00:01:11</li>
<li>直帰率: 84.54%</li>
<li>新規セッション率: 67.28%</li>
</ul>


<p>1年間で3万を超えるページビュー数を稼げたことは非常に嬉しいことです。<br/>
ページ/セッションおよび直帰率から、ほとんどの場合、Google検索などでヒットした記事を見て、そのままブログを後にする人が多いことがわかります。<br/>
これは関連記事が少ないことも起因しているかもしれません。筆者が思いたったときに、書きたい内容の記事を書いていたためでしょう。<br/>
これまで以上にページビュー数を稼ぐためには、関連した記事(長編記事)を書くことも必要なのかもしれません。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>次に、本ブログの中で、柱となっている記事が何であるのかを紹介したいと思います。</p>

<p><strong>1位: <a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a></strong><br/>
　　ページビュー数: 4,797 (14.98%)<br/>
　　平均ページ滞在時間: 00:07:20<br/>
<strong>2位: <a href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/">はっきりさせよう！iOSのデバイストークン</a></strong><br/>
　　ページビュー数: 2,898 (9.05%)<br/>
　　平均ページ滞在時間: 00:04:20<br/>
<strong>3位: <a href="http://grandbig.github.io/blog/2013/10/16/xcode-api/">iPhoneアプリで使おう様々なWeb-API</a></strong><br/>
　　ページビュー数: 2,070 (6.46%)<br/>
　　平均ページ滞在時間: 00:04:28<br/>
<strong>4位: <a href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/">噂のiOS7.1でiBeaconを試してみよう！！</a></strong><br/>
　　ページビュー数: 2,013 (6.29%)<br/>
　　平均ページ滞在時間: 00:04:45<br/>
<strong>5位: <a href="http://grandbig.github.io/blog/2013/11/30/fmdatabase/">FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！</a></strong><br/>
　　ページビュー数: 1,994 (6.23%)<br/>
　　平均ページ滞在時間: 00:06:31</p>

<p>以上が上位5記事です。<br/>
飛び抜けて<strong>『Backgroundで位置情報を取得しよう！』</strong>が見られていました。やはり世の中の技術者は位置情報に少なからず興味があるということなのでしょうか？<br/>
続いて、<strong>『はっきりさせよう！iOSのデバイストークン』</strong>がランクインしました。こちらもiPhoneアプリを開発する上では外せないプッシュ通知に関係する記事であること、iOSのバージョンアップに伴う変更が加わって調査が必要な技術者が増えたことも要因でしょうか。<br/>
3番目に<strong>『iPhoneアプリで使おう様々なWeb-API』</strong>Web-APIに関する記事が入ったことは予想外でした。WebViewを使わないフルネイティブなアプリを開発するとしても、サーバ通信をしてデータを取得するAPIを使うことはほぼ必須と言えるということかもしれません。<br/>
4番目に<strong>『噂のiOS7.1でiBeaconを試してみよう！！』</strong>が入ったことは想定内でした。iOS7から追加されたiBeacon技術は非常に注目されており、試験運用が至る所で始まっています。それが結果として表れたのではないでしょうか？<br/>
5番目に<strong>『FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！』</strong>がランクインしました。これは正直、筆者のソースミスが招いた結果な気がしますが&hellip;。</p>

<p>これらの記事に支えられているものの、そのほとんどが2013年の記事であり、唯一の2014年の記事も4月のものとなっています。これからより良い記事を書くことで記録を塗り変えていきたいと思います。</p>

<h4>広告収入の推移</h4>

<p>最後に広告収入の推移について紹介します。<br/>
本ブログでは<strong>Google Adsense</strong>を利用しています。<br/>
主に筆者が載せているGoogle Adsenseの広告は下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、早速、これまでの推移を見て行きましょう。<br/>
筆者がGoogle Adsenseを導入してからの全期間の推移(2013/11/15〜2014/09/14での推移)は下図のようになっています。<br/>
<img src="http://grandbig.github.io/images/1anniversary3.png" alt="Google Adsenseの推移" /><br/>
Google Adsenseは8,000円以上収益を上げることで初めて支払いが発生します。このペースでいくと、筆者がお金をもらうためにはあと3年かかる計算になります笑<br/>
基本的にはクリック数を稼がないと、どんなにページビュー数を稼いだとしても10円に満たないでしょう。(月に5,000ページビューを越えたとしても10円いかないのではないでしょうか&hellip;)</p>

<p>お分かりのように、ブログによる収益確保は難しいのです。(これでも頑張って稼いでいる方？かもしれません&hellip;)</p>

<p>ここで、実際に収益に貢献しているページがどれなのかお見せします。<br/>
<img src="http://grandbig.github.io/images/1anniversary4.png" alt="Google Adsense 収益率ランキング" /></p>

<p>結果は上図のようになりました。<br/>
この結果のおもしろいところは<strong>必ずしも、アクセスの多い記事と収益の多い記事とがイコールではない</strong>ということです。<br/>
収益率10位以内に入っている記事の中でアクセス数とリンクしているのは1位の<a href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/">はっきりさせよう！iOSのデバイストークン</a>と7位の<a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a>の2つだけです。<br/>
単純に考えると、<strong>アクセス数が多い≒クリックされる可能性が高い</strong>となるのですが、不思議ですね&hellip;。</p>

<p>ということで、1周年記念として振り返ってみたわけですが、まだまだ内容として不十分なところがあったり、新しいことへの探究心が足りなかったりと全く満足できていません。<br/>
来週には新型iPhoneも世界に上陸し始めるわけですし、新しいことがどんどん広まっていくことでしょう。<br/>
本ブログでもできる限り、そういった波に乗ってより良いブログにしていきたいと思います。</p>

<p>本日はここまで。<br/>
あ、最後に広告はっておきます笑</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-cで改めて同期・非同期について考えてみる]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/07/async-and-sync/"/>
    <updated>2014-09-07T21:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/07/async-and-sync</id>
    <content type="html"><![CDATA[<h3>NSURLConnectionで同期・非同期通信をしてみる</h3>

<p>さて、1ヶ月ぶりでしょうか&hellip;.。久々にブログを更新します。<br/>
本日は、もはやObjective-c開発者なら誰しも使うであろうNSURLConnectionでの同期・非同期通信について書きたいと思います。</p>

<p>NSURLConnectionで同期通信を行う場合、 <strong>sendSynchronousRequest</strong> を利用します。一方、非同期通信を行う場合、 <strong>sendAsynchronousRequest</strong> を利用します。<br/>
この2つの通信のどちらを利用するかについてはまさに <strong>使いドコロ</strong> によります。<br/>
同期通信の場合、メインスレッドでの実行のため、通信先サーバで処理の遅延があると、その間はアプリのUI操作ができなくなります。そのため、通信中はアプリの操作が発生し得ない場合に適していると言えます。<br/>
逆に、通信頻度が多いアプリの場合、UI操作を滞らせることがないように非同期通信を利用するべきです。</p>

<!--more-->


<p>実際に同期・非同期の場合の通信の順番を見てみましょう。<br/>
下記のようなファイル構成を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">syncAsyncTest</span>                  <span class="c1">// syncAsyncTest.xcodeprojを作成した際に自動で作られるフォルダ</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="n">L____ViewController</span>                <span class="c1">// メイン画面用のUIViewController</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="n">L____ViewController</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>      <span class="n">L____ViewController</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="n">L____AppDelegate</span><span class="p">.</span><span class="n">h</span>               <span class="c1">// 自動で作成されるdelegateヘッダーファイル</span>
</span><span class='line'><span class="n">L____AppDelegate</span><span class="p">.</span><span class="n">m</span>               <span class="c1">// 自動で作成されるdelegateモデルファイル</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、ViewController.mに同期・非同期メソッドを下記のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 非同期通信メソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendAsynchronousRequest:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalCacheData</span> <span class="nl">timeoutInterval:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span> <span class="nl">queue:</span><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">resData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;resData: %@&quot;</span><span class="p">,</span> <span class="n">resData</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 同期通信メソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendSynchronousRequest:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalCacheData</span> <span class="nl">timeoutInterval:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">resData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendSynchronousRequest:</span><span class="n">request</span> <span class="nl">returningResponse:</span><span class="o">&amp;</span><span class="n">response</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;resData: %@&quot;</span><span class="p">,</span> <span class="n">resData</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// asyncBtnをタップしたときに実行されるアクション</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">asyncAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;通信先サーバのURL&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト前&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト後&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// syncBtnをタップしたときに実行されるアクション</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">syncAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;通信先サーバのURL&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト前&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendSynchronousRequest:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト後&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>※asyncBtnとsyncBtnの2つのボタンををViewController.xibに配置しています。</p>

<p>上記のソースを実行すると、<br/>
asyncBtnをタップした場合: リクエスト前⇒リクエスト後⇒sendAsynchronousRequest内のログ<br/>
syncBtnをタップした場合: リクエスト前⇒sendSynchronousRequest内のログ⇒リクエスト後<br/>
といったログの順番になります。</p>

<p>このように処理に順番を踏まえた上で同期・非同期のどちらを利用するのか決めましょう。</p>

<p>また、お気づきの方もいるかもしれませんが、<br/>
sendAsynchronousRequestメソッドを利用した場合、それをラッピングしたメソッドでは <strong>sendAsynchronousRequestでサーバから取得してきたデータを戻り値として設定することができません。</strong><br/>
どういうことかと言うと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 非同期通信メソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">sendAsynchronousRequest:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalCacheData</span> <span class="nl">timeoutInterval:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span> <span class="nl">queue:</span><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">resData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;resData: %@&quot;</span><span class="p">,</span> <span class="n">resData</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">resData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と定義すると <strong>Incompatible block pointer types sending &lsquo;NSData *(^)&hellip;..</strong> といったエラーが発生します。</p>

<p>これはsendAsynchronousRequestの戻り値がvoid型で定義されているにも関わらず、NSData型の戻り値を返そうとしているのでエラーが発生しています。<br/>
特に工夫なく、サーバから取得したデータをラッピングしたメソッドの戻り値として返したいのであれば、sendSynchronousRequestを使えば良いのですが、冒頭で述べたように利用用途が限られます。</p>

<p>sendAsynchronousRequestメソッドを利用しつつ、その通信で取得したデータを別の処理で使い回したい場合は <strong>自作クラスにDelegateメソッド</strong> を実装することで解決可能です。</p>

<p>下記のようなフォルダ構成にしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">syncAsyncTest</span>                  <span class="c1">// syncAsyncTest.xcodeprojを作成した際に自動で作られるフォルダ</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="n">L___TestDelegate</span>               <span class="c1">// 自作Delegateメソッドを実装するクラス</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="n">L____TestDelegate</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>      <span class="n">L____TestDelegate</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="n">L____ViewController</span>                <span class="c1">// メイン画面用のUIViewController</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="n">L____ViewController</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>      <span class="n">L____ViewController</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="n">L____AppDelegate</span><span class="p">.</span><span class="n">h</span>               <span class="c1">// 自動で作成されるdelegateヘッダーファイル</span>
</span><span class='line'><span class="n">L____AppDelegate</span><span class="p">.</span><span class="n">m</span>               <span class="c1">// 自動で作成されるdelegateモデルファイル</span>
</span></code></pre></td></tr></table></div></figure>


<p>これまでViewControllerで実装していたsendAsynchronousRequestメソッドをTestDelegateクラスに移行します。</p>

<p>TestDelegate.hは下記</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">TestDelegate</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">successMethod:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">failedMethod:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TestDelegate</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">TestDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendAsynchronousRequest:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、TestDelegate.mは下記</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;TestDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TestDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendAsynchronousRequest:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">url</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalCacheData</span> <span class="nl">timeoutInterval:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span> <span class="nl">queue:</span><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">resData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">failedMethod:</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>              <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">failedMethod:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">successMethod:</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;resData: %@&quot;</span><span class="p">,</span> <span class="n">resData</span><span class="p">);</span>
</span><span class='line'>              <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">successMethod:</span><span class="n">resData</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでDelegateメソッドの実装とsendAsynchronousRequestメソッドの移行が完了しました。</p>

<p>Delegateメソッドを呼び出す側のViewController.mは下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;TestDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">TestDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">TestDelegate</span> <span class="o">*</span><span class="n">td</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">td</span> <span class="o">=</span> <span class="p">[</span><span class="n">TestDelegate</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">td</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// asyncBtnをタップしたときに実行されるアクション</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">asyncAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;通信先サーバのURL&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト前&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">td</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;リクエスト後&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TestDelegateクラスで実装したsuccessMethod</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">successMethod:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;data: %@&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TestDelegateクラスで実装したfailedMethod</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">failedMethod:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">err</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;err: %@&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでTestDelegateクラス内のsendAsynchronousRequestを実行して取得したデータをViewControllerクラス内のsuccessMethodやfailedMethodで受け取ることができるようになりました。</p>

<p>今回改めて調べてみることで、通信の同期・非同期は意外と奥が深いということがわかりました。<br/>
ということで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7とNSTimerと位置情報の取得について]]></title>
    <link href="http://grandbig.github.io/blog/2014/08/02/didupdatetolocation3/"/>
    <updated>2014-08-02T00:19:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/08/02/didupdatetolocation3</id>
    <content type="html"><![CDATA[<h3>iOS7で定期間隔での位置情報取得</h3>

<p>本日は一言メモ程度に書きます。<br/>
<a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a>で紹介した<strong>NSTimerで定期時間ごとに位置情報を取得してみよう！</strong>の部分についてiOS7での注意しなければいけないことがありました。</p>

<p>Background起動で位置情報の取得を可能な設定にしておくと、NSTimerが永続的に動くことについては以前お伝えしました。<br/>
このNSTimerで設定した定期間隔ごとに下記のように位置情報の取得ができました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CLLocation</span> <span class="o">*</span><span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">locationManager</span> <span class="n">location</span><span class="p">];</span>
</span><span class='line'><span class="n">CLLocationCoordinate2D</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="p">[</span><span class="n">location</span> <span class="n">coordinate</span><span class="p">];</span><span class="c1">// 座標を取得</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">lat</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">];</span>  <span class="c1">// 経度を取得</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">lng</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">];</span> <span class="c1">// 緯度を取得</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;+++++ [デリゲートによらない場合]緯度,经度: %@, %@&quot;</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、iOS7ではある記述をしないとうまくいかないことがわかりました。</p>

<!--more-->


<p>それは<strong>didUpdateLocationsメソッド</strong>です。<br/>
つまり、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span>
</span><span class='line'>   <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>の記述が必要なんです。<br/>
これがなかったとしても、NSTimer自体は動くので、処理は定期的に実行されます。<br/>
が、<strong>位置情報の値が全く更新されません</strong>。<br/>
iPhoneを持って移動したとしても、１回目に取得した位置情報の値から変化がないのです。</p>

<p>もし、<strong>NSTimerを使った定期間隔での位置情報の取得をiOS7で行う</strong>のであれば、このことには十分に注意してください。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSでGoogle OAuth認証がしたい〜OAuth2Clientを使う〜]]></title>
    <link href="http://grandbig.github.io/blog/2014/07/17/ios-google-oauth2-2/"/>
    <updated>2014-07-17T00:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/07/17/ios-google-oauth2-2</id>
    <content type="html"><![CDATA[<h3>OAuth2Clientを利用したOAuth認証をやってみる</h3>

<p>前回は<strong>gtm-oauth2</strong>ライブラリを利用したOAuth認証について説明しました。<br/>
このライブラリは非常に使いやすく、WebViewの実装もやってくれるので楽です。<br/>
ただ、１つだけ気になるのが、『このアプリが次のリクエストを許可しています』画面で<strong>承認するボタン</strong>を押した後に下記のような画面が出てしまうことです。<br/>
<img src="http://grandbig.github.io/images/goauth2-1.png" alt="気になる画面" /><br/>
これは格好悪いですね&hellip;。できれば、この画面を出したくない&hellip;。<br/>
そもそもこの画面が表示される理由は、redirectURIに<strong>urn:ietf:wg:oauth:2.0:oob</strong>を設定した場合だそうです。<br/>
詳しくは<a href="http://d.hatena.ne.jp/iad_otomamay/20130213/1360753743">山本大＠クロノスの日記 &ndash; GoogleAPI利用のためにOAuth2.0を使う</a>を確認してください。<br/>
gtm-oauth2ではredirectURIを開発者側で設定することなく、ライブラリが自動でやってくれるため、どうにもできないんですね&hellip;。<br/>
ま、ドメインのあるアドレスも持ってないですけど&hellip;。</p>

<p>そこで、<strong>OAuth2Client</strong>を使ってみることにしました。</p>

<!--more-->


<h4>OAuth2Clientを使おう！！</h4>

<p>CocoaPodsを使った導入方法から説明します。(CocoaPodsインストールしている前提です。)<br/>
1: .xcodeprojファイルと同じ階層にPodfileを作成します。<br/>
2: Podfileの中身は『pod &lsquo;NXOAuth2Client&rsquo;, &lsquo;~>1.2.2&#8217;』の１行のみです。<br/>
3: pod install<br/>
4: 作成された.xcworkspaceファイルを開く</p>

<p>たったこれだけのことでOAuth2Clientを使う準備が整いました。</p>

<p>では、続けて、画面を追加していきましょう。<br/>
今回は下記2つのUIViewControllerを追加しました。<br/>
・OAuth認証用の画面<br/>
・OAuth認証後に表示するメイン画面<br/>
<img src="http://grandbig.github.io/images/goauth2-2.png" alt="画面構成" /></p>

<p>OAuth認証後に表示するメイン画面はアプリの用途によって異なると思うので、割愛して、OAuth認証用の画面について説明します。</p>

<p>LoginViewController.mファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "LoginViewController.h"
</span><span class='line'>#import "NXOAuth2.h"
</span><span class='line'>
</span><span class='line'>// OAuthのConfigureに必要な値の設定
</span><span class='line'>static NSString *const clientId = @"Google Consoleで登録したクライアントID";
</span><span class='line'>static NSString *const clientSecret = @"Google Consoleで登録したクライアントシークレット";
</span><span class='line'>static NSString *const redirectURI = @"urn:ietf:wg:oauth:2.0:oob";
</span><span class='line'>static NSString *const authorizationURL = @"https://accounts.google.com/o/oauth2/auth";
</span><span class='line'>static NSString *const tokenURL = @"https://accounts.google.com/o/oauth2/token";
</span><span class='line'>static NSString *const scope = @"https://www.googleapis.com/auth/userinfo.profile";
</span><span class='line'>static NSString *const accountType = @"Google API";
</span><span class='line'>static NSString *const keyChainGroup = @"Google";
</span><span class='line'>static NSString *const successPagePrefix = @"Success";
</span><span class='line'>static NSString *const hasLoggedIn = @"hasLoggedIn";
</span><span class='line'>
</span><span class='line'>@interface LoginViewController () &lt;UIWebViewDelegate&gt;
</span><span class='line'>@property (weak, nonatomic) IBOutlet UIWebView *loginWebView;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>&lt;省略&gt;
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>
</span><span class='line'>  // WebViewのDelegate Protocolを利用するために設定
</span><span class='line'>  self.loginWebView.delegate = self;
</span><span class='line'>
</span><span class='line'>  // OAuth認証の処理
</span><span class='line'>  NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
</span><span class='line'>  BOOL flag = [defaults boolForKey:hasLoggedIn];
</span><span class='line'>
</span><span class='line'>  if(!flag) {
</span><span class='line'>      // 一度もOAuth認証を通っていない場合
</span><span class='line'>      [self setupOAuth2AccountStore];
</span><span class='line'>      [self requestOAuth2Access];
</span><span class='line'>  } else {
</span><span class='line'>      // 一度はOAuth認証を通した場合
</span><span class='line'>      [self requestOAuth2ProtectedDetails];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)setupOAuth2AccountStore
</span><span class='line'>{
</span><span class='line'>  // OAuth認証のための準備。各パラメータ値を設定
</span><span class='line'>  [[NXOAuth2AccountStore sharedStore] setClientID:clientId
</span><span class='line'>                                          secret:clientSecret
</span><span class='line'>                                           scope:[NSSet setWithObject:scope]
</span><span class='line'>                                authorizationURL:[NSURL URLWithString:authorizationURL]
</span><span class='line'>                                        tokenURL:[NSURL URLWithString:tokenURL]
</span><span class='line'>                                     redirectURL:[NSURL URLWithString:redirectURI]
</span><span class='line'>                                   keyChainGroup:keyChainGroup
</span><span class='line'>                                  forAccountType:accountType];
</span><span class='line'>  
</span><span class='line'>  // OAuth認証が成功したときに受け取るNotification
</span><span class='line'>  [[NSNotificationCenter defaultCenter] addObserverForName:NXOAuth2AccountStoreAccountsDidChangeNotification
</span><span class='line'>                                                    object:[NXOAuth2AccountStore sharedStore]
</span><span class='line'>                                                     queue:nil
</span><span class='line'>                                                usingBlock:^(NSNotification *aNotification){
</span><span class='line'>                                                    if (aNotification.userInfo) {
</span><span class='line'>                                                      NSLog(@"Success!! We have an access token.");
</span><span class='line'>                                                      NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
</span><span class='line'>                                                      [defaults setBool:YES forKey:hasLoggedIn];
</span><span class='line'>                                                      [self requestOAuth2ProtectedDetails];
</span><span class='line'>                                                    } else {
</span><span class='line'>                                                      NSLog(@"Success!! We lost an access token.");
</span><span class='line'>                                                    }
</span><span class='line'>                                                }];
</span><span class='line'>
</span><span class='line'>  // OAuth認証に失敗したときに受け取るNotification
</span><span class='line'>  [[NSNotificationCenter defaultCenter] addObserverForName:NXOAuth2AccountStoreDidFailToRequestAccessNotification
</span><span class='line'>                                                    object:[NXOAuth2AccountStore sharedStore]
</span><span class='line'>                                                     queue:nil
</span><span class='line'>                                                usingBlock:^(NSNotification *aNotification){
</span><span class='line'>                                                    NSError *error = [aNotification.userInfo objectForKey:NXOAuth2AccountStoreErrorKey];
</span><span class='line'>                                                    NSLog(@"error: %@", error.localizedDescription);
</span><span class='line'>                                                }];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// Googleログイン画面をUIWebViewに表示する処理
</span><span class='line'>- (void)requestOAuth2Access
</span><span class='line'>{
</span><span class='line'>  [[NXOAuth2AccountStore sharedStore] requestAccessToAccountWithType:accountType
</span><span class='line'>                                 withPreparedAuthorizationURLHandler:^(NSURL *preparedURL){
</span><span class='line'>                                     [self.loginWebView loadRequest:[NSURLRequest requestWithURL:preparedURL]];
</span><span class='line'>                                 }];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// アクセストークンやリフレッシュトークンを取得するための処理
</span><span class='line'>- (void)handleOAuth2AccessResult:(NSString *)accessResult
</span><span class='line'>{
</span><span class='line'>  BOOL success = [accessResult rangeOfString:successPagePrefix options:NSCaseInsensitiveSearch].location != NSNotFound;
</span><span class='line'>
</span><span class='line'>  if(success) {
</span><span class='line'>      // OAuth認証の画面で承認するを選択した場合
</span><span class='line'>      NSString * arguments = accessResult;
</span><span class='line'>      if ([arguments hasPrefix:successPagePrefix]) {
</span><span class='line'>          arguments = [arguments substringFromIndex:successPagePrefix.length + 1];
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      NSString *redirectURL = [NSString stringWithFormat:@"%@?%@", redirectURI, arguments];
</span><span class='line'>
</span><span class='line'>      [NXOAuth2AccountStore sharedStore] handleRedirectURL:[NSURL URLWithString:redirectURL]];]
</span><span class='line'>  } else {
</span><span class='line'>      // OAuth認証の画面で承認しなかった場合
</span><span class='line'>      // 再度、Googleログインページに遷移させる
</span><span class='line'>      [self requestOAuth2Access];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// OAuth認証後にユーザ情報取得のAPIを投げる処理
</span><span class='line'>- (void)requestOAuth2ProtectedDetails
</span><span class='line'>{
</span><span class='line'>  NXOAuth2AccountStore *store = [NXOAuth2AccountStore sharedStore];
</span><span class='line'>  NSArray *accounts = [store accountsWithAccountType:accountType];
</span><span class='line'>
</span><span class='line'>  [NXOAuth2Request performMethod:@"GET"
</span><span class='line'>                      onResource:[NSURL URLWithString:@"https://www.googleapis.com/oauth2/v1/userinfo"]
</span><span class='line'>                 usingParameters:nil
</span><span class='line'>                     withAccount:accounts[0]
</span><span class='line'>             sendProgressHandler:^(unsigned long long bytesSend, unsigned long long bytesTotal) {
</span><span class='line'>             }
</span><span class='line'>                 responseHandler:^(NSURLResponse *response, NSData *responseData, NSError *error){
</span><span class='line'>                     if (responseData) {
</span><span class='line'>                         NSError *error;
</span><span class='line'>                         NSDictionary *userInfo = [NSJSONSerialization JSONObjectWithData:responseData options:NSJSONReadingMutableContainers error:&error];
</span><span class='line'>                         NSLog(@"%@", userInfo);
</span><span class='line'>                     }
</span><span class='line'>                     if(error) {
</span><span class='line'>                         NSLog(@"%@", error.localizedDescription);
</span><span class='line'>                     }
</span><span class='line'>                 }];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - UIWebViewDelegate
</span><span class='line'>// ページが読み終わった後に処理
</span><span class='line'>- (void)webViewDidFinishLoad:(UIWebView *)webView
</span><span class='line'>{
</span><span class='line'>  if ([webView.request.URL.absoluteString rangeOfString:authorizationURL options:NSCaseInsensitiveSearch].location != NSNotFound) {
</span><span class='line'>      self.loginWebView.hidden = NO;
</span><span class='line'>  } else {
</span><span class='line'>      self.loginWebView.hidden = YES;
</span><span class='line'>
</span><span class='line'>      NSString *pageTitle = [webView stringByEvaluatingJavaScriptFromString:@"document.title"];
</span><span class='line'>      NSLog(@"pageTitle: %@", pageTitle);
</span><span class='line'>
</span><span class='line'>      [self handleOAuth2AccessResult:pageTitle];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>重要なことはwebViewDidFinishLoadの中で見せたくない画面を隠せるように実装していることです。<br/>
これがgtm-oauth2ライブラリではできなかったことですね。<br/>
また、gtm-oauth2ライブラリと同じく、OAuth2Clientライブラリも「アクセストークンが期限切れになった場合にリフレッシュトークンを投げることで新しいアクセストークンを取得する処理」を実装しています。そのため、自身で実装するよりも工数を削減することができます。</p>

<p>Googleだけでなく、twitter, facebookなどのOAuth認証でも利用できますので、ぜひお試しあれ！！</p>

<p>参考<br/>
・<a href="http://www.idmworks.com/blog/entry/getting-started-with-oauth2client-on-ios">IDMWORKS : BLOG</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
