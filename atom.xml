<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2014-07-13T02:06:47+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSでGoogle OAuth認証がしたい]]></title>
    <link href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/"/>
    <updated>2014-07-13T00:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2</id>
    <content type="html"><![CDATA[<h3>iOSネイティブアプリにGoogle OAuth認証機能を実装する方法</h3>

<p>Google OAuth認証はWebアプリであれば多くの情報が載っているのですが、なぜかiOSネイティブアプリになると情報が全然見つからない&hellip;。<br/>
ということでその方法をまとめてみることにした。</p>

<p>まず、ネット上で検索してみるとiOSでOAuth認証をするためのライブラリは幾つか作られているようでした。<br/>
その中でも、Googleが提供している<strong>gtm-oauth2</strong>がよく使われているらしい。<br/>
ま、Googleが提供しているのであれば、安心して使えるだろうということで、ここでは<strong>gtm-oauth2</strong>を使った方法で説明します。</p>

<!--more-->


<h4>設定編</h4>

<p>開発に入る前に<a href="https://console.developers.google.com/project">Google Console</a>で設定する必要があります。<br/>
1: OAuthのClientIDを作成する<br/>
左メニューからAPIS &amp; AUTH > Credentialsを選択します。<br/>
OAuthと書かれた下に<strong>Create new Client ID</strong>というボタンがあります。これをクリックするとポップアップが出てきます。このポップアップの中で必要な選択と入力は下記画像のようになります。<br/>
<img src="http://grandbig.github.io/images/goauth5.png" alt="Create new Client ID" /><br/>
すると、下記画像のように<strong>CLIENT ID</strong>と<strong>CLIENT SECRET</strong>が表示されます。<br/>
<img src="http://grandbig.github.io/images/goauth6.png" alt="Client ID &amp; Client Secret" /></p>

<p>2: Consent Screenを設定する<br/>
次にConsent Screenを設定します。これを設定しないとErrorが発生してしまいます。<br/>
左メニューからAPIS &amp; AUTH > Consent Screenを選択します。<br/>
下記画像のように<strong>EMAIL ADDRESS</strong>と<strong>PRODUCT NAME</strong>の２箇所を入力してSaveボタンをクリックしましょう。<br/>
<img src="http://grandbig.github.io/images/goauth7.png" alt="Consent Screenの設定" /></p>

<p>3: 利用するAPIを設定する<br/>
最後に利用したいAPIの設定をONにしておきましょう。<br/>
左メニューからAPIS &amp; AUTH > APIsを選択します。<br/>
下記画像のように利用したいAPIのSTATUSをONにしましょう。<br/>
<img src="http://grandbig.github.io/images/goauth8.png" alt="APIをONにする" /></p>

<p>これで設定は完了です。<br/>
続いて開発の説明に入ります。</p>

<h4>開発編</h4>

<p>1: GoogleからソースをGET<br/>
早速、Googleが配布しているソースをもらいに行きます。<br/>
<a href="https://code.google.com/p/gtm-oauth2/source/checkout">Googleのgtm-oauth2サイト</a>でも書かれているようにsvnを使って、ソースを落とします。<br/>
ソースを保存する場所を決めたら、その配下で下記コマンドを実行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn checkout http://gtm-oauth2.googlecode.com/svn/trunk/ gtm-oauth2-read-only</span></code></pre></td></tr></table></div></figure>


<p>もしかしたら、途中でRejectかtemporaryかpermanentか聞かれるかもしれません。筆者はtemporaryにしました。<br/>
ソースを落とした後は<a href="https://code.google.com/p/gtm-oauth2/wiki/Introduction">公式ドキュメント</a>に書かれている通り、進めていきます。</p>

<p>2: ダウンロードしたソースを自身のXcodeプロジェクトに追加<br/>
OAuth認証機能を実装したいXcodeプロジェクトを作成します。ここにOAuthに必要なソースを追加します。<br/>
必要なソースは<br/>
・GTMOAuth2Authentication.h/m<br/>
・GTMOAuth2SignIn.h/m<br/>
・GTMHTTPFetcher.h/m<br/>
・GTMOAuth2ViewControllerTouch.h/m<br/>
・GTMOAuth2ViewTouch.xib<br/>
です。<br/>
格納場所は下記画像を見てください。<br/>
<img src="http://grandbig.github.io/images/goauth1.png" alt="必要なソースの格納場所" /></p>

<p>ほとんどの人がXcode5.1.1でプロジェクトを作ると思うのですが、デフォルトARC対応プロジェクトとなっていると思います。<br/>
そのため、<strong>コンパイルオプション</strong>と<strong>Other Linker Flags</strong>を設定する必要があります。<br/>
<img src="http://grandbig.github.io/images/goauth2.png" alt="コンパイルオプションの設定" /><br/>
<img src="http://grandbig.github.io/images/goauth3.png" alt="Other Linker Flagsの設定" /></p>

<p>3: Googleからダウンロードしたソースを使うために必要なFrameworkをプロジェクトに追加する<br/>
Security.frameworkとSystemConfiguration.frameworkを追加します。<br/>
<img src="http://grandbig.github.io/images/goauth4.png" alt="必要なframeworkを追加" /></p>

<p>4: ソースを書く<br/>
OAuth認証機能を実装するUIViewControllerをプロジェクトに追加しましょう。ここでは名前をViewControllerとします。<br/>
ViewController.mファイルのソース</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "GTMOAuth2Authentication.h"
</span><span class='line'>#import "GTMOAuth2ViewControllerTouch.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@property (nonatomic, retain) GTMOAuth2Authentication *auth;
</span><span class='line'>
</span><span class='line'>-(void) startLogin;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>static NSString *const kKeychainItemName = @"GOAuthTest";
</span><span class='line'>static NSString *const scope = @"https://www.googleapis.com/auth/calendar";// Calendar APIを利用する場合のscope
</span><span class='line'>static NSString *const clientId = @"xxxxxxxx.apps.googleusercontent.com";// 発行されたClient IDを設定
</span><span class='line'>static NSString *const clientSecret = @"xxxxxxxx";// 発行されたClient Secretを設定
</span><span class='line'>static NSString *const hasLoggedIn = @"hasLoggedInKey";// NSUserDefaultに保存するための文字列
</span><span class='line'>
</span><span class='line'>&lt;省略&gt;
</span><span class='line'>
</span><span class='line'>- (void)viewDidAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>  // アプリ起動してOAuth認証動作を開始する
</span><span class='line'>  [self startLogin];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// OAuth認証の開始
</span><span class='line'>- (void)startLogin
</span><span class='line'>{
</span><span class='line'>  // 既に認証をしたかどうか確認
</span><span class='line'>  NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
</span><span class='line'>  BOOL hasLoggedin = [defaults boolForKey:hasLoggedIn];
</span><span class='line'>
</span><span class='line'>  if(hasLoggedin == YES) {
</span><span class='line'>      // 認証したことがある場合
</span><span class='line'>      self.auth = [GTMOAuth2ViewControllerTouch authForGoogleFromKeychainForName:kKeychainItemName
</span><span class='line'>                                                                        clientID:clientId
</span><span class='line'>                                                                    clientSecret:clientSecret];
</span><span class='line'>      // アクセストークンの取得
</span><span class='line'>      [self authorizeRequest];
</span><span class='line'>  } else {
</span><span class='line'>      // 認証したことがない場合
</span><span class='line'>      GTMOAuth2ViewControllerTouch *gvc = [[GTMOAuth2ViewControllerTouch alloc] initWithScope:scope
</span><span class='line'>                                                                                     clientID:clientId
</span><span class='line'>                                                                                 clientSecret:clientSecret
</span><span class='line'>                                                                             keychainItemName:kKeychainItemName
</span><span class='line'>                                                                                     delegate:self
</span><span class='line'>                                                                             finishedSelector:@selector(viewController:finishedWithAuth:error:)
</span><span class='line'>      ];
</span><span class='line'>      // 認証画面の表示
</span><span class='line'>      [self presentViewController:gvc animated:YES completion:nil];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 認証後に実行する処理
</span><span class='line'>- (void)viewController:(GTMOAuth2ViewControllerTouch *)viewController
</span><span class='line'>    finishedWithAuth:(GTMOAuth2Authentication *)auth
</span><span class='line'>               error:(NSError *)error
</span><span class='line'>{
</span><span class='line'>  if(error != nil) {
</span><span class='line'>      // 認証失敗
</span><span class='line'>  } else {
</span><span class='line'>      // 認証成功
</span><span class='line'>      self.auth = auth;
</span><span class='line'>      NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
</span><span class='line'>      [defaults setBool:YES forKey:hasLoggedIn];
</span><span class='line'>      [defaults synchronize];
</span><span class='line'>
</span><span class='line'>      // アクセストークンの取得
</span><span class='line'>      [self authorizeRequest];
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // 認証画面を閉じる
</span><span class='line'>  [viewController dismissViewControllerAnimated:YES completion:nil];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// アクセストークンの取得処理
</span><span class='line'>- (void)authorizeRequest
</span><span class='line'>{
</span><span class='line'>  NSLog(@"%@", self.auth);
</span><span class='line'>  NSMutableURLRequest *req = [NSMutableURLRequest alloc] initWithURL:self.auth.tokenURL];
</span><span class='line'>  [self.auth authorizeRequest:req completionHandler:^(NSError *error) {
</span><span class='line'>      NSLog(@"%@", self.auth);
</span><span class='line'>  }];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>実機で動作を確認<br/>
ソースが書けたら、実際にアプリを起動して見てみましょう。<br/>
認証画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/goauth9.png" alt="認証画面" /></li>
</ol>


<p>メールアドレスとパスワードを入力すると、認証の許可画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/goauth10.png" alt="許可画面" /><br/>
許可をすると、開発者の作成する画面に戻ります。</p>

<p>さて、いかがだったでしょうか？<br/>
今回はGoogle APIの利用まで書いていませんが、OAuthができてしまえば、そんなに難しくはないでしょう。たぶん笑</p>

<p>参考:<br/>
・<a href="http://kernhack.hatenablog.com/entry/2013/11/24/164828">gtm-oauth2でOAuth認証してgoogleのAPIを使う</a><br/>
・<a href="http://stackoverflow.com/questions/18677244/error-invalid-client-no-application-name">invalid_client no application name &ndash; Stack Overflow</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Serverを使ってみよう]]></title>
    <link href="http://grandbig.github.io/blog/2014/07/12/osx-server/"/>
    <updated>2014-07-12T19:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/07/12/osx-server</id>
    <content type="html"><![CDATA[<h3>初めてOSX Serverを使ってみた</h3>

<p>本日は少し、趣向を変えてみます。<br/>
筆者はこれまでWeb共有をSitesフォルダを作成してApacheの設定書いてApacheを再起動して&hellip;という定番のあれをやっていました。<br/>
しかし、<strong>iOS Developer契約をしている開発者であればOS X Serverを無料で利用できる</strong>と聞いたので、実際に使ってみたくなったのです。<br/>
あまり、ハマる人はいないかもしれないのですが、<strong>定番のWeb共有からOS X Serverに乗り換えたい</strong>という人のために手順をまとめたいと思います。</p>

<!--more-->


<h4>OS X Serverをインストールしよう</h4>

<p>まずは、OS X Serverのインストールから説明したいと思います。通常の手順でApp Storeからダウンロードしようとするとお金がかかるのでご注意を。<br/>
1: Apple Developer サイトにログイン<br/>
<a href="https://developer.apple.com/devcenter/ios/index.action">iOS Dev Center</a>の下の方を見てください。OS X Serverが見つかるはずです。<br/>
<img src="http://grandbig.github.io/images/osx_server1.png" alt="iOS Dev Center" /><br/>
OS X Serverの欄の右側にボタンが見えると思いますので、クリックしてApp Storeアプリを起動しましょう。そこで、無料でダウンロードができます。</p>

<p>2: OS X Serverをインストール<br/>
流れに沿ってインストールしましょう。一応、流れは下記に画像として貼っておきます。<br/>
<img src="http://grandbig.github.io/images/osx_server3.png" alt="続けるをクリック" /><br/>
<img src="http://grandbig.github.io/images/osx_server4.png" alt="同意する" /><br/>
<img src="http://grandbig.github.io/images/osx_server5.png" alt="そのまま待つ" /><br/>
インストールが完了すると、２つの画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/osx_server6.png" alt="チュートリアル画面" /><br/>
<img src="http://grandbig.github.io/images/osx_server7.png" alt="OS X Server画面" /></p>

<p>さて、ここまでは難なく進めると思います。<br/>
冒頭でも述べましたように筆者は定番のWeb共有をやっていましたので、ブラウザで<a href="http://localhost">http://localhost</a>を見たときに下記のような画面が表示されていました。<br/>
<img src="http://grandbig.github.io/images/osx_server2.png" alt="定番のWeb共有での画面" /><br/>
しかし、上記の手順2まで終了したタイミングで<a href="http://localhost">http://localhost</a>を見てみると&hellip;<br/>
<img src="http://grandbig.github.io/images/osx_server8.png" alt="ページが見つかりません" /><br/>
「何かおかしい&hellip;!?」てなことになっています。</p>

<p>案ずるなかれ、OS X ServerでWebサイトの設定をすれば良いのです！！<br/>
3: OS X Server画面で左メニューからWebサイトの項目を選択<br/>
<img src="http://grandbig.github.io/images/osx_server9.png" alt="Webサイト設定画面" /><br/>
左上のスイッチが切になっているので、入にしましょう。<br/>
<img src="http://grandbig.github.io/images/osx_server10.png" alt="スイッチを入にする" /><br/>
さあ、改めて<a href="http://localhost">http://localhost</a>を見てみましょう！！<br/>
OS X Serverのデフォルトページが表示されるようになったはずです。<br/>
<img src="http://grandbig.github.io/images/osx_server11.png" alt="OS X Serverのデフォルトページ" /></p>

<p>とは言え、Sitesフォルダに入れていたものが見えなくなっとる&hellip;てなことになりますよね？？<br/>
一体、OS X Serverはどこのパスを見ているのか！？<br/>
これはWebサイトの設定画面から確認できます。下記画像のように<strong>サーバ Webサイト</strong>をダブルクリックしましょう。<br/>
<img src="http://grandbig.github.io/images/osx_server12.png" alt="OS X Server Webサイトの設定画面からパスを調べる" /><br/>
<strong>サーバWebサイト</strong>というタイトルの画面に変わると思います。下記画像を見てもわかるように、赤枠で囲った部分にパスを見ることができます。<br/>
<img src="http://grandbig.github.io/images/osx_server13.png" alt="OS X Server Webサイトの設定画面からパスを調べる" /></p>

<p>このパスにこれまでの方法で見ていたファイルを突っ込めば問題なく見れるようになります。<br/>
元々の場所から変えたくないという人はサイトファイルの保存場所を変えれば良いと思います。</p>

<p>ということで、OS X Serverの基本的な設定が完了したと思います。Webサイトの共有だけでなく、様々な機能をOS X Serverは持っていますので、これからどんどん試していきたいと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今一度Webアプリ開発者を振り向かせるiOS8の新SDK]]></title>
    <link href="http://grandbig.github.io/blog/2014/06/28/ios8-new-sdk/"/>
    <updated>2014-06-28T18:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/06/28/ios8-new-sdk</id>
    <content type="html"><![CDATA[<h3>iOS8の新機能とは？</h3>

<p>さて、今月初めにWWDC 2014が開催されました。毎年楽しみにされているAppleファンの方、新技術大好きなエンジニアの方にとっては今回の発表はどのように映ったのでしょうか？<br/>
さて、だいぶiOS8の新機能が世の中に知れ渡ってきた昨今ではありますが、あえて私個人の切り口でiOS8の新機能について着目していきたいと思います。<br/>
難しいことは言わずに、素人目に見て、使ってみたいとか/待ってました！！みたいなことを少し書ければと思います。<br/>
では、初めに一体全体何が新しく追加されたのか見て行きましょう！！</p>

<p>まずは、筆者注目の一覧。<br/>
※今回紹介するのは<strong>Swift</strong>と<strong>WKWebView</strong>に限ります。<br/>
・Swift: 言わずと知れた新言語<br/>
・Health Kit: これからは健康・医療の時代だ！そんなアプリが作れる！？<br/>
・Home Kit: もうリモコンなんて要らない！そう、iPhoneさえあれば&hellip;なんて言いたくなる！？<br/>
・Touch ID: アプリへのログインID？パスワード？そんな時間あるなら開発しようぜ！！はい、指紋認証<br/>
・Hand off: あぁ、時間がない(汗) 続きはお手元のiPhoneで！！的なファイル共有機能<br/>
・WKWebView: Webアプリの救世主！？ 超高速Webを実現<br/>
などなど</p>

<p>では、早速、注目のSwiftから見て行きましょう。</p>

<!--more-->


<h4>新言語 Swiftや如何に！？</h4>

<p>最も多くのエンジニアが注目しているのは、やはり新言語<strong>Swift</strong>ではないでしょうか？<br/>
これまで、「Objective-Cはどうしても肌に合わない」とか「今から新しく言語を覚えるにはObjective-Cは負担が…」なんて意見が多かったのではないでしょうか？<br/>
しかし、<strong>Swift</strong>の登場により、「これからiPhoneアプリの開発を本格的に始めてみようかな」なんて意識を持った方々は確実に増えていることでしょう。では、なぜ<strong>Swift</strong>はそうも人々を魅了したのか？それは下記コードを見るだけでもおわかり頂けるだろう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 変数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 関数</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">testMethod</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;テストコードだよ！&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、おわかり頂けただろうか？<br/>
ぱっと見た感じ、<strong>『あれ！？これってJavaScript？？』</strong>と思わなかっただろうか？筆者は元々、Web開発から入った人間であるため、初めて<strong>Swift</strong>を見た感想はJavaScriptっぽいなぁと言うものだった。もちろん完全に書き方が同じというわけではなく、多少の癖っぽさはあるのだが、これまでのObjective-Cの書き方に比べれば、はるかに取っ付き易く触ってみようという気にさせられたのではないだろうか。<br/>
因みに上記コードをこれまでのObjective-Cで書いてみようとするならば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 変数</span>
</span><span class='line'><span class="n">NSInteger</span> <span class="n">test</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 関数</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;テストコードだよ！&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった形になります。<br/>
う〜ん個人的にはこっちの方が見慣れていて落ち着く&hellip;。</p>

<p>今回のWWDCではどうやら、<strong>Swiftは超高速！！</strong>なんて話がされていたらしく、ネット上では「これまで頑張ってきたiPhoneアプリ開発者の皆さん、残念でした。これまでご苦労様でした」なんて会話が踊っていたことだろう(歪んだ考えを持った筆者の予測に過ぎないが&hellip;)。<br/>
しかし、もちろんそんなことはないのだ！！なぜなら、Swiftは新言語であるがゆえ、これまで有効活用してきたGitHub上のオープンソースはまだないのだ。「自分で作るしかないのか&hellip;」と項垂れてしまうところをObjective-Cに慣れ親しんできた開発者であれば、「SwiftとObjective-c言語は共存可能だから、必要な部分はGitHubで公開されているソースを使えば良いや！」と考えられるのである。<br/>
う〜ん。Appleさん、ありがとう。まだご飯が食べられます。<br/>
とは言え、Appleが公表したように、本当に<strong>Swiftが超高速でObjective-cを使うなんて考えられない！！</strong>なんて世の中になるかもしれないので、Webアプリ開発者の勢いに負けないように頑張らなくてはと思います。</p>

<p>Swift言語での開発に興味がある方々は下記サイトをご覧下さい。様々な関連情報(リンク集)がまとめられているため、非常に参考になります。<br/>
<a href="http://dev.classmethod.jp/smartphone/iphone/learn-swift/">Swiftを学べる記事のまとめ</a></p>

<h4>iOS8からはWebアプリが超高速！？WKWebViewとは</h4>

<p>続いて、筆者が着目している機能は<strong>WKWebView</strong>というものです。<br/>
実はこれまでiOS上でWebアプリを開発しても、Safariと比較して、<strong>処理実行時間が約4倍多くかかる</strong>と言われてきました。(どこで聞いたのか忘れましたが&hellip;)<br/>
そのため、世の中のエンジニア達は下記２つの手法に縛られてきました。<br/>
・実行速度を捨てて、Webアプリを開発する(ただし、極力重くなりそうな処理は入れない)<br/>
・実行速度を優先して、ネイティブアプリを開発する(頑張ってAndroidの対応をする)<br/>
しかし、そんな世の中にも疲れてきましたよね？<br/>
そんなエンジニアの方々に朗報です！！なんと、iOS8のSDKからは<strong>WKWebView</strong>というクラスが利用できます！！(もちろん、これまで通りUIWebViewも利用可能です)</p>

<p>ベンチマークに関しては下記サイトに詳しく書かれているのでご覧下さい。筆者もとても参考になりましたし、<strong>WKWebView</strong>を使ってみたくなりました。<br/>
<a href="http://codezine.jp/article/detail/7848">ハイブリッドアプリの動作性能を飛躍的にアップさせるiOS 8の新ブラウザエンジンを検証する</a></p>

<p>これもある意味、Webアプリ開発者達をiOSアプリ開発に振り向かせるための策！？</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリを開発する上で気をつけよう！ProductionとDevelopment]]></title>
    <link href="http://grandbig.github.io/blog/2014/06/22/productionanddevelopment/"/>
    <updated>2014-06-22T20:46:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/06/22/productionanddevelopment</id>
    <content type="html"><![CDATA[<h3>iOSアプリの開発で失敗しないためのお約束</h3>

<p>お久しぶりです！！最近はインターネットを使えない状況だったため、ブログの更新が滞っていました。しかし、本日からブログ再開したいと思います。<br/>
とは言うものの、約１ヶ月ぶりなため、リハビリを兼ねて今日は軽い内容にしておきたいと思います。</p>

<p>本日のお題は<strong>iOSアプリの開発で失敗しないために何を確認すべきか</strong>です。<br/>
開発者が自分のアプリを開発し、Appleに申請するのであれば、まず間違えることはないでしょう。<br/>
しかし、証明書を自身で発行せずに、他者が発行した証明書を用いてipaファイルもしくはappファイルを作成する場合は気をつけておかないとハマってしまうことがあります。</p>

<p>それは各種証明書が<strong>Production</strong>、<strong>Development</strong>のどちらで作成されたものかということです。</p>

<!--more-->


<p>これら２つは何が異なるのでしょうか？<br/>
簡単に言ってしまえば<br/>
■ Production<br/>
App Storeに公開するために必要な証明書<br/>
■ Development<br/>
開発者が動作を確認するために利用する証明書<br/>
ということです。</p>

<p>これを把握した上で、証明書を確認しておかないと下記に記す、<strong>気をつけないと陥ってしまう問題</strong>にぶつかることでしょう。</p>

<p><strong>気をつけないと陥ってしまう問題</strong><br/>
1: アプリのリリースのためにappファイルをAppleに申請したが、リジェクトされた。(Development用の証明書を使ったため)<br/>
2: 商用アプリのプッシュの証明書の期限が近づいたので、プッシュ証明書を新たに出力し直したが、プッシュが届かない。(Development用のプッシュ証明書を使ったため)</p>

<p>では、証明書を判別するにはどうすれば良いのでしょうか？<br/>
上記の1の場合は簡単です。<strong>『キーチェーンアクセスで確認』</strong>すれば良いのです。実際にキーチェーンアクセスを見てみましょう。登録した証明書が表示されているはずです。<br/>
<img src="http://grandbig.github.io/images/pdt_dev.png" alt="キーチェーンアクセス" /></p>

<p>しかし、上記2の場合はもう１つ方法があります。それは<strong>pemファイルの中身を確認</strong>するということです。cert側から生成したpemファイルをターミナルやテキストエディタで開いてみましょう。<br/>
<img src="http://grandbig.github.io/images/pdt_dev2.png" alt="cert.pemファイルの中身" /><br/>
このように<strong>Production</strong>か<strong>Development</strong>かが記されています。</p>

<p>たったこれだけのことなんですが、忘れた頃にハマってしまう問題なので、頭の片隅にでも置いておくと良いと思います。</p>

<p>さ〜て、最近はSwiftも発表されたことだし、次回のブログ更新に向けてプログラミングでもしますか〜ってことで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Background FetchとBackground Transferについて]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/18/backgroundfetch2/"/>
    <updated>2014-05-18T21:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/18/backgroundfetch2</id>
    <content type="html"><![CDATA[<h3>Background FetchとBackground Transferの違いについて</h3>

<p>今回はBackground FetchとBackground Transferについて筆者が混同していたことについて書こうと思います。Background Fetchのできることや使いどころは<a href="http://grandbig.github.io/blog/2014/05/13/backgroundfetch1/">前回</a>書きましたので、そちらをご覧下さい。<br/>
もともと筆者がBackground Transferに着目した理由はBackground Fetchでは不可能な長い時間の処理を実現させたいからでした。Background Transferでは見事にその想いを実現できる！！っと思っていました。<br/>
しかし、どうやら根本的に理解が間違っていたようなのです&hellip;。</p>

<!--more-->


<p>Background Transferは<strong>時間制限なし</strong>, <strong>アプリケーションの状態によらない転送が可能な設定がある</strong>という特徴があります。そして設定可能なタスクは<br/>
・NSURLSessionDataTask: Background起動時には使えないのでちょっとした通信に利用<br/>
・NSURLSessionDownloadTask: 大容量のダウンロード処理だけでなく、処理時間が長い可能性のある通信でも利用可能<br/>
・NSURLSessionUploadTask: 大容量のアップロード処理で利用<br/>
の3つがあります。</p>

<p>筆者はBackground Fetchの30秒制限では実行不可能な長めの処理をBackground Transferで実行しようとしたのですが、これがなかなかうまくいかないんですね。<strong>1回の実行</strong>であれば、Background Transferで問題ありません。ただ、<strong>繰り返し処理を実行</strong>したいのであればBackground Transferは向いていません。というかそういった処理は組めないようなんです&hellip;。</p>

<p>Background fetchとBackground Transferを組み合わせた場合、下記のような処理になるでしょう。<br/>
AppDelegate.mファイル内のコード</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">performFetchWithCompletionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">UIBackgroundFetchResult</span><span class="p">))</span><span class="nv">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURLRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000&quot;</span><span class="p">]];</span>
</span><span class='line'>  <span class="n">NSURLSessionDownloadTask</span><span class="o">*</span> <span class="n">downloadTask</span> <span class="o">=</span> <span class="p">[</span><span class="n">session</span> <span class="nl">downloadTaskWithRequest:</span><span class="n">request</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">downloadTask</span> <span class="n">resume</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">completionHandler</span><span class="p">(</span><span class="n">UIBackgroundFetchResultNewData</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="n">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">downloadTask:</span><span class="p">(</span><span class="n">NSURLSessionDownloadTask</span> <span class="o">*</span><span class="p">)</span><span class="nv">downloadTask</span> <span class="nf">didFinishDownloadingToURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">location</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 通信結果を受け取った後に処理を書くメソッド</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実行すると、completionHandlerでBackground fetch内での処理が終了したと見なされ、didFinishDownloadingToURLを通過しませんでした。<br/>
よって、アプリがBackground起動のときにOSが判断したちょうど良いタイミングで実行してくれるBackground Fetchではやはり長い処理を実行することはできないと言えます。<br/>
確かにBackground Transferで検索して出てくるサンプルは大体、ボタンを押した後に実行される感じだったんですよね&hellip;。</p>

<p>もしかしたら方法があるかもしれませんが、今のところ手詰まりな感じです。ってことで今日はここまで。</p>

<p>参考:<br/>
<a href="http://www.gaprot.jp/pickup/ios7/vol1/">第 1 回・iOS7でバックグラウンド実行＆通信をしてみよう！</a><br/>
<a href="http://mediaprobe.co.jp/blog/clips/2014/01/09/ios-7-2/">iOS 7のための開発ノウハウ #2：大容量ファイルのバックグラウンド転送</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Background fetch completionHandlerの実行タイミングについて]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/13/backgroundfetch1/"/>
    <updated>2014-05-13T22:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/13/backgroundfetch1</id>
    <content type="html"><![CDATA[<h3>Background Fetchで気をつけること</h3>

<p>本日はBackground fetchについて書きたいと思います。時間の都合上、何回かに分けて書く予定です笑<br/>
Background fetchは既に皆さんもご存知の通りiOS7から加わった新機能です。通常、アプリをBackground起動にしたとき、アプリ内処理に許される時間は5秒間です。iOS6まではBackground起動中に継続して処理可能な機能は決まっていました。(位置情報の取得, 音楽の再生, 電話の3つ)<br/>
従って、これまでは<strong>beginBackgroundTaskWithExpirationHandler</strong>と<strong>setKeepAliveTimeout</strong>を用いて最大10分間の処理を継続して実行していました。(しかし、iOS7ではこの方法ができないらしいです。)<br/>
これに対してBackground fetchは30秒の制限はあるものの、OSが実行すべきと思ったタイミングで複数回実行されます。継続して実行する必要はないものの、どこかのタイミングで実行しておきたいというときには有効に使うことができるでしょう。</p>

<!--more-->


<p>まず、『Background fetchの利用を許可するまでの手順』などの基本的な部分についてはいろいろなサイトで説明されているので、例えば<a href="http://blog.yug1224.com/2013/09/29/backgroundfetch/">こちら</a>のサイトなどを参考にして下さい。<br/>
では早速、本日のお題である<strong>completionHandlerの実行タイミング</strong>の説明です。これはBackground fetchの処理が終了したことをiOSに知らせるために必ず書く必要があります。もし、書かなかった場合はデバッグ時に<br/>
<strong>Warning: Application delegate received call to -application:performFetchWithCompletionHandler: but the completion handler was never called.</strong><br/>
というWarningメッセージが表示されます。<br/>
また、処理が終了したことをiOSが判断できないため、<br/>
<strong>permittedBackgroundDuration: 30.000000 reason: backgroundContentFetching owner pid:33 preventSuspend  preventThrottleDownUI  preventIdleSleep  preventSuspendOnSleep</strong><br/>
とアプリ起動中にエラーを出すことになります。(これはOrganizerのDebug Logsから確認することができます。)</p>

<p>そして重要なのは<strong>completionHandlerは処理の最後に書く</strong>ということです。<br/>
しかも<strong>一本筋のフローの中での最後</strong>という意味です。<br/>
例えば、<br/>
AppDelegate.mファイル</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">performFetchWithCompletionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">UIBackgroundFetchResult</span><span class="p">))</span><span class="nv">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">completionHandler</span><span class="p">(</span><span class="n">UIBackgroundFetchResultNewData</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">dispatch_queue_t</span> <span class="n">globalQueue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">globalQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;別スレッド処理の開始&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSThread</span> <span class="nl">sleepForTimeInterval:</span><span class="mf">5.0f</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;別スレッド処理の終了&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このような処理があったとします。<br/>
この場合、デバッグしてみるとわかるのですが、testMethodの最後の<strong>NSLog(@&ldquo;別スレッド処理の終了&rdquo;);</strong>は実行されません。<br/>
これは先にcompletionHandler(UIBackgroundFetchResultNewData);が実行されてしまうためです。</p>

<p>そういった意味で<strong>一本筋のフローの中での最後にcompletionHandlerの処理を書く</strong>ということです。</p>

<p>このようにBackground fetchの実行タイミングは非常に重要になります。<br/>
といったところで本日はここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/griffin_stewie/items/8371c09059b3ba7bb202">Background fetchを試してみた</a><br/>
<a href="http://miyano-harikyu.jp/sola/devlog/2013/11/21/post-108/">iOSでバックグラウンドタスク</a><br/>
<a href="http://wonderpla.net/blog/engineer/BackgroundFetch/">iOS7のバックグラウンド処理〜Background Fetch</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました(3)]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/10/submit-ios-app3/"/>
    <updated>2014-05-10T00:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/10/submit-ios-app3</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリのバージョンアップ申請をしました</h3>

<p>本日、<strong>BLEMeasure 2.0</strong>を公開しました。昨年から公開しているBLEメジャーのバージョンアップとなります。今回はバージョンアップまでの道のりを紹介したいと思います。<br/>
<img src="http://grandbig.github.io/images/blemeasure_v2.png" alt="BLEMeasure 2.0" /><br/>
下記からダウンロードページにいけます<br/>
<a href="https://itunes.apple.com/jp/app/blemeja/id741597546?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<p>さて、早速説明していきましょう。Appleへのアプリ提出までは<a href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/">iPhoneアプリを申請しました</a>や<a href="http://grandbig.github.io/blog/2013/11/02/submit-ios-app2/">iPhoneアプリを申請しました(2)</a>を確認してください。<br/>
Appleへのアプリ提出が終わった時点で<strong>Waiting for Review</strong>になっているはずです。私が提出したのは<strong>2014/05/07 01:00頃</strong>だったのですが、翌々日には<strong>In Review</strong>になりました。ここから怒涛のように審査が進んでいきました。てっきり１回はRejectされると思っていたのですが、今回は動画説明もなしですんなり審査を通過しました。Reviewが始まってから終了するまで<strong>約5時間程度</strong>でした。</p>

<p>Apple IDを当然持っているので、<strong>Waiting for Review 〜 Processing for App Store</strong>までのステータス変更はメールで通知が来ます。<br/>
また、<strong>iTunes Connect Mobileアプリ</strong>をiPhoneやiPadなどにインストールしていれば、上記ステータスが変更するごとにプッシュ通知で連絡してくれます。<br/>
その結果、iPhoneのプッシュ通知画面が下記のようになり、実に気持ちの良い状態になります。<br/>
<img src="http://grandbig.github.io/images/itc_mobile_push.png" alt="iTC Mobileプッシュ通知" /></p>

<p>さらに、iTunes Connect Mobileアプリでは一連の申請の流れを下記のように確認することができます。<br/>
<img src="http://grandbig.github.io/images/submit_app_status_history.png" alt="iTC Mobile Status History" /></p>

<p>バージョンアップはかなり早く審査が済むことがわかりました。因みに今回はiAdを実装しようと思っていたのですが、うまくいってないようなので、調べ直しです笑。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AplixのMyBeaconを使ってみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/03/aplix-mybeacon/"/>
    <updated>2014-05-03T22:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/03/aplix-mybeacon</id>
    <content type="html"><![CDATA[<h3>AplixのUSB給電型Beacon発信機 MyBeaconを使ってみた</h3>

<p>先日、Aplix社が発売を開始したMyBeaconを早速購入して試してみました。<br/>
まずはAplix社の提供している専用のiOSアプリケーションをダウンロードしてみましょう。<br/>
<a href="https://itunes.apple.com/jp/app/mybeacon-tool/id848908053?mt=8&uo=4&at=11lpfc" target="itunes_store">MyBeacon Tool &ndash; Aplix</a></p>

<p>次にMyBeaconの送付物の中に同封されていた紙に書かれている<a href="http://www.aplix.co.jp/beacon/mb001_support/">URL先</a>にアクセスしてみましょう。<br/>
すると、下記の画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_1.png" alt="Aplix社のMyBeacon用の画面" /></p>

<!--more-->


<p>ここで<strong>管理者情報確認</strong>を選択しましょう。<br/>
遷移先画面では<strong>メールアドレス</strong>と<strong>プロダクトキー</strong>の入力が求められます。ここには先ほどと同じ同封された紙に書かれた<strong>お客様情報</strong>と<strong>プロダクトキー</strong>を入力してください。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_2.png" alt="Aplix社のMyBeacon用の画面2" /></p>

<p>結果、<strong>Proximity UUID</strong>と<strong>MyBeaconToolアプリで使用するPassword</strong>を知ることができます。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_3.png" alt="Aplix社のMyBeacon用の画面3" /></p>

<p>さて、ここまでわかったところでMyBeaconToolアプリを起動してみましょう。すると、MyBeaconIDとパスワードの入力を求められます。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_4.png" alt="Aplix社のMyBeacon用の画面4" /></p>

<p>入力が終わったら、MyBeaconのサーチが開始できます。MyBeaconをコンセントに刺してセットしてから、<strong>サーチ開始</strong>してみましょう。すると、ひっかかったMyBeaconの情報が表示されます。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_5.png" alt="Aplix社のMyBeacon用の画面5" /></p>

<p>以上で、<strong>Proximity UUID</strong>，<strong>Major</strong>，<strong>Minor</strong>の値が判明しました。<br/>
実際にBeacon機はMyBeaconを使えば良いので、<strong>Proximity UUID</strong>さえわかれば問題ありません。<br/>
自作アプリ内のソースでは下記のように<strong>Proximity UUID</strong>に設定しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;ここにProximity UUIDを書きましょう。ハイフン含めて下さい&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果、距離を測ったりできました。<br/>
<img src="http://grandbig.github.io/images/aplix_mybeacon_6.png" alt="自作アプリで距離を計測できました" /></p>

<p>これで簡単にiBeaconの自作アプリが作れますね。皆さん、安価ですし、この機会にMyBeaconを買ってみてはいかがでしょうか。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-cでUNIX時間を取得する方法]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/16/unixtime/"/>
    <updated>2014-04-16T23:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/16/unixtime</id>
    <content type="html"><![CDATA[<h3>Objective-CでUNIX時間を扱うための方法</h3>

<p>今日はUNIX時間を扱う方法について紹介します。UNIX時間とは<strong>UTCでの1970/01/01 00:00:00</strong>からの経過秒数を表したものです。<br/>
世界規模でアプリを開発するなら、UTCで時間を扱う必要があります。また、2つの時刻の差を求めるときは引き算をすれば良いので、時間の演算が非常に簡単にできることもメリットです。<br/>
すなわち、知っておいて損はないってことです。</p>

<p>では、Objective-cでのUNIX時間の扱い方について早速説明しましょう。</p>

<!--more-->


<p>まずは、NSDate型をUNIX時間に変換する処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nf">convertUnixTimeFromDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">date</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">unixtime</span> <span class="o">=</span> <span class="p">[</span><span class="n">date</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">unixtime</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、UNIX時間をNSDate型に変換する処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nf">convertDateFromUnixTime:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">unixtime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSince1970:</span><span class="n">unixtime</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">date</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらの２つのメソッドを用いて、試しに現在時間のログを出してみましょう。<br/>
下記はボタンをTouch Downしたときの処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">timeBtnAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">now</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;now: %@&quot;</span><span class="p">,</span> <span class="n">now</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">unixtime</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">convertUnixTimeFromDate:</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;unixtime: %f&quot;</span><span class="p">,</span> <span class="n">unixtime</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSDate</span> <span class="o">*</span><span class="n">now2</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">convertDateFromUnixTime:</span><span class="n">unixtime</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;now2: %@&quot;</span><span class="p">,</span> <span class="n">now2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このログは下記のようになります。<br/>
2014-04-16 23:33:27.827 timestamp[22795:907] now: 2014-04-16 14:33:27 +0000<br/>
2014-04-16 23:33:27.828 timestamp[22795:907] unixtime: 1397658807.824172<br/>
2014-04-16 23:33:27.830 timestamp[22795:907] now2: 2014-04-16 14:33:27 +0000</p>

<p>きちんと変換処理が実行されていることがわかります。<br/>
また、unixtimeは<strong>1397658807.824172</strong>のように小数点を伴って出力されます。単位は[秒]なのでマイクロ秒まで表示されていることになります。<br/>
もし、ミリ秒やマイクロ秒単位で時間を管理したいということであれば、くれぐれも小数点以下は切り捨て, 繰り上げ, 四捨五入などしないように！！</p>

<p>ということで本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[噂のiOS7.1でiBeaconを試してみよう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/"/>
    <updated>2014-04-12T23:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon</id>
    <content type="html"><![CDATA[<h3>iOS7.1ならアプリのBackground起動も必要なし！？</h3>

<p>さて、本日は最近いろいろなところで取り上げられているiOS7.1でのiBeaconについて実際に試してみました。<br/>
iOS7から導入されたiBeaconですが、これまではアプリをBackgroundで起動していなければBeaconを検知することができませんでした。しかし、iOS7.1からアプリをBackgroundで起動していなくてもBeaconを検知できるようになったとビッグニュースになりました。でも、本当にそうなんでしょうか？と疑問に思った筆者はSampleアプリで試してみました。</p>

<!--more-->


<p>下記がソースです。<br/>
まずはBeacon機器としてiPadを用いるためにPeripheralソースから書きます。<br/>
とりあえずProject作成の手順は<br/>
1: BeaconPeripheralという名称で新規Project作成<br/>
2: UIViewControllerを追加(ViewControllerという名称で作成しました)<br/>
3: CoreBluetoothとCoreLocationライブラリを追加<br/>
として下さい。</p>

<p>ViewController.hのソース</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span><span class="o">&lt;</span><span class="n">CBPeripheralManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ViewController.mのソース</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CBPeripheralManager</span> <span class="o">*</span><span class="n">peripheralManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>          
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Peipheral&quot;</span><span class="p">;</span>
</span><span class='line'>                  
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;8D4DB809-032F-4771-96F3-99BD5C25F924&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBPeripheralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span> <span class="nl">queue:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">CBPeripheralManagerStatePoweredOn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="n">startAdvertising</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startAdvertising</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span>
</span><span class='line'>                                                                         <span class="nl">major:</span><span class="mi">1</span>
</span><span class='line'>                                                                         <span class="nl">minor:</span><span class="mi">2</span>
</span><span class='line'>                                                                    <span class="nl">identifier:</span><span class="s">@&quot;com.test.ibeaconSample&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">beaconPeripheralData</span> <span class="o">=</span> <span class="p">[</span><span class="n">beaconRegion</span> <span class="nl">peripheralDataWithMeasuredPower:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span> <span class="nl">startAdvertising:</span><span class="n">beaconPeripheralData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、Beaconを検知するCentralのソースを書きます。<br/>
Projectの作成手順はPeripheralとほぼ同じで、<br/>
1: BeaconCentralという名称で新規Project作成<br/>
2: UIViewControllerを追加(ViewControllerという名称で作成しました)<br/>
3: CoreLocationライブラリを追加<br/>
として下さい。</p>

<p>ViewController.hのソース</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span><span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ViewController.mのソース</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">locationManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CLBeacon</span> <span class="o">*</span><span class="n">nearestBeacon</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initWithNibNameは省略</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">CLLocationManager</span> <span class="nl">isMonitoringAvailableForClass:</span><span class="p">[</span><span class="n">CLCircularRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];]</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;8D4DB809-032F-4771-96F3-99BD5C25F924&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="nl">identifier:</span><span class="s">@&quot;com.test.ibeaconSample&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;お使いの端末ではiBeaconを利用できません。&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域計測が開始した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didStartMonitoringForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Start Monitoring Region&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 指定した領域に入った場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Enter Region&quot;</span><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 指定した領域から出た場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Exit Region&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isMemberOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">stopRangingBeaconsInRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Beacon信号を検出した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span> <span class="o">=</span> <span class="n">beacons</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">rangeMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="p">.</span><span class="n">proximity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityImmediate:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Immediate&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityNear:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Near&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">CLProximityFar:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Far&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rangeMessage</span> <span class="o">=</span> <span class="s">@&quot;Range Unknown&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">msg</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%f [m]&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">nearestBeacon</span><span class="p">.</span><span class="n">accuracy</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="n">msg</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 領域観測に失敗した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">monitoringDidFailForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="nf">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sendLocalNotificationForMessage:</span><span class="s">@&quot;Exit Region&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ローカルプッシュの処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendLocalNotificationForMessage:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNotification</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILocalNotification</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>  <span class="n">localNotification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNotification</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでソースは完了です。<br/>
ソースを下記にアップしましたのでダウンロードしたい方はぜひ&hellip;。<br/>
<a href="https://github.com/grandbig/ibeaconCentralSample">Centralソース</a><br/>
<a href="https://github.com/grandbig/ibeaconPeripheralSample">Peripheralソース</a><br/>
まずはアプリをBackgroundで起動させているときの動作を見てみてください。<br/>
動作確認時には必ずCentralを先に起動する必要があります。約5秒後にPeripheralを起動して下さい。Centralの方にローカルプッシュが届くはずです。</p>

<p>続いて、アプリがBackground起動していない場合を見てみましょう。PeripheralアプリとCentralのアプリの両方を停止状態にします。(先ほどの状態から続けて実験する場合は、必ずCentralアプリ側に<strong>Exit Region</strong>というメッセージでローカルプッシュが届いてからにしてください。)<br/>
さて、Peripheralアプリを起動しましょう。しばらくするとCentralアプリを起動していないにも関わらず、ローカルプッシュが届くはずです。そして、Beacon間の距離がどんどんローカルプッシュされてくることでしょう。<br/>
<img src="http://grandbig.github.io/images/ibeacon_ios71_1.png" alt="Centralアプリを起動していない状態でローカルプッシュが届く" /><br/>
その後、Peripheralアプリを停止してみましょう。しばらくするとCentralアプリに<strong>Exit Region</strong>というローカルプッシュが届くはずです。それを最後にローカルプッシュは来なくなります。<br/>
<img src="http://grandbig.github.io/images/ibeacon_ios71_2.png" alt="Beaconの検知終了" /></p>

<p>このように、確かにアプリをBackgroundで起動していなくてもBeaconを検知するようです。因みに、このときアプリがBackground起動しているのか確認したのですが、起動はしてないんですね〜。というかホームボタン2回タップでBackground起動しているアプリが見れるはずなのに、そこに出てないんですね〜。う〜ん。どういうことなんでしょうか？？</p>

<p>まぁ、何はともあれ、iOS7.1からiBeaconの扱いが劇的に変わるってことは間違いないようです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDBを使ったDB接続を関数化しよう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/11/fmdatabase2/"/>
    <updated>2014-04-11T22:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/11/fmdatabase2</id>
    <content type="html"><![CDATA[<h3>FMDBを使ったDB接続を自作関数化</h3>

<p>さて、ブログを更新します。以前、<a href="http://grandbig.github.io/blog/2013/11/30/fmdatabase/">FMDBを使って簡単にiPhoneのローカルストーレジを活用しよう！</a>でObjective-CでSQLiteを扱うためのFMDBライブラリについて説明させて頂きました。<br/>
そのときは全てをベタ書きしていましたが、毎回書くのは面倒ですよね&hellip;ってことで自作しちゃいましょう！！</p>

<!--more-->


<p>まずはおさらいです。DB接続は下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span> <span class="p">);</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">dir</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath:</span><span class="p">[</span><span class="n">dir</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;test.db&quot;</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをtableの作成, select, insert, update, delete, countのたびに書くのは面倒なので&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">dbConnect:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dbName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">dir</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath:</span><span class="p">[</span><span class="n">dir</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">dbName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">db</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>としちゃいましょう。<br/>
そうすれば、同じmファイル内であればtableの作成, select, insert, update, delete, countは以下のように書けます。</p>

<h4>tableの作成</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createTable:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// tableの作成</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;create table if not exists %@ (id INTEGER PRIMARY KEY, uid TEXT, createtime TEXT)&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>select文の実行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">selectData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// select文</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;select * from %@&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSInteger</span> <span class="n">idNum</span> <span class="o">=</span> <span class="p">[[</span><span class="n">rs</span> <span class="nl">stringForColumnIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="n">intValue</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">uid</span> <span class="o">=</span> <span class="p">[</span><span class="n">rs</span> <span class="nl">stringForColumnIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">createtime</span> <span class="o">=</span> <span class="p">[</span><span class="n">rs</span> <span class="nl">stringForColumnIndex:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;id: %ld, uid: %@, createtime: %@&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">idNum</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">createtime</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>insert文の実行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'>          <span class="nf">userID:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">uid</span>
</span><span class='line'>      <span class="nf">createtime:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">createtime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// insert文</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;insert into %@ (uid, createtime) values(&#39;%@&#39;, &#39;%@&#39;)&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">createtime</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>update文の実行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'>          <span class="nf">userID:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">uid</span>
</span><span class='line'>      <span class="nf">createtime:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">createtime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// update文</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;update %@ set uid=&#39;%@&#39;, createtime=&#39;%@&#39; where id=1&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">createtime</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>delete文の実行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">deleteData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// delete文</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;delete from %@&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>count文の実行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">countData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="s">@&quot;test.db&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// count文</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;select count(*) as count from %@&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="p">[</span><span class="n">rs</span> <span class="nl">intForColumn:</span><span class="s">@&quot;count&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一度、関数を作ってしまえば、使いやすさがぐんぐん増します！！<br/>
自身のiOSアプリに最適なSQLiteを扱うメソッドを作ってみてはどうでしょうか？</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[didUpdateLocationsを軽く調べてみる]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/08/didupdatetolocation2/"/>
    <updated>2014-04-08T23:03:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/08/didupdatetolocation2</id>
    <content type="html"><![CDATA[<h3>didUpdateLocationsのNSArray型の引数が気になる！！</h3>

<p>さて、今日はざっくり調べたことを書きます。ほんの数行です！</p>

<!--more-->


<p><a href="http://grandbig.github.io/blog/2014/04/05/didupdatetolocation/">前回</a>、書きましたdidUpdateLocationsを使ってみました。<br/>
最も気になったのが、NSArray型の引数であるlocationsの中身には何が入っているのか？ということです。<br/>
下記のようにソースを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span>
</span><span class='line'>  <span class="nf">adidUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CLLocation</span> <span class="o">*</span><span class="n">currentLocation</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">lastObject</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">cnt</span> <span class="o">=</span> <span class="p">[</span><span class="n">locations</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lat</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lng</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;cnt: %ld,lat: %f, lng: %f&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">cnt</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際にログを出力してみた結果はというと&hellip;<br/>
2014-04-08 23:02:35.371 LocationPractice[11243:60b] cnt: 1,lat: 35.933374, lng: 139.619913<br/>
2014-04-08 23:02:36.837 LocationPractice[11243:60b] cnt: 1,lat: 35.933351, lng: 139.619884<br/>
2014-04-08 23:02:37.428 LocationPractice[11243:60b] cnt: 1,lat: 35.933327, lng: 139.619856<br/>
&hellip;&hellip;</p>

<p>の繰り返しでした。<br/>
NSArray型のlocationsには最新の位置情報しか入らないようです。<br/>
う〜む。なんでNSArray型なんでしょうか&hellip;。ただ、よくよく考えるとNSMutableArray型でないから要素増えないんでしょうか&hellip;。何て思ったりしました。<br/>
はい。短いけど、今日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLLocationManagerDelegateのdidUpdateToLocationがDeprecated!?]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/05/didupdatetolocation/"/>
    <updated>2014-04-05T11:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/05/didupdatetolocation</id>
    <content type="html"><![CDATA[<h3>didUpdateToLocationではなくdidUpdateLocationsを使うべき!?</h3>

<p>久々に更新します。今日は位置情報サービスで変更があった点に注目してみます。筆者は昨日まで、この変更を気にせずに普通にこれまで通りの方法で位置情報の取得をしていました。<br/>
しかし、よくよく<a href="https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html">AppleのCLLocationManagerDelegate Protocol Reference</a>を見てみると、『locationManager:didUpdateToLocation:fromLocation:』に<strong>Deprecated in iOS 6.0</strong>の文字が&hellip;。<br/>
そして代わりに『locationManager:didUpdateLocations:』というものがありました。<br/>
う〜む&hellip;どうやら今はこちらを使った方が良いようですね。</p>

<!--more-->


<p>しかし、最新のXcode5.1でDeployment Targetを6.0に設定して下記をソースに書いたとしてもDeprecatedとWarningが出ることはありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span><span class="o">*</span><span class="p">)</span><span class="nv">manager</span>
</span><span class='line'>  <span class="nf">didUpdateToLocation:</span><span class="p">(</span><span class="n">CLLocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">newLocation</span>
</span><span class='line'>         <span class="nf">fromLocation:</span><span class="p">(</span><span class="n">CLLocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">oldLocation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lat</span> <span class="o">=</span> <span class="p">[</span><span class="n">newLocation</span> <span class="n">coordinate</span><span class="p">].</span><span class="n">latitude</span><span class="p">;</span> <span class="c1">// 緯度</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lng</span> <span class="o">=</span> <span class="p">[</span><span class="n">newLocation</span> <span class="n">coordinate</span><span class="p">].</span><span class="n">longitude</span><span class="p">;</span> <span class="c1">// 経度</span>
</span><span class='line'>  <span class="n">CLLocationDistance</span> <span class="n">altitude</span> <span class="o">=</span> <span class="n">newLocation</span><span class="p">.</span><span class="n">altitude</span><span class="p">;</span> <span class="c1">// 高度</span>
</span><span class='line'>  <span class="n">CLLocationDirection</span> <span class="n">course</span> <span class="o">=</span> <span class="n">newLocation</span><span class="p">.</span><span class="n">course</span><span class="p">;</span> <span class="c1">// 方角</span>
</span><span class='line'>  <span class="n">CLLocationSpeed</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">newLocation</span><span class="p">.</span><span class="n">speed</span><span class="p">;</span> <span class="c1">// 速度</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">horizontalAccuracy</span> <span class="o">=</span> <span class="n">newLocation</span><span class="p">.</span><span class="n">horizontalAccuracy</span><span class="p">;</span> <span class="c1">//水平方向の精度</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">verticalAccuracy</span> <span class="o">=</span> <span class="n">newLocation</span><span class="p">.</span><span class="n">verticalAccuracy</span><span class="p">;</span> <span class="c1">//垂直方向の精度</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これではDeprecatedになっていることに気づかないですよね&hellip;。ま、新iOSがリリースされるごとにリファレンスをきちんと読むべきってことですね。<br/>
はい！では今度からこう書きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span>
</span><span class='line'>   <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CLLocation</span> <span class="o">*</span><span class="n">currentLocation</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">lastObject</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lat</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">;</span> <span class="c1">// 緯度</span>
</span><span class='line'>  <span class="n">CLLocationDegrees</span> <span class="n">lng</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">;</span> <span class="c1">// 経度</span>
</span><span class='line'>  <span class="n">CLLocationDistance</span> <span class="n">altitude</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">altitude</span><span class="p">;</span> <span class="c1">// 高度</span>
</span><span class='line'>  <span class="n">CLLocationDirection</span> <span class="n">course</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">course</span><span class="p">;</span> <span class="c1">// 方角</span>
</span><span class='line'>  <span class="n">CLLocationSpeed</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">speed</span><span class="p">;</span> <span class="c1">// 速度</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">horizontalAccuracy</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">horizontalAccuracy</span><span class="p">;</span> <span class="c1">// 水平方向の精度</span>
</span><span class='line'>  <span class="n">CLLocationAccuracy</span> <span class="n">verticalAccuracy</span> <span class="o">=</span> <span class="n">currentLocation</span><span class="p">.</span><span class="n">verticalAccuracy</span><span class="p">;</span> <span class="c1">// 水ty区方向の精度</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>古い方で位置情報を取得しても少なくともiOS6では問題ありませんでした。が、iOS7ではまだ未検証なので、試してみます。とは言え、新しい方を使うべきだと思いますが&hellip;。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でDebug gaugesを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/03/16/xcode5debug/"/>
    <updated>2014-03-16T21:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/03/16/xcode5debug</id>
    <content type="html"><![CDATA[<h3>Xcode5のデバッグ機能を使ってCPUとスレッドを調べよう</h3>

<p>最近、アプリを開発する上で、その操作が<strong>どのくらいCPUを消費するのか</strong>, <strong>マルチスレッドを有効に使えているのか</strong>を厳しく見る必要が出てきました。それまでCPUやスレッドもそこまで気にしたことはなかったのですが、Xcode5からはInstrumentを起動しなくとも、簡易的に確認できるということで試しにやってみました。</p>

<!--more-->


<h4>Xcode5でDebug gaugesを使ってみる</h4>

<p>まずは、本当に簡単な何もしない画面を作成して、様子を見てみました。<br/>
<img src="http://grandbig.github.io/images/xcode_debug1.png" alt="何もしない画面の様子" /></p>

<p>4つスレッドがあります。そして、画面の描画に使われているであろうスレッドがThread1であることがわかると思います。他は全く使ってないですね。<br/>
また、本試験ではiPhone5(iOS7.1)を利用しているため、マルチコアなので、CPUのメータが最大200%であることが示されています。<br/>
しばらく見ていると、4つあったスレッドが2つに減ります。<br/>
<img src="http://grandbig.github.io/images/xcode_debug2.png" alt="スレッドが2つになる" /></p>

<p>続いて、for分で10000回ループしてひたすらログを出力するボタンを作成して、様子を見てみました。<br/>
<img src="http://grandbig.github.io/images/xcode_debug3.png" alt="for分で10000回ループ" /></p>

<p>さて、スレッドを別に作成して実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">gQueue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">gQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d回目のループ&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>その結果が下図。<br/>
<img src="http://grandbig.github.io/images/xcode_debug4.png" alt="別スレッドで実行" /><br/>
これを見るとメインスレッドとは別のスレッドで実行されていることがわかります。基本的に描画はメインスレッドでしか実行がされないので、その他の処理はメインスレッドとは別スレッドで行うのが良さそうですね。</p>

<p>実際にやってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">gQueue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">gQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d回目のループ&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;メインのループ&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/xcode_debug5.png" alt="マルチスレッドでの実行" /><br/>
メインスレッドと別スレッドで各10000回ログを出力する処理を実行しているため、同じ時間帯にリソースを使っていることがわかりますね。</p>

<h3>マップを描画してDebug gaugesを見てみる</h3>

<p>アプリを開発するときにマップを利用すると様々な操作でメインスレッドを利用していることがわかります。まずはマップを起動してみましょう。<br/>
<img src="http://grandbig.github.io/images/xcode_debug6.png" alt="マップを起動してみる" /><br/>
起動直後から大量のスレッドが作成されていることがわかります。描画はメインスレッドでやるものの、様々な計算は別スレッドでやっているということなんでしょうか&hellip;。<br/>
起動してからしばらく放置しておくとスレッドがどんどん減っていきます。<br/>
しかし、マップを拡大・縮小するとスレッドが大量に作成されます。また、CPUも激しく消費することがわかります。(余裕で140〜150%まで上がったりしますね&hellip;)</p>

<p>これらはユーザの操作によって引き起こされる現象なので、極端な話、触らなければCPUの消費はされません。<br/>
では、下記のようにしてみたらどうなるでしょうか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mapViewDidFinishLoadingMap:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">map</span> <span class="nl">setUserTrackingMode:</span><span class="n">MKUserTrackingModeFollowWithHeading</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/xcode_debug7.png" alt="ユーザの方向にマップが回転する" /><br/>
ユーザの動きを検知して自動で回転するので、CPUを使い続けます。</p>

<h3>まとめ</h3>

<p>アプリを開発する上で、端末のリソースをどのようにうまく使っていくのかは非常に重要です。マップを使うアプリを作成するときは特に注意が必要ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIImageを任意の角度で回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2014/03/13/uiimagerotate/"/>
    <updated>2014-03-13T00:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/03/13/uiimagerotate</id>
    <content type="html"><![CDATA[<h3>UIImageを自由に回転させよう！</h3>

<p>今日はUIImageの回転について語ります。注意して頂きたいのはUIImageViewの回転ではなく、UIImageの回転です。<br/>
筆者は検索すればさくっと誰かが作ったものが見つかるだろうと思っていました&hellip;が、全然見つからない(汗)<br/>
見つかっても、90°, 180°, 270°の回転といった限定されたものでした。求めているものは自由に回転させる方法なんです！！(5°とか26.8°とか&hellip;)<br/>
しかし、粘って検索したり、いろいろと試した結果、方法がわかりました。ということで、早速説明していきましょう。</p>

<!--more-->


<p>UIImageにはUIImageViewのようにtransformといったプロパティは用意されていません。回転させるためには、ガシガシソースを書く必要があります。<br/>
下記のように&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 元の画像。ここではtest.pngという画像があるとします。</span>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;test.png&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 回転の中心点を移動</span>
</span><span class='line'><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">);</span> <span class="c1">// Y軸方向を補正</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">radian</span> <span class="o">=</span> <span class="mi">45</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">;</span> <span class="c1">// 45°回転させたい場合</span>
</span><span class='line'><span class="n">CGContextRotateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">radian</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">image</span><span class="p">.</span><span class="n">CGImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">rotatedImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// UIImageViewに回転後の画像を設定</span>
</span><span class='line'><span class="n">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">rotatedImage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで回転した画像を確認することができるはずです。<br/>
因みにUIImageViewを回転させて支障がないようであれば、そっちの方が断然簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;test.png&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">radian</span> <span class="o">=</span> <span class="mi">45</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">;</span> <span class="c1">// 45°回転させたい場合</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="n">radian</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけです。<br/>
UIImageViewごと回転で対応できない場合の例としてはマップ上でアノテーションの画像を回転させる場合でしょう。仮にMKAnnotationViewを回転させた場合、アノテーションをタップしたときに表示されるバルーンも回転してしまうので、困ったことになります。こういったときにはUIImageを回転させるしかないんです。</p>

<p>参考URL:<br/>
<a href="http://stackoverflow.com/questions/5102474/rotate-uiimage-custom-degree">Rotate UIImage custom degree Stack Overflow</a><br/>
<a href="http://www.objectivec-iphone.com/animation/UIView-animation/CGAffineTransform.html">UIViewのアフィン変換</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Universalアプリ開発における縦横対応について]]></title>
    <link href="http://grandbig.github.io/blog/2014/03/09/devicerotate/"/>
    <updated>2014-03-09T21:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/03/09/devicerotate</id>
    <content type="html"><![CDATA[<h3>iPhoneは縦のみ対応/iPadは縦横対応させたい！！</h3>

<p>さて、久々に基本的なところで躓いてしまったのでメモしておきます。iPhone/iPadの両方に対応したUniversalなアプリを開発するときに、縦横対応を考える必要があります。iPhoneであれば基本的には縦もしくは横どちらかに固定すれば十分です。一方でiPadは縦をメインとして使うユーザと横をメインとして使うユーザの両方がターゲットとなります。では、iPhone/iPadで固定/非固定を分けて開発するためにはどうしたら良いのでしょうか？</p>

<p>今回はその答えを始めに紹介し、続いて筆者が躓いたことによって得た情報を紹介したいと思います。</p>

<!--more-->


<p>では、始めにiPhone/iPadで固定/非固定を分けて開発する方法を紹介しましょう。<br/>
Xcode5上で<strong>TARGETS > Deployment Info</strong>を見て下さい。iPhoneとiPadの文字が並んで表示されている部分があると思います。(恐らく、iPhoneが青字になっていることでしょう。)<br/>
この下に<strong>Device Orientation</strong>と書かれており、<strong>Portrait, Upside Down, Landscape Left, Landscape Right</strong>の4つのチェックボックスがあります。<br/>
iPhoneは縦のみ, iPadは全方向OKにしたい場合は、iPhone選択時に<strong>Portraitのみにチェック</strong>, iPad選択時に<strong>4つ全てにチェック</strong>を入れましょう。<br/>
<img src="http://grandbig.github.io/images/devicerotate1.png" alt="Xcode5で各デバイスの設定をしましょう" /></p>

<p>これで設定完了です。非常に簡単ですね！<br/>
筆者はソースコードでどうにかしようと取り組んでいたため、時間がかかってしまいました笑。<br/>
ただ、逆に言えばソースコードでも設定は可能なんです。そこについて紹介しましょう。</p>

<p>まず、筆者は下記のようにAppDelegate.mファイルにソースを書きました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// UIViewController型のViewControllerを生成</span>
</span><span class='line'>  <span class="n">ViewController</span> <span class="o">*</span><span class="n">vc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">vc</span> <span class="o">=</span> <span class="p">(</span><span class="n">ViewController</span> <span class="o">*</span><span class="p">)[[</span><span class="n">NavigationController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRootViewController:</span><span class="n">vc</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">vc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>objective-c
NavigationControllerをrootViewControllerに指定しています。そのNavigationControllerに自身で作成したViewControllerを加えています。<br/>
さて、続いてViewController.mのソースを書いていきます。Objective-Cでは端末が回転したときに<strong>supportedInterfaceOrientations</strong>と<strong>shouldAutorotate</strong>の2つが呼び出されます。<br/>
supportedInterfaceOrientationsは回転を許可する端末の方向を指定し, shouldAutorotateは端末が回転したときに自動で回転するかどうかを指定します。<br/>
例えば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">supportedInterfaceOrientations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">UIInterfaceOrientationMaskPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">interfaceorientation</span> <span class="o">==</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くと、supportedInterfaceOrientationsではPortrait方向のみ回転を許可し、shouldAutorotateではPortrait方向のみ自動で回転するようになっています。この両関数の指定がずれた場合はエラーが発生します。<br/>
上記のように書いておけば、冒頭で説明したXcode5のDevice Orientationの4つ全てにチェックを入れていたとしても、回転することはありません。<br/>
のはずでしたが、まだこの状態では回転してしまいます&hellip;。なぜなんでしょうか？<br/>
それはrootViewControllerにNavigationControllerを設定しまったためだそうです。これを回避するためには、NavigationControllerに設定してあるtopViewControllerの値を返すようにCustomNavigationControllerを作成する必要があります。<br/>
では、UINavigationControllerを継承したCustomNavigationControllerを作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CustomNavigationController.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CustomNavigationController</span> : <span class="nc">UINavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;CustomNavigationController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CustomNavigationController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">CustomNavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithNibName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibNameOrNil</span> <span class="nf">bundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibBundleOrNil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithNibName:</span><span class="n">nibNameOrNil</span> <span class="nl">bundle:</span><span class="n">nibBundleOrNil</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Custom initialization</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">supper</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 新たに加えるソースは下記4行のみです。</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">supportedInterfaceOrientations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">supportedInterfaceOrientations</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで書ければ、後はAppDelegate.mファイルでNavigationControllerとしていたところをCustomNavigationControllerに変更すればOKです。<br/>
今度こそ、端末の回転を抑制することができていますよね？</p>

<p>今回は初歩的な話でしたが(いつもか&hellip;笑)、基本は非常に重要であり、知っていないと思わぬところで時間をくってしまいます。<br/>
様々な書籍でObjective-Cの基本的な書き方, Xcodeの基本的な使い方が紹介されていると思いますが、筆者のおすすめは下記。<br/>
<strong>WEB DB PRESS</strong>で初めてiOS7について基本的なところを説明してくれています。初心者には役に立つこと間違いないでしょう。<strong>Software Design Plus iOSアプリ エンジニア養成読本</strong>はまだ未発売ですが、iOSアプリのエンジニアとして生き残るための方法が書いてあるとのことなので、今から楽しみにしています。といったところで本日はここまで。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=grandbig7-22&o=9&p=8&l=as1&asins=4774162876&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=grandbig7-22&o=9&p=8&l=as1&asins=4774163856&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSUserDefaultsで手軽にデータを端末保存しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/03/07/nsuserdefaults/"/>
    <updated>2014-03-07T22:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/03/07/nsuserdefaults</id>
    <content type="html"><![CDATA[<h3>最も簡単なデータの端末保存方法を学ぼう！</h3>

<p>さて、今日はNSUserDefaultsを使った簡単なデータの保存方法について紹介したいと思います。と言っても、本当に多くのサイトで十分にわかりやすい説明が書かれているので、要点を絞って簡単に説明したいと思います。</p>

<!--more-->


<p>まずは新規にデータを保存する場合です。<br/>
NSString型のデータを保存する場合の例を下記に記します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// NSUserDefaultsの取得</span>
</span><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの保存処理</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="s">@&quot;value&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;key&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 保存の即時反映</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後のsynchronizeを利用しないとデータ保存までにタイムラグが発生する可能性があります。データ保存後に、すぐさまデータを利用する機会がある場合などはsynchronizeを呼び出した方が良いでしょう。</p>

<p>さて、次にデータを取得する場合です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// NSUserDefaultsの取得</span>
</span><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの取得</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">stringForKey:</span><span class="s">@&quot;key&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>非常に簡単にできますね。</p>

<p>さて、NSUserDefaultsに保存したデータはどこにいったのでしょうか？<br/>
実はXcodeから確認することができます。確認方法は以下の手順です。<br/>
1. 『Window > Organizer > Applications』から確認したいアプリを選択<br/>
2. フッターに位置するDownloadを選択<br/>
3. Downloadしてきたファイルを右クリックして、『パッケージの内容を表示』を選択<br/>
4. AppData > Library > Preferences > Bundle Identifier名称.plistを見る</p>

<p>該当ファイルを見るとXML書式でデータが書かれていることがわかります。<br/>
<img src="http://grandbig.github.io/images/nsuserdefaults.png" alt="NSUserDefaultsに保存したデータの確認" /></p>

<p>因みにNSUserDefaultsは万能ではありません。<br/>
用途としては<br/>
<strong>ユーザID, プロファイルデータなどの量が増えないデータ</strong><br/>
の保存が考えられます。</p>

<p>もし、<strong>『大量のデータを保存したい』、『ある条件を満たすデータのみを取得したい』</strong>などの使い方をするのであればSQLiteを使うべきでしょう。</p>

<p>ということで本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silent Remote Notificationを試そう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/22/silentremotenotification/"/>
    <updated>2014-02-22T00:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/22/silentremotenotification</id>
    <content type="html"><![CDATA[<h3>iOS7で新たに追加されたSilent Remote Notificationを使ってみよう！！</h3>

<p>本日はiOS7から新たに追加された<strong>Silent Remote Notification</strong>について紹介します。<br/>
iOS6までで利用できたRemote Notificationと何が違うのかと言いますと、<strong>ユーザ端末のロック画面に表示させることなく</strong>通知することができるんです。<br/>
つまり、<br/>
Remote Notification: ユーザに何かを気づかせるためにプッシュする<br/>
Silent Remote Notification: ユーザに気づかせることなくプッシュする<br/>
ということです。</p>

<p>これを見ると、『Silent Remote Notificationって使い道あるの？？』なんて思ってしまいそうですよね。これが意外とありそうなんです。<br/>
例えば、<br/>
・ユーザに気づかれずにアプリ内の情報を最新に更新する<br/>
・ユーザに気づかれずにアプリ内のユーザ情報を取得する<br/>
ことなどが考えられます。<br/>
後者はユーザ視点からすると気になるかもしれませんが、『アプリの有用性をユーザに最大限に感じてもらうための方法』と考えて頂ければとても大切なことであると伝わるでしょうか。</p>

<p>そんな様々な使い道がありそうなSilent Remote Notificationについて早速説明していきます。</p>

<!--more-->


<h4>ネイティブソースとXcode5の設定について</h4>

<p>まずは、ネイティブソースとXcode5の設定から説明します。Xcode5でプロジェクトを作成したら、TARGETS > Capabilities > Background Modes > Remote notificationsにチェックを入れます。<br/>
<img src="http://grandbig.github.io/images/xcode-silent-notifications1.png" alt="Xcode5での設定方法" /><br/>
続いてはネイティブソースでプッシュの受取り口を作りましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// AppDelegate.hファイル</span>
</span><span class='line'><span class="err">@</span><span class="n">interfase</span> <span class="n">AppDelegate</span> <span class="o">:</span> <span class="n">NSObject</span><span class="o">&lt;</span><span class="n">UIApplicationDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// AppDelegate.mファイル</span>
</span><span class='line'><span class="c1">// ①トークン値の取得</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span><span class="o">:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">devToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//デバイストークンから&#39;&lt;&#39;,&#39;&gt;&#39;,&#39; &#39;を削除して変数に保存</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">token</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">devToken</span> <span class="n">description</span><span class="p">]</span> <span class="n">stringByReplacingOccurrencesOfString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&lt;&quot;</span><span class="n">withString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&quot;</span><span class="p">]</span>
</span><span class='line'>                          <span class="n">stringByReplacingOccurrencesOfString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&gt;&quot;</span> <span class="n">withString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&quot;</span><span class="p">]</span>
</span><span class='line'>                          <span class="n">stringByReplacingOccurrencesOfString</span><span class="o">:</span> <span class="err">@</span><span class="s">&quot; &quot;</span> <span class="n">withString</span><span class="o">:</span> <span class="err">@</span><span class="s">&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;deviceToken: %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">token</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ②通常のRemote Notificationが届いたときに通る処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="n">didReceiveRemoteNotification</span><span class="o">:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">userInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ③Silent Remote Notificationが届いたときに通る処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span>
</span><span class='line'> <span class="nl">didReceiveRemoteNotification:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">userInfo</span>
</span><span class='line'>  <span class="nl">fetchCompletionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">UIBackgroundFetchResult</span><span class="p">))</span><span class="n">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>プッシュ通知を受け取ったとき、上記に書いたdidReceiveRemoteNotification処理が実行されます。コメントアウトにも書いていますが、③がSilent Remote Notificationが届いたときに通る処理です。<br/>
ただし、Silent Remote NotificationはiOS7以上でないと対応していないのでiOS6の場合は通常のRemote Notification, Silent Remote Notificationに関わらず②のdidReceiveRemoteNotificationを通りますので、ご注意ください。<br/>
あとは③に実行させたい処理を書けば、Silent Remote Notificationの実装は完了です。</p>

<h4>動作確認用に簡単にプッシュ通知を送る処理を書こう</h4>

<p>さて、ネイティブ側の実装はできましたが、本当にこれで送れるのか確認したいですよね？Node.jsのnode-apnモジュールを使えば驚くほど簡単に用意することができます。<br/>
より簡単に作成するためにExpressモジュールを使って説明します。Expressモジュールの用意については<a href="https://gihyo.jp/dev/serial/01/nodejs/0003">第3回 Express.jsを使ったWebアプリケーションを構築</a>を参照ください。</p>

<p>それではpushtestという名前のWebアプリの雛形を作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>express -t ejs pushtest
</span></code></pre></td></tr></table></div></figure>


<p>次にpushtest配下で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>を実行して必要なモジュールをインストールしましょう。さらに、node-apnモジュールもインストールしましょう。また後ほど利用するquerystringモジュールもインストールしておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install apn
</span><span class='line'>npm install qs
</span></code></pre></td></tr></table></div></figure>


<p>これでモジュールが揃ったので、app.jsを編集しましょう。<br/>
pushtest/routes/apns.jsを作成しておきます。(デフォルトで作成されるindex.jsかuser.jsをコピーしてファイル名を変更すればOKです)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/apns&#39;</span><span class="p">);</span><span class="c1">// apns.jsの読み込みを追加</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/apns&#39;</span><span class="p">,</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">push</span><span class="p">);</span><span class="c1">// GETリクエストを想定</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>そしてお待ちかねのプッシュメイン処理をapns.jsに書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;apn&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;qs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">push</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// ① GETパラメータからトークンを取得</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ② プッシュ通知の設定</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;cert&quot;</span><span class="o">:</span> <span class="s2">&quot;./keys/cert.pem&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;key&quot;</span><span class="o">:</span> <span class="s2">&quot;./keys/key.pem&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;gateway&quot;</span><span class="o">:</span> <span class="s2">&quot;gateway.sandbox.push.apple.com&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myDevice</span> <span class="o">=</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Device</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">apnConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Connection</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Notification</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">newsstandAvailable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">apnConnection</span><span class="p">.</span><span class="nx">pushNotification</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="nx">myDevice</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;respond with a resource&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどインストールしたqsはGETパラメータをオブジェクト化してくれる便りなモジュールです。詳しくは<a href="http://nodejs.org/api/querystring.html">Node.js Manual&amp;Documents</a>を参照してください。<br/>
まず、①のようにトークン値を取得します。<br/>
次に②のようにプッシュ通知を送るための設定を書きます。<a href="https://github.com/argon/node-apn">GitHubで公開されているReference</a>をほぼそのまま書くだけなので簡単です。<br/>
注意しておきたいのはSilent Remote Notificationの場合は<strong>note.newsstandAvailable=1</strong>を設定する必要があります。逆にbadge, alert, soundは不要です。これらを入れてもプッシュ通知ができないわけではないのですが、冒頭に述べた<strong>ユーザに気づかれずに</strong>という要件を満たせなくなります。</p>

<p>因みに, optionsで設定しているcertとkeyは証明書の保存場所です。上記ソースで設定している場所はapp.jsと同じ階層にkeyフォルダがあることを指します。また、gatewayにはsandboxをつけることを忘れずに。(商用の場合はsandboxは不要です。develop用ではsandboxを設定するんです。)<br/>
証明書(cert.pemとkey.pem)の作成は多くのサイトで説明されているのでここでは割愛します。</p>

<p>ここまで準備ができたら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node app.js
</span></code></pre></td></tr></table></div></figure>


<p>でWeb&amp;APサーバをローカルに起動しましょう。<br/>
そして、『localhost:3000?token=トークン値』をブラウザのアドレス部分に打って、Silent Remote Notificationを送りましょう!!<br/>
トークン値はネイティブソース内のdidRegisterForRemoteNotificationsWithDeviceToken関数でLogとして出力しているはずなので、コピーしましょう。</p>

<p>届きましたでしょうか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MKMapViewの初期中心点をユーザの現在地に設定する方法]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/16/userlocationandmap/"/>
    <updated>2014-02-16T21:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/16/userlocationandmap</id>
    <content type="html"><![CDATA[<h3>MKMapViewの中心位置について考えた</h3>

<p>本日はMKMapViewの初期表示について説明します。MKMapViewを扱うときにはユーザの位置情報を用いることが多いと思います。そのほとんどの場合、マップを初期表示したときにユーザの現在地を中心にしたいのではないかと思います。しかしながらiPhoneで位置情報を取得するとき、アプリを起動して即座に現在地を特定することはできません。では、『どうするのか？』について失敗談を交えつつ紹介させて頂きます。</p>

<!--more-->


<p>まずは失敗例から紹介します。<br/>
筆者は<strong>ユーザの現在地をマップの中心位置に設定する</strong>ということに意識が向きすぎたせいか当初は下記の手段を取っていました。</p>

<p>下記はViewController.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;CoreLocation/CoreLocation.h&gt;
</span><span class='line'>#import &lt;MapKit/MapKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController &lt;MKMapViewDelegate, CLLocationManagerDelegate&gt;
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) IBOutlet CLLocationManager *locationManager;
</span><span class='line'>@property (weak, nonatomic) IBOutlet MKMapView *map;</span></code></pre></td></tr></table></div></figure>


<p>下記はViewController.m</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ユーザの位置を取得
</span><span class='line'>CLLocation *location = [locationManager location];
</span><span class='line'>CLLocationCoordinate2D uCoordinate = [location coordinate];
</span><span class='line'>// マップの中心位置を設定
</span><span class='line'>MKCoordinateRegion region = MKCoordinateRegionMake(uCoordinate, MKCoordinateSpanMake(0.05, 0.05));</span></code></pre></td></tr></table></div></figure>


<p>しかし、これではアプリ起動直後に真っ青な画面が表示されてしまうことでしょう。その理由はiPhone側で位置情報を取得する前にマップを表示しようとしてしまっているためです。結果、ユーザの現在地はlatitude, longitude共に0として返ってきます。<br/>
ここで筆者はマップに現在地のピンを表示することは割りと早くできていることに気づきました。であれば何かマップからユーザ情報が取得できるのではないかと。<br/>
で考えたのが下記。(ViewController.mのみ修正)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ユーザの位置を取得
</span><span class='line'>CLLocation *userLocation = self.map.userLocation.location;
</span><span class='line'>CLLocationCoordinate2D uCoordinate = CLLocationCoordinate2DMake(userLocation.coordinate.latitude, userLocation.coordinate.longitude);
</span><span class='line'>// マップの中心位置を設定
</span><span class='line'>MKCoordinateRegion region = MKCoordinateRegionMake(uCoordinate, MKCoordinateSpanMake(0.05, 0.05));</span></code></pre></td></tr></table></div></figure>


<p>しかし、これまたアプリ起動後に真っ青な画面が表示されてしまいました&hellip;。う〜む、なかなかうまくいかない。</p>

<p>で、結局、下記で解決。(ViewController.mのみ修正)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// マップにユーザの現在地を表示
</span><span class='line'>self.map.showsUserLocation = YES;
</span><span class='line'>// マップの中心地がユーザの現在地を追従するように設定
</span><span class='line'>[self.map setUserTrackingMode:MKUserTrackingModeFollow];</span></code></pre></td></tr></table></div></figure>


<p>位置情報が取れ次第(ユーザの現在地が特定でき次第)、マップの中心地が移動するのでアプリ起動後に割りとすぐ理想の結果が得られます。(因みにマップを動かせば、追従モードはOFFとなります。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でAuto Layoutを使おう]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout/"/>
    <updated>2014-02-09T17:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout</id>
    <content type="html"><![CDATA[<h3>Auto Layoutで『iOS6・iOS7』と『3.5-inch・4-inch』対応</h3>

<p>さて、これまで<strong>iOS6/7 deltas</strong>を利用した方法や<strong>全てコードで書く</strong>方法について説明してきました。これとは別に本日は<strong>Auto Layout</strong>を利用した方法について説明します。<br/>
先にこれらの方法の違いについて紹介します。<br/>
・iOS6/7 deltasを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS5以前から対応する場合<br/>
・全てコードで書く方法<br/>
  XIBやStoryboardなどのGUIを利用せずに、全OS・全ディスプレイに対応する場合<br/>
・Auto Layoutを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS6以降から対応する場合</p>

<p>求められている仕様や開発者の技量、プロジェクトの運用から最適な方法を選択する必要があります。<br/>
とは言え、個人的には<strong>全てコードで書く</strong>方法が最も自由がきくと思っているので、これに慣れていると他の手法は案外シンドイです。</p>

<!--more-->


<h4>Auto LayoutでUINavigationBarを調整しよう</h4>

<p>以前、iOS6/7 deltasを利用する方法で説明したことをAuto Layoutで説明します。皆様、ご存知の通りiOS6以前とiOS7以降とではステータスバーの20px分をナビゲーションバーの高さを考慮しなくてはなりません。<br/>
<img src="http://grandbig.github.io/images/ios6_7_difference.png" alt="iOS6とiOS7でナビゲーションバーの高さが異なる" /></p>

<p>早速、詳しく説明していきます。<br/>
まず、プロジェクトを作成し終わったら、XIBファイルを表示してください。そしてUINavigationBarを設置します。このUINavigationBarの高さをiOSのバージョンごとに変化させたいので、下記手順でAuto LayoutのConstraintを追加します。<br/>
1: 右下のバーの左から2番目をクリックしてConstraintsのウィンドウを表示<br/>
2: 高さを変更したいのでHeightにチェックを入れる<br/>
3: Add ConstraintボタンをクリックしてConstraintを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout1.png" alt="Constraintを追加する" /></p>

<p>これでConstraintsが追加されたのでViewController.hと関連づける。<br/>
1: Constraints > Heightを右クリックしてViewController.hへドラッグ&amp;ドロップ<br/>
2: ウィンドウが表示されるので、名前をつけてConnectをクリックする<br/>
<img src="http://grandbig.github.io/images/autolayout2.png" alt="ViewController.hに関連づける" /><br/>
<img src="http://grandbig.github.io/images/autolayout3.png" alt="名前をつけてConnect" /></p>

<p>次にViewController.mファイルを開きましょう。<br/>
以下のように編集してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  // iOS7の場合は64pxにする
</span><span class='line'>  if (floor(NSFoundationVersionNumber) &gt; NSFoundationVersionNumber_iOS_6_1) {
</span><span class='line'>      self.nvBarHeight.constant = 64;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上の手順をすることで下記のようにiOS6とiOS7でUINavigationBarを正しく表示することができます。<br/>
<img src="http://grandbig.github.io/images/autolayout4.png" alt="UINavigationBarの表示" /></p>

<h4>Auto LayoutでUIViewを中央に配置しよう</h4>

<p>次に主にディスプレイサイズで困るであろう中央配置の方法について説明します。<br/>
まずは、何も考えずに普通にUIViewを追加してみましょう。そしてViewを3.5-inch Full Screenと4-inch Full Screenとで表示を変更して見てみましょう。すると、下記のようにUIViewの高さが変わってしまうことがわかると思います。<br/>
<img src="http://grandbig.github.io/images/autolayout5.png" alt="4-inchの場合" /><br/>
<img src="http://grandbig.github.io/images/autolayout6.png" alt="3.5-inchの場合" /><br/>
こんなはずでは&hellip;なんて絶句してしまうかもしれません。が、ご安心ください。これは先ほど説明したHeightのConstraintsを追加することで対応できます。先ほどと同様に下記の手順でHeightのConstraintを追加してみてください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 高さを保持したいのでHeightにチェックを入れます。高さが希望の値になっていることを確認してください。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する</p>

<p>これで先ほどと同様にViewのinchを変更させてみてください。追加したUIViewの高さが保持されていることがわかると思います。</p>

<p>はい。本題です。<br/>
UIViewをディスプレイのCenterに表示させたい場合は下記手順を実行してください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から1番目をクリックしてConstraintのウィンドウを表示<br/>
2: Vertical方向に常にディスプレイの中央に表示させたいので、Vertical Center in Containerにチェックを入れます。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout7.png" alt="Vertical Center in Containerを追加" /></p>

<p>これでUIViewを高さを保持した状態で3.5-inch/4-inchでもディスプレイの中央に表示することができます。</p>

<h4>Auto Layoutでマージンを調整しよう</h4>

<p>そして、Auto Layoutを用いたマージンの調整方法についても説明しましょう。<br/>
先ほど、ディスプレイの中央に表示したい場合を説明したと思いますが、3.5-inchで見るとUINavigationBarに近すぎると感じることがあるかもしれません。<br/>
であるならば、3.5-inchでも4-inchでもUINavigationBarから一定の距離を保持した方が見栄えが良いと思うこともあると思います。<br/>
さて、その方法について説明します。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 上部との距離を変更します。(初期状態は点線表記になっていますが、赤の実線になるように値を変更してください)<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout8.png" alt="上部マージンを追加" /></p>

<p>これで3.5-inch/4-inchにディスプレイが変更されたとしてもUINavigationBarとUIViewとの距離は一定に保たれます。</p>

<h4>最後に</h4>

<p>いかがだったでしょうか？<br/>
筆者的には完全に手探りな状態で始めたので、わからないことだらけだったのですが、なんとなく理解できてきました。<br/>
現在はiPhone4S以前を利用しているユーザは(日本では？)少なくなってきたと思うのですが、iPadがiPhoneの3.5-inchと同じ比率ですので、Universalアプリを開発するのであれば対応せざるを得ません。<br/>
また、iOS6ユーザはまだまだいると思いますので、仕様として要求される可能性は十分あります。細かい修正が常に要求されるとは思いますが、忍耐強くiOS8, 9, 10&hellip;とリリースされるのを待ちましょう笑<br/>
次回リリースされるiPhoneやiPadまたはリリースされるかもしれない新デバイスがどんなディスプレイの比率になるかもわからないので、今後こういった対応は常に要求されるんでしょうね(汗)</p>

<p>ということでまた次回！<br/>
筆者も継続して勉強します。</p>
]]></content>
  </entry>
  
</feed>
