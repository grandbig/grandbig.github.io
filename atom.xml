<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-08-22T00:31:25+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/08/21/rxswift-1/"/>
    <updated>2016-08-21T18:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/08/21/rxswift-1</id>
    <content type="html"><![CDATA[<h3>RxSwiftとは</h3>

<p>Reactive Extensions(以下、Rx)のSwift版です。<br/>
と一言で言っても、「Rxとはなんぞや？？」となってしまうかと思います。<br/>
(多分に漏れず、筆者もそうです&hellip;)<br/>
そこで、いろいろと調べてみると、</p>

<ul>
<li>「非同期/イベント/時間に関する処理をLINQの形式で簡潔かつ宣言的に記述すること」ができるのが特徴</li>
<li>観測可能 (observable) なシーケンスと LINQ スタイルのクエリ演算子を使って、非同期なイベントベースのプログラムを合成するライブラリ</li>
</ul>


<p>なんて話が出てきます。<br/>
確かに非同期処理はソースコードが複雑になりやすいので、何となくRxは良さそうな気がしてきました。<br/>
今回はまず触って慣れてみようということで見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>RxSwiftでUI</h3>

<p>まずはRxSwiftの書き方を覚えるためにUI関連から見てきましょう。</p>

<h4>サンプル画面</h4>

<p>下記のように画面を作成します。<br/>
<img src="http://grandbig.github.io/images/rxswift_1.png" alt="サンプル画面" /></p>

<h4>RxSwiftのインストール</h4>

<p>下記のように<code>Podfile</code>を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSample</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxSwift</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxCocoa</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSampleTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTests</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">RxSwiftSampleUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTests</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">2.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、<code>pod install</code>を実行します。</p>

<h4>RxSwiftを用いたUIアクションを実装</h4>

<p>下記のようにアクションを実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// UI部品</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleBtn:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleTextField:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">sampleLabel:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 自動unsubscribeのために必要</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ボタンタップアクション</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleBtn</span><span class="p">.</span><span class="n">rx_tap</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">unowned</span> <span class="n">self</span><span class="p">]</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">showAlert</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// テキストフィールドの入力アクション</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleTextField</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="s">&quot;Your Text is \($0)&quot;</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sampleTextField</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;Sample Alert&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;Can you see a sample alert?&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// 特に何もしない</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>
</span><span class='line'>      <span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のUIアクションはあまりにも単純な例であるため、恩恵を受けられている気はしないですね&hellip;<br/>
いつものようにXcodeでアクションを繋げているのと同じ気がする&hellip;</p>

<h3>RxSwiftの公式Exampleを覗いてみる</h3>

<p>先ほどの例ではイマイチ良さがわからなかったので、公式のExampleを覗いてみます。<br/>
公式のExampleは<a href="https://github.com/ReactiveX/RxSwift">GitHub: ReactiveX/RxSwift</a>からダウンロードできます。</p>

<h4>NumbersViewController</h4>

<p>最も簡単なExampleはこれになるかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">NumbersViewController:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number1:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number2:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">number3:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">result:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// 注目！！</span>
</span><span class='line'>      <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">number1</span><span class="p">.</span><span class="n">rx_text</span><span class="p">,</span> <span class="n">number2</span><span class="p">.</span><span class="n">rx_text</span><span class="p">,</span> <span class="n">number3</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span> <span class="p">{</span> <span class="n">textValue1</span><span class="p">,</span> <span class="n">textValue2</span><span class="p">,</span> <span class="n">textValue3</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue1</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue2</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">textValue3</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">description</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">rx_text</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目したいのは<code>Observable.combineLatest</code>です。<br/>
Exampleではこれを利用して一気に3つの<code>UITextField</code>から値を取得して、合計値を計算しています。<br/>
<code>Obsertvable.combineLatest</code>は名前から察することができると思いますが、3つの<code>UITextField</code>のいずれかの値が変わったタイミングで合計値が再計算されます。</p>

<p>これだけでも少し便利な感じが伝わってきました。</p>

<h4>SimpleValidationViewController</h4>

<p>続いて着手しやすいExampleはこちらになりそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">minimalUsernameLength</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">let</span> <span class="n">minimalPasswordLength</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SimpleValidationViewController</span> <span class="o">:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">usernameOutlet:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">usernameValidOutlet:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">passwordOutlet:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">passwordValidOutlet:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">doSomethingOutlet:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValidOutlet</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Username has to be at least \(minimalUsernameLength) characters&quot;</span>
</span><span class='line'>      <span class="n">passwordValidOutlet</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Password has to be at least \(minimalPasswordLength) characters&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 注目！！</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">usernameValid</span> <span class="o">=</span> <span class="n">usernameOutlet</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">minimalUsernameLength</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">passwordValid</span> <span class="o">=</span> <span class="n">passwordOutlet</span><span class="p">.</span><span class="n">rx_text</span>
</span><span class='line'>          <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">minimalPasswordLength</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">everythingValid</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">usernameValid</span><span class="p">,</span> <span class="n">passwordValid</span><span class="p">)</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&amp;&amp;</span> <span class="n">$1</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">passwordOutlet</span><span class="p">.</span><span class="n">rx_enabled</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">usernameValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">usernameValidOutlet</span><span class="p">.</span><span class="n">rx_hidden</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">passwordValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">passwordValidOutlet</span><span class="p">.</span><span class="n">rx_hidden</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">everythingValid</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">doSomethingOutlet</span><span class="p">.</span><span class="n">rx_enabled</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">doSomethingOutlet</span><span class="p">.</span><span class="n">rx_tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="k">in</span> <span class="n">self</span><span class="o">?</span><span class="p">.</span><span class="n">showAlert</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">alertView</span> <span class="o">=</span> <span class="n">UIAlertView</span><span class="p">(</span>
</span><span class='line'>          <span class="nl">title:</span> <span class="s">&quot;RxExample&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">message:</span> <span class="s">&quot;This is wonderful&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">delegate:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">cancelButtonTitle:</span> <span class="s">&quot;OK&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">alertView</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目したいのは<code>shareReplay(1)</code>という記述です。<br/>
このExampleでは、<br/>
<code>username</code>のバリデーションをクリアしていれば、<code>passwordOutlet.rx_enabled</code>と<code>usernameValidOutlet.rx_hidden</code>の2つを実行するように実装されています。</p>

<p>通常だと、<code>usernameValid</code>が2回実行されてしまうところを<code>shareReplay(1)</code>をつけることで、最適な回数だけ実行してくれます。<br/>
詳しくは、<a href="http://qiita.com/kazu0620/items/bde4a65e82a10bd33f88">hareReplayをちゃんと書いてお行儀良くストリームを購読しよう</a>を読むと良いでしょう。</p>

<p>ここまで来ると<code>RxSwift</code>の有効性を許容せざるを得ませんね。</p>

<h3>まとめ</h3>

<p>今回簡単に触っただけでも、Rxはかなり有効なものであると感じました。<br/>
非同期処理や互いに関連性を持つ複雑な処理を実装する際にはぜひRxを使ってみたいと思いました。</p>

<p>本当はもっとExampleを追っていきたいのですが、一旦ここまでとさせて頂きます。<br/>
(単なる時間切れなので、続きは必ず書きたいを思っています。)</p>

<p>ということで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://github.com/ReactiveX/RxSwift">GitHub: ReactiveX/RxSwift</a></li>
<li><a href="http://qiita.com/nakailand/items/8b54dc9b4b39b0809c57">RxSwiftの道標</a></li>
<li><a href="http://qiita.com/usamik26/items/2bbd0b8d304ab42b2279">RxSwift で UIKit を扱う基本</a></li>
<li><a href="http://okapies.hateblo.jp/entry/2015/03/04/031148">関数型プログラマのための Rx 入門（前編）</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift ExpressでAjax通信してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/31/swift-express-2/"/>
    <updated>2016-07-31T23:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/31/swift-express-2</id>
    <content type="html"><![CDATA[<h3>Swift ExpressでPOSTリクエスト投げてみよう！</h3>

<p>さて、本日は<a href="https://github.com/crossroadlabs/Express">Swift Express</a>の続きを試してみます。<br/>
<a href="http://grandbig.github.io/blog/2016/07/10/swift-express/">前回</a>はインストール方法とデフォルト画面の表示までを紹介しましたが、<br/>
今回はAjax通信によるPOSTリクエストを投げてみたいと思います。</p>

<h4>サーバサイドの対応</h4>

<p>まずは、サーバサイドの準備です。<br/>
<code>main.swift</code>を修正しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Express</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">app</span> <span class="o">=</span> <span class="n">express</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">views</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">StencilViewEngine</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">ここを追加</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">views</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">JsonView</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;/assets/:file+&quot;</span><span class="p">,</span> <span class="nl">action:</span> <span class="n">StaticAction</span><span class="p">(</span><span class="nl">path:</span> <span class="s">&quot;public&quot;</span><span class="p">,</span> <span class="nl">param:</span><span class="s">&quot;file&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">request:</span><span class="n">Request</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">,</span> <span class="nl">context:</span> <span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="o">:</span> <span class="s">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s">&quot;swift&quot;</span><span class="o">:</span> <span class="s">&quot;Swift&quot;</span><span class="p">,</span> <span class="s">&quot;express&quot;</span><span class="o">:</span> <span class="s">&quot;Express!&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">ここを追加</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">&quot;/:param&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">request:</span><span class="n">Request</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">Action</span><span class="o">&lt;</span><span class="n">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="s">&quot;ok&quot;</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="o">:</span> <span class="s">&quot;Post Request Succesfully&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Action</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">JsonView</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nl">context:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">9999</span><span class="p">).</span><span class="n">onSuccess</span> <span class="p">{</span> <span class="n">server</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Express was successfully launched on port&quot;</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>app.views.register(JsonView())</code>を追加することで、JSON形式のデータを返却できるようになります。<br/>
また、返却レスポンスは<code>dictionary</code>型で書けばOKなようです。</p>

<h4>クライアントサイドの対応</h4>

<p>続いて、クライアントサイドの準備です。<br/>
手っ取り早くjQuery使いましょう。<br/>
<a href="https://jquery.com/">こちらのページ</a>から最新のjQueryをダウンロードしてきます。</p>

<p>そして、<code>index.js</code>をさくっと作っちゃいましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#touch&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Ajax通信</span>
</span><span class='line'>      <span class="nx">ajax</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">ajax</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://localhost:9999/1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;error!!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらjsファイルを読み込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>// index.stencil
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>  <span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;https://fonts.googleapis.com/css?family=Source+Sans+Pro:700italic,700&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;/assets/css/main.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span> <span class="na">src=</span><span class="s">&quot;/assets/logo.png&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span> <span class="nt">&lt;i&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;swift&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;/i&gt;&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;touch&quot;</span><span class="nt">&gt;</span>ここをタッチ！！<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                                                          
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/js/jquery-3.1.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/js/index.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけで下図のようにPOSTリクエストが通りました。</p>

<p><img src="http://grandbig.github.io/images/swift-express-3.png" alt="POSTリクエスト" /></p>

<p>というところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitでリモートにPushした内容を取り消したい！！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/16/git-reset/"/>
    <updated>2016-07-16T22:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/16/git-reset</id>
    <content type="html"><![CDATA[<h3>SourceTreeでgit resetを使いこなそう！</h3>

<p>さて、本日は <strong>Git</strong> について書きます。<br/>
皆さんは、GitでリモートにPushした内容を取り消したくなることがありませんでしょうか？<br/>
そんなときに利用するのが<code>git reset</code>コマンドです。</p>

<p>リモートにPushした内容ということは自分だけの範疇では収まらないため、他の人に影響が出るかもしれません。<br/>
それって考えてみると非常に怖いですよね&hellip;。<br/>
しかし、どうしてもリモートの内容を修正したいことが出てきます。<br/>
今回はそんな不安を跳ね飛ばすべく実際に練習してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>git reset</h3>

<p>今回扱うGitのRepositoryはこちらです。<br/>
<img src="http://grandbig.github.io/images/git_reset_1.png" alt="Git Repository" /></p>

<p>では実際に<code>git reset</code>を実行してみましょう。</p>

<h4>git reset &mdash;soft</h4>

<p>まずは<code>git reset --soft</code>を実行してみます。<br/>
SourceTreeでは下記の手順で実行します。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Soft</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_2.png" alt="Softモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>master</code>に反映した分を別ブランチに持って行きたい場合は別ブランチを切って、そちらにコミットすれば良いです。</p>

<p><img src="http://grandbig.github.io/images/git_reset_3.png" alt="別ブランチに反映" /></p>

<p>続いて、リモートの<code>master</code>からプッシュ分を取り除くためには、ローカルの<code>master</code>の状態をプッシュしなくてはなりません。<br/>
SourceTreeでは強制プッシュはデフォルトでOFFになっているため、設定を変更する必要があります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_4.png" alt="SourceTreeで強制プッシュをONに変更" /></p>

<p>4．強制プッシュを実行する</p>

<p>これにより、Gitの状態は下図のようになります。<br/>
<img src="http://grandbig.github.io/images/git_reset_5.png" alt="Git Repositoryの結果" /></p>

<h4>git reset &mdash;mixed</h4>

<p>続いて<code>git reset --mixed</code>を実行してみます。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Mixed</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_6.png" alt="Mixedモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>soft</code>と異なるのは <strong>コミットだけでなくaddも取り除ける</strong> ということです。</p>

<p><img src="http://grandbig.github.io/images/git_reset_7.png" alt="mixedを実行した状態" /></p>

<p>もちろん<code>soft</code>のときと同様に別ブランチに内容を反映させることができます。</p>

<p><img src="http://grandbig.github.io/images/git_reset_8.png" alt="別ブランチに反映" /></p>

<p>4．強制プッシュを実行する</p>

<p>強制プッシュ実行後は下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_9.png" alt="Git Repositoryの結果" /></p>

<h4>git reset &mdash;hard</h4>

<p>最後に<code>git reset --hard</code>を実行してみます。</p>

<p>1．元に戻したいポイントで右クリック<br/>
2．「このコミットまでmasterを元に戻す」を選択<br/>
3．モードで <strong>Hard</strong> を選択する</p>

<p><img src="http://grandbig.github.io/images/git_reset_10.png" alt="Hardモード" /></p>

<p>これでローカル上でコミット前の<code>master</code>に戻せます。<br/>
<code>soft</code>や<code>mixed</code>と異なり、作業内容が一切削除されます。</p>

<p><img src="http://grandbig.github.io/images/git_reset_11.png" alt="hardを実行した状態" /></p>

<p>4．強制プッシュを実行する</p>

<p>強制プッシュ実行後は下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/git_reset_9.png" alt="Git Repositoryの結果" /></p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
通常はあまりやりたくない操作ではありますが、必要となるタイミングは必ずくるはずなので知っておいて損はないでしょう。<br/>
筆者も早速3連休明けから使いそうな予感が&hellip;。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Expressを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/10/swift-express/"/>
    <updated>2016-07-10T22:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/10/swift-express</id>
    <content type="html"><![CDATA[<h3>今注目のサーバーサイドSwift</h3>

<p>本日はサーバーサイドSwiftのWebフレームワークの1つである<a href="https://github.com/crossroadlabs/Express">Swift Express</a>を紹介したいと思います。<br/>
近年、AppleからSwiftのOSS化が発表されたことで一気に動き出したのがGitHub上でのWebフレームワーク作成合戦です。<br/>
筆者が知っているだけでも、</p>

<ul>
<li><a href="https://github.com/PerfectlySoft/Perfect">Perfect</a></li>
<li><a href="https://github.com/qutheory/vapor">Vapor</a></li>
<li><a href="https://github.com/IBM-Swift/Kitura-Starter-Bluemix">Kitura</a></li>
<li><a href="https://github.com/slimane-swift">Sliman</a></li>
</ul>


<p>などが上げられます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>そんな中、筆者の目に止まったのが、 <strong>Swift Express</strong> でした。<br/>
本ブログでも度々 <strong>Node.js</strong> を触ったことがあると述べてきたように、筆者は <strong>Node.js</strong> でサーバサイド実装の経験があります。<br/>
その際に利用していたWebフレームワークに<a href="http://expressjs.com/">Express</a>というものがありました。<br/>
Expressは <strong>Node.js</strong> でいとも簡単にベースとなるサーバサイド実装を提供してくれます。</p>

<p>Swiftの経験はあるものの、サーバサイドSwiftの実装経験がない筆者にとっては『願ってもないWebフレームワークじゃないか！』ということで <strong>Swift Express</strong> に惹かれたのです。<br/>
さて、本日はそんな <strong>Swift Express</strong> を見ていきたいと思います。</p>

<h3>Swift Expressをインストールしよう</h3>

<p>まずは、Swift Expressをインストールしてみます。<br/>
<code>homebrew</code>でインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">brew</span> <span class="nx">tap</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">brew</span> <span class="nx">install</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span>
</span></code></pre></td></tr></table></div></figure>


<p>手順(1)を実行すると、下記のように結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">==&gt;</span> <span class="nx">Tapping</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'><span class="nx">Cloning</span> <span class="nx">into</span> <span class="s1">&#39;/usr/local/Library/Taps/crossroadlabs/homebrew-tap&#39;</span><span class="p">...</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Counting</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Compressing</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">7</span><span class="o">/</span><span class="mi">7</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Total</span> <span class="mi">8</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">reused</span> <span class="mi">6</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">pack</span><span class="o">-</span><span class="nx">reused</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">Unpacking</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">8</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Checking</span> <span class="nx">connectivity</span><span class="p">...</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Tapped</span> <span class="mi">2</span> <span class="nx">formulae</span> <span class="p">(</span><span class="mi">34</span> <span class="nx">files</span><span class="p">,</span> <span class="mf">72.7</span><span class="nx">K</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、手順(2)を実行すると、下記のように結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">from</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">dependencies</span> <span class="k">for</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">:</span> <span class="nx">openssl</span><span class="p">,</span> <span class="nx">cmake</span><span class="p">,</span> <span class="nx">libevent</span><span class="p">,</span> <span class="nx">libevhtp</span><span class="p">,</span> <span class="nx">carthage</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Installing</span> <span class="nx">crossroadlabs</span><span class="o">/</span><span class="nx">tap</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">dependency</span><span class="o">:</span> <span class="nx">openssl</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Downloading</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//homebrew.bintray.com/bottles/openssl-1.0.2h_1.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="err">########################################################################</span> <span class="mf">100.0</span><span class="o">%</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Pouring</span> <span class="nx">openssl</span><span class="o">-</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">2</span><span class="nx">h_1</span><span class="p">.</span><span class="nx">el_capitan</span><span class="p">.</span><span class="nx">bottle</span><span class="p">.</span><span class="nx">tar</span><span class="p">.</span><span class="nx">gz</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="nx">Caveats</span>
</span><span class='line'><span class="nx">A</span> <span class="nx">CA</span> <span class="nx">file</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">bootstrapped</span> <span class="nx">using</span> <span class="nx">certificates</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">system</span>
</span><span class='line'><span class="nx">keychain</span><span class="p">.</span> <span class="nx">To</span> <span class="nx">add</span> <span class="nx">additional</span> <span class="nx">certificates</span><span class="p">,</span> <span class="nx">place</span> <span class="p">.</span><span class="nx">pem</span> <span class="nx">files</span> <span class="k">in</span>
</span><span class='line'>  <span class="err">/usr/local/etc/openssl/certs</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">and</span> <span class="nx">run</span>
</span><span class='line'>    <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">opt</span><span class="o">/</span><span class="nx">openssl</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">c_rehash</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">This</span> <span class="nx">formula</span> <span class="nx">is</span> <span class="nx">keg</span><span class="o">-</span><span class="nx">only</span><span class="p">,</span> <span class="nx">which</span> <span class="nx">means</span> <span class="nx">it</span> <span class="nx">was</span> <span class="nx">not</span> <span class="nx">symlinked</span> <span class="nx">into</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Apple</span> <span class="nx">has</span> <span class="nx">deprecated</span> <span class="nx">use</span> <span class="nx">of</span> <span class="nx">OpenSSL</span> <span class="k">in</span> <span class="nx">favor</span> <span class="nx">of</span> <span class="nx">its</span> <span class="nx">own</span> <span class="nx">TLS</span> <span class="nx">and</span> <span class="nx">crypto</span> <span class="nx">libraries</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Generally</span> <span class="nx">there</span> <span class="nx">are</span> <span class="nx">no</span> <span class="nx">consequences</span> <span class="nx">of</span> <span class="k">this</span> <span class="k">for</span> <span class="nx">you</span><span class="p">.</span> <span class="nx">If</span> <span class="nx">you</span> <span class="nx">build</span> <span class="nx">your</span>
</span><span class='line'>  <span class="nx">own</span> <span class="nx">software</span> <span class="nx">and</span> <span class="nx">it</span> <span class="nx">requires</span> <span class="k">this</span> <span class="nx">formula</span><span class="p">,</span> <span class="nx">you</span><span class="s1">&#39;ll need to add to your</span>
</span><span class='line'><span class="s1"> build variables:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">     LDFLAGS:  -L/usr/local/opt/openssl/lib</span>
</span><span class='line'><span class="s1">     CPPFLAGS: -I/usr/local/opt/openssl/include</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; Summary</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/openssl/1.0.2h_1: 1,691 files, 12M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: cmake</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://homebrew.bintray.com/bottles/cmake-3.6.0.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring cmake-3.6.0.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">==&gt; Caveats</span>
</span><span class='line'><span class="s1">Emacs Lisp files have been installed to:</span>
</span><span class='line'><span class="s1">  /usr/local/share/emacs/site-lisp/cmake</span>
</span><span class='line'><span class="s1">  ==&gt; Summary</span>
</span><span class='line'><span class="s1">  🍺  /usr/local/Cellar/cmake/3.6.0: 2,028 files, 27.8M</span>
</span><span class='line'><span class="s1">  ==&gt; Installing crossroadlabs/tap/swift-express dependency: libevent</span>
</span><span class='line'><span class="s1">  ==&gt; Downloading https://homebrew.bintray.com/bottles/libevent-2.0.22.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring libevent-2.0.22.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/libevent/2.0.22: 53 files, 1.6M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: libevhtp</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://github.com/ellzey/libevhtp/archive/1.2.10.tar.gz</span>
</span><span class='line'><span class="s1">==&gt; Downloading from https://codeload.github.com/ellzey/libevhtp/tar.gz/1.2.10</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">Warning: SHA1 support is deprecated and will be removed in a future version.</span>
</span><span class='line'><span class="s1">Please switch this formula to SHA256.</span>
</span><span class='line'><span class="s1">==&gt; cmake . -DEVHTP_DISABLE_REGEX:STRING=ON -DEVHTP_BUILD_SHARED:STRING=ON -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=/usr/local/Cell</span>
</span><span class='line'><span class="s1">==&gt; make install</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/libevhtp/1.2.10: 9 files, 151.5K, built in 48 seconds</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express dependency: carthage</span>
</span><span class='line'><span class="s1">==&gt; Downloading https://homebrew.bintray.com/bottles/carthage-0.17.2.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">######################################################################## 100.0%</span>
</span><span class='line'><span class="s1">==&gt; Pouring carthage-0.17.2.el_capitan.bottle.tar.gz</span>
</span><span class='line'><span class="s1">🍺  /usr/local/Cellar/carthage/0.17.2: 45 files, 11.9M</span>
</span><span class='line'><span class="s1">==&gt; Installing crossroadlabs/tap/swift-express</span>
</span><span class='line'><span class="s1">==&gt; Cloning https://github.com/crossroadlabs/ExpressCommandLine.git</span>
</span><span class='line'><span class="s1">Cloning into &#39;</span><span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">kato_takahiro</span><span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Caches</span><span class="o">/</span><span class="nx">Homebrew</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">--</span><span class="nx">git</span><span class="s1">&#39;...</span>
</span><span class='line'><span class="s1">remote: Counting objects: 67, done.</span>
</span><span class='line'><span class="s1">remote: Compressing objects: 100% (63/63), done.</span>
</span><span class='line'><span class="s1">remote: Total 67 (delta 21), reused 25 (delta 1), pack-reused 0</span>
</span><span class='line'><span class="s1">Unpacking objects: 100% (67/67), done.</span>
</span><span class='line'><span class="s1">Checking connectivity... done.</span>
</span><span class='line'><span class="s1">Note: checking out &#39;</span><span class="nx">fae821f4d52c9dfb4e4c34ab0a4297ea700c9db1</span><span class="s1">&#39;.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">You are in &#39;</span><span class="nx">detached</span> <span class="nx">HEAD</span><span class="err">&#39;</span> <span class="nx">state</span><span class="p">.</span> <span class="nx">You</span> <span class="nx">can</span> <span class="nx">look</span> <span class="nx">around</span><span class="p">,</span> <span class="nx">make</span> <span class="nx">experimental</span>
</span><span class='line'><span class="nx">changes</span> <span class="nx">and</span> <span class="nx">commit</span> <span class="nx">them</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">discard</span> <span class="nx">any</span> <span class="nx">commits</span> <span class="nx">you</span> <span class="nx">make</span> <span class="k">in</span> <span class="k">this</span>
</span><span class='line'><span class="nx">state</span> <span class="nx">without</span> <span class="nx">impacting</span> <span class="nx">any</span> <span class="nx">branches</span> <span class="nx">by</span> <span class="nx">performing</span> <span class="nx">another</span> <span class="nx">checkout</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">If</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="nx">create</span> <span class="nx">a</span> <span class="k">new</span> <span class="nx">branch</span> <span class="nx">to</span> <span class="nx">retain</span> <span class="nx">commits</span> <span class="nx">you</span> <span class="nx">create</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">may</span>
</span><span class='line'><span class="k">do</span> <span class="nx">so</span> <span class="p">(</span><span class="nx">now</span> <span class="nx">or</span> <span class="nx">later</span><span class="p">)</span> <span class="nx">by</span> <span class="nx">using</span> <span class="o">-</span><span class="nx">b</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">checkout</span> <span class="nx">command</span> <span class="nx">again</span><span class="p">.</span> <span class="nx">Example</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">git</span> <span class="nx">checkout</span> <span class="o">-</span><span class="nx">b</span> <span class="o">&lt;</span><span class="k">new</span><span class="o">-</span><span class="nx">branch</span><span class="o">-</span><span class="nx">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">tag</span> <span class="mf">0.2</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">carthage</span> <span class="nx">update</span> <span class="o">--</span><span class="nx">platform</span> <span class="nx">Mac</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">use</span><span class="o">-</span><span class="nx">binaries</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">build</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Commandant</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Nimble</span> <span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Commandant</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Quick</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">carthage</span> <span class="nx">build</span> <span class="o">--</span><span class="nx">platform</span> <span class="nx">Mac</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">xcodebuild</span> <span class="nx">SYMROOT</span><span class="o">=</span><span class="nx">build</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Caveats</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">app</span> <span class="nx">bundles</span> <span class="nx">were</span> <span class="nx">installed</span><span class="p">.</span>
</span><span class='line'>      <span class="nx">Run</span> <span class="err">`</span><span class="nx">brew</span> <span class="nx">linkapps</span> <span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="err">`</span> <span class="nx">to</span> <span class="nx">symlink</span> <span class="nx">these</span> <span class="nx">to</span> <span class="o">/</span><span class="nx">Applications</span><span class="p">.</span>
</span><span class='line'>      <span class="o">==&gt;</span> <span class="nx">Summary</span>
</span><span class='line'>      <span class="err">🍺</span>  <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">Cellar</span><span class="o">/</span><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span><span class="o">/</span><span class="mf">0.2</span><span class="p">.</span><span class="mi">2</span><span class="o">:</span> <span class="mi">30</span> <span class="nx">files</span><span class="p">,</span> <span class="mf">7.3</span><span class="nx">M</span><span class="p">,</span> <span class="nx">built</span> <span class="k">in</span> <span class="mi">3</span> <span class="nx">minutes</span> <span class="mi">5</span> <span class="nx">seconds</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、見過ごしがちですが、<br/>
最後の方に『<code>brew linkapps swift-express</code> to symlink these to /Applications.』と書かれているので、</p>

<p><code>brew linkapps swift-express</code>を実行しておきましょう。</p>

<p>ここまで来たら、<code>swift-express</code>を実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Available</span> <span class="nx">commands</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bootstrap</span>   <span class="nx">download</span> <span class="nx">and</span> <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="nx">build</span>       <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">help</span>        <span class="nx">Display</span> <span class="nx">general</span> <span class="nx">or</span> <span class="nx">command</span><span class="o">-</span><span class="nx">specific</span> <span class="nx">help</span>
</span><span class='line'><span class="nx">init</span>        <span class="nx">Creates</span> <span class="k">new</span> <span class="nx">Express</span> <span class="nx">application</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">run</span>         <span class="nx">run</span> <span class="nx">Express</span> <span class="nx">project</span>
</span><span class='line'><span class="nx">update</span>      <span class="nx">update</span> <span class="nx">and</span> <span class="nx">build</span> <span class="nx">Express</span> <span class="nx">project</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="nx">version</span>     <span class="nx">Display</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">version</span> <span class="nx">of</span> <span class="nx">Swift</span> <span class="nx">Express</span> <span class="nx">Command</span> <span class="nx">Line</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにコマンド種別が表示されたら、正しく <strong>Swift Express</strong> がインストールされた証拠です。</p>

<h3>Swift Expressのプロジェクトを作ろう！</h3>

<p>Swift Expressのインストールが完了したので、早速プロジェクト作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">init</span> <span class="o">&lt;</span><span class="err">プロジェクト名</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">cd</span> <span class="o">&lt;</span><span class="err">プロジェクト名</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(3)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">bootstrap</span>
</span></code></pre></td></tr></table></div></figure>


<p>手順(1)を実行すると、下記の結果が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cloning</span> <span class="nx">into</span> <span class="s1">&#39;/var/folders/hj/p9y9d00s3sb5nn_x04961z2m0000gn/T/swift-express-827699&#39;</span><span class="p">...</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Counting</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">124</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">remote</span><span class="o">:</span> <span class="nx">Total</span> <span class="mi">124</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">reused</span> <span class="mi">0</span> <span class="p">(</span><span class="nx">delta</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">pack</span><span class="o">-</span><span class="nx">reused</span> <span class="mi">124</span>
</span><span class='line'><span class="nx">Receiving</span> <span class="nx">objects</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">124</span><span class="o">/</span><span class="mi">124</span><span class="p">),</span> <span class="mf">79.66</span> <span class="nx">KiB</span> <span class="o">|</span> <span class="mi">0</span> <span class="nx">bytes</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Resolving</span> <span class="nx">deltas</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">(</span><span class="mi">33</span><span class="o">/</span><span class="mi">33</span><span class="p">),</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Checking</span> <span class="nx">connectivity</span><span class="p">...</span> <span class="nx">done</span><span class="p">.</span>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;init&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、手順(2)で作成したプロジェクトフォルダ配下に移動すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HelloExpress</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Cartfile</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">HelloExpress</span><span class="p">.</span><span class="nx">xcodeproj</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Info</span><span class="p">.</span><span class="nx">plist</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">Package</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">app</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">main</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="nx">dist</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="kr">public</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┣━━</span> <span class="nx">css</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">main</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="nx">logo</span><span class="p">.</span><span class="nx">png</span>
</span><span class='line'>  <span class="err">┗━━</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった形で構成されていることを確認できます。</p>

<p>最後に手順(3)を実行すると、下記の結果が表示されます。<br/>
(ここが最も時間のかかる工程になります。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">***</span> <span class="nx">No</span> <span class="nx">Cartfile</span><span class="p">.</span><span class="nx">resolved</span> <span class="nx">found</span><span class="p">,</span> <span class="nx">updating</span> <span class="nx">dependencies</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Express</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Stencil</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">GRMustache</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">CEVHTP</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">PathToRegex</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Regex</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">TidyJSON</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">BrightFutures</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">PathKit</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">ExecutionContext</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Cloning</span> <span class="nx">Result</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">CEVHTP</span> <span class="nx">at</span> <span class="s2">&quot;0.1.0&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">ExecutionContext</span> <span class="nx">at</span> <span class="s2">&quot;0.3.1&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Result</span> <span class="nx">at</span> <span class="s2">&quot;1.0.3&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">GRMustache</span><span class="p">.</span><span class="nx">swift</span> <span class="nx">at</span> <span class="s2">&quot;bf7d6031d7e0dd862519eaba2b36b2e11a0d25a9&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Regex</span> <span class="nx">at</span> <span class="s2">&quot;0.5.2&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">PathToRegex</span> <span class="nx">at</span> <span class="s2">&quot;0.2.2&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">PathKit</span> <span class="nx">at</span> <span class="s2">&quot;0.6.1&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">BrightFutures</span> <span class="nx">at</span> <span class="s2">&quot;0.4.0&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Stencil</span> <span class="nx">at</span> <span class="s2">&quot;0.5.3&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">Express</span> <span class="nx">at</span> <span class="s2">&quot;0.3.6&quot;</span>
</span><span class='line'><span class="o">***</span> <span class="nx">Checking</span> <span class="nx">out</span> <span class="nx">TidyJSON</span> <span class="nx">at</span> <span class="s2">&quot;1.1.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/Users/</span><span class="o">******</span><span class="cm">/****/</span><span class="nx">HelloExpress</span><span class="o">/</span><span class="nx">Carthage</span><span class="o">/</span><span class="nx">Checkouts</span><span class="o">/</span><span class="nx">Express</span><span class="o">/</span><span class="nx">Express</span><span class="o">/</span><span class="nx">Content</span><span class="p">.</span><span class="nx">swift</span><span class="o">:</span><span class="mi">39</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="nx">warning</span><span class="o">:</span> <span class="nx">use</span> <span class="nx">of</span> <span class="s1">&#39;typealias&#39;</span> <span class="nx">to</span> <span class="nx">declare</span> <span class="nx">associated</span> <span class="nx">types</span> <span class="nx">is</span> <span class="nx">deprecated</span><span class="p">;</span> <span class="nx">use</span> <span class="s1">&#39;associatedtype&#39;</span> <span class="nx">instead</span>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;bootstrap&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでプロジェクトの作成は完了です。</p>

<h3>プロジェクトを実行してみよう！</h3>

<p>先ほど作成したプロジェクトを実行してみたいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 手順(1)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">build</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 手順(2)</span>
</span><span class='line'><span class="nx">swift</span><span class="o">-</span><span class="nx">express</span> <span class="nx">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>早速、ビルドを実行するために手順(1)のコマンドを叩いてください。<br/>
すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Building</span> <span class="nx">HelloExpress</span> <span class="k">in</span> <span class="nx">Debug</span> <span class="nx">mode</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="nx">BUILD</span> <span class="nx">TARGET</span> <span class="nx">HelloExpress</span> <span class="nx">OF</span> <span class="nx">PROJECT</span> <span class="nx">HelloExpress</span> <span class="nx">WITH</span> <span class="nx">CONFIGURATION</span> <span class="nx">Debug</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span> <span class="nx">BUILD</span> <span class="nx">SUCCEEDED</span> <span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Task</span><span class="o">:</span> <span class="s2">&quot;build&quot;</span> <span class="nx">done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>という結果が表示されます。<br/>
問題がなければ<code>BUILD SUCCEEDED</code>が表示されるはずです。</p>

<p>ビルドが成功したら、手順(2)を実行しましょう。<br/>
すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Running</span> <span class="nx">HelloExpress</span><span class="p">...</span>
</span><span class='line'><span class="nx">Express</span> <span class="nx">was</span> <span class="nx">successfully</span> <span class="nx">launched</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9999</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように表示されます。デフォルトでポート番号が <strong>9999</strong> になっていることがわかると思います。<br/>
<code>http://localhost:9999</code>にアクセスしてみると、</p>

<p><img src="http://grandbig.github.io/images/swift-express-1.png" alt="Swift Express TOPページ" /></p>

<p>という画面が得られます。</p>

<p>因みにですが、Xcodeからも<code>Build</code>＆<code>Run</code>はできます。</p>

<p><img src="http://grandbig.github.io/images/swift-express-2.png" alt="XcodeからBuild &amp; Run" /></p>

<h3>Swift Expressの中身を見てみよう！</h3>

<p>最後にざっくり中身のソースを見てみようと思います。<br/>
Swift Expressのメインソースである<code>main.swift</code>を見てみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app/main.swift</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">Express</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (1)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">views</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">StencilViewEngine</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (2)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/assets/:file+&quot;</span><span class="p">,</span> <span class="nx">action</span><span class="o">:</span> <span class="nx">StaticAction</span><span class="p">(</span><span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;public&quot;</span><span class="p">,</span> <span class="nx">param</span><span class="o">:</span><span class="s2">&quot;file&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (3)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nx">request</span><span class="o">:</span><span class="nx">Request</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="nx">Action</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Action</span><span class="o">&lt;</span><span class="nx">AnyContent</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="nx">context</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s2">&quot;swift&quot;</span><span class="o">:</span> <span class="s2">&quot;Swift&quot;</span><span class="p">,</span> <span class="s2">&quot;express&quot;</span><span class="o">:</span> <span class="s2">&quot;Express!&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (4)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9999</span><span class="p">).</span><span class="nx">onSuccess</span> <span class="p">{</span> <span class="nx">server</span> <span class="k">in</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="s2">&quot;Express was successfully launched on port&quot;</span><span class="p">,</span> <span class="nx">server</span><span class="p">.</span><span class="nx">port</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <strong>Node.js</strong> 経験者としてはかなりExpressに酷似してるなと感じます。<br/>
順に追ってみていきます。</p>

<p>(1): 描画エンジンを設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(2): 静的ファイルの格納場所を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(3): リクエストのアクションパスと処理を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// route/index.js</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<p>(4): ポート番号を設定しています。</p>

<p>Node.jsのExpressで言うところの、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bin/www</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">normalizePort</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="s1">&#39;3000&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;listening&#39;</span><span class="p">,</span> <span class="nx">onListening</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onListening</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addr</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bind</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">addr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="o">?</span> <span class="s1">&#39;pipe &#39;</span> <span class="o">+</span> <span class="nx">addr</span>
</span><span class='line'>      <span class="o">:</span> <span class="s1">&#39;port &#39;</span> <span class="o">+</span> <span class="nx">addr</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Listening on &#39;</span> <span class="o">+</span> <span class="nx">bind</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>に該当します。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
これだけNode.jsのExpressに似ているのですから、<br/>
<strong>Swift Express</strong> はこれからサーバサイドSwiftを学んでいく上で強力なWebフレームワークとなるかもしれません。<br/>
新しくNode.jsを学ぶ人も将来的にサーバサイドSwiftを触る機会が出てくるかもしれませんので知っておいて損はないでしょう。<br/>
筆者もこれまら益々注目されるであろうサーバサイドSwiftの情報は追っていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昔関わったNode.jsを思い出してみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/09/remember-node-js/"/>
    <updated>2016-07-09T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/09/remember-node-js</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は久しぶりにNode.jsについて書きたいと思います。<br/>
筆者が本格的にNode.jsを触っていたのは、3〜4年ほど前で、当時は今ほど存在が浸透してはいませんでした。<br/>
それが今やサーバサイドの処理作成の選択肢の1つとして普通に検討される時代になりました。<br/>
正直なところ、最新のNode.jsを追えているわけではないのですが、<br/>
その本質は今も昔も大きくは変わっていないだろうと思いつつ、筆者の経験を元にNode.jsを見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Node.jsとは</h3>

<p>Node.jsは2009年にライアン・ダールによって作成された『JavaScriptをサーバサイドで実行可能にしてくれるプログラム』です。<br/>
JavaScriptエンジンは <strong>Google V8 JavaScript エンジン</strong> を使っています。<br/>
因みに、 <strong>Google V8 JavaScript エンジン</strong> とは、</p>

<ul>
<li>ECMAScript5に準拠</li>
<li>C++で記述されている</li>
<li>スタンドアローンで動作可能</li>
<li>Google Chromeでも使われている</li>
</ul>


<p>というものです。<br/>
これを見ただけでも何となくすごいな〜と思ってしまいますね笑。</p>

<p>Node.jsの公式サイトは<a href="https://nodejs.org/en/">こちら</a>です。<br/>
日本ユーザグループサイトもありますが、今は活動的に更新されていません。</p>

<h3>Node.jsの特徴</h3>

<p>続いて、Node.jsの特徴を見ていきましょう。<br/>
Node.jsの特徴は、何と言っても</p>

<ul>
<li>イベントループモデル</li>
<li>Non-blocking I/O</li>
<li>シングルスレッド</li>
</ul>


<p>ではないでしょうか。<br/>
筆者がNode.jsを触っていた時は正直全く理解していなかったのですが、<br/>
これらこそがNode.jsの本質でしょう。</p>

<h4>イベントループモデル</h4>

<p>イベントループモデルと一言聞くと、「なんぞや！？」となってしまいそうですが、</p>

<ul>
<li>イベントの発火を常に監視しているループ</li>
<li>イベントの発火を受け付けると、イベントキューに格納される</li>
<li>受付順にイベントを処理していく</li>
</ul>


<p>という方式のことです。</p>

<h4>Non-blocking I/O</h4>

<p>I/O処理を受け付けた場合、I/O処理が完了するまで待つ(Blockされる)のが通常です。<br/>
Node.jsではI/O処理を投げつけた間、他にやるべき処理があれば進んで実行してくれます。<br/>
よって <strong>Non-blocking I/O</strong> と呼ばれています。</p>

<h4>シングルスレッド</h4>

<p>言葉のとおりですが、複数のリクエストを1つのスレッドで実行するということです。<br/>
複数スレッドを生成するわけではないため、メモリ消費を抑えることができると言われています。</p>

<h3>Node.jsのメリット/デメリット</h3>

<p>Node.jsが全てのアプリケーションに最適なのかと言うとそんなことは当然ありません。<br/>
Node.jsのメリット/デメリットを理解した上で、採用を検討する必要があるのです。</p>

<h4>Node.jsのメリット</h4>

<p>まずはメリットを見ていきましょう。</p>

<ol>
<li>大量の軽量な同時リクエストを捌くのが得意</li>
<li>NoSQLとの親和性が高い</li>
<li>JavaScriptで書ける</li>
<li>充実したライブラリが存在している</li>
</ol>


<p>筆者の経験に基づくメリットを4つ上げさせて頂きました。</p>

<p>1つ目の <strong>大量の軽量な同時リクエストを捌くのが得意</strong> というメリットですが、<br/>
これはNode.jsの特徴で上げたことが関わってきます。<br/>
Non-blocking I/Oなので、I/Oブロックしないとは言うものの、Node.jsはシングルスレッドなんです。<br/>
なので、1つのイベント処理の中に非常に時間のかかる処理が含まれていると、そこがネックとなってしまい大量のリクエストを待たせてしまいます。<br/>
場合によってはクライアント側で設定したタイムアウト時間を上回り期待した結果をユーザが得られなくなるでしょう。</p>

<p>なので1つのイベント(1回のリクエスト)で非常に重い処理を実行させなくてはならない仕様が求められるサービスには向きません。<br/>
逆に、細かくイベントを分割できて、複数回のリクエストをクライアントから送っても問題のない仕様のサービスには適切と言えます。</p>

<p>2つ目の <strong>NoSQLとの親和性が高い</strong> というメリットですが、<br/>
筆者は主に <strong>MongoDB</strong> と一緒に利用してきました。<br/>
MongoDBはドキュメント指向データベースであるため、JSON型のデータをそのまま突っ込めるため非常に使いやすいのです。<br/>
スキーマレスかつスケールアウトの特徴を存分に活かしたい場合はNoSQLを選択すると思いますが、<br/>
そこから遡ってNode.jsを選択しても良いでしょう。</p>

<p>3つ目と4つ目のメリットですが、<br/>
フロントエンドエンジニアであれば、基本的にはJavaScriptを扱えるという人もたくさんいるかと思います。<br/>
であれば同じ言語のJavaScriptで書けるNode.jsを採用しない手はないでしょう。<br/>
また、MongoDBもNode.jsもJavaScriptにも言えることですが、初心者を割りとすんなり受け入れてくれる土台が整っているため、<br/>
1人でサービス提案時のモック作成をしなくてはならないときなどに最適です。<br/>
(誤解されたくないのが、どの技術も極めるにはかなり大変ということに変わりはないということです。)</p>

<h4>Node.jsのデメリット</h4>

<p>続いてデメリットを見ていきましょう。</p>

<ol>
<li>重いリクエストを捌くのが苦手</li>
<li>コールバック地獄</li>
</ol>


<p>1つ目のデメリットはメリットで書いた内容です。<br/>
2つ目はまさに筆者が3〜4年前に感じていたデメリットです。<br/>
Non-blocking I/Oの特徴を持つ代わりにソースコードを書いた際に複数回ネストすることが少なくありません。<br/>
(サーバダウンを防ぐために<code>try-catch</code>を入れようものなら尚更です。)</p>

<p>ただし、v0.12から<code>yield</code>が追加されましたし、<br/>
今やWebに限らずスマホネイティブの世界でも<code>Promise</code>の利用が珍しくはないため、最早デメリットとも言えなくなったと思われます。</p>

<p>また、筆者的には<br/>
HTML, CSS, JavaScriptや画像などの静的ファイルを返却するようなWebサーバとしての役割はNginxやApacheに任せてしまって良いという感覚です。<br/>
むか〜し、計測したイメージが強く残っているからかもしれませんが&hellip;</p>

<h3>Nodeモジュール</h3>

<p>今も忘れない当時使っていた or 助けられたNodeモジュールについて紹介します。</p>

<h4>Express</h4>

<p>これは最も有名なNodeモジュールではないでしょうか？<br/>
( <strong>Express</strong> の公式サイトは<a href="http://expressjs.com/">こちら</a>です。)</p>

<p><strong>Express</strong> はWebアプリケションフレームワークであり、Webアプリケーションを作成するために必要な機能を提供してくれます。<br/>
このモジュールがあるため、サーバサイドを非常に簡単に作成することができるのです。<br/>
(玄人になればなるほどアンチExpressが多い気もしますが&hellip;)</p>

<h4>node-inspector</h4>

<p>続いて、こちらも使わない人の方が少ないのでは？と思うくらい重要な <strong>node-inspector</strong> について紹介します。<br/>
(GitHubは<a href="https://github.com/node-inspector/node-inspector">こちら</a>です。)</p>

<p>サーバサイドエンジニアはeclipse, IntelliJなどのIDEを利用して開発すると思います。<br/>
IDEを利用する理由は様々ですが、その中の1つにデバッグ機能があります。<br/>
<strong>node-inspector</strong> はまるでフロントエンドを開発しているかのごとく、ブラウザ上でデバッグ機能を提供してくれます。</p>

<h4>forever</h4>

<p>次は、 <strong>forever</strong> の紹介です。<br/>
Node.jsでは想定外のエラーが発生した際にサーバがダウンしてしまいます。<br/>
サーバがダウンし、イベントループが停止してしまうと、クライアント側からのリクエストを受け付けることができません。<br/>
そのため、サーバを再起動する必要があるのですが、これを自動的に実行してくれるモジュールが <strong>forever</strong> です。<br/>
(GitHubは<a href="https://github.com/foreverjs/forever">こちら</a>です。)</p>

<h4>log4js-node</h4>

<p>先ほども説明した通り、プログラムは所詮、人間が作り上げたものなので、想定外なことは起こりえます。<br/>
それに対処するためにエンジニアとしては失敗をただの失敗として放置するのではなく、経験として蓄積し、次に活かすのです。<br/>
その手助けとなるのがログです。</p>

<p><strong>log4js-node</strong> を利用することで、<code>info</code>, <code>debug</code>, <code>warn</code>, <code>error</code>など各種ログを仕込むことが可能となります。</p>

<h4>async</h4>

<p>実は筆者が最も思い出深いモジュールがこの <strong>async</strong> です。<br/>
Node.jsのデメリットで紹介しましたが、筆者がNode.jsをメインで触っていた3〜4年前はまさにコールバック地獄でした。<br/>
また、1回のイベント発火内で非同期処理を繰り返し順番に実行したい要望があり、非常に手を焼きました。<br/>
これを救ってくれたのが <strong>async</strong> なのです。</p>

<p>特に、<code>async.waterfall</code>, <code>async.parallel</code>, <code>async.series</code>, <code>async.eachSeries</code>は必見の価値ありです。<br/>
(GitHubは<a href="https://github.com/caolan/async">こちら</a>です。)</p>

<h4>その他</h4>

<p>その他にも便利なものがたくさん用意されているので必要に応じて利用すると良いでしょう。</p>

<ul>
<li><a href="https://github.com/mochajs/mocha">mocha</a>: Node.jsのためのテストフレームワーク</li>
<li><a href="http://socket.io/">socket.io</a>: WebSocket機能を実装できるモジュール</li>
<li><a href="http://mongoosejs.com/">mongoose</a>: Node.jsからMongoDBを利用するためのモジュール</li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a>: Node.jsからMySQLを利用するためのモジュール</li>
<li><a href="https://github.com/balderdashy/sails">sails</a>: Ruby on RailsライクなMVCフレームワーク</li>
</ul>


<h3>Node.jsを勉強するための近道</h3>

<p>最後にNode.jsの勉強方法について紹介したいと思います。<br/>
筆者的には、まずは <strong>JavaScript</strong> をきちんと学ぶことが必要だと思います。<br/>
クライアントサイドから始めても、サーバサイドから始めても構わないのですが、クライアントサイドからの方が始めやすいのではないでしょうか。</p>

<p>また、サーバサイドでNode.jsというものが何かを学ぶのであれば、<br/>
<a href="http://www.nodebeginner.org/index-jp.html">Nodeビギナーズブック</a>を1回は読んでおくことをオススメします。<br/>
市販されている本を読むよりも本質的な部分を理解できると思います。<br/>
(あと、未だにNode.js関連の本って全然ないので&hellip;。)</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
Node.jsはまだまだ新しい技術ですし、これからもっと学ぶべきことが増えてくることでしょう。<br/>
筆者も極力最新を追えるように精進したいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1103/23/news101_2.html">naveでNode.jsのバージョン管理＆イベントループ詳説 </a></li>
<li><a href="http://www.slideshare.net/shigeki_ohtsu/processnext-tick-nodejs">そうだったのか！ よくわかる process.nextTick() node.jsのイベントループを理解する</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftとJava8でOptional型を比較してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/19/swift-java-optional/"/>
    <updated>2016-06-19T21:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/19/swift-java-optional</id>
    <content type="html"><![CDATA[<h4>SwiftとJava8のOptional型を比較してみよう！</h4>

<p>本日はSwiftとJava8のOptional型について比較してみたいと思います。<br/>
最近チラチラとJava8を見かける機会が多いのですが、Swiftと同じくOptional型という概念があるんだ〜と何となく思っていました。<br/>
が、実際に全く同じというわけではないと思うので比較したいと思ったわけです。<br/>
ということで早速見ていきましょう！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>SwiftのOptional型とは</h5>

<p>まずはSwiftのOptional型から見ていきましょう。<br/>
SwiftはObjective-Cでよく発生していた『思いがけず<code>nil</code>が入ったプロパティにアクセスしてExceptionが発生する』という事象を回避できる <strong>Optional型</strong> という概念があります。<br/>
Swiftでは <strong>Optional型</strong> と <strong>非Optional型</strong> を変数定義時に明示的に利用することでこういったExceptionを回避することが可能なのです。</p>

<ul>
<li>Optional型: 変数に<code>nil</code>を代入することを <strong>許容します</strong>

<ul>
<li>Optional型はデータ型の末尾に <strong>『?』</strong> か <strong>『!』</strong> をつけます

<ul>
<li>『?』: 一般的なOptional型です</li>
<li>『!』: 暗黙的Optional型です</li>
</ul>
</li>
</ul>
</li>
<li>非Optional型: 変数に<code>nil</code>を代入することを <strong>許容しません</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Optional型</span>
</span><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="n">var</span> <span class="nl">fuga:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 非Optional型</span>
</span><span class='line'><span class="n">var</span> <span class="n">piyo</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Optional型から値を取得する方法は</h5>

<p>さて、Optional型の宣言方法は先程話した通りです。<br/>
実際に値を取得する際はOptional型で定義された変数を <strong>アンラップ</strong> する必要があります。</p>

<p>ここで注意したいのが、先に紹介した『!』を使った暗黙的Optional型の場合は <strong>自動的にアンラップする</strong> ので開発者側はアンラップさせる必要がないということです。</p>

<p>アンラップ方法は下記の3通りです。</p>

<ul>
<li>Forced Unwrapping: 変数に『!』をつけます</li>
<li>Optional Binding: <code>if</code>文を利用します</li>
<li>Optional Chaining: 変数に『?』をつけます</li>
</ul>


<p>Forced UnwrappingとOptional Bindeingの例は下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Forced Unwrapping</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">hoge</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional Binding</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">fuga</span> <span class="o">=</span> <span class="n">hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">fuga</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてOptional Chainingの例を書きます。<br/>
まずは下記のようなクラスを定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">Hoge:</span> <span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">func</span> <span class="n">hogehoge</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;hogehogeメソッドを実行しました&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記で定義したクラスの<code>hogehoge</code>メソッドをOptional Chaningを利用して実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span> <span class="n">Hoge</span><span class="o">?</span> <span class="o">=</span> <span class="n">Hoge</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional Chaining</span>
</span><span class='line'><span class="n">hoge</span><span class="o">?</span><span class="p">.</span><span class="n">hogehoge</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにSwiftではコーディングしていく段階でかなり<code>nil</code>に注意する必要があることがわかります。</p>

<h5>Java8のOptional型とは</h5>

<p>次にJava8のOptional型について見ていきましょう！<br/>
Java8ではOptionalを利用することで</p>

<ul>
<li><code>null</code>の可能性がある変数をラップしておくことで、値を安全に取り出せる</li>
<li>実行したメソッドが<code>null</code>を返却する可能性がある場合に、場合分けを短く書ける</li>
</ul>


<p>というメリットがあります。<br/>
では実際に使い方を見ていきましょう！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">hoge</span> <span class="o">=</span> <span class="s">&quot;hoge&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional型にラップする</span>
</span><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hogeOpt</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">hoge</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional型から値を取り出す</span>
</span><span class='line'><span class="c1">// getメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// orElseメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;default data&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// orElseGetメソッドを使う</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hogeOpt</span><span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&quot;default data&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ifPresentメソッドを使う</span>
</span><span class='line'><span class="n">hogeOpt</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span> <span class="n">hoge</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 値があったときにログ出力</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hoge</span><span class="o">);</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を見ると幾つか値の取得方法があることがわかると思います。<br/>
それぞれSwiftの表記に近しいところがあると感じました。</p>

<p>例えば、<code>get</code>メソッドは値が<code>null</code>だった場合に<code>NoSuchElementException</code>を投げます。<br/>
逆に言えば、確実に<code>null</code>が来ない場合の<code>get</code>メソッドが利用できると言えます。<br/>
これはSwiftで言うところの『Forced Unwrapping』です。</p>

<p><code>orElse</code>や<code>orElseGet</code>はSwiftで言うところのnil合体演算子である『??』を利用しているのとほぼ同等です。<br/>
(Swiftであれば<code>let val = hoge ?? "default data"</code>みたいな感じですね。)</p>

<p><code>ifPresent</code>メソッドもSwiftで言うところの『Optional Binding』と言えるでしょう。</p>

<h4>まとめ</h4>

<p>さて如何でしたでしょうか？<br/>
Android Studio 2.2からJava8のラムダ式サポートなんて話も聞こえてきますし、<br/>
スマートフォンのアプリ開発者は今後、SwiftにもJava8にも関わっていく可能性が十分ありえます。<br/>
そうなったときに学習コストが高いな〜と避けるのではなく、案外触ってみると「あれ！？似てる&hellip;」なんてことがあるかもしれません。<br/>
そんな近未来！？を夢見つつブログを書いてみたのでした。<br/>
ということで今日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/maiki055/items/b24378a3707bd35a31a8">どこよりも分かりやすいSwiftの&#8221;?&ldquo;と&rdquo;!&#8221;</a></li>
<li><a href="http://www.task-notes.com/entry/20150708/1436324400">Java8のOptionalの使い方について</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JekninsからGitHubにアップされたiOSプロジェクトをビルドしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/18/ios-jenkins/"/>
    <updated>2016-06-18T22:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/18/ios-jenkins</id>
    <content type="html"><![CDATA[<h4>Jenkins / GitHub / Xcodeを連携させよう！</h4>

<p>さて、今日はJenkinsとGitHubとXcodeの連携について見ていきます。<br/>
筆者はこれまで、手元の自身のMac端末でビルドして、Fabricでアプリを配信することが多かったのですが、最近、<a href="https://deploygate.com/?locale=ja">Deploygate</a>を使う場面が出てきました。<br/>
業界スタンダートな方法なのかわからないものの、JenkinsとDeploygateを連携させてJenkins上でビルドしたアプリをDeploygateから配信することができます。<br/>
そういった筆者にとって新しい機会に恵まれたものの、触ってみた経験がないためわからないことが多々あったりします。<br/>
そこで、今回はローカル環境でJenkins / GitHub / Xcodeを連携させて遊んでみようと思います。</p>

<!-- more -->


<h5>Jenkinsのインストール</h5>

<p>まずは、JenkinsをHomebrewでローカル環境にインストールします。<br/>
<code>brew install jenkins</code>を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="nl">Password:</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">Downloading</span> <span class="nl">http:</span><span class="c1">//mirrors.jenkins-ci.org/war/2.9/jenkins.war</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">Downloading</span> <span class="n">from</span> <span class="nl">http:</span><span class="c1">//ftp.yz.yamagata-u.ac.jp/pub/misc/jenkins/war/2.9/jenkins.war</span>
</span><span class='line'><span class="cp">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">jar</span> <span class="n">xvf</span> <span class="n">jenkins</span><span class="p">.</span><span class="n">war</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">Caveats</span>
</span><span class='line'><span class="nl">Note:</span> <span class="n">When</span> <span class="n">using</span> <span class="n">launchctl</span> <span class="n">the</span> <span class="n">port</span> <span class="n">will</span> <span class="n">be</span> <span class="mf">8080.</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">have</span> <span class="n">launchd</span> <span class="n">start</span> <span class="n">jenkins</span> <span class="n">now</span> <span class="n">and</span> <span class="n">restart</span> <span class="n">at</span> <span class="nl">login:</span>
</span><span class='line'>  <span class="n">brew</span> <span class="n">services</span> <span class="n">start</span> <span class="n">jenkins</span>
</span><span class='line'><span class="n">Or</span><span class="p">,</span> <span class="k">if</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">want</span><span class="o">/</span><span class="n">need</span> <span class="n">a</span> <span class="n">background</span> <span class="n">service</span> <span class="n">you</span> <span class="n">can</span> <span class="n">just</span> <span class="nl">run:</span>
</span><span class='line'>    <span class="n">jenkins</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">Summary</span>
</span><span class='line'><span class="err">🍺</span>  <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">Cellar</span><span class="o">/</span><span class="n">jenkins</span><span class="o">/</span><span class="mf">2.9</span><span class="o">:</span> <span class="mi">6</span> <span class="n">files</span><span class="p">,</span> <span class="mf">66.4</span><span class="n">M</span><span class="p">,</span> <span class="n">built</span> <span class="k">in</span> <span class="mi">59</span> <span class="n">seconds</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jenkinsをこれから使う機会も多いかもしれないので自動起動設定もしちゃいましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">p</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">jenkins</span><span class="o">/*</span><span class="p">.</span><span class="n">plist</span> <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchAgents</span>
</span><span class='line'><span class="n">launchctl</span> <span class="n">load</span> <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchAgents</span><span class="o">/</span><span class="n">homebrew</span><span class="p">.</span><span class="n">mxcl</span><span class="p">.</span><span class="n">jenkins</span><span class="p">.</span><span class="n">plist</span>
</span><span class='line'><span class="n">launchctl</span> <span class="n">start</span> <span class="n">homebrew</span><span class="p">.</span><span class="n">mxcl</span><span class="p">.</span><span class="n">jenkins</span>
</span></code></pre></td></tr></table></div></figure>


<p>本当に起動してるかな〜と心配な方は<code>ps aux | grep jenkins</code>を叩いちゃいましょう！<br/>
すると下記のように表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">java</span> <span class="o">-</span><span class="n">Dmail</span><span class="p">.</span><span class="n">smtp</span><span class="p">.</span><span class="n">starttls</span><span class="p">.</span><span class="n">enable</span><span class="o">=</span><span class="n">true</span> <span class="o">-</span><span class="n">jar</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">jenkins</span><span class="o">/</span><span class="n">libexec</span><span class="o">/</span><span class="n">jenkins</span><span class="p">.</span><span class="n">war</span> <span class="o">--</span><span class="n">httpListenAddress</span><span class="o">=</span><span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">httpPort</span><span class="o">=</span><span class="mi">8080</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Jenkinsの初期登録を完了させよう！</h5>

<p>インストール完了したので、Jenkins上でジョブを作りましょう！<br/>
早速、<code>http://localhost:8080</code>にアクセスしてください。</p>

<p>すると、 <strong>Unlock Jenkins</strong> と大きく書かれた画面が表示されます。<br/>
この画面の表示された指示に従って、管理者パスワードを入力しましょう。
(コマンドは画面に表示された通りにターミナルで叩けばOKです。)</p>

<p><img src="http://grandbig.github.io/images/jenkins-1.png" alt="初期画面" /></p>

<p>続いて、 <strong>Customize Jenkins</strong> 画面に遷移するので、<br/>
<strong>Install suggested plugins</strong> を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/jenkins-2.png" alt="Customize Jenkins" /></p>

<p>そして、ユーザー登録をします。</p>

<p><img src="http://grandbig.github.io/images/jenkins-3.png" alt="ユーザー登録" /></p>

<p>これでJenkinsのトップ画面が表示されます。<br/>
Xcode Pluginがまだインストールされていないので、インストールします。</p>

<p>左メニューから「Jenkinsの管理 > プラグインの管理」を選択します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-6.png" alt="プラグインの管理" /></p>

<p>検索ボックスでXcodeと入力してください。<br/>
<strong>Xcode integration</strong> が見つかりますので、インストールしてください。<br/>
これで必要なプラグインのインストールが完了しました。</p>

<h5>Jenkinsで新規ジョブを作成しよう！</h5>

<p>左メニューから新規ジョブを作成します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-4.png" alt="新規ジョブの作成" /></p>

<p>ジョブ名を入力して、「フリースタイル・プロジェクトのビルド」を選択して、OKを押します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-5.png" alt="ジョブのベースを作成" /></p>

<p>まず、GitHubと連携させましょう。<br/>
JenkinsのジョブにGitのRepository URLを設定します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-7.png" alt="JenkinsでGitのRepository URLを設定" /></p>

<p>ただ単に設定すると403 Errorが出てしまうので、GitHub側を設定します。<br/>
GitHubから取得したいRepositoryを選択します。<br/>
Settings > Webhooks &amp; services > Add Webhook を選択します。<br/>
下記のように設定しましょう！</p>

<p><img src="http://grandbig.github.io/images/jenkins-8.png" alt="Webhooks &amp; services" /></p>

<p>これでJenkins側の403 Errorが解消されるはずです。</p>

<p>続いてビルド情報を入力していきます。</p>

<p>ビルド手順の追加 > 「シェルの実行」を追加します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#!/bin/bash -l</span>
</span><span class='line'><span class="n">pod</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>このタイミングで、<code>.bashrc</code>に<code>export LC_ALL="en_US.UTF-8"</code>を追加しておきましょう。<br/>
(追加しないと『 <strong>invalid byte sequence in US-ASCII</strong> 』が後々発生します。)</p>

<p>ビルド手順の追加 > 「Xcode」を追加します<br/>
設定は下記のようにしてきます。</p>

<p>【Code signing &amp; OS X keychain options】</p>

<p><img src="http://grandbig.github.io/images/jenkins-9.png" alt="Code signing &amp; OS X keychain options" /></p>

<p>【Advanced Xcode build options】</p>

<p><img src="http://grandbig.github.io/images/jenkins-10.png" alt="Advanced Xcode build options" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left">Xcode Schema File: </th>
<th align="center">FacebookLoginSample</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">Xcode Workspace File: </td>
<td align="center">FacebookLoginSample|</td>
</tr>
<tr>
<td></td>
<td align="left">Xcode Project File: </td>
<td align="center">FacebookLoginSample|</td>
</tr>
<tr>
<td></td>
<td align="left">Build output directory: </td>
<td align="center">${WORKSPACE}/build|</td>
</tr>
</tbody>
</table>


<p>　</p>

<h5>Jennkinsでジョブを実行しよう！</h5>

<p>これでジョブを実行してみましょう！<br/>
左メニューから『 <strong>ビルド実行</strong> 』を選択します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-11.png" alt="ビルド実行" /></p>

<p>ビルドを実行すると、ビルド履歴に新たに項目が追加されます。<br/>
詳しいビルド状況を追いたければ、時間部分を選択します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-12.png" alt="ビルド状況の確認" /></p>

<p>そして、画面遷移後の左メニューから『 <strong>コンソール出力</strong> 』を選択します。</p>

<p><img src="http://grandbig.github.io/images/jenkins-13.png" alt="コンソール出力" /></p>

<p>これで最後までログを追うことができます。</p>

<h4>まとめ</h4>

<p>さて如何でしたでしょうか？<br/>
筆者も初めてローカル環境でJenkinsを立ててみましたが、意外とハマリポイントが多かったです。<br/>
証明書周りでもう少し調べてみたいところもあるので、またわかったことがあればブログに書いていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/makoto_kw/items/cbe93d4ebbc35f3b43fd">OS XにJenkinsをHomebrewでセットアップする</a></li>
<li><a href="http://www.buildinsider.net/enterprise/jenkins/001">Jenkinsをインストールして使ってみよう</a></li>
<li><a href="https://github.com/CocoaPods/CocoaPods/issues/639#issuecomment-11483748">invalid byte sequence in US-ASCII</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftとJava8とJavaScriptでreduce / filter / map / flatMap]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/12/filter-map/"/>
    <updated>2016-06-12T21:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/12/filter-map</id>
    <content type="html"><![CDATA[<h4>SwiftとJava8とJavaScriptを比較してみよう！</h4>

<p>本日は前々から気になっていた『SwiftとJava8とJavaScript』の比較をしてみたいと思います。<br/>
と言っても難しいことをやるわけではなく、今回はreduce, filter, map, flatMapメソッドの書き方を比較してみます。</p>

<p>筆者個人としては、どうしてもSwiftやJava8から書き方やメソッドの意味の理解を始めようとすると時間がかかってしまいます。<br/>
なので、JavaScriptから入って比較することで理解が促進することがあるのです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>reduceメソッド</h4>

<p>まずは<code>reduce</code>メソッドです。</p>

<h5>JavaScript</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">reduced</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">previus</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">previous</span> <span class="o">+</span> <span class="nx">current</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Swift</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">reduced</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">previous</span><span class="p">,</span> <span class="n">current</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">previous</span> <span class="o">+</span> <span class="n">current</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java8</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">((</span><span class="n">previous</span><span class="o">,</span> <span class="n">current</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">previous</span> <span class="o">+</span> <span class="n">current</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<h4>filterメソッド</h4>

<p>次に<code>filter</code>メソッドです。</p>

<h5>JavaScript</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">44</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">filtered</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">elem</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [50, 800, 44]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Swift</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">44</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">filtered</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">elem</span> <span class="o">&gt;=</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [50, 800, 44]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java8</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">44</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">filteredList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">elem</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">filteredList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">elem</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [50, 800, 44]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>mapメソッド</h4>

<p>続いて<code>map</code>メソッドです。</p>

<h5>JavaScript</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mapped</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">elem</span> <span class="o">*</span> <span class="nx">elem</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Swift</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">mapped</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">elem</span> <span class="o">*</span> <span class="n">elem</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java8</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">mappedList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">elem</span> <span class="o">*</span> <span class="n">elem</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">mappedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">elem</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>flatMapメソッド</h4>

<p>最後に<code>flatMap</code>メソッドです。<br/>
(と言いつつ、処理の意味的には<code>flatten</code>しか入っていませんね&hellip;)</p>

<h5>JavaScript</h5>

<p>JavaScriptでは標準で<code>flatMap</code>メソッドは実装されていません。<br/>
自作するしかないわけですが、<code>flatMap = flatten + map</code>なので下記のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">listArrayList</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">flatMappedList</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">concat</span><span class="p">.</span><span class="nx">apply</span><span class="p">([],</span> <span class="nx">listArrayList</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Swift</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">listArrayList:</span><span class="p">[</span><span class="n">Int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">let</span> <span class="nl">list1:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="nl">list2:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="nl">list3:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">listArrayList</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span><span class='line'><span class="n">listArrayList</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>
</span><span class='line'><span class="n">listArrayList</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>
</span><span class='line'>                                              
</span><span class='line'><span class="n">let</span> <span class="n">flatMappedList</span> <span class="o">=</span> <span class="n">listArrayList</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">elem</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java8</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">listArrayList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">listArrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list1</span><span class="o">);</span>
</span><span class='line'><span class="n">listArrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
</span><span class='line'><span class="n">listArrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list3</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">flatMappedList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">listArrayList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">elem</span><span class="o">.</span><span class="na">stream</span><span class="o">()).</span><span class="na">forEach</span><span class="o">(</span><span class="n">elem</span> <span class="o">-&gt;</span> <span class="n">flatMappedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">elem</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 結果 -&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>さていかがでしたでしょうか？<br/>
1つの言語を極めれば、何となく他の言語でも書き方がわかるという話を聞いたりすると思うのですが、こういったことの延長戦にある話なんだろうなと思ったりました。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[library not found for -lPods]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/11/cocoapods-error/"/>
    <updated>2016-06-11T22:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/11/cocoapods-error</id>
    <content type="html"><![CDATA[<h4>library not found for -lPods</h4>

<p>最近このエラーにハマりました。<br/>
CocoaPodsで外部ライブラリをインストールして、いざXcodeプロジェクトを開いてビルドをしてみると&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">linker</span> <span class="n">command</span> <span class="n">failed</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="n">use</span> <span class="o">-</span><span class="n">v</span> <span class="n">to</span> <span class="n">see</span> <span class="n">invocation</span><span class="p">)</span>
</span><span class='line'><span class="nl">ld:</span> <span class="n">library</span> <span class="n">not</span> <span class="n">found</span> <span class="k">for</span> <span class="o">-</span><span class="n">lPods</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>なんてエラーが発生して失敗してしまいました。<br/>
はっきり言って、このエラー内容を見ても、<br/>
『CocoaPodsで取り込んだはずのライブラリが見つけられていない』<br/>
ということしかわかりません。</p>

<p>結局どう解決したかというと&hellip;<br/>
プロジェクト内に含まれる<code>libPods.a</code>と<code>libPods-XXX.a</code> (XXX: Target名)を全て削除しました。<br/>
削除しても<code>pod install</code>で問題なくこれらファイルは復活するのでご安心を。</p>

<p>どうも、これらファイルが残った状態だと<code>pod install</code>しても新たにファイルが上書きされるわけではないようなんです。</p>

<p>チーム開発するときはGitに古い<code>libPods.a</code>, <code>libPods-XXX.a</code>が上がっていないか十分に注意しましょう。<br/>
心配な場合は<code>.gitignore</code>に<code>*.xcworkspace</code>と共に<code>libPods.a</code>, <code>libPods-XXX.a</code>を記載しておくのも手かもしれません。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods v1.0.0のメモ]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/04/cocoapods-v1-dot-0/"/>
    <updated>2016-06-04T22:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/04/cocoapods-v1-dot-0</id>
    <content type="html"><![CDATA[<h4>CocoaPodsをv1.0.0にしたらエラーが出てしまった！</h4>

<p>さて、本日はメモ書きです。<br/>
先日、筆者はCocoaPodsのバージョンを <strong>1.0.0</strong> にアップデートしました。<br/>
で、早速、<code>pod install</code>を実行してみたところ、下記のようなエラーが&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="n">he</span> <span class="n">dependency</span> <span class="err">`</span><span class="n">AFNetworking</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mf">2.6.3</span><span class="p">)</span><span class="err">`</span> <span class="n">is</span> <span class="n">not</span> <span class="n">used</span> <span class="k">in</span> <span class="n">any</span> <span class="n">concrete</span> <span class="n">target</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">dependency</span> <span class="err">`</span><span class="n">CocoaLumberjack</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="p">)</span><span class="err">`</span> <span class="n">is</span> <span class="n">not</span> <span class="n">used</span> <span class="k">in</span> <span class="n">any</span> <span class="n">concrete</span> <span class="n">target</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">dependency</span> <span class="err">`</span><span class="n">MagicalRecord</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mf">2.3.2</span><span class="p">)</span><span class="err">`</span> <span class="n">is</span> <span class="n">not</span> <span class="n">used</span> <span class="k">in</span> <span class="n">any</span> <span class="n">concrete</span> <span class="n">target</span><span class="p">.</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>おっと、何だ何だ？？となったわけですが、ググってみたらすぐにわかりました。<br/>
どうやら、Targetにインストール対象を定義することがMUSTになったようなのです。</p>

<p>よって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">AFNetworking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.6.3</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">CocoaLumberjack</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">MagicalRecord</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.3.2</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いていたものを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProject</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AFNetworking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.6.3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">CocoaLumberjack</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">MagicalRecord</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.3.2</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProjectTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AFNetworking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.6.3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">CocoaLumberjack</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">MagicalRecord</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.3.2</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProjectUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AFNetworking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.6.3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">CocoaLumberjack</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">MagicalRecord</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.3.2</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように具体的に指定することが必要となります。<br/>
しかし、共通しているインストール対象を何度も書くのは無駄なので&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">def</span> <span class="n">common_pods</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AFNetworking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.6.3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">CocoaLumberjack</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.9.2</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">MagicalRecord</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span><span class="mf">2.3.2</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProject</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">common_pods</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProjectTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">common_pods</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">MyProjectUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">common_pods</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>と簡略化することができます。便利ですね！<br/>
ということで今更かつ簡単なメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Bootでリダイレクト先にパラメータを渡す方法]]></title>
    <link href="http://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot/"/>
    <updated>2016-05-28T20:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot</id>
    <content type="html"><![CDATA[<h4>RedirectAttributesを使ってみよう！</h4>

<p>さて、本日は久々にSpring Bootの話です。</p>

<p>皆さんはWebアプリケーションを作る中で、「リダイレクト先にパラメータを渡したい！」なんてことはありませんでしょうか？<br/>
筆者は先日、そのような状況に鉢合わせたのですが、ググってみてもなかなか求めている答えが見つからず、少々悩んでしまいました。<br/>
GETリクエストであればリダイレクト後にURLからリクエストパラメータが取得できますが、<br/>
POSTリクエストやURLにリクエストパラメータを表示するわけにいかない仕様の場合はそうもいきません。</p>

<p>そんなときに役に立つのが<code>RedirectAttributes</code>です。<br/>
では、早速、使い方を見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h4>リダイレクト先に文字列を送る</h4>

<p>まずは単純な例から見ていきましょう。<br/>
下記はリダイレクト先に文字列をパラメータとして渡す例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// HelloController</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMappinf</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">form</span><span class="o">(</span><span class="n">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashSttribute</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;redirect:/redirectSample&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/redirectSample&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">sample</span><span class="o">(</span><span class="nd">@ModelAttributes</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;name: &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;sample&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際に動かしてみれば、正しくログが出力されることを確認できるでしょう。<br/>
上記で<code>return "sample";</code>としているのは単なる例なので、適切なtemplateを指定してあげてください。</p>

<h4>リダイレクト先にオブジェクトを送る</h4>

<p>続いて、パラメータをまとめて送るパターンです。<br/>
今回は下記のように定義された<code>MyData</code>を送ってみましょう。<br/>
※ソースを簡単にするために<code>build.gradle</code>に<code>compile("org.projectlombok:lombok:1.16.6")</code>を設定して<code>@Data</code>を利用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MyData.java</span>
</span><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyData</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">memo</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、実際にパラメータを送ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// HelloController</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">form</span><span class="o">(</span><span class="n">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;memo&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">memo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// MyDataについては後述します</span>
</span><span class='line'>      <span class="n">MyData</span> <span class="n">mydata</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyData</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">memo</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ModelMap</span> <span class="n">modelMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelMap</span><span class="o">();</span>
</span><span class='line'>      <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;mydata&quot;</span><span class="o">,</span> <span class="n">mydata</span><span class="o">);</span>
</span><span class='line'>      <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;model&quot;</span><span class="o">,</span> <span class="n">modelMap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;redirect:/redirectSample&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/redirectSample&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">sample</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;model&quot;</span><span class="o">)</span><span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">MyData</span> <span class="n">mydata</span> <span class="o">=</span> <span class="n">modelMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;mydata&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">mydata</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">memo</span> <span class="o">=</span> <span class="n">mydata</span><span class="o">.</span><span class="na">getMemo</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;name: &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;, memo: &quot;</span> <span class="o">+</span> <span class="n">memo</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;sample&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>オブジェクトとしてパラメータを送るには<code>ModelMap</code>に一度格納する必要があります。<br/>
パラメータを受け取ったあとに型変換して取り出せばOKです。</p>

<h4>RedirectAttributesにおけるaddAttributeとaddFlashAttributeの違い</h4>

<p>さて、今回は<code>RedirectAttributes</code>の<code>addFlashAttribute</code>を利用しましたが、<code>RedirectAttributes</code>には<code>addAttribute</code>というメソッドも存在します。<br/>
ではなぜ<code>addFlashAttribute</code>を利用したのか参考までに書いておきます。</p>

<h5>RedirectAttributesのaddAttributeはリダイレクト先に文字列としてパラメータを送る</h5>

<p>大きな違いは<code>addFlashAttribute</code>のように<code>ModelMap</code>型でパラメータを送れません。<br/>
よって、複数のパラメータを送るには1つずつパラメータをセットするしか方法がありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// addAttributeの例</span>
</span><span class='line'><span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;hogehoge&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;memo&quot;</span><span class="o">,</span> <span class="s">&quot;fugafuga&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>RedirectAttributesのaddAttributeはリダイレクト先でのパラメータの受取り方が異なる</h5>

<p>こちらも大きな違いとなりますが、<code>addFlashAttribute</code>のときのように<code>@ModelAttribute</code>を使ってパラメータを受け取ることができません。<br/>
<code>addAttribute</code>の場合、<code>@RequestParameter</code>を使ってパラメータを受取ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// addAttributeの例</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/redirectSample&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">sample</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;memo&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">memo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>リロード時の挙動が異なる</h5>

<p>最後になりますが、<br/>
<code>addAttribute</code>と<code>addFlashAttribute</code>ではリダイレクト後にリロードすると挙動が異なります。<br/>
<code>addAttribute</code>ではGETリクエストとしてURLの末尾に<code>?name=hogehoge&amp;memo=fugafuga</code>という形でパラメータが渡されるため、リロードをしてもパラメータを受け取ることができます。</p>

<p>しかし、<code>addFlashAttribute</code>では<code>flashMap</code>を利用したパラメータ渡しとなっています。<br/>
よって、リダイレクト後は<code>flashMap</code>からパラメータが残らないため、何もパラメータを受け取ることはできなくなります。</p>

<p>いかがでしたでしょうか？<br/>
筆者にとってもSpring Bootに慣れない日々が続きますが、気づいたことや学んだことについてはブログにまとめていきたと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bolts-Swiftを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/05/15/bolts-swift/"/>
    <updated>2016-05-15T22:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/05/15/bolts-swift</id>
    <content type="html"><![CDATA[<h4>SwiftでBolts-Swiftライブラリを使ってみよう</h4>

<p>これまで、<code>BrightFuture</code>, <code>PromiseKit</code>とPromiseライブラリについて見てきましたが、本日はFacebook製のPromiseライブラリである<a href="https://github.com/BoltsFramework/Bolts-Swift">Bolts-Swift</a>を試してみたいと思います。</p>

<p><code>Bolts</code>はこれまでもObjective-Cコードで利用されてきた有名ライブラリですが、<br/>
2016-03-18にSwift版 v1.0.0(<code>Bolts-Swift</code>) が公開されました。<br/>
※ Objective-C版は<a href="https://github.com/BoltsFramework/Bolts-ObjC">Bolts-ObjC</a>です。<br/>
※ 本記事執筆時点ではv1.1.0が最新となっています。</p>

<p>Facebookのエンジニアが開発しているため、Facebook SDKを利用する場合でも内部で<code>Bolts-ObjC</code>が利用されています。<br/>
現在、Facebook SDKがObjective-Cで書かれているため、今後Swift化される際に、<code>Bolts-Swift</code>が使われることになる可能性が高いと思います。<br/>
知っておいて損はないでしょう。</p>

<p>ということで早速、使い方を見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Bolts-Swiftのインストール</h4>

<p>CocoaPodsでインストールします。</p>

<p><strong>1．Podfileに下記を記載</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">source</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">8.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>     <span class="c1">// (1)</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;BoltsSwiftSample&quot;</span> <span class="k">do</span>   <span class="c1">// (2)</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Bolts</span><span class="o">-</span><span class="n">Swift</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Bolts-Swift</code>の場合は(1)と(2)が必須書式となります。<br/>
(書かない場合、インストール時にErrorが発生します。)</p>

<p><strong>2．<code>pod install</code>を実行</strong></p>

<p><strong>3．処理の実装</strong></p>

<p>ライブラリのインストールが完了したら、処理を書いていきましょう。</p>

<p><code>Bolts-Swift</code>を適用したメソッドを用意します。<br/>
※ 非同期処理を含むサンプルメソッドです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="n">p_task</span><span class="p">(</span><span class="nl">msg:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Task</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">taskCompletionSource</span> <span class="o">=</span> <span class="n">TaskCompletionSource</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>          <span class="n">taskCompletionSource</span><span class="p">.</span><span class="n">setResult</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>                          
</span><span class='line'>  <span class="k">return</span> <span class="n">taskCompletionSource</span><span class="p">.</span><span class="n">task</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように定義することで、下記のように呼び出すことが可能となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">bt</span> <span class="o">=</span> <span class="n">BoltsTask</span><span class="p">()</span>
</span><span class='line'><span class="n">bt</span><span class="p">.</span><span class="n">p_task</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">).</span><span class="n">continueOnSuccessWith</span> <span class="p">{</span> <span class="p">(</span><span class="n">msg1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Task</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">bt</span><span class="p">.</span><span class="n">p_task</span><span class="p">(</span><span class="s">&quot;Good Evening&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">continueOnSuccessWith</span> <span class="p">{</span> <span class="p">(</span><span class="n">msg2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Task</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">bt</span><span class="p">.</span><span class="n">p_task</span><span class="p">(</span><span class="s">&quot;Good Bye&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実行すれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Hello</span>
</span><span class='line'><span class="n">Good</span> <span class="n">Evening</span>
</span><span class='line'><span class="n">Good</span> <span class="n">Bye</span>
</span></code></pre></td></tr></table></div></figure>


<p>と結果が得られます。<br/>
以上のように『ネストを浅く』、『非同期処理を直列的に書く』ことができます。</p>

<p><code>BrightFuture</code>や<code>PromiseKit</code>を試しに使ってきたことで思ったのが、同様の書式で書けることが多いということです。<br/>
一見、GitHub上のReadmeを読んでもわからないと思うライブラリがあった際には、用途が似ているライブラリのReadmeを見てみるのも1つの手段かもしれません。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでFacebookログインを始めよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/05/14/facebook-login-for-swift/"/>
    <updated>2016-05-14T15:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/05/14/facebook-login-for-swift</id>
    <content type="html"><![CDATA[<h4>Facebookログインの実装方法</h4>

<p>公式ページの<a href="https://developers.facebook.com/">facebook for developers</a>を見るのが、一番良いと思いますが、<br/>
あちこちページを飛ばされるので、順を追って説明することにします。<br/>
※ 本記事で利用しているFacebook SDKは <strong>v4.11.0</strong> です。</p>

<p><strong>1．Facebookログインを選択する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_1.png" alt="Facebookログインを選択" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p><strong>2．Get Startedを選択する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_2.png" alt="Get Startedを選択" /></p>

<p><strong>3．iOSを選択する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_3.png" alt="iOSを選択" /></p>

<p><strong>4．利用手順の概要を読む</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_4.png" alt="利用手順の概要を読む" /></p>

<p><strong>5．Facebookアプリを作成する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_5.png" alt="Facebookアプリを作成" /></p>

<p>※ CocoaPodsでFacebook SDKを取り込むので、ダウンロードはしません。</p>

<p>「新しいアプリを作成」を選択すると、アプリ作成画面が表示されるため、任意の値を入力してください。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_6.png" alt="任意の値を入力" /></p>

<p><strong>6．作成したFacebookアプリにiOSアプリ用の設定を追加する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_7.png" alt="一連のiOSアプリ用設定手順" /></p>

<p><img src="http://grandbig.github.io/images/facebook_login_8.png" alt="追加ボタンを選択" /></p>

<p><img src="http://grandbig.github.io/images/facebook_login_9.png" alt="iOSを選択" /></p>

<p>追加された設定項目に値を入力して、「変更を保存」ボタンを選択します。</p>

<ul>
<li>バンドルIDを入力</li>
<li>シングルサインオンボタンをONに変更</li>
</ul>


<p><img src="http://grandbig.github.io/images/facebook_login_10.png" alt="設定項目に値を入力" /></p>

<p>続いて、詳細設定でネイティブアプリでの利用を許可します。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_18.png" alt="詳細設定" /></p>

<p><strong>7．Xcodeプロジェクトを用意する</strong></p>

<p>当然のことながら、Xcodeプロジェクトを作成します。</p>

<p><strong>8．<code>Podfile</code>を作成する</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">source</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">8.0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Facebook</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">FBSDKCoreKit</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">FBSDKLoginKit</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">FBSDKShareKit</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>9．<code>pod install</code>を実行する</strong></p>

<p><strong>10．Xcodeプロジェクトに必要な設定を追加</strong></p>

<p>必要な設定値を見るために、<br/>
下図のようにFacebookアプリページのiOS設定項目上の <strong>クイックスタート</strong> を選択します。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_11.png" alt="クイックスタートを選択" /></p>

<p>すると、下図のページに遷移します。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_12.png" alt="クイックスタートページ" /></p>

<p>この中で重要なのが <strong>Configure your info.plist</strong> です。<br/>
ここに書かれた設定値をXcodeに追加します。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_13.png" alt="Configure your info.plist" /></p>

<p><img src="http://grandbig.github.io/images/facebook_login_14.png" alt="Xcodeに設定値を追加" /></p>

<p><strong>11．XcodeプロジェクトにiOS9 SDK対応の設定を追加</strong></p>

<p>iOS9 SDKよりHTTP通信が非推奨となったため、ATS設定を追加する必要があります。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_15.png" alt="XcodeにATS設定を追加" /></p>

<p><strong>12．Facebookアプリをホワイトリストに追加する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_16.png" alt="ホワイトリストへの追加" /></p>

<p><strong>13．Bridge-Headerファイルを追加</strong></p>

<p>Swift実装なので、Bridge-Headerファイルを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FacebookLoginSample-Bridging-Header.h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef FacebookLoginSample_Bridging_Header_h</span>
</span><span class='line'><span class="cp">#define FacebookLoginSample_Bridging_Header_h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;FBSDKCoreKit/FBSDKCoreKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;FBSDKLoginKit/FBSDKLoginKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* FacebookLoginSample_Bridging_Header_h */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>14．<code>AppDelegate.swift</code>に<code>FBSDKApplicationDelegate</code>への接続処理を追加</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">NSObject:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FBSDKApplicationDelegate</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">().</span><span class="n">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="nl">didFinishLaunchingWithOptions:</span> <span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">openURL</span> <span class="nl">url:</span> <span class="n">NSURL</span><span class="p">,</span> <span class="nl">sourceApplication:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">annotation:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">FBSDKApplicationDelegate</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">().</span><span class="n">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span>
</span><span class='line'>                                                               <span class="nl">openURL:</span> <span class="n">url</span><span class="p">,</span>
</span><span class='line'>                                                               <span class="nl">sourceApplication:</span> <span class="n">sourceApplication</span><span class="p">,</span>
</span><span class='line'>                                                               <span class="nl">annotation:</span> <span class="n">annotation</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>15．Facebook SDKが機能しているか確認</strong></p>

<p>Facebook SDKを搭載したつもりでも、一切機能していないと困りますよね？<br/>
ということでログ収集機能を使ってTestできたりします。<br/>
様々なログ収集が可能なようですが、公式ページにあるように最も簡単なアプリ起動ログ収集を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">applicationDidBecomeActive</span><span class="p">(</span><span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">FBSDKAppEvents</span><span class="p">.</span><span class="n">activateApp</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.facebook.com/analytics?__aref_src=devsite&amp;__aref_id=docs_ios_getting_started">アプリ用Analyticsダッシュボード</a>に遷移します。<br/>
ログを確認したいアプリ > アクティビティー > イベントを選択します。<br/>
すると「App Launches」の件数を確認することができます。</p>

<p><strong>16．ログインボタンを追加</strong></p>

<p>公式ではソースコードから追加しているので、その想定で書いていますが、もちろんStoryboardも利用できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">FBSDKLoginButtonDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">loginBtn</span> <span class="o">:</span> <span class="n">FBSDKLoginButton</span> <span class="o">=</span> <span class="n">FBSDKLoginButton</span><span class="p">()</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">loginBtn</span><span class="p">)</span>
</span><span class='line'>      <span class="n">loginBtn</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">center</span>
</span><span class='line'>      <span class="n">loginBtn</span><span class="p">.</span><span class="n">readPermissions</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;public_profile&quot;</span><span class="p">,</span> <span class="s">&quot;email&quot;</span><span class="p">,</span> <span class="s">&quot;user_friends&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">loginBtn</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">loginButton</span><span class="p">(</span><span class="nl">loginButton:</span> <span class="n">FBSDKLoginButton</span><span class="o">!</span><span class="p">,</span> <span class="n">didCompleteWithResult</span> <span class="nl">result:</span> <span class="n">FBSDKLoginManagerLoginResult</span><span class="o">!</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;ログイン処理を実行&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// エラーが発生した場合</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;Process Error !&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="n">isCancelled</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ログインをキャンセルした場合</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;User Cancelled&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// その他</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;Login Succeeded&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">loginButtonDidLogOut</span><span class="p">(</span><span class="nl">loginButton:</span> <span class="n">FBSDKLoginButton</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;ログアウト処理を実行&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果、下図のような遷移が可能となります。</p>

<p><img src="http://grandbig.github.io/images/facebook_login_17.png" alt="Facebookログイン" /></p>

<h4>Facebookログインボタンのカスタム化</h4>

<p>因みに、Facebookログインボタンをカスタム化する方法を説明します。<br/>
折角なので、Storyboardでの方法として載せておきましょう。</p>

<p><strong>1．Storyboardにボタンを配置する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_19.png" alt="Storyboardにボタンを配置" /></p>

<p><strong>2．StoryboardからViewControllerにボタンアクションを接続する</strong></p>

<p><img src="http://grandbig.github.io/images/facebook_login_20.png" alt="ボタンアクションの接続" /><br/>
※ 上記キャプチャでは既に下記3の処理を書いてあるけど悪しからず&hellip;</p>

<p><strong>3．ログインアクションを追加</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">loginByFacebookID</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">loginManager:</span> <span class="n">FBSDKLoginManager</span> <span class="o">=</span> <span class="n">FBSDKLoginManager</span><span class="p">()</span>
</span><span class='line'>  <span class="n">loginManager</span><span class="p">.</span><span class="n">logInWithReadPermissions</span><span class="p">([</span><span class="s">&quot;public_profile&quot;</span><span class="p">,</span> <span class="s">&quot;email&quot;</span><span class="p">,</span> <span class="s">&quot;user_friends&quot;</span><span class="p">],</span> <span class="nl">fromViewController:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// エラーが発生した場合</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Process error&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="n">isCancelled</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// ログインをキャンセルした場合</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Cancelled&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// その他</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Login Succeeded&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、いかがでしたでしょうか？<br/>
Facebook SDKも徐々にバージョンアップしていますので、なかなか最新のライブラリに対応した記事がないこともあるでしょう。<br/>
そんなときに本記事を少しでも参考にしてもらえればと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freddyを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/05/08/freddy/"/>
    <updated>2016-05-08T22:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/05/08/freddy</id>
    <content type="html"><![CDATA[<h4>SwiftでJSONパーサーライブラリを使ってみよう</h4>

<p>GW最終日にブログを更新します。<br/>
以前、<a href="http://grandbig.github.io/blog/2016/03/06/swiftyjson/">今更だけど使ってみようSwiftyJson</a>で紹介しましたが、今回は別のSwift製のJSONパーサーライブラリを紹介したいと思います。<br/>
本日は、<a href="https://github.com/bignerdranch/Freddy">Freddy</a>というJSONパーサーライブラリを紹介します。<br/>
SwiftyJsonのGitHub上でのStar数が約1万なのに比べるとFreddyは約850と段違いに支持数は低いですが、割りと有名なライブラリかと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>CocoaPodsでインストール</h4>

<p>まずはインストールです。<br/>
今回も<code>Open Weather Map API</code>をサンプルに利用したいので<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>も合わせてインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">source</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">8.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">Freddy</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">Alamofire</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">3.0</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Freddyを使ってみる</h4>

<p>続いて、早速<code>Freddy</code>を使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;あなた自身のAPPID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">parameters:</span><span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="n">location</span><span class="p">]).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">isSuccess</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSON</span><span class="p">(</span><span class="nl">data:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">try</span> <span class="n">json</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="s">&quot;weather&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;description&quot;</span><span class="p">]</span>
</span><span class='line'>              <span class="n">print</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">print</span><span class="p">(</span><span class="s">&quot;例外が発生しました！&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>SwiftyJson</code>では下記のように書いていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;あなた自身のAPPID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">parameters:</span><span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="n">location</span><span class="p">]).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">isSuccess</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Freddy</code>と<code>SwiftyJson</code>を比較すると、そこまで大きな違いはないと思います。<br/>
<code>Freddy</code>の場合は、</p>

<ul>
<li>JSON型への変換に失敗した場合、throwで例外を投げる</li>
<li>JSON型データ内のデータ形式次第で実行するメソッドが変わる<br/>
<code>array</code>, <code>string</code>, <code>bool</code>等のメソッドを使うことでアンラップを気にする必要がなくなります。</li>
</ul>


<p>といった特徴があります。<br/>
どのライブラリを使った方が良いか否かは個々人の判断ですね。</p>

<p>簡単ですが、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快適なSpring BootプログラミングのためにIntelliJ IDEA Ultimate版を購入しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/30/start-spring-boot-intellij-ultimate/"/>
    <updated>2016-04-30T14:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/30/start-spring-boot-intellij-ultimate</id>
    <content type="html"><![CDATA[<h4>はじめに</h4>

<p>筆者は決してJetBrains社の回し者ではありません笑<br/>
最近、Spring Bootにチャレンジしているのですが、自宅ではvimを使っていました。<br/>
なぜかって、IntelliJ IDEA Community版だとSpring Bootプログラミングの際に面倒なことが多いんですもの&hellip;。<br/>
しかしながら、vimでSpring Bootプログラミングを続けるのもしんどいので、<br/>
とうとうIntelliJ IDEA Ultimate版に手を出してしまったということなんです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>IntelliJ IDEA Ultimate版とは</h4>

<p>さて、早速、IntelliJ IDEA Ultimate版の何が良いかについて説明していきます。<br/>
IntelliJ IDEAとは<a href="https://www.jetbrains.com/">JetBrains</a>社が開発した多言語対応の統合開発環境のことです。<br/>
Android StudioがIntelliJ IDEAを元に作られていることは割りと有名な話ですね。</p>

<p>筆者が<a href="http://grandbig.github.io/blog/2016/04/16/start-spring-boot/">Spring Bootを使い始めよう！</a>の記事内で使用していたIntelliJ IDEAはCommunity版だったのですが、<br/>
もちろん、Community版でもプログラミングを書くことやGradleによるビルド実行は問題ありません。<br/>
しかし、Community版では例えば下記のようなことに対応できません。</p>

<ul>
<li>Spring Boot Framework関連の予測変換</li>
<li>Thymeleaf関連の予測変換</li>
<li>Spring Bootを利用したプロジェクトをIntelliJから新規作成可能</li>
</ul>


<p>これに対応したのが <strong>IntelliJ IDEA Ultimate版</strong> なのです。<br/>
詳細は公式サイトから知ることができます。</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate1.png" alt="IntelliJ 比較表" /></p>

<p>また、価格ですが、個人版であれば、ビジネス版よりも比較的に安く購入することができます。<br/>
1年単位での購入なのですが、使い続けるほどに安くなるという価格設定がエンジニア魂をくすぐります。<br/>
下図のように、3年目以降は初年度の半額弱にまで安くなります。<br/>
(Apple Developer Programも同じような仕組みにして欲しいですね笑)</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate2.png" alt="IntelliJ IDEA Ultimate版の価格" /></p>

<p>因みに、同ページに「All Products Pack」という商品もありますが、<br/>
PHP, Ruby等々を無双したい方向けなので、筆者には今のところ不要です。</p>

<h4>IntelliJ IDEA Ultimate版の購入と設定</h4>

<p>IntelliJ IDEA Ultimate版の購入方法と設定について説明します。<br/>
購入は非常に簡単です。</p>

<p>1．<a href="https://www.jetbrains.com/idea/buy/#edition=personal">Buyページ</a>で <strong>Buy Now</strong> をクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate2.png" alt="Buyページ" /></p>

<p>2．CustomerページでEmailアドレスを入力してNEXTをクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate3.png" alt="Customerページ" /></p>

<p>3．Emailアドレスと国を確認してPROCESS AS NEW CUSTOMERをクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate4.png" alt="Customerページ2" /></p>

<p>4．Customer Infoページで必要事項を入力してPLACE ORDERをクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate5.png" alt="Customer Infoページ" /></p>

<p>5．JetBrains社から届いたメールの添付ファイルを開封して、リンクをクリックしてActivationページへ遷移</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate6.png" alt="JetBrains社から届いたメールの添付ファイル" /></p>

<p>6．Activationページを確認</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate7.png" alt="Activationページ" /></p>

<p>ここまでで、購入完了したことを確認できます。<br/>
続いて設定に必要な工程について説明します。</p>

<p>7．ActivationページでDownload activation codeをクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate8.png" alt="Activationページ2" /></p>

<p>8．IntelliJ IDEA Ultimate版をDownLoad</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate9.png" alt="Ultimate版をDownLoad" /></p>

<p>9．Activation codeをIntelliJ IDEA Ultimate版に登録</p>

<p>DownLoadしたIntelliJ IDEA Ultimate版を起動して、先ほどDownLoadしたActivation codeを設定しましょう。</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate10.png" alt="IntelliJ IDEA Ultimate" /></p>

<p>以上で設定も完了です。</p>

<h4>IntelliJ IDEA Ultimate版でSpring Bootを始めよう！</h4>

<p>では、IntelliJ IDEA Ultimate版でSpring Bootを利用する新規プロジェクトを作成しましょう。</p>

<p>1．IntelliJ IDEA Ultimate版を起動してCreate New Projectをクリック</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate11.png" alt="Create New Project" /></p>

<p>2．Spring Inilializrを選択</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate12.png" alt="Spring Initializr" /></p>

<p>3．各種名称や項目を設定</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate13.png" alt="各種名称や項目の設定" /></p>

<p>4．必要なDependencyを設定</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate14.png" alt="必要な名称や項目の設定" /></p>

<p>5．プロジェクト名と保存場所を設定</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate15.png" alt="プロジェクト名と保存場所を設定" /></p>

<p>6．Gradleの設定の確認</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate16.png" alt="Gradleの設定の確認" /></p>

<p>以上で新規プロジェクトが作成できました。<br/>
プロジェクトを実行してみましょう。</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot-intellij-ultimate17.png" alt="プロジェクトの実行" /></p>

<p>さて、如何でしたでしょうか？<br/>
非常に簡単に導入できますし、使い勝手も良いので、これからSpring Bootプログラミングを始める方は検討してみてはいかがでしょうか？<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tokyo Server-Side Swift Meetup #2 に行ってきました！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/21/server-side-swift-meetup-2/"/>
    <updated>2016-04-21T19:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/21/server-side-swift-meetup-2</id>
    <content type="html"><![CDATA[<h3>Tokyo Server-Side Swift Meetup #2</h3>

<p>今日は久しぶりに勉強会に行ってきた話です。<br/>
今日行ってきた勉強会は<a href="http://tokyo-ss-swift.connpass.com/event/29240/">Tokyo Server-Side Swift Meetup #2</a>です。<br/>
筆者はSwiftでサーバサイドを書けるようになるとAppleが発表してからというもの、Swift3.0の公開を心待ちにしていました。<br/>
いざ、GitHubで公開された瞬間は何とも言えない感動を覚えました。</p>

<p>時は流れ&hellip;筆者は未だにSwift3.0を全く触っていません！<br/>
日々、世の中で公開されるサーバサイドSwift関連の情報も全然追いきれていません&hellip;<br/>
これはマズイということでまずは形だけでも参加してみることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>ということで勉強会のメモ書きです。</p>

<h3>Swiftプロトコル指向なCのラッパーを作る</h3>

<p><a href="https://speakerdeck.com/yusukeito/swift-purotokoruzhi-xiang-nacfalseratupawozuo-ru">資料のリンク</a></p>

<ul>
<li>CoreAudio→Swiftからたたくと問題があった

<ul>
<li>APIはC言語</li>
<li>AVFoundation系を叩くことが多いので、直接使う機会はあまりないかも</li>
<li>C言語でのサンプルを紹介</li>
<li>C言語は辛い, 1箇所でも間違えると落ちる・辛い</li>
<li>AudioObjectGetPropertyData, AudioObjectSetPropertyData</li>
</ul>
</li>
<li>Swiftでは入力の方に対応する出力の型として表現できる(Protocolのassociated-type)</li>
<li><a href="http://github.com/novi/HALAudio">HALAudio</a>

<ul>
<li>Core AudioはPrefixが特殊なのでわかりにくい</li>
<li>C言語よりSwiftの方がエラーハンドリングが楽(try-catchを使えるから)</li>
</ul>
</li>
<li>プロトコルの場合の制約

<ul>
<li>コンストラクタのある型(class, struct, enum)を一連の制約の中に入れることができない</li>
<li>プロトコル自体に値は持たせられない</li>
</ul>
</li>
</ul>


<h3>The Ecosystem of Web Development with Swift</h3>

<p><a href="https://speakerdeck.com/takebayashi/the-ecosystem-of-web-development-with-swift">資料のリンク</a></p>

<ul>
<li>Web Applicationを開発する上で使うツール

<ul>
<li>Web Application Framework</li>
<li>Web Application Servers etc</li>
</ul>
</li>
<li>FrameworkとServerの選び方

<ul>
<li>Framework

<ul>
<li><a href="https://github.com/PerfectlySoft/Perfect">PerfectLib</a>

<ul>
<li>2015/11に発表</li>
<li>オーソドックスな形で使える</li>
<li>PerfectServerModuleInitという名前は固定(癖がある)</li>
<li>デプロイがしんどい</li>
</ul>
</li>
<li><a href="https://github.com/IBM-Swift/Kitura">Kitura</a>

<ul>
<li>IBM製</li>
<li>2016/02に発表</li>
<li>至って普通の書き方</li>
<li>PerfectLibよりもシンプル！</li>
<li>Kitura-netでKitura Appはデプロイできる</li>
<li>サーバとFrameworkが密になり過ぎている</li>
<li>PerfectLibをKitura-netで使うことはできない</li>
<li>サーバとFrameworkは疎結合であるべき</li>
<li>Python: WSGI, Perl: PSGI, Ruby: Rack

<ul>
<li>サーバとFrameworkが疎結合で好きに組み合わせることができる</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/nestproject/Nest">Nest</a>

<ul>
<li>WSGIとかのSwift版</li>
<li>Swift Protocolの</li>
<li>非常にシンプル</li>
<li>Nest.swift1個だけ</li>
<li><a href="https://github.com/necolt/Swifton">Swifton</a>, <a href="https://github.com/nestproject/Frank">Frank</a>はNestをサポートしている</li>
<li><a href="https://github.com/kylef/Curassow/blob/master/docs/index.rst">Curassow</a>, <a href="https://github.com/takebayashi/http4swift">http4swift</a>はNestをサポートしている

<ul>
<li>http4swiftはオススメしない</li>
</ul>
</li>
<li><a href="https://github.com/nestproject/Inquiline">Inquiline</a>でちょっと楽に</li>
<li>Applicationの部分を変更せずにサーバを変えられる</li>
<li>Nest Tools: <a href="https://github.com/nestproject/NestTest">NestTest</a>, <a href="https://github.com/nestproject/NestTestSuite">NestTestSuite</a></li>
</ul>
</li>
<li><a href="https://github.com/open-swift">Open-Swft</a>

<ul>
<li>Cross project standards for Swift</li>
<li>先週まではSwiftXという名前だった</li>
<li><a href="https://github.com/open-swift/C7">C7(Component)</a>, <a href="https://github.com/open-swift/S4">S4(Server-Side)</a>, <a href="https://github.com/open-swift/D5">D5</a>

<ul>
<li>C7: Data, Stream, URIなどの基本的なデータ構造を提供</li>
<li>S4: Server-Side Swift StandardsなのでS4

<ul>
<li>More Swifty</li>
<li>Nestの競合(PSGIとかのSwift版)</li>
<li>NestよりもSwiftっぽい</li>
<li>非同期/同期をIFレベルで対応</li>
<li>S4はサーバ側も仕様が決まっている

<ul>
<li><a href="https://github.com/qutheory/vapor">Vapor</a>, <a href="https://github.com/Zewo/Zewo">Zewo</a>, <a href="https://github.com/noppoMan/Slimane">Slimane: Frameworks Supporting S4</a></li>
<li><a href="https://github.com/VeniceX/Venice">VeniceX</a>, <a href="https://github.com/noppoMan/Skelton">Skelton: Servers Supporting S4</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Slackチャンネルがある</li>
</ul>
</li>
<li>Nest vs S4

<ul>
<li>Community: S4の方が活発, NestはCommunityが死んでる</li>
<li>API: Nestは安定している, S4はAPIがころころ変わる</li>
<li>Spec: Nestはシンプル(画面1個に収まる), S4は複雑(C7をベースにしているから)</li>
<li>開発時は好きな方を選んでOK</li>
<li>Nestで実装されたものが多いが、S4はこれから良くなる</li>
<li>好きなFrameworkを選んで、それに対応した好きなサーバを選ぶ</li>
<li>NestでApp, S4でサーバしたい場合はアダプタを自作しましょう</li>
</ul>
</li>
<li>PerfectLibは使わないで!</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Up to Simane 0.2 and the Server Side Swift Standards</h3>

<p><a href="https://speakerdeck.com/noppoman/up-to-slimane-0-dot-2-and-the-server-side-swift-standards">資料のリンク</a></p>

<ul>
<li>Slimane

<ul>
<li>Slimane開発者</li>
<li>Express inspireしたFramework</li>
<li>超軽量</li>
<li>完全に非同期</li>
<li>超高速</li>
<li>モジュール化されています</li>
<li>マルチプロセスで動く</li>
<li>Swift3.0サポートしている(Swift2.2は動かない)</li>
<li>Open-Swiftを採用している</li>
<li>常に最新を追いかける思想で開発します</li>
<li>SUV: Swift Wrapper for libuv</li>
<li>Skelton: Stream based tiny Asynchronous HTTP Server</li>
</ul>
</li>
<li>0.1から結構変更した

<ul>
<li>極力頑張ってExpressっぽく書けるようにしている</li>
</ul>
</li>
<li>Open-Swift

<ul>
<li>開発がめちゃ速い(次の日はCompileが通らない&hellip;)</li>
<li>forkして、そのバージョンを使うようにしている</li>
<li>SwiftonがNestからOpen-Swiftに移行するかも？</li>
</ul>
</li>
<li>Slimaneでの書き方

<ul>
<li>めっちゃExpressっぽい</li>
<li>RESTful APIの書き方とか&hellip;</li>
<li>RouterもMiddlewareもExpressっぽい&hellip;</li>
<li>Session

<ul>
<li>Redisを使ったSession Storeの例を紹介</li>
</ul>
</li>
<li>Slimane.Static

<ul>
<li>今はバグっているので、すぐに直します！</li>
</ul>
</li>
<li>BodyParser

<ul>
<li>application/json, application/x-www-form-urlencoding</li>
</ul>
</li>
<li>Response with Template Engine

<ul>
<li>MustacheViewEngine</li>
</ul>
</li>
<li>Renderable Protocol

<ul>
<li>ReactのView EngineをSwiftで作る夢</li>
<li>夢であって、現実には存在しない</li>
</ul>
</li>
<li>Cluster

<ul>
<li>シングルスレッドをコア数分、展開する</li>
<li>書き方はNode.jsライク</li>
<li>Node.jsのClusterモジュールを真似て作った</li>
</ul>
</li>
<li>IPC between the Master and the Workers</li>
<li>Let it crash

<ul>
<li>メモリが80%こえたらRestartするといったAppの作り方ができる</li>
<li>プロセス管理ができる</li>
</ul>
</li>
<li>DataBase

<ul>
<li>Slimaneには今はない</li>
<li>MySql-Swiftがすごく良い

<ul>
<li>SlimaneはNo Blocking I/Oだからダメ&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>Process.qwork

<ul>
<li>Blocking I/OをNo Blocking I/Oに見せかける</li>
<li>Synchronous I/O</li>
</ul>
</li>
<li>パフォーマンス

<ul>
<li>ABテストをやってみた</li>
<li>Slimaneが動くバージョンで試してみた</li>
<li>Swiftのバージョンによって動かないFrameworkは多い</li>
<li>Nginxは早過ぎる&hellip;</li>
<li>Expressより相当Slimaneは速い(Swiftが速いことが証明された)</li>
<li>REVELよりもVAPORの方が速い(Swiftが速いことを証明)</li>
</ul>
</li>
<li>Slimaneの今後

<ul>
<li>Promise対応必須</li>
<li>Stream Response</li>
<li>MySqlをネイティブ非同期で通信</li>
<li>Command line IF</li>
<li>Test Codes</li>
<li>Webフロントとの親和性を高めたい</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>今日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring BootでSystem.inにハマったメモ]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/17/gradle-spring-boot/"/>
    <updated>2016-04-17T23:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/17/gradle-spring-boot</id>
    <content type="html"><![CDATA[<h4>Spring BootをGradleでビルドしてハマったメモ</h4>

<p>今日は超絶ハマって苦しんだ超初歩についてメモ書きです。<br/>
Spring Bootに関する情報はあまり多くはないのですが、<br/>
さらに困ったことにほとんどの書籍やネット情報ではMavenでビルドしているのでGradleに関する情報が乏しくてハマりました&hellip;。</p>

<p>Javaでキーボード入力のために、<br/>
<code>Scanner scanner = new Scanner(System.in);</code>を記述することがあります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>これをメインファイルに記述した状態で<code>gradle bootRun</code>コマンドを実行しても、<br/>
しれっと処理が流れてしまいました&hellip;。<br/>
「なぜだ〜〜〜」と格闘すること数時間!?</p>

<p>解決方法がわかりました。下記を<code>build.gradle</code>に追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// build.gradle</span>
</span><span class='line'><span class="n">bootRun</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">standardInput</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<code>bootRun</code>タスクを実行したときに、<br/>
<code>System.in</code>をInput処理として判別するように定義しています。<br/>
もう一度<code>gradle bootRun</code>を実行してみると処理が途中でStopしてユーザ入力を受け付けるようになりました。</p>

<p>いや〜ハマった&hellip;。<br/>
本日は完全なるメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring BootでHello Worldをしてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/17/hello-world-spring-boot/"/>
    <updated>2016-04-17T01:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/17/hello-world-spring-boot</id>
    <content type="html"><![CDATA[<h4>Spring BootでHello World</h4>

<p>引き続きSpring Bootの練習です。<br/>
前回、Spring Boot用のプロジェクトを作成して、起動してみるところまでやってみました。<br/>
今回はHello Worldアプリケーションを作成してみます。<br/>
(Node.jsのExpressとは異なりますが、結構簡単にできました。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まずは、下記が前回のフォルダ構成です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">firstApp</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">build</span><span class="o">.</span><span class="na">gradle</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradlew</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradlew</span><span class="o">.</span><span class="na">bat</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradle</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">wrapper</span>
</span><span class='line'>  <span class="err">┃</span>          <span class="err">┣━━</span> <span class="n">gradle</span><span class="o">-</span><span class="n">wrapper</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'>  <span class="err">┃</span>          <span class="err">┗━━</span> <span class="n">gradle</span><span class="o">-</span><span class="n">wrapper</span><span class="o">.</span><span class="na">properties</span>
</span><span class='line'>  <span class="err">┗━━</span> <span class="n">src</span>
</span><span class='line'>       <span class="err">┣━━</span> <span class="n">main</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┣━━</span> <span class="n">java</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">com</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>         <span class="err">┗━━</span> <span class="n">example</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>               <span class="err">┗━━</span> <span class="n">FirstAppApplication</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">resources</span>
</span><span class='line'>       <span class="err">┃</span>         <span class="err">┗━━</span> <span class="n">application</span><span class="o">.</span><span class="na">properties</span>
</span><span class='line'>       <span class="err">┗━━</span> <span class="n">test</span>
</span><span class='line'>            <span class="err">┗━━</span> <span class="n">java</span>
</span><span class='line'>                 <span class="err">┗━━</span> <span class="n">com</span>
</span><span class='line'>                      <span class="err">┗━━</span> <span class="n">example</span>
</span><span class='line'>                            <span class="err">┗━━</span> <span class="n">FirstAppApplicationTests</span><span class="o">.</span><span class="na">java</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はWebアプリケーションを作成するので、<code>build.gradle</code>を修正する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// build.gradle</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">web</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">testCompile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>コンパイル対象のSpring Bootのモジュールを変更しています。<br/>
(元はcompile(&lsquo;org.springframework.boot:spring-boot-starter&rsquo;)でした。)</p>

<p>次に、上記のフォルダ構成の<code>FirstApplication.java</code>と同階層に<code>HelloController.java</code>を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// HelloController.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/hello-world&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span><span class="o">=</span><span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Hello Spring MVC&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>HelloController.java</code>の処理について説明すると</p>

<ul>
<li><code>@RestController</code>: WebAPIのエントリポイントクラスを指定</li>
<li><code>@RequestMapping</code>: パスやHTTPメソッド(GET, POST, PUT, DELETEなど)のマッピングを指定

<ul>
<li><code>@RequestMapping("/hello-world")</code>で<code>HelloController</code>クラスにパスをマッピング</li>
<li><code>@RequestMapping(method=RequestMethod.GET)</code>で<code>hello</code>メソッドにHTTPメソッドをマッピング</li>
</ul>
</li>
</ul>


<p>そして、<code>application.properties</code>にポート番号を指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// application.properties</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">port</span><span class="o">=</span><span class="mi">9000</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは、ターミナルから<code>gradle bootRun</code>を実行するだけです。<br/>
そして、Chromeで<code>http://localhost:9000/hello-world</code>にアクセスしてみましょう。<br/>
下記のような結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/hello-world-spring-boot1.png" alt="Hello World" /></p>

<p>もろもろの問題はあるけれど、後回しにして、引き続き勉強を進めます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Bootを使い始めよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/16/start-spring-boot/"/>
    <updated>2016-04-16T14:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/16/start-spring-boot</id>
    <content type="html"><![CDATA[<h4>Spring Bootとは</h4>

<p>本日はこれまでと全く趣向を変えて、 <strong>Spring Boot</strong> について書きたいと思います。<br/>
<a href="http://projects.spring.io/spring-boot/">Spring Boot</a>とはSpringプロジェクトが提供している多くのFrameworkを統合した、<br/>
簡単にWebアプリケーションを作成できるように設計されたFrameworkです。</p>

<p>開発者はSpringプロジェクト内で用意された様々なFrameworkを意識する必要がありません。<br/>
Spring Bootとは長年ブラッシュアップされ、肥大化してきたSpringプロジェクトへの参入ハードルを劇的に下げるものと言えるでしょう。</p>

<p>なんて言いつつも、<br/>
筆者はJavaによるWebアプリケーション開発はほとんどやったことがありません。</p>

<p>何はともあれ、まずは触れてみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Spring BootによるWeb Application Projectを作成しよう！</h4>

<p>最も簡単な方法について説明します。</p>

<p>1．<a href="https://start.spring.io/">Spring Initializr</a>にアクセス<br/>
Projectの自動生成ツールサイトがあるので、アクセスして各種項目を設定しましょう。</p>

<ul>
<li>Project: GradleおよびMavenから選択できます</li>
<li>Spring Boot: バージョンを選択できます</li>
<li>Group: パッケージ名を指定できます</li>
<li>Artifact: メインファイル名を指定できます</li>
<li>Dependencies: 初期状態で追加されるdependenciesを指定できます</li>
</ul>


<p>筆者は下記のように指定しました。</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot1.png" alt="Spring Initializr" /></p>

<p>2．Generate Projectボタンをクリック<br/>
下記のようなProjectが生成されます。<br/>
(下記は筆者が指定した設定項目で生成されたProjectです。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">firstApp</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">build</span><span class="o">.</span><span class="na">gradle</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradlew</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradlew</span><span class="o">.</span><span class="na">bat</span>
</span><span class='line'>  <span class="err">┣━━</span> <span class="n">gradle</span>
</span><span class='line'>  <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">wrapper</span>
</span><span class='line'>  <span class="err">┃</span>          <span class="err">┣━━</span> <span class="n">gradle</span><span class="o">-</span><span class="n">wrapper</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'>  <span class="err">┃</span>          <span class="err">┗━━</span> <span class="n">gradle</span><span class="o">-</span><span class="n">wrapper</span><span class="o">.</span><span class="na">properties</span>
</span><span class='line'>  <span class="err">┗━━</span> <span class="n">src</span>
</span><span class='line'>       <span class="err">┣━━</span> <span class="n">main</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┣━━</span> <span class="n">java</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">com</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>         <span class="err">┗━━</span> <span class="n">example</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┃</span>               <span class="err">┗━━</span> <span class="n">FirstAppApplication</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'>       <span class="err">┃</span>    <span class="err">┗━━</span> <span class="n">resources</span>
</span><span class='line'>       <span class="err">┃</span>         <span class="err">┗━━</span> <span class="n">application</span><span class="o">.</span><span class="na">properties</span>
</span><span class='line'>       <span class="err">┗━━</span> <span class="n">test</span>
</span><span class='line'>            <span class="err">┗━━</span> <span class="n">java</span>
</span><span class='line'>                 <span class="err">┗━━</span> <span class="n">com</span>
</span><span class='line'>                      <span class="err">┗━━</span> <span class="n">example</span>
</span><span class='line'>                            <span class="err">┗━━</span> <span class="n">FirstAppApplicationTests</span><span class="o">.</span><span class="na">java</span>
</span></code></pre></td></tr></table></div></figure>


<p>3．<code>gradle bootRun</code>コマンドを実行<br/>
firstApp直下で<code>gradle bootRun</code>コマンドを実行します。<br/>
下記のような実行結果が出るはずです。</p>

<p><img src="http://grandbig.github.io/images/start-spring-boot2.png" alt="実行結果" /></p>

<p>これは生成されたメインファイルでのソースが下記のようになっているためです。<br/>
<code>main</code>メソッド内で実行している処理はたったの1行で、<br/>
これはSpring Bootによるアプリケーションを起動する処理となっています。</p>

<p>ここで設定している<code>@SpringBootApplication</code>アノテーションは<br/>
<code>@Configuration</code>, <code>@EnableAutoConfiguration</code>, <code>@ComponentScan</code>の3つの設定と同義になります。</p>

<ul>
<li><code>@Configuration</code>: Beanを含むJavaConfig用のクラスに付与する</li>
<li><code>@EnableAutoConfiguration</code>: 様々な設定を自動で有効にする</li>
<li><code>@ComponentScan</code>: クラスの自動スキャンを可能にする</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SpringBootApplication</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FirstAppApplication</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">FirstAppApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、初期状態で<code>sourceCompatibility</code>および<code>targetCompatibility</code>が <strong>1.8</strong> となっています。<br/>
よって、実行するためにはJDKバージョン <strong>1.8</strong> が必要になります。<br/>
(インストールは<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">こちら</a>から)</p>

<p>まずは最も簡単な導入が完了したようです。</p>

<h4>IntelliJ IDEAにimportしてみよう</h4>

<p>ターミナルからプロジェクトの開発を続けても良いのですが、<br/>
ターミナルに慣れていない方は統合開発環境ツールで開きたいかもしれませんね。<br/>
複雑なプロジェクトになればなるほど、ターミナルでの開発は辛くなるかもしれません。</p>

<p>ということでIntelliJ IDEAに先ほどのプロジェクトをimportしてみましょう。</p>

<p>1．IntelliJ IDEAを起動して、importを選択<br/>
<img src="http://grandbig.github.io/images/start-spring-boot3.png" alt="import" /></p>

<p>2．importしたいDirectoryを選択<br/>
<img src="http://grandbig.github.io/images/start-spring-boot4.png" alt="Directoryの選択" /></p>

<p>3．Createの方を選択<br/>
<img src="http://grandbig.github.io/images/start-spring-boot5.png" alt="Createの方を選択" /></p>

<p>4．Project名と保存場所を確認<br/>
<img src="http://grandbig.github.io/images/start-spring-boot6.png" alt="Project名と保存場所を確認" /></p>

<p>5．流れに任せてNextを続ける<br/>
<img src="http://grandbig.github.io/images/start-spring-boot7.png" alt="ソースファイル一覧" /></p>

<p><img src="http://grandbig.github.io/images/start-spring-boot8.png" alt="ライブラリの確認" /></p>

<p><img src="http://grandbig.github.io/images/start-spring-boot9.png" alt="ライブラリの確認" /></p>

<p><img src="http://grandbig.github.io/images/start-spring-boot10.png" alt="JDKを選択" /></p>

<p>6．一通り作業が終わったらFinishを選択<br/>
<img src="http://grandbig.github.io/images/start-spring-boot11.png" alt="Finishを選択" /></p>

<p>7．Intellij IDEAのターミナルで<code>gradle bootRun</code>を実行<br/>
<img src="http://grandbig.github.io/images/start-spring-boot12.png" alt="コマンドを実行" /></p>

<p>続いて、最も簡単なIntelliJ IDEA上での実行が完了しました。</p>

<p>引き続きSpring Bootを見ていきますが、本記事は一旦ここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKitを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/09/swift-promisekit/"/>
    <updated>2016-04-09T23:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/09/swift-promisekit</id>
    <content type="html"><![CDATA[<h4>SwiftでPromiseライブラリを使ってみよう</h4>

<p>さて、前回から引き続きSwiftでのPromiseライブラリについて見ていきたいと思います。<br/>
今回はPromiseライブラリのSwift界隈で有名な <strong>PromiseKit</strong> について見ていきます。</p>

<h4>PromiseKitのインストール</h4>

<p>早速、 <strong>PromiseKit</strong> の導入について紹介します。<br/>
筆者の場合、Xcode7.3を利用しているため、Swift2.2を扱うことになります。<br/>
<a href="https://github.com/mxcl/PromiseKit">GitHub</a>で紹介されている下記の導入方法では <strong>2.2.1</strong> がインストールされます。<br/>
しかし、このバージョンはSwift2.2に対応していないため、エラーが発生します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="s">&quot;PromiseKit&quot;</span><span class="p">,</span> <span class="s">&quot;~&gt;2.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://promisekit.org/">PromiseKitの公式ドキュメントページ</a>を見ると、Newsの項目でバージョン <strong>3.1.0</strong> でSwift2.2に対応したと書かれています。<br/>
そこで、今回は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="s">&quot;PromiseKit&quot;</span><span class="p">,</span> <span class="s">&quot;3.1.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすることで、Xcode7.3でも問題なく、PromiseKitを扱えるようにしました。</p>

<h4>PromiseKitで非同期処理を直列に書いてみよう</h4>

<p>前回のBrightFutureで紹介した処理をPromiseKitで書いてみようと思います。<br/>
まずは、非同期処理をPromiseKitを使って定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="n">p</span><span class="p">(</span><span class="nl">msg:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span> <span class="p">(</span><span class="n">fulfill</span><span class="p">,</span> <span class="n">reject</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>              <span class="n">fulfill</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>                                                  
</span><span class='line'>  <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、これを呼び出してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">p</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">).</span><span class="n">then</span> <span class="p">{</span> <span class="p">(</span><span class="n">msg1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">(</span><span class="s">&quot;Good Evening&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">then</span> <span class="p">{</span> <span class="p">(</span><span class="n">msg2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">(</span><span class="s">&quot;Good Bye&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ネストが浅い状態で複数の非同期処理を書くことができました。<br/>
また、BrightFutureと大きな違いはなく書くことできました。</p>

<h4>PromiseKitで非同期処理を並列に書いてみよう</h4>

<p>続いて、複数の非同期処理を並列に実行する場合を考えてみます。<br/>
順番に処理をする必要がなく、処理が完了したものから反映していきたい場合などに使いますね。</p>

<p>非同期処理自体は先程と同じものを使います。<br/>
では、並列に処理を呼び出してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 実行したい非同期処理を定義</span>
</span><span class='line'><span class="n">let</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">ps</span><span class="p">.</span><span class="n">p_promiseKit</span><span class="p">(</span><span class="s">&quot;Method1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">ps</span><span class="p">.</span><span class="n">p_promiseKit</span><span class="p">(</span><span class="s">&quot;Method2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">ps</span><span class="p">.</span><span class="n">p_promiseKit</span><span class="p">(</span><span class="s">&quot;Method3&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// まとめて非同期処理を実行</span>
</span><span class='line'><span class="n">when</span><span class="p">([</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">]).</span><span class="n">then</span> <span class="p">{</span> <span class="p">(</span><span class="nl">result:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">AnyPromise</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">AnyPromise</span><span class="p">(</span><span class="nl">bound:</span> <span class="n">Promise</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先に書いた直列処理では、1秒間隔でログが出力されたかと思います。<br/>
ここでは同時に実行したため、ほぼ同時に3つのログが出力されたはずです。</p>

<p>さて如何だったでしょうか？<br/>
SwiftでもPromiseライブラリはたくさん出てきました。<br/>
<a href="https://github.com/Thomvis/BrightFutures">BrightFuture</a>, <a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>, <a href="https://github.com/ReactKit/SwiftTask">SwiftTask</a>のいずれを利用するかは開発者の判断になるかと思います。<br/>
個人的にはPromiseKitはGitHub上に似た名称のブランチがたくさんあるのをどうにかして欲しいなと思ってたりします笑</p>

<p>また、時間があるときにPromiseを使って何かやりたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
