<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-01-23T23:22:03+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlinを使ってみよう！(2) : OkHttp編]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/23/kotlin-okhttp/"/>
    <updated>2016-01-23T16:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/23/kotlin-okhttp</id>
    <content type="html"><![CDATA[<h4>今回のKotlinのお題は？</h4>

<p>さて、久々にKotlinについて勉強をしたいと思います。<br/>
今回のお題は<a href="http://grandbig.github.io/blog/2016/01/19/android-okhttp/">Android StudioでOkHttp3.0.1を使おう！</a>にしたいと思います。<br/>
では、早速見ていきましょう！</p>

<h4>KotlinでOkHttp3.0.1を使うソースを書いてみる</h4>

<p>まずは、OkHttp3.0.1を使ったソースを書いてみます。<br/>
OkHttpの導入はJavaと同じです。</p>

<p>build.gradle(app)に下記を追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">okhttp3</span><span class="o">:</span><span class="nl">okhttp:</span><span class="mf">3.0</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>Javaで紹介したときと同様に、Open Weather Map APIを使ったGETリクエストを利用します。<br/>
OkHttpでは通信処理をメインスレッドで実行しようとするとエラーが発生してしまうので、<code>AsyncTask</code>を利用します。<br/>
<code>AsyncTask</code>を継承したクラスを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">simpleapplication</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span>
</span><span class='line'>
</span><span class='line'><span class="n">open</span> <span class="kd">class</span> <span class="nc">MyAsyncTask</span> <span class="o">:</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">vararg</span> <span class="nl">params:</span> <span class="n">Void</span><span class="o">):</span> <span class="n">String</span><span class="o">?</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでKotlinの書き方を説明しましょう。</p>

<ul>
<li><code>open</code>

<ul>
<li>他のクラスからの継承を許可するアノテーション</li>
<li><code>MainActivity</code>で<code>doInBackground</code>メソッドをオーバーライドするために設定<br/>
　</li>
</ul>
</li>
<li><code>vararg</code>

<ul>
<li>可変長にしたい引数の名前に設定</li>
<li><code>donInBackground</code>は引数が1つ以上設定可能な可変長なものを持つため利用</li>
</ul>
</li>
</ul>


<p>続いて、<code>MainActivity</code>を書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">simpleapplication</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.OkHttpClient</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Request</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Response</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MainActivity</span><span class="o">:</span><span class="n">AppCompatActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">internal</span> <span class="n">var</span> <span class="n">client</span> <span class="o">=</span> <span class="n">OkHttpClient</span><span class="o">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
</span><span class='line'>      <span class="n">val</span> <span class="n">toolbar</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">toolbar</span><span class="o">)</span> <span class="n">as</span> <span class="n">Toolbar</span>
</span><span class='line'>      <span class="n">setSupportActionBar</span><span class="o">(</span><span class="n">toolbar</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// GET Weatherボタンを取得して、クリック処理を実装</span>
</span><span class='line'>      <span class="n">val</span> <span class="n">btn</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">)</span> <span class="n">as</span> <span class="n">Button</span>
</span><span class='line'>      <span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span> <span class="o">{</span>
</span><span class='line'>          <span class="nl">object:</span> <span class="n">MyAsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">override</span> <span class="n">fun</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">vararg</span> <span class="nl">params:</span> <span class="n">Void</span><span class="o">):</span> <span class="n">String</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">var</span> <span class="nl">res:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">res</span> <span class="o">=</span> <span class="n">run</span><span class="o">(</span><span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&amp;q=Tokyo&quot;</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">val</span> <span class="n">resJson</span> <span class="o">=</span> <span class="n">JsonObject</span><span class="o">(</span><span class="n">res</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">val</span> <span class="n">weathers</span> <span class="o">=</span> <span class="n">resJson</span><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;weather&quot;</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">val</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weathers</span><span class="o">.</span><span class="na">getJsonObject</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">val</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="n">description</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">res</span> <span class="o">=</span> <span class="n">description</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nl">e:</span> <span class="n">IOException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nl">e:</span> <span class="n">JSONException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">fun</span> <span class="nf">run</span><span class="o">(</span><span class="nl">url:</span> <span class="n">String</span><span class="o">):</span> <span class="n">String</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">val</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">val</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">newCall</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">string</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでもKotlinの書き方を説明します。</p>

<ul>
<li><code>object</code>

<ul>
<li>匿名サブクラスのインスタンスの返却式</li>
<li>setOnClickListenerの引数にMyAsyncTaskを匿名クラスとして指定するために利用</li>
<li>Kotlinではインスタンス生成に<code>new</code>は利用しない</li>
</ul>
</li>
</ul>


<p>さて、いかがでしたでしょうか？<br/>
KotlinはSwiftに近い書式で書けるため、筆者にとっては非常にわかりやすいです。<br/>
ただ、Javaとの互換性が非常に高いため、やはりそれなりに覚えなくてはならないことがありますね。</p>

<p>これからも少しずつではありますが、Kotlinを見ていきたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでOkHttp3.0.1を使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/19/android-okhttp/"/>
    <updated>2016-01-19T00:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/19/android-okhttp</id>
    <content type="html"><![CDATA[<h4>Volleyではなく、OkHttpを使おう！</h4>

<p>さて、本日は久しぶりにAndroidの話です。<br/>
これまでAndroidの通信ライブラリとして活躍してきた <strong>Volley</strong> が敬遠されている傾向があります。<br/>
と言うのも、Volleyが依存しているApache Http ClientがAPI Level22からdeprecatedになったためです。</p>

<p>では、今後は何を使っていけば良いのでしょうか？<br/>
もちろん開発者自身で通信処理を0から実装することも悪いことではないのですが、<br/>
やはり、少しでも開発効率を良くするためにオープンソースを利用したいところですよね。</p>

<p>そこで、昨今、皆が使っているものとして<a href="http://square.github.io/okhttp/">OkHttp</a>というものがあります。<br/>
これは <strong>HTTP</strong> だけでなく、 <strong>HTTP/2</strong> も対応しているため、きちんと最新を追えているという安心感がある点も良い印象です。</p>

<p>また、<a href="http://techlife.cookpad.com/entry/2015/06/25/093507">クックパッド開発者ブログ</a>でも <strong>OkHttp</strong> への移行を進める旨が書かれていますので、知っていて損はなさそうです。</p>

<p>今回は、OKHttpを使ったサンプルを載せたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>OKHttpの導入</h4>

<p>Android StudioにOKHttpを導入しましょう。<br/>
導入は超簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">okhttp3</span><span class="o">:</span><span class="nl">okhttp:</span><span class="mf">3.0</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい。以上です。</p>

<h4>OKHttpでGETリクエストを実行</h4>

<p>さて、GETリクエストを実行してみましょう。<br/>
今回は下記のようなサンプルアプリを作成しました。<br/>
<img src="http://grandbig.github.io/images/android-okhttp.png" alt="サンプルアプリ" /></p>

<p>まずは、<code>AsyncTask</code>を継承したクラスを下記のように作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">simpleapplication</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by kato_takahiro on 2016/01/19.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAsyncTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// コンストラクタ</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyAsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、<code>MainActivity.java</code>内で実行してみます。<br/>
このとき、 <strong>GET Weather</strong> ボタンをタップしたときに天気情報を取得するものとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">OkHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Toolbar</span> <span class="n">toolbar</span> <span class="o">=</span> <span class="o">(</span><span class="n">Toolbar</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">toolbar</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setSupportActionBar</span><span class="o">(</span><span class="n">toolbar</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// GET Weatherボタンを取得して、クリック処理を実装</span>
</span><span class='line'>      <span class="n">Button</span> <span class="n">btn</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">);</span>
</span><span class='line'>      <span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">MyAsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">run</span><span class="o">(</span><span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&amp;q=Tokyo&quot;</span><span class="o">);</span>
</span><span class='line'>                          <span class="n">JSONObject</span> <span class="n">resJson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>                          <span class="n">JSONArray</span> <span class="n">weathers</span> <span class="o">=</span> <span class="n">resJson</span><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;weather&quot;</span><span class="o">);</span>
</span><span class='line'>                          <span class="n">JSONObject</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weathers</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                          <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                          <span class="n">res</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
</span><span class='line'>                      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">JSONException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                      <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// OKHttpを使った通信処理</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Request</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>              <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">newCall</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">string</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>忘れずに<code>AndroidManifest.xml</code>で通信許可しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">manifest</span> <span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="n">package</span><span class="o">=</span><span class="s">&quot;com.example.takahiro.simpleapplication&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="o">&gt;&lt;/</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span><span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;/</span><span class="n">manifest</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>まだ、GETしか試していませんが、割りと簡単に実装できますね。</p>

<h4>注意点</h4>

<p>初め、実装するにあたって、躓いたことを書いておきます。<br/>
何となしに<code>OKHttp</code>を実装し、デバッグしたところ、<code>android.os.NetworkOnMainThreadException</code>が発生しました。</p>

<p>これは、通信処理をメインスレッドで実行しようとしたために発生しました。<br/>
そのため、<code>AsyncTask</code>を使って別スレッドで通信処理を実行するように改修する必要がありました。</p>

<p>さて、今回は筆者用のメモの意味合いが強いのですが、Androidアプリの開発に関する記事も今度どんどん増やしていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでGCDを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/18/semaphore/"/>
    <updated>2016-01-18T09:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/18/semaphore</id>
    <content type="html"><![CDATA[<h4>GCDとは</h4>

<p>GCDとはGrand Central Dispatchの略で、iOSアプリでマルチスレッド処理を実行したいときに利用する手法です。<br/>
書き方は独特ですが、慣れてしまえば、簡単に使いこなすことができると思います。<br/>
今回は筆者が困ったときに使う方法について紹介していきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>メインスレッドの処理を妨げたくないとき</h4>

<p>iOSアプリでは描画はメインスレッドでしか実行できません。<br/>
(もし、それ以外で実行しようとすれば、アプリがダウンしてしまいます。)</p>

<p>筆者がアプリを開発しているときに、<br/>
検証のため、ログをローカルストレージに保存したい場面がありました。<br/>
ログ保存処理は一時的な検証のためであり、本来のメイン処理を妨げたくはありません。</p>

<p>ログ保存処理は <strong>描画を含まない処理</strong> であるため、<br/>
別にスレッドを立てて、そちらに任せてしまうことができます。<br/>
これにより、メインスレッドに影響を及ぼすことなく、処理を実行することができます。</p>

<p>下記にサンプルを載せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">queue:</span><span class="n">dispatch_queue_t</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="p">{()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// 別スレッドでの処理</span>
</span><span class='line'>          <span class="c1">// 例えば、Realmを使った保存処理などを書く(今回は省略します)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// アラート表示処理</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">alertController:</span><span class="n">UIAlertController</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">okAction:</span><span class="n">UIAlertAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">alert</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// OKを選択したときに実行される処理</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">alertController</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>      <span class="n">presentViewController</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように <strong>dispatch_async</strong> 内でRealmへのログ保存処理をすれば、<br/>
別スレッドでの処理となるため、<br/>
ログ保存処理を待たずにアラートの表示処理を実行することができます。</p>

<p><strong>dispatch_get_global_queue</strong> とその引数などの詳細は<a href="https://github.com/mixi-inc/iOSTraining/wiki/8.2-Grand-Central-Dispatch">8.2 Grand Central Dispatch</a>に非常に詳しく書かれているので、ぜひご参照ください。</p>

<h4>複数の非同期処理の情報で何か処理がしたいとき</h4>

<p>例えば、複数種類のWeb APIを叩いて、それぞれから取得した情報を合算して、画面に表示したいとします。<br/>
（別々にAPIを叩いて取得した情報を別々に返せば問題ない場面では当てはまらないので注意）</p>

<p>そんなときは <strong>dispatch_group_async</strong> と <strong>dispatch_group_notify</strong> を使います。</p>

<p>下記にサンプルを載せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewControlelr:</span><span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="nl">queue:</span><span class="n">dispatch_queue_t</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">group:</span><span class="n">dispatch_group_t</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 指定都市の天気情報を取得する処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">getWeather</span><span class="p">(</span><span class="nl">location:</span><span class="n">String</span><span class="p">,</span> <span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&quot;</span><span class="p">,</span> <span class="nl">parameters:</span>
</span><span class='line'>          <span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="n">location</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">let</span> <span class="n">dataDict</span> <span class="o">=</span> <span class="n">try</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weatherArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataDict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weather:</span><span class="n">AnyObject</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">description:</span><span class="n">String</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>                  <span class="n">closure</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">print</span><span class="p">(</span><span class="s">&quot;例外が発生しました&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 複数都市の天気情報を取得しログ出力する処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">getMultiLocationWeather</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">tokyoWeather:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;unknown&quot;</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">osakaWeather:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;unknown&quot;</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">saitamaWeather:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;unknown&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// グループに 「+1」</span>
</span><span class='line'>      <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">queue</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">getWeather</span><span class="p">(</span><span class="s">&quot;Tokyo, jp&quot;</span><span class="p">,</span> <span class="nl">closure:</span> <span class="p">{</span> <span class="p">(</span><span class="n">weather</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>              <span class="n">tokyoWeather</span> <span class="o">=</span> <span class="n">weather</span>
</span><span class='line'>              <span class="c1">// グループに 「-1」</span>
</span><span class='line'>              <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// グループに 「+1」</span>
</span><span class='line'>      <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">queue</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">getWeather</span><span class="p">(</span><span class="s">&quot;Osaka, jp&quot;</span><span class="p">,</span> <span class="nl">closure:</span> <span class="p">{</span> <span class="p">(</span><span class="n">weather</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>              <span class="n">osakaWeather</span> <span class="o">=</span> <span class="n">weather</span>
</span><span class='line'>              <span class="c1">// グループに 「-1」</span>
</span><span class='line'>              <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// グループに 「+1」</span>
</span><span class='line'>      <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">queue</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">getWeather</span><span class="p">(</span><span class="s">&quot;Saitama, jp&quot;</span><span class="p">,</span> <span class="nl">closure:</span> <span class="p">{</span> <span class="p">(</span><span class="n">weather</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>              <span class="n">saitamaWeather</span> <span class="o">=</span> <span class="n">weather</span>
</span><span class='line'>              <span class="c1">// グループに 「-1」</span>
</span><span class='line'>              <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 全ての処理が終わったら実行される</span>
</span><span class='line'>      <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">group</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">queue</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Tokyo: \(tokyoWeather), Osaka: \(osakaWeather), Saitama: \(saitamaWeather)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上のように、3つの非同期処理で取得した情報を使って、文章を作成し、ログ出力することができます。</p>

<h4>非同期処理を同期処理にしたい(排他制御を使いたい)とき</h4>

<p>さて、こちらは正直、筆者は利用したいと思ったことがありません。<br/>
恐らく、かなり多機能なアプリで、極力多くの処理を並列に実行したい場合に必要なのかなと思ったりします。<br/>
では、なぜ書くかというと、先日スタックオーバーフローを見て気になったからです。</p>

<p>因みに、筆者のスタックオーバーフローユーザは<a href="http://ja.stackoverflow.com/users/8968/takahiro">こちら</a>です。</p>

<p><a href="https://blog.katty.in/2365">Objective-Cで非同期処理を同期処理にする方法。</a>の例をSwiftで書き直します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span><span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="nl">semaphore:</span><span class="n">dispatch_semaphore_t</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">queue:</span><span class="n">dispatch_queue_t</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">func</span> <span class="n">printLog</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="n">print</span><span class="p">(</span><span class="s">&quot;Process: \(i)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">semaphore</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;wait...&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">)</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行してみれば、下記のようにログ出力されることがわかるでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">wait</span><span class="p">...</span>
</span><span class='line'><span class="nl">Process:</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">Process:</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">Process:</span> <span class="mi">2</span>
</span><span class='line'><span class="nl">Process:</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">Process:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">finish</span>
</span></code></pre></td></tr></table></div></figure>


<p>非同期処理を待ってから、 <strong>finish</strong> とログ出力されていることがわかります。<br/>
この例ではわかりやすさのため、 <strong>dispatch_async</strong> を使って、非同期処理を作り出しています。</p>

<p>iOSアプリの開発でよく利用する非同期処理と言えば、通信処理ではないでしょうか？<br/>
Swiftでは特に<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>がよく利用されています。</p>

<p>Alamofireを使って、上記と似たことをやろうとすると、下記のように書くかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span><span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="nl">semaphore:</span><span class="n">dispatch_semaphore_t</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">queue:</span><span class="n">dispatch_queue_t</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">func</span> <span class="n">getWeather</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&quot;</span><span class="p">,</span> <span class="nl">parameters:</span>
</span><span class='line'>          <span class="p">[</span><span class="nl">q:</span> <span class="s">&quot;Tokyo, jp&quot;</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">let</span> <span class="n">dataDict</span> <span class="o">=</span> <span class="n">try</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">)</span>
</span><span class='line'>                      <span class="n">let</span> <span class="nl">weatherArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataDict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>                      <span class="n">let</span> <span class="nl">weather:</span><span class="n">AnyObject</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                      <span class="n">let</span> <span class="nl">description:</span><span class="n">String</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>                      <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">semaphore</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">print</span><span class="p">(</span><span class="s">&quot;例外が発生しました&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;wait...&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">)</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;finish&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかしながら、これは実行しても <strong>finish</strong> とログを出力することはありません。<br/>
理由は、<strong>dispatch_semaphore_wait</strong> を実行した後、メインスレッドを停止するのですが、<br/>
<code>Alamofire</code>の <strong>response</strong> のクロージャ処理はメインスレッドで実行されるため、<br/>
<strong>dispatch_semaphore_signal</strong> が実行されることがないからです。</p>

<p>実際に<code>Alamofire</code>の<code>ResponseSerialization.swift</code> > <code>Request</code> クラスを見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="nf">response</span><span class="p">(</span>
</span><span class='line'>  <span class="n">queue</span> <span class="nl">queue:</span> <span class="n">dispatch_queue_t</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">completionHandler:</span> <span class="p">(</span><span class="n">NSURLRequest</span><span class="o">?</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span><span class="o">?</span><span class="p">,</span> <span class="n">NSData</span><span class="o">?</span><span class="p">,</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">Self</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">delegate</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">addOperationWithBlock</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span> <span class="o">??</span> <span class="n">dispatch_get_main_queue</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">completionHandler</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">response</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっていることがわかるはずです。</p>

<p>さて、いかがでしたでしょうか？<br/>
GCDは非常に便利な反面、迂闊に使うと思わぬ落とし穴にハマってしまうことがあります。<br/>
とは言え、<br/>
一度ハマってみないと身につかないのがプログラミングの世界だと思っているので、<br/>
ぜひじゃんじゃん使ってハマってみて頂ければと思います笑</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tabBarControllerとUINavigationControllerを同時に使いたい！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/17/tabbarcontroller/"/>
    <updated>2016-01-17T22:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/17/tabbarcontroller</id>
    <content type="html"><![CDATA[<h4>tabBarControllerとUINavigationControllerを両立させよう！</h4>

<p>本日はtabBarControllerとUINavigationControllerを両方使いたい場合の方法を説明します。<br/>
方法は簡単です。</p>

<p><strong>tabBarControllerを先に追加して、</strong><br/>
<strong>その子要素にUINavigationControllerを追加してください。</strong></p>

<p>具体的に図で説明します。</p>

<p>１．storyboardでtabBarControllerを追加<br/>
XcodeメニューのEditor > Embed in > Tab Bar Controller を選択してください。<br/>
<img src="http://grandbig.github.io/images/tabBarController_1.png" alt="tabBarControllerの追加" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>すると、下図のようにstoryboardにTab Bar Controllerが追加されます。<br/>
<img src="http://grandbig.github.io/images/tabBarController_2.png" alt="storyboardに表示されます" /></p>

<p>このままでは、tabBarにitem(項目)が１つしかないので、ViewControllerを追加しましょう。</p>

<p>２．ドラッグ＆ドロップでstoryboardにUIViewControllerを追加<br/>
右メニューから <strong>View Controller</strong> をドラッグ＆ドロップしましょう。<br/>
<img src="http://grandbig.github.io/images/tabBarController_3.png" alt="View Controllerをドラッグ＆ドロップ" /></p>

<p>３．tabBarControllerと追加したUIViewControllerを紐付ける<br/>
Tab Bar Controller上でcontrolキーを押しながら、追加したView Controllerの方へ線を伸ばして紐付けます。<br/>
<img src="http://grandbig.github.io/images/tabBarController_4.png" alt="Tab Bar ControllerとView Controllerのひも付け" /></p>

<p>これにより、Tab Bar Controllerに1つ項目が増えて、View Controllerまでひも付けが伸びていることを確認できます。<br/>
<img src="http://grandbig.github.io/images/tabBarController_5.png" alt="項目の追加完了" /></p>

<p>続いて、UINavigationControllerを追加していきましょう。</p>

<p>４．子要素のView ControllerにUINavigationControllerを追加<br/>
UINavigationControllerを追加したいView Controllerを選択して、<br/>
XcodeメニューのEditor > Embed in > Navigation Controller を選択してください。<br/>
<img src="http://grandbig.github.io/images/tabBarController_6.png" alt="UINavigationControllerの追加" /></p>

<p>結果、Tab Bar ControllerとView Controllerの間にNavigation Controllerが追加されたことがわかると思います。<br/>
<img src="http://grandbig.github.io/images/tabBarController_7.png" alt="Navigation Controllerが追加されました" /></p>

<p>別の子要素のView ControllerにもNavigation Controllerが必要な場合は、<br/>
そのView Controllerに対して同じ操作を繰り返し実施してください。</p>

<p>storyboard上ではUINavigationControllerを先に追加して、<br/>
tabBarControllerを追加することもできます。<br/>
ですが、UINavigationControllerの戻るボタンの非表示やカスタム化などをしようとすると、<br/>
どうもうまくいきません&hellip;。<br/>
なので、一見無駄に見えるかもしれませんが、この方法を試してみることをオススメします。</p>

<p>本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickでSwiftコードのUnitテストをしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/16/quick/"/>
    <updated>2016-01-16T19:49:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/16/quick</id>
    <content type="html"><![CDATA[<h4>Quickフレームワークを使おう！</h4>

<p>先日、XCTestによるiOSアプリのUnit TestとUI Testについて記事を書きました。<br/>
もちろんXCTestを使って、テストをすることに問題はありません。<br/>
ですが、XCTestは非常に独特な書式で、初めて使う人には取っ付きにくいかと思います。</p>

<p>そんな中、注目を集めているiOSアプリ用のテストフレームワークが<a href="https://github.com/Quick/Quick">Quick</a>です。<br/>
GitHubに書かれている通り、<a href="https://github.com/rspec/rspec">RSpec</a> / <a href="https://github.com/specta/specta">Specta</a> / <a href="https://github.com/onsi/ginkgo">Ginkgo</a>にインスパイアされて開発されているため、親しみやすい書式でテストコードを書くことができます。<br/>
(筆者もこれを機に親しもうと思います笑)</p>

<p>これまでiOSアプリのテストコードは独特で&hellip;と避けてきた方がいましたら、ぜひ <strong>Quick</strong> を導入してみて頂ければと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Quickの導入方法</h4>

<p>では、Quickを導入しましょう。<br/>
GitHubにも書いてありますが、CocoaPodsでの導入方法は下記です。<br/>
※ 説明用のプロジェクト名を <strong>QuickSample</strong> とします。</p>

<p>１．Podfileの作成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">testing_pods</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Quick</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">0.8.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Nimble</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">3.0.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">QuickSampleTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">testing_pods</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">QuickSampleUITests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">testing_pods</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>２．CocoaPodsコマンドを実行<br/>
Podfileと同階層で<code>pod install</code>を実行</p>

<p>３．テストファイルを用意<br/>
プロジェクト作成時に<code>QuickSampleTests.swift</code>を作成しておいたので、それを編集します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// QuickSampleTests.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">Quick</span>
</span><span class='line'><span class="n">import</span> <span class="n">Nimble</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">QuickSample</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">QuickSampleTests:</span> <span class="n">QuickSpec</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ここにテストコードを書いていきます。</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>QuickSpec</code>をオーバーライドしたテスト用クラスになりました。<br/>
最低限の準備はこれで完了です。</p>

<h4>Quickでのテストコードの書式</h4>

<p>続いて、基本的なテストコードの書式を見ていきましょう。</p>

<p>１．<code>describe</code>：『何のテストをするのか』を記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// テストコード</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;天気情報をログ出力する&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 「天気情報をログ出力する」ことをテストするためのコードを書いていきます。</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>２．<code>context</code>：『どういった条件のテストをするのか』を記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// テストコード</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;天気情報をログ出力する&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="s">&quot;晴れの場合&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 天気が晴れの場合のテスト</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="s">&quot;雨の場合&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 天気が雨の場合のテスト</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>３．<code>it</code>：『このテストはこういった結果になる』ということを記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// テストコード</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;天気情報をログ出力する&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="s">&quot;晴れの場合&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 天気が晴れの場合のテスト</span>
</span><span class='line'>          <span class="n">it</span><span class="p">(</span><span class="s">&quot;print out &#39;sunny&#39;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 実行するテストコードをここに記述します</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>４．<code>expect('☓☓☓').to(△△△)</code>：『「☓☓☓」が「△△△」と等しい結果になる』ことを記述<br/>
ここは説明のために、テスト対象を<code>Weather.swift</code>として下記のようなコードだとします。<br/>
あくまでも<code>expect('☓☓☓').to(△△△)</code>の説明であるため、<code>Weather.getWeather</code>の処理は超簡単にしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Weather.swift</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Weather:</span><span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">getWeather</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;sunny&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてテストコードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// テストコード</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;天気情報をログ出力する&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="s">&quot;晴れの場合&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 天気が晴れの場合のテスト</span>
</span><span class='line'>          <span class="n">it</span><span class="p">(</span><span class="s">&quot;print out &#39;sunny&#39;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">Weather</span><span class="p">().</span><span class="n">getWeather</span><span class="p">()</span>
</span><span class='line'>              <span class="n">expect</span><span class="p">(</span><span class="n">weather</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">contain</span><span class="p">(</span><span class="s">&quot;sunny&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>補足すると、</p>

<p>・戻り値と期待値が完全一致する場合：<code>to(equal(△△△))</code><br/>
・戻り値が期待値の一部を含む場合：<code>to(contain(△△△))</code></p>

<p>といったように使い分けましょう。</p>

<p>５．非同期処理のテストをする場合<br/>
これまで同期処理を見てきましたが、今度は非同期処理を見ていきましょう。</p>

<p><code>Weather.swift</code>クラスに非同期処理を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Weather.swift</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Weather:</span><span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">getAsyncWeather</span><span class="p">(</span><span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPIDを指定&gt;&quot;</span><span class="p">,</span> <span class="nl">parameters:</span>
</span><span class='line'>          <span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="s">&quot;Tokyo,jp&quot;</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">let</span> <span class="n">dataDict</span> <span class="o">=</span> <span class="n">try</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weatherArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataDict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weather:</span><span class="n">AnyObject</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">description:</span><span class="n">String</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>                  <span class="n">closure</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">clouser</span><span class="p">(</span><span class="s">&quot;exception&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>XCTestでも説明しましたが、<br/>
Swiftではスタブの代わりに <strong>manual mocking</strong> という手法を採用しています。<br/>
なので、通信処理はテストコード内で継承したクラスを作成して、そちらで定数を返すようにしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// テストコード</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// manual mockingのための用意</span>
</span><span class='line'>  <span class="n">class</span> <span class="nl">WeatherMock:</span><span class="n">Weather</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">override</span> <span class="n">func</span> <span class="n">getAsyncWeather</span><span class="p">(</span><span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">closure</span><span class="p">(</span><span class="s">&quot;sunny&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;天気情報を取得する&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="s">&quot;晴れの場合&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 天気が晴れの場合のテスト</span>
</span><span class='line'>          <span class="n">it</span><span class="p">(</span><span class="s">&quot;print out &#39;sunny&#39;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">var</span> <span class="nl">result:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>              <span class="n">let</span> <span class="nl">wm:</span><span class="n">WeatherMock</span> <span class="o">=</span> <span class="n">WeatherMock</span><span class="p">()</span>
</span><span class='line'>              <span class="n">wm</span><span class="p">.</span><span class="n">getAsyncWeather</span><span class="p">{(</span><span class="n">weather</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>                  <span class="n">result</span> <span class="o">=</span> <span class="n">weather</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="n">toEventually</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;sunny&quot;</span><span class="p">))</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、非同期処理では、<code>to</code>ではなく<code>toEventually</code>を利用します。<br/>
<code>expect(result).toEventually(equal("sunny"), timeout: 10)</code>と書けば、<br/>
任意のタイムアウトを設定可能です。</p>

<p>その他のメソッドを探したい場合は、<br/>
<strong>Pods > Nimble > ObjCExpectation.swift > NMBExpectation</strong> を確認してみてください。<br/>
また、<a href="https://github.com/Quick/Nimble">GitHubのNimble</a>も参考になります。</p>

<h4>Quickでのテスト結果</h4>

<p>テストの実行方法はXCTestと同じです。<br/>
<strong>Xcodeメニュー > Product > Test</strong> を選択してテストを実行しましょう。</p>

<p>結果は同じく、Xcodeの左メニューに表示されます。</p>

<p><img src="http://grandbig.github.io/images/quick.png" alt="Xcodeのテスト結果" /></p>

<p>また、ログでも細かな結果が出力されますので、<br/>
(少し見づらいですが)なぜかテストが成功しないといったことがあれば、<br/>
積極的に確認してみましょう。</p>

<p>さて、いかがでしたでしょうか？<br/>
今のところは <strong>XCTest</strong> もしくは <strong>Quick</strong> によるUnit テストが主流になると思います。<br/>
開発者の使いやすさに合わせて選んでみてください。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京Node学園付属小学校 1限目に参加してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/15/node-elementary-school/"/>
    <updated>2016-01-15T19:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/15/node-elementary-school</id>
    <content type="html"><![CDATA[<h4>Node.jsを基礎から見直そう！</h4>

<p>以前、業務でNode.js v0.6.12だったり、v0.10.24だったりを触ってきました。<br/>
しかし個々最近は、ネイティブアプリ開発にかかりっきりになっていたので、Node.jsから遠ざかってしまっていました。<br/>
そんなこともあり、「これじゃいかん！」ということで今回、 <strong>東京Node学園付属小学校 1限目</strong> に参加してみることにしました。</p>

<p>通常のNode学園は行ったことがあったものの、非常にレベルが高いなと感じた経験があり、まずは思い出す足掛けということで&hellip;。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>勉強会の内容と感想</h4>

<p>さて、勉強会の内容と感想について書いていきます。</p>

<h5>オープニング</h5>

<p>teratailでは技術の壁をなくしたい。<br/>
何かサービスを開発するときには、いつも使っている言語を選びがちだけど、一番適した技術を使ったり、新しい技術を導入したりできると良いな〜という感じ。</p>

<p>工数やリソースの問題から、保守的になって実績のあるやり方で進めるパターン多いんだよな〜と思いながら聞いていました笑。</p>

<h5>ゲスト講演</h5>

<p>ゲスト講演はNode.js日本ユーザーグループ代表の古川陽介さんが担当されていました。<br/>
内容はあえてNode.jsではなく、Guillermo Rauch(socket.ioの作者)が提唱した  <strong>7 principles of rich web applications</strong> でした。<br/>
筆者は勉強不足のせいもあって、初めて知りました。</p>

<p>古川さん曰く、実際に7つの原則を満たしているWeb Applicationは存在しないんではないかと&hellip;。<br/>
詳しい内容は<a href="http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415">【翻訳】リッチなWebアプリケーションのための7つの原則</a>に書かれています。</p>

<p>筆者個人としてはSPA(Single Page Application)が興味を惹いている理由を知れたり、<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail">RAIL</a>という重要な指標を知れたりと、かなり勉強になりました。</p>

<p>また特に印象的だったのは、 <strong>レイテンシの壁</strong> の話でした。<br/>
通信をする限り、レイテンシは必ず存在するのだと。<br/>
それを処理の仕方で早く見せることができないかと鎬を削る様がとても惹きつけられました。</p>

<p>最近ネイティブ開発ばかりやっていた自分としては、描画に対するレイテンシはあまり気にしていませんでした。<br/>
きちんと考えないとダメだなと。</p>

<p>JavaScriptは7つの原則をクリアできるのだ！！</p>

<h5>LT</h5>

<p>続いて、LTです。<br/>
<strong>東京Node学園付属小学校</strong> という名にふさわしく、知識・技術的についていけないといったことなく、落ち着いて聞くことができました。</p>

<p>以下、聞いたことを箇条書き</p>

<ul>
<li>お役立ちツール

<ul>
<li><a href="http://swagger.io/">SWAGGER</a>
Web APIドキュメント生成ツール</li>
<li><a href="http://nodered.org/">Node-RED</a>
Drug&amp;Dropで簡単にWebアプリを作れるツール</li>
<li><a href="http://loopback.io/">LoopBack</a>
Node.jsベースのBaaSを作れるオープンソース
　</li>
</ul>
</li>
<li>Node.jsが使われているサービス

<ul>
<li>Uber</li>
<li>PayPal(JavaからNode.jsに移行)</li>
<li>NETFLIX
　</li>
</ul>
</li>
<li>Node.jsの良いところ

<ul>
<li>非エンジニアでも簡単にWebアプリが作れる</li>
<li>クライアントとサーバサイド共にJavaScriptで書ける</li>
<li>リアルタイム通信でいろいろなWebアプリを作りたくなる</li>
<li>IoTでも使える</li>
<li>「同時に接続して、チームで協力してゴールを達成する」方向にも注目&hellip;</li>
</ul>
</li>
</ul>


<p>とりあえず、Node.js意欲が湧いてきたので、何か作りたい！！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jazzyを使って、Swiftで書いたプロジェクトのリファレンスを自動生成しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/12/jazzy/"/>
    <updated>2016-01-12T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/12/jazzy</id>
    <content type="html"><![CDATA[<h4>jazzyとは</h4>

<p>さて、本日は<a href="https://github.com/Realm/jazzy">jazzy</a>について書こうと思います。<br/>
jazzyはSwiftで書いたプロジェクトのリファレンスを自動で生成できるツールです。<br/>
最近、熱いMobile DatabaseであるRealmと同じチームが開発しているようです。<br/>
今のところ、他に良さそうなツールはないんじゃないでしょうか？</p>

<p>兎にも角にも、早速使ってみることにします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>jazzyのインストール</h5>

<p>jazzyのインストールは簡単です。<br/>
下記コマンドを実行してください。</p>

<p><code>sudo gem install jazzy</code></p>

<h5>jazzyのコマンド</h5>

<p><code>jazzy -h</code>を実行してコマンドを確認してみましょう。<br/>
下記のような結果が得られるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="nl">Usage:</span> <span class="n">jazzy</span>
</span><span class='line'>
</span><span class='line'><span class="n">Options</span>
</span><span class='line'>  <span class="o">-</span><span class="n">o</span><span class="p">,</span> <span class="o">--</span><span class="n">output</span> <span class="n">FOLDER</span>              <span class="n">Folder</span> <span class="n">to</span> <span class="n">output</span> <span class="n">the</span> <span class="n">HTML</span> <span class="n">docs</span> <span class="n">to</span>
</span><span class='line'>  <span class="o">-</span><span class="n">c</span><span class="p">,</span> <span class="o">--</span><span class="p">[</span><span class="n">no</span><span class="o">-</span><span class="p">]</span><span class="n">clean</span>                 <span class="n">Delete</span> <span class="n">contents</span> <span class="n">of</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">before</span> <span class="n">running</span><span class="p">.</span>
</span><span class='line'>                                   <span class="nl">WARNING:</span> <span class="n">If</span> <span class="o">--</span><span class="n">output</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="o">~/</span><span class="n">Desktop</span><span class="p">,</span> <span class="n">this</span> <span class="n">will</span> <span class="n">delete</span> <span class="n">the</span> <span class="o">~/</span><span class="n">Desktop</span> <span class="n">directory</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="p">[</span><span class="n">no</span><span class="o">-</span><span class="p">]</span><span class="n">objc</span>                  <span class="n">Generate</span> <span class="n">docs</span> <span class="k">for</span> <span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">umbrella</span><span class="o">-</span><span class="n">header</span> <span class="n">PATH</span>       <span class="n">Umbrella</span> <span class="n">header</span> <span class="k">for</span> <span class="n">your</span> <span class="n">Objective</span><span class="o">-</span><span class="n">C</span> <span class="n">framework</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">framework</span><span class="o">-</span><span class="n">root</span> <span class="n">PATH</span>        <span class="n">The</span> <span class="n">root</span> <span class="n">path</span> <span class="n">to</span> <span class="n">your</span> <span class="n">Objective</span><span class="o">-</span><span class="n">C</span> <span class="n">framework</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">sdk</span> <span class="p">[</span><span class="n">iphone</span><span class="o">|</span><span class="n">watch</span><span class="o">|</span><span class="n">appletv</span><span class="p">][</span><span class="n">os</span><span class="o">|</span><span class="n">simulator</span><span class="p">]</span><span class="o">|</span><span class="n">macosx</span>
</span><span class='line'>                                   <span class="n">The</span> <span class="n">SDK</span> <span class="k">for</span> <span class="n">which</span> <span class="n">your</span> <span class="n">code</span> <span class="n">should</span> <span class="n">be</span> <span class="n">built</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">config</span> <span class="n">PATH</span>                <span class="n">Configuration</span> <span class="n">file</span> <span class="p">(.</span><span class="n">yaml</span> <span class="n">or</span> <span class="p">.</span><span class="n">json</span><span class="p">)</span>
</span><span class='line'>                                   <span class="nl">Default:</span> <span class="p">.</span><span class="n">jazzy</span><span class="p">.</span><span class="n">yaml</span> <span class="k">in</span> <span class="n">source</span> <span class="n">directory</span> <span class="n">or</span> <span class="n">ancestor</span>
</span><span class='line'>  <span class="o">-</span><span class="n">x</span> <span class="n">arg1</span><span class="p">,</span><span class="n">arg2</span><span class="p">,</span><span class="err">…</span><span class="n">argN</span><span class="p">,</span>              <span class="n">Arguments</span> <span class="n">to</span> <span class="n">forward</span> <span class="n">to</span> <span class="n">xcodebuild</span>
</span><span class='line'>      <span class="o">--</span><span class="n">xcodebuild</span><span class="o">-</span><span class="n">arguments</span>
</span><span class='line'>  <span class="o">-</span><span class="n">s</span> <span class="n">FILEPATH</span><span class="p">,</span>                     <span class="n">File</span> <span class="n">generated</span> <span class="n">from</span> <span class="n">sourcekitten</span> <span class="n">output</span> <span class="n">to</span> <span class="n">parse</span>
</span><span class='line'>      <span class="o">--</span><span class="n">sourcekitten</span><span class="o">-</span><span class="n">sourcefile</span>
</span><span class='line'>      <span class="o">--</span><span class="n">source</span><span class="o">-</span><span class="n">directory</span> <span class="n">DIRPATH</span>   <span class="n">The</span> <span class="n">directory</span> <span class="n">that</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">source</span> <span class="n">to</span> <span class="n">be</span> <span class="n">documented</span>
</span><span class='line'>  <span class="o">-</span><span class="n">e</span><span class="p">,</span> <span class="o">--</span><span class="n">exclude</span> <span class="n">file1</span><span class="p">,</span><span class="n">file2</span><span class="p">,</span><span class="err">…</span><span class="n">fileN</span> <span class="n">Files</span> <span class="n">to</span> <span class="n">be</span> <span class="n">excluded</span> <span class="n">from</span> <span class="n">documentation</span>
</span><span class='line'>      <span class="o">--</span><span class="n">swift</span><span class="o">-</span><span class="n">version</span> <span class="n">VERSION</span>
</span><span class='line'>  <span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="o">--</span><span class="n">author</span> <span class="n">AUTHOR_NAME</span>         <span class="n">Name</span> <span class="n">of</span> <span class="n">author</span> <span class="n">to</span> <span class="n">attribute</span> <span class="k">in</span> <span class="n">docs</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">Realm</span><span class="p">)</span>
</span><span class='line'>  <span class="o">-</span><span class="n">u</span><span class="p">,</span> <span class="o">--</span><span class="n">author_url</span> <span class="n">URL</span>             <span class="n">Author</span> <span class="n">URL</span> <span class="n">of</span> <span class="n">this</span> <span class="n">project</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="nl">http:</span><span class="c1">//realm.io)</span>
</span><span class='line'>  <span class="o">-</span><span class="n">m</span><span class="p">,</span> <span class="o">--</span><span class="n">module</span> <span class="n">MODULE_NAME</span>         <span class="n">Name</span> <span class="n">of</span> <span class="n">module</span> <span class="n">being</span> <span class="n">documented</span><span class="p">.</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">RealmSwift</span><span class="p">)</span>
</span><span class='line'>      <span class="o">--</span><span class="n">module</span><span class="o">-</span><span class="n">version</span> <span class="n">VERSION</span>     <span class="n">module</span> <span class="n">version</span><span class="p">.</span> <span class="n">will</span> <span class="n">be</span> <span class="n">used</span> <span class="n">when</span> <span class="n">generating</span> <span class="n">docset</span>
</span><span class='line'>      <span class="o">--</span><span class="n">copyright</span> <span class="n">COPYRIGHT_MARKDOWN</span>
</span><span class='line'>                                   <span class="n">copyright</span> <span class="n">markdown</span> <span class="n">rendered</span> <span class="n">at</span> <span class="n">the</span> <span class="n">bottom</span> <span class="n">of</span> <span class="n">the</span> <span class="n">docs</span> <span class="n">pages</span>
</span><span class='line'>      <span class="o">--</span><span class="n">readme</span> <span class="n">FILEPATH</span>            <span class="n">The</span> <span class="n">path</span> <span class="n">to</span> <span class="n">a</span> <span class="n">markdown</span> <span class="n">README</span> <span class="n">file</span>
</span><span class='line'>      <span class="o">--</span><span class="n">podspec</span> <span class="n">FILEPATH</span>
</span><span class='line'>      <span class="o">--</span><span class="n">docset</span><span class="o">-</span><span class="n">icon</span> <span class="n">FILEPATH</span>
</span><span class='line'>      <span class="o">--</span><span class="n">docset</span><span class="o">-</span><span class="n">path</span> <span class="n">DIRPATH</span>        <span class="n">The</span> <span class="n">relative</span> <span class="n">path</span> <span class="k">for</span> <span class="n">the</span> <span class="n">generated</span> <span class="n">docset</span>
</span><span class='line'>  <span class="o">-</span><span class="n">r</span><span class="p">,</span> <span class="o">--</span><span class="n">root</span><span class="o">-</span><span class="n">url</span> <span class="n">URL</span>               <span class="n">Absolute</span> <span class="n">URL</span> <span class="n">root</span> <span class="n">where</span> <span class="n">these</span> <span class="n">docs</span> <span class="n">will</span> <span class="n">be</span> <span class="n">stored</span>
</span><span class='line'>  <span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="o">--</span><span class="n">dash_url</span> <span class="n">URL</span>               <span class="n">Location</span> <span class="n">of</span> <span class="n">the</span> <span class="n">dash</span> <span class="n">XML</span> <span class="n">feed</span> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="nl">http:</span><span class="c1">//realm.io/docsets/realm.xml)</span>
</span><span class='line'>  <span class="o">-</span><span class="n">g</span><span class="p">,</span> <span class="o">--</span><span class="n">github_url</span> <span class="n">URL</span>             <span class="n">GitHub</span> <span class="n">URL</span> <span class="n">of</span> <span class="n">this</span> <span class="n">project</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="nl">https:</span><span class="c1">//github.com/realm/realm-cocoa)</span>
</span><span class='line'>      <span class="o">--</span><span class="n">github</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">prefix</span> <span class="n">PREFIX</span>  <span class="n">GitHub</span> <span class="n">URL</span> <span class="n">file</span> <span class="n">prefix</span> <span class="n">of</span> <span class="n">this</span> <span class="n">project</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="nl">https:</span><span class="c1">//github.com/realm/realm-cocoa/tree/v0.87.1)</span>
</span><span class='line'>      <span class="o">--</span><span class="n">min</span><span class="o">-</span><span class="n">acl</span> <span class="p">[</span><span class="n">private</span> <span class="o">|</span> <span class="n">internal</span> <span class="o">|</span> <span class="n">public</span><span class="p">]</span>
</span><span class='line'>                                   <span class="n">minimum</span> <span class="n">access</span> <span class="n">control</span> <span class="n">level</span> <span class="n">to</span> <span class="n">document</span>
</span><span class='line'>      <span class="o">--</span><span class="p">[</span><span class="n">no</span><span class="o">-</span><span class="p">]</span><span class="n">skip</span><span class="o">-</span><span class="n">undocumented</span>     <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">document</span> <span class="n">declarations</span> <span class="n">that</span> <span class="n">have</span> <span class="n">no</span> <span class="n">documentation</span> <span class="n">comments</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="p">[</span><span class="n">no</span><span class="o">-</span><span class="p">]</span><span class="n">hide</span><span class="o">-</span><span class="n">documentation</span><span class="o">-</span><span class="n">coverage</span>
</span><span class='line'>                                   <span class="n">Hide</span> <span class="s">&quot;(X% documented)&quot;</span> <span class="n">from</span> <span class="n">the</span> <span class="n">generated</span> <span class="n">documents</span>
</span><span class='line'>      <span class="o">--</span><span class="n">head</span> <span class="n">HTML</span>                  <span class="n">Custom</span> <span class="n">HTML</span> <span class="n">to</span> <span class="n">inject</span> <span class="n">into</span> <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;&lt;/</span><span class="n">head</span><span class="o">&gt;</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">theme</span> <span class="p">[</span><span class="n">apple</span> <span class="o">|</span> <span class="n">fullwidth</span> <span class="o">|</span> <span class="n">DIRPATH</span><span class="p">]</span>
</span><span class='line'>                                   <span class="n">Which</span> <span class="n">theme</span> <span class="n">to</span> <span class="n">use</span><span class="p">.</span> <span class="n">Specify</span> <span class="n">either</span> <span class="err">&#39;</span><span class="n">apple</span><span class="err">&#39;</span> <span class="p">(</span><span class="k">default</span><span class="p">),</span> <span class="err">&#39;</span><span class="n">fullwidth</span><span class="err">&#39;</span> <span class="n">or</span> <span class="n">the</span> <span class="n">path</span> <span class="n">to</span> <span class="n">your</span> <span class="n">mustache</span> <span class="n">templates</span> <span class="n">and</span> <span class="n">other</span> <span class="n">assets</span> <span class="k">for</span> <span class="n">a</span> <span class="n">custom</span> <span class="n">theme</span><span class="p">.</span>
</span><span class='line'>  <span class="o">-</span><span class="n">t</span><span class="p">,</span> <span class="o">--</span><span class="n">template</span><span class="o">-</span><span class="n">directory</span> <span class="n">DIRPATH</span> <span class="nl">DEPRECATED:</span> <span class="n">Use</span> <span class="o">--</span><span class="n">theme</span> <span class="n">instead</span><span class="p">.</span>
</span><span class='line'>      <span class="o">--</span><span class="n">assets</span><span class="o">-</span><span class="n">directory</span> <span class="n">DIRPATH</span>   <span class="nl">DEPRECATED:</span> <span class="n">Use</span> <span class="o">--</span><span class="n">theme</span> <span class="n">instead</span><span class="p">.</span>
</span><span class='line'>  <span class="o">-</span><span class="n">v</span><span class="p">,</span> <span class="o">--</span><span class="n">version</span>                    <span class="n">Print</span> <span class="n">version</span> <span class="n">number</span>
</span><span class='line'>  <span class="o">-</span><span class="n">h</span><span class="p">,</span> <span class="o">--</span><span class="n">help</span> <span class="p">[</span><span class="n">TOPIC</span><span class="p">]</span>               <span class="n">Available</span> <span class="nl">topics:</span>
</span><span class='line'>                                      <span class="n">usage</span>   <span class="n">Command</span> <span class="n">line</span> <span class="n">options</span> <span class="p">(</span><span class="n">this</span> <span class="n">help</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>                                      <span class="n">config</span>  <span class="n">Configuration</span> <span class="n">file</span> <span class="n">options</span>
</span><span class='line'>                                   <span class="p">...</span><span class="n">or</span> <span class="n">an</span> <span class="n">option</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="s">&quot;dash&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ヘルプを見て頂ければ、なんとなく概要をつかめると思いますが、特に重要なものを説明します。</p>

<ol>
<li><code>-o FOLDER</code><br/>
リファレンスの出力場所を指定するコマンドです</li>
<li><code>--min-acl [private | internal | public]</code><br/>
リファレンスに出力するプロパティおよびメソッドの最低アクセス権限<br/>
例えば、<code>--min-acl public</code>を指定した場合、<code>private</code>や<code>internal</code>指定されたプロパティやメソッドはリファレンスに出力されません。</li>
<li><code>--skip-undocumented</code><br/>
ドキュメントコメントが書かれていないプロパティやメソッドはリファレンスに出力しません。</li>
<li><code>--author AUTHOR_NAME</code><br/>
リファレンスに開発者を明記します。</li>
<li><code>--author_url URL</code><br/>
リファレンス上に表記される開発者名にURlリンクを付与します。</li>
</ol>


<h4>Swift2.0以降でのドキュメントコメントの書き方について</h4>

<p>Swift2.0以降でのドキュメントコメントの書き方を見ていきます。<br/>
<strong>jazzy</strong> を使うことを前提にした書き方のみ記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'>
</span><span class='line'><span class="cm">UIViewControllerを継承したViewControllerクラス</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Properties</span>
</span><span class='line'>  <span class="c1">/// 文字列を格納するためのサンプル変数</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">sampleParam1:</span><span class="n">String</span><span class="o">?</span>
</span><span class='line'>  <span class="c1">/// 数値を格納するためのサンプル定数</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">sampleParam2:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// MARK: Method</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ログを出力するメソッド</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm"> - parameter message: ログ出力したいメッセージ</span>
</span><span class='line'><span class="cm">                 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">sampleMethod</span><span class="p">(</span><span class="nl">message:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> trueフラグを返すメソッド</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm"> - returns: trueフラグ</span>
</span><span class='line'><span class="cm">                 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">sampleMethod2</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> メッセージを生成するメソッド</span>
</span><span class='line'><span class="cm">          </span>
</span><span class='line'><span class="cm"> - parameter message: 生成したいメッセージの一部分</span>
</span><span class='line'><span class="cm"> - returns: 生成したメッセージ</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">sampleMethod3</span><span class="p">(</span><span class="nl">message:</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;生成したメッセージ： \(message)&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは、</p>

<ul>
<li>クラス名にドキュメントコメントを必ずつけること</li>
<li>メソッドのDescriptionとParameterもしくはReturnとの間に1行をあけること</li>
<li><code>:param:</code>や<code>:returns:</code>といった古い書き方をしないこと</li>
</ul>


<p>です。</p>

<p>上記ポイントを踏まえた上で、<br/>
<code>jazzy --min-acl internal --skip-undocumented -o jazzy_doc --author Takahiro --author_url https://grandbig.github.io/</code><br/>
を実行してみましょう。<br/>
オプションは必要に応じてつけてください。</p>

<p>結果、下図のようなリファレンスが作成されます。</p>

<p><img src="http://grandbig.github.io/images/jazzy_1.png" alt="トップページ" /><br/>
こちらはトップページです。</p>

<p><img src="http://grandbig.github.io/images/jazzy_2.png" alt="クラスの説明" /><br/>
続いて、クラスを選択した際に表示されるクラスの説明ページ</p>

<p><img src="http://grandbig.github.io/images/jazzy_3.png" alt="クラスのプロパティの説明" /><br/>
各プロパティを選択すれば、その説明が表示されます。</p>

<p><img src="http://grandbig.github.io/images/jazzy_4.png" alt="クラスのメソッドの説明" /><br/>
各メソッドを選択すれば、その説明が表示されます。</p>

<p>いかがだったでしょうか？<br/>
リファレンスは第三者にソースコードを説明する上でも非常に重要なものです。<br/>
初めから書式ルールに沿ってコードを書いておけば、自動生成ツールで速攻リファレンスを作れますので、ぜひぜひ把握しておきましょう。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでXCTestを使って単体テストとUIテストをしてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/11/xctest/"/>
    <updated>2016-01-11T19:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/11/xctest</id>
    <content type="html"><![CDATA[<h4>iOSアプリケーション開発でのテストとは</h4>

<p>さて、本日はiOSアプリケーションを開発する際のテストについて書きたいと思います。<br/>
元々、Objective-Cでは下記のテスト用のライブラリが使われてきました。</p>

<ul>
<li><a href="https://github.com/kiwi-bdd/Kiwi">Kiwi</a></li>
<li><a href="https://github.com/gh-unit/gh-unit">GHUnit</a></li>
<li><a href="https://github.com/specta/specta">Specta</a></li>
</ul>


<p>しかし、これらはあくまでもObjective-C時代にApple公式のテストフレームワークが充実する以前から活躍していたものです。今後、Swiftが普及するにつれて、これらのテストフレームワークもSwiftに最適化したものになっていくかもしれません。<br/>
とは言え、AppleもいつまでもOSSのテストフレームワークがなければならない状況は避け、Xcode内で完結することを目指していくかもしれません。<br/>
後ほど詳しく説明しますが、Xcode7からUIテストが新たに追加されたのも、その流れだと思っています。</p>

<p>本日は特に <strong>XCTest</strong> に焦点をあてた、iOSにおけるテストについて見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>XCTestでUnit Test</h4>

<p>早速、XCTestの使い方について見ていきましょう。<br/>
Xcode7ではプロジェクトを新規作成する際にXCTest用のTargetを作成するか否かを選ぶことができます。<br/>
初めにチェックを入れていない場合は、途中で追加することが可能ですが、単体テストをすることは大切なので、チェックはつけておきましょう。</p>

<p><img src="http://grandbig.github.io/images/xctest_1.png" alt="プロジェクト作成時にXCTest用のTargetを作成" /></p>

<p>今回テストするソースコードは下記のようなシンプルなものにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showWeather</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">getWeather</span><span class="p">{(</span><span class="n">description</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">getWeather</span><span class="p">(</span><span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPIDを指定&gt;&quot;</span><span class="p">,</span> <span class="nl">parameters:</span>
</span><span class='line'>          <span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="s">&quot;Tokyo&quot;</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">let</span> <span class="n">dataDict</span> <span class="o">=</span> <span class="n">try</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weatherArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataDict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weather:</span><span class="n">AnyObject</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">description:</span><span class="n">String</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>                  <span class="c1">// アラートを表示</span>
</span><span class='line'>                  <span class="n">self</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">print</span><span class="p">(</span><span class="s">&quot;例外が発生しました！&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は <strong>showWeather</strong> メソッドのUnit Testを書いていきます。<br/>
上記コードを見て頂くと、 <strong>showWeather</strong> メソッドは <strong>Open Weather Map API</strong> を使って東京の天気を取得し、それをログとして出力していることがわかると思います。<br/>
前半の <strong>Alamofire</strong> を使った通信処理はOSSライブラリを使っているわけで、この通信処理のテストがしたいわけではありません。<br/>
筆者が実施したいテストは後半の <strong>Open Weather Map API</strong> を使って <strong>取得した天気情報をログに出力する</strong> 部分です。<br/>
(本来はテストするまでもないのですが、テストの手法や考え方をメインに説明したいので、ソースは超簡単にしています。)</p>

<p>それを踏まえた上で、実際にテストコードを書いてみましょう。<br/>
&lt;Project名>Tests.swiftファイルを選択します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">SimpleApplication</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SimpleApplicationTests:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">tearDown</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">func</span> <span class="n">testShowWeather</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">class</span> <span class="nl">VCMock:</span><span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">override</span> <span class="n">func</span> <span class="n">getWeather</span><span class="p">(</span><span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">closure</span><span class="p">(</span><span class="s">&quot;test weather&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="nl">vcm:</span><span class="n">VCMock</span> <span class="o">=</span> <span class="n">VCMock</span><span class="p">()</span>
</span><span class='line'>      <span class="n">vcm</span><span class="p">.</span><span class="n">showWeather</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは</p>

<ol>
<li>テストメソッドの定義<br/>
テストメソッドは、 <strong>test + &lt;任意の文字列></strong> で命名しましょう。</li>
<li>スタブの定義<br/>
Swiftは <strong>manual mocking</strong> という手法を取ります。<br/>
これはテスト対象クラスを継承したクラスを定義し、テストしたいメソッドをオーバーライドします。<br/>
返却値等を固定文字列とすることで、スタブの作成となります。</li>
</ol>


<p>の2点です。</p>

<p>では、このテストを実行してみます。</p>

<p>まず、実行Targetに <strong>&lt;Project名>Tests</strong> を選択できるようにSchemeを編集します。</p>

<p><img src="http://grandbig.github.io/images/xctest_2.png" alt="Manage Schemes..." /></p>

<p><img src="http://grandbig.github.io/images/xctest_3.png" alt="Add Scheme" /></p>

<p><img src="http://grandbig.github.io/images/xctest_4.png" alt="Choose Testsファイル" /></p>

<p><img src="http://grandbig.github.io/images/xctest_5.png" alt="Set Scheme" /><br/>
実行するSchemeを <strong>&lt;Project名>Tests</strong> に設定し、実行デバイスをシミュレータにします。<br/>
(実機ではテスト実行できないからです。)</p>

<p><img src="http://grandbig.github.io/images/xctest_6.png" alt="Testを実行" /><br/>
Xcodeメニュー > Product > Test を選択してテストを実行します。</p>

<p><img src="http://grandbig.github.io/images/xctest_7.png" alt="テスト結果の確認" /><br/>
左メニューおよびコード上からテスト結果を確認できます。</p>

<p>メソッドが増えるごとにテストメソッドを増やしていきましょう。<br/>
テストファイルはクラス別に作成しておくと、第三者から見ても見やすいと思います。</p>

<h4>XCTestでUI Test</h4>

<p>続いて、Xcode7から追加されたUI Testの方法を見ていきたいと思います。<br/>
冒頭で説明した通り、プロジェクト作成時に <strong>include UI Tests</strong> を選択しておくことで、 <strong>&lt;Project名>UITests.swift</strong> ファイルが作成されます。</p>

<p>では、UI Test用に少しコードを修正してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">getWeatherAction</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">getWeather</span> <span class="p">{</span> <span class="p">(</span><span class="n">description</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">getWeather</span><span class="p">(</span><span class="nl">closure:</span><span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPIDを指定&gt;&quot;</span><span class="p">,</span> <span class="nl">parameters:</span>
</span><span class='line'>          <span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="s">&quot;Tokyo&quot;</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">let</span> <span class="n">dataDict</span> <span class="o">=</span> <span class="n">try</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weatherArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">dataDict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">weather:</span><span class="n">AnyObject</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                  <span class="n">let</span> <span class="nl">description:</span><span class="n">String</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>                  <span class="c1">// アラートを表示</span>
</span><span class='line'>                  <span class="n">self</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">print</span><span class="p">(</span><span class="s">&quot;例外が発生しました！&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">showAlert</span><span class="p">(</span><span class="nl">message:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">alertController:</span><span class="n">UIAlertController</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">okAction:</span><span class="n">UIAlertAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">alert</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// OKを選択したときに実行される処理</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">alertController</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">presentViewController</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これに伴い、画面にボタンを配置しました。<br/>
このボタンをタップすると、天気情報をアラートで表示してくれます。</p>

<p><img src="http://grandbig.github.io/images/xctest_8.png" alt="ボタンを配置" /></p>

<p><img src="http://grandbig.github.io/images/xctest_9.png" alt="アラートを表示" /></p>

<p>では、UI Testのテストコードを作成します。<br/>
UI Testの場合は、Xcodeの <strong>UI recording</strong> 機能を使って、手作業でコードを修正していきます。</p>

<p><img src="http://grandbig.github.io/images/xctest_10.png" alt="UI recording 開始ボタンをタップ" /></p>

<p><img src="http://grandbig.github.io/images/xctest_11.png" alt="UI recording 終了ボタンをタップ" /></p>

<p>すると、下記のようなコードが生成されました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="nf">testShowWeatherAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">app</span> <span class="o">=</span> <span class="n">XCUIApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="n">app</span><span class="p">.</span><span class="n">buttons</span><span class="p">[</span><span class="s">&quot;GET Weather&quot;</span><span class="p">].</span><span class="n">tap</span><span class="p">()</span>
</span><span class='line'>  <span class="n">app</span><span class="p">.</span><span class="n">alerts</span><span class="p">[</span><span class="s">&quot;\U78ba\U8a8d&quot;</span><span class="p">].</span><span class="n">collectionViews</span><span class="p">.</span><span class="n">buttons</span><span class="p">[</span><span class="s">&quot;OK&quot;</span><span class="p">].</span><span class="n">tap</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、このままではエラーが表示されるはずです。<br/>
理由はアラートのタイトルを日本語にしていたため、ASCIIコードで表示されてしまっているからです。<br/>
もし、指し示しているASCIIコードが理解できないようであれば、<a href="http://web-apps.nbookmark.com/ascii-converter/">ASCIIコード変換機</a>を使ってください。</p>

<p>ASCIIコード部分を修正した結果が下記となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="nf">testShowWeatherAlert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">app</span> <span class="o">=</span> <span class="n">XCUIApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="n">app</span><span class="p">.</span><span class="n">buttons</span><span class="p">[</span><span class="s">&quot;GET Weather&quot;</span><span class="p">].</span><span class="n">tap</span><span class="p">()</span>
</span><span class='line'>  <span class="n">app</span><span class="p">.</span><span class="n">alerts</span><span class="p">[</span><span class="s">&quot;確認&quot;</span><span class="p">].</span><span class="n">collectionViews</span><span class="p">.</span><span class="n">buttons</span><span class="p">[</span><span class="s">&quot;OK&quot;</span><span class="p">].</span><span class="n">tap</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストコードが作成できましたので、実行Targetに &lt;Project名>UITests を選択できるようにSchemeを編集します。</p>

<p><img src="http://grandbig.github.io/images/xctest_12.png" alt="Manage Schemes..." /></p>

<p><img src="http://grandbig.github.io/images/xctest_13.png" alt="Add Scheme" /></p>

<p><img src="http://grandbig.github.io/images/xctest_14.png" alt="Choose Testsファイル" /></p>

<p><img src="http://grandbig.github.io/images/xctest_15.png" alt="Set Scheme" /><br/>
実行するSchemeを &lt;Project名>UITests に設定し、実行デバイスをシミュレータにします。<br/>
(実機ではテスト実行できないからです。)</p>

<p><img src="http://grandbig.github.io/images/xctest_6.png" alt="Testを実行" /><br/>
Xcodeメニュー > Product > Test を選択してテストを実行します。</p>

<p><img src="http://grandbig.github.io/images/xctest_16.png" alt="テスト結果の確認" /><br/>
左メニューおよびコード上からテスト結果を確認できます。</p>

<p>Unit Testと同様にメソッドが増えるごとにテストメソッドを増やしていきましょう。<br/>
テストファイルはクラス別に作成しておくと、第三者から見ても見やすいと思います。</p>

<p>いかがだったでしょうか？<br/>
今回は超簡単なサンプルコードで基本的なことについて説明しましたが、今後深く使っていくことで躓くこともあるかもしれません。<br/>
その際にはまたブログにて説明したいと思います。<br/>
ぜひ、単体テストとUIテストを駆使して、バグの少ないアプリを作っていきたいものです。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今一度確かめようiOSにおけるHTML5 APIでの位置情報の取得]]></title>
    <link href="http://grandbig.github.io/blog/2015/12/23/geolocation/"/>
    <updated>2015-12-23T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/12/23/geolocation</id>
    <content type="html"><![CDATA[<h4>はじめに</h4>

<p>こちらはiOS Second Stage Advent Calendar 23日目の記事です。</p>

<p>筆者はこれまで2年と少し技術ブログを投稿してきましたが、Advent Calendarへの投稿はこれが初めてとなります。<br/>
どうぞよろしくお願いします。</p>

<p>今回お話させて頂く内容はiOSアプリでの位置情報の取得に関することです。<br/>
ほとんどの開発者の方は<code>CoreLocation.framework</code>を用いて位置情報の取得をされると思いますが、HTML5の<code>Geolocation API</code>を使っても位置情報の取得をすることができます。<br/>
とは言え、なぜわざわざiOSのパートで <strong>HTML5</strong> による位置情報取得の話をするかと言うと1つ理由があるんです。<br/>
その理由を紹介しつつ、現代のiOSによるHTML5の<code>Geolocation API</code>での位置情報取得について話したいと思います。</p>

<!-- more -->


<h4>2012年当時のGeolocation APIでの問題について</h4>

<p>実は筆者は3年ほど前に、iOSアプリに <strong>『HTML5 Geolocation APIによる位置情報取得機能』</strong> を実装する機会がありました。<br/>
そのアプリは2011年途中から開発が始まり、その間にiOSのバージョンも4.x→5.x→6.xと移り変わってきました。<br/>
iOS 4.x〜5.xの際は順調に進んでいたのですが、2012/09/19にiOS6.0が公開されるやいなや状況が一変しました。<br/>
というのもiOS6.0ではHTML5の<code>Geolocation API</code>による位置情報の取得に問題があったからなのです。</p>

<p>そもそも、HTML5の<code>Geolocation API</code>は下記のように使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 位置情報の取得に成功した場合</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lng</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">acc</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">accuracy</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 位置情報の取得に失敗した場合</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;位置情報が許可されていません。&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;デバイスの位置がわかりません。&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;アイムアウトしました。&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// オプションの設定</span>
</span><span class='line'>  <span class="nx">enableHighAccuracy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">timeout</span><span class="o">:</span> <span class="mi">6000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">maximumAge</span><span class="o">:</span> <span class="mi">60000</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>特に見て欲しいのが、オプションの設定の <strong>maximumAge</strong> です。<br/>
<strong>maximumAge</strong> は位置情報の有効期限を示す設定なのですが、iOS6.xでは <strong>maximumAge</strong> を0で設定しないと、継続的な位置情報の取得ができませんでした。<br/>
これはあくまでも一例なのですが、iOS6.0が出てきた当初は、下記のように悲痛な叫びが散見していました。</p>

<ul>
<li><a href="https://discussionsjapan.apple.com/thread/10126475?tstart=0">iOS6でGeolocation APIが動かない？</a></li>
<li><a href="https://discussions.apple.com/thread/4313850?start=30&amp;tstart=0">Geolocation doesn&rsquo;t work with iOS6 web apps!</a></li>
</ul>


<p>当時はGeolocation APIでの位置情報は利用に耐えないということで見送りましたが、現在のiOS9におけるGeolocation APIでの動作はどうなっているのでしょうか？</p>

<h4>現代のiOSでのGeolocation APIはどうなっている？</h4>

<p>さて、iOS9.xでは果たして<code>Geolocation API</code>の挙動はどうなっているのでしょうか？<br/>
今回はこの挙動を確かめるために下記機能を持ったアプリを開発し、実験を試みました。</p>

<p>【アプリの機能】</p>

<ul>
<li><code>Geolocation API</code>による位置情報取得機能を実装</li>
<li><code>CoreLocation.framework</code>による位置情報取得機能を実装</li>
<li>上記2つの位置情報をローカルストレージに保存(<code>RealmSwift</code>を利用)</li>
</ul>


<p>WEBフロントのソースコードは<a href="https://github.com/grandbig/GeoLocationSample">GitHubのGeoLocationSample</a>に公開しました。<br/>
iOSアプリのソースコードは<a href="https://github.com/grandbig/GeoLocation_iOS">GitHubのGeoLocation_iOS</a>に公開しました。</p>

<p>【実験したい内容】</p>

<ul>
<li>開発アプリを用いて幾つか位置情報を取得する</li>
<li><code>Geolocation API</code>で取得した位置情報の評価(キャッシュの有無を調査)</li>
<li><code>Geolocation API</code>と<code>CoreLocation.framework</code>で取得した値を比較</li>
</ul>


<p>【結果】</p>

<p>実験結果を一部抽出してGoogleマップにプロットしてみました。<br/>
<img src="http://grandbig.github.io/images/geolocation_plot.png" alt="結果のプロット" /></p>

<ul>
<li><code>Geolocation API</code>と<code>CoreLocation.framework</code>では精度のに大きな違いが出ないことがほとんど</li>
<li>地下鉄の駅に到着した際に取得するとWi-Fiのアクセスポイントをひろうため、精度に違いが出ないことが多い

<ul>
<li>精度が65 [m] の場合、Wi-Fiのアクセスポイントをひろっています。</li>
</ul>
</li>
<li><code>Geolocation API</code>はiOS9ではキャッシュの有効・無効が機能していた</li>
</ul>


<p>因みに、AppleがiOS9からATS設定を組み込んだように、世の中ではHTTPSを使うことが当たり前になってきています。<br/>
(というよりも商用サービスでHTTPを使わないことが当たり前になってきていると言いますか&hellip;)</p>

<p>実は、<code>Geolocation API</code>でも下記のような警告が出ました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">getCurrentPosition</span><span class="p">()</span> <span class="nx">and</span> <span class="nx">watchPosition</span><span class="p">()</span> <span class="nx">are</span> <span class="nx">deprecated</span> <span class="nx">on</span> <span class="nx">insecure</span> <span class="nx">origins</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">support</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">removed</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">future</span><span class="p">.</span> <span class="nx">You</span> <span class="nx">should</span> <span class="nx">consider</span> <span class="nx">switching</span> <span class="nx">your</span> <span class="nx">application</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">secure</span> <span class="nx">origin</span><span class="p">,</span> <span class="nx">such</span> <span class="nx">as</span> <span class="nx">HTTPS</span><span class="p">.</span> <span class="nx">See</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//goo.gl/rStTGz for more details.</span>
</span></code></pre></td></tr></table></div></figure>


<h4>それぞれの使いどころは！？</h4>

<p>iOS9での実験を経て、精度として問題がないことがわかりました。<br/>
ではどんなときに<code>Geolocation API</code>を使って、どんなときに<code>CoreLocation.framework</code>を使えば良いのでしょうか？<br/>
筆者はざっくりと下記のパターン分けを考えています。</p>

<p>【<code>Geolocation API</code>を使う場合】</p>

<ul>
<li>ネイティブでの実装よりもWEBでの実装に慣れている場合</li>
<li>位置情報の利用シーンがアプリのフォアグラウンド起動時のみの場合</li>
<li>現在地の位置情報を1回取得すれば良い場合(取得までの時間がかからない)</li>
</ul>


<p>【<code>CoreLocation.framework</code>を使う場合】</p>

<ul>
<li>位置情報の利用シーンがアプリのバックグラウンド起動時も含む場合</li>
<li>位置情報の連続的な取得が必要な場合</li>
<li>現在地の位置情報を1回取得する際に多少時間がかかっても良い場合(<code>requestLocation</code>では約10秒かかる)</li>
</ul>


<p>もちろん、iOSに限った話ですし、Androidでの挙動も確かめる必要があります。<br/>
旧Androidの場合、WebViewがAndroid OSに依存しているため、<code>Geolocation API</code>の対応具合にバラつきがある可能性もあります。(それこそ、バグを含んでしまっている場合、ユーザがOSバージョンアップしないと解決できないことにも成りかねません。)<br/>
とは言え、AndroidもWebViewがOSから分離されましたし、旧Androidであっても、CROSSWALKを使う方法もあるので、やりようはありますし、HTML5 APIの実用性もどんどん上がっていくことでしょう。<br/>
もしかしたら、これから益々、ネイティブとハイブリッドの使い分けを考える時代になるかもしれません。</p>

<h4>まとめ</h4>

<p>久々に見てみるといろいろ変わってるな&hellip;。<br/>
といったところでiOS Second Stage Advent Calendar 23日目の記事は終了となります。<br/>
ありがとうございました！<br/>
(また来年、帰ってくるかも!?)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超簡単Windows AzureでのWebサイト構築]]></title>
    <link href="http://grandbig.github.io/blog/2015/12/13/use-windows-azure/"/>
    <updated>2015-12-13T02:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/12/13/use-windows-azure</id>
    <content type="html"><![CDATA[<h4>Windows AzureでWebサイトを構築しよう</h4>

<p>さて、本日はWinsows Azureを使って簡単にWebサイトを構築したいと思います。<br/>
筆者は数年ぶりにWindows Azureを触ったため、UI・UXが結構変わっているなという印象を受けました。</p>

<p>Webアプリケーションを開発するとき、ページビューのみであれば、ローカル環境で十分でしょう。<br/>
しかし、位置情報やBeaconなどのIoT関連のアプリケーションを開発する場合、ローカル環境のWebページを閲覧できないこともあるでしょう。<br/>
そんなときはどうしてもサーバが欲しくなりますね。<br/>
筆者はWindows Azureをオススメしたいと思います。(AWSは使ったことないけど&hellip;)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>それでは早速、簡単にWebサイトを構築する方法について説明しましょう。</p>

<p>１. ポータルサイトからサーバを新規作成</p>

<p><img src="http://grandbig.github.io/images/windows-azure-1.png" alt="サーバを新規作成" /></p>

<p>２. Web+モバイル > Web Appを選択</p>

<p><img src="http://grandbig.github.io/images/windows-azure-2.png" alt="サーバを新規作成２" /></p>

<p>３. Webアプリ名を決めて作成</p>

<p><img src="http://grandbig.github.io/images/windows-azure-3.png" alt="サーバを新規作成３" /></p>

<p>４. デプロイを待つ</p>

<p><img src="http://grandbig.github.io/images/windows-azure-4.png" alt="サーバを新規作成４" /></p>

<p>５. サーバ詳細画面に遷移</p>

<p><img src="http://grandbig.github.io/images/windows-azure-5.png" alt="サーバの新規作成が完了" /></p>

<p>６. サーバのデプロイ完了通知を受け取る</p>

<p><img src="http://grandbig.github.io/images/windows-azure-6.png" alt="サーバのデプロイ完了通知" /></p>

<p>７. リソースの設定</p>

<p><img src="http://grandbig.github.io/images/windows-azure-7.png" alt="サーバにリソースを設定" /></p>

<p>※筆者の場合はGitHubのリポジトリと同期させます。</p>

<p>８. リポジトリの同期</p>

<p><img src="http://grandbig.github.io/images/windows-azure-8.png" alt="リポジトリの同期" /></p>

<p>９. サーバ環境の完成</p>

<p><img src="http://grandbig.github.io/images/windows-azure-9.png" alt="サーバ環境が完成しました" /></p>

<p>本当にたったのこれだけでWebサイトを構築できるのです。<br/>
Node.jsなどをインストールしてAPサーバを構築する場合は少々手間がかかりますが、Webサーバを構築するだけなら簡単です。<br/>
ぜひ機会があれば使ってみて欲しいものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜか全然表示できないiOS9でのWebView(凡ミス)]]></title>
    <link href="http://grandbig.github.io/blog/2015/12/13/ios9-wkwebview/"/>
    <updated>2015-12-13T01:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/12/13/ios9-wkwebview</id>
    <content type="html"><![CDATA[<h4>超絶凡ミスによる小１時間苦しんだiOS9でのWebView表示</h4>

<p>今日は、久々に苦しんだ凡ミスについてメモを残しておきます。<br/>
iOS9でハイブリットアプリを開発しようとしてハマりました。</p>

<p>なぜかきちんと書いているつもりが、どうしてもWebViewが表示されない&hellip;なんてことありませんか？<br/>
答えはiOS9だからこそハマった凡ミスでした。</p>

<p>メモ程度に書いておきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">WebKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">WKNavigationDelegate</span><span class="p">,</span> <span class="n">WKUIDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">var</span> <span class="nl">webView:</span><span class="n">WKWebView</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="o">=</span> <span class="n">WKWebView</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">webview</span><span class="o">?</span><span class="p">.</span><span class="n">UIDelegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">webview</span><span class="o">?</span><span class="p">.</span><span class="n">navigationDelegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">NSURL</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;http://www.google.co.jp&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">req</span> <span class="o">=</span> <span class="n">NSURLRequest</span><span class="p">(</span><span class="nl">URL:</span> <span class="n">url</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="o">?</span><span class="p">.</span><span class="n">loadRequest</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、このままだと真っ白ページが表示されます。<br/>
何がダメなのでしょうか？</p>

<p>答えは <strong>ATS</strong> の設定がなかったからでした。<br/>
URLが <strong>http</strong> で指定されていたため、表示がされなかったのです。<br/>
iOS9が対象端末に入った時点で、 <strong>SSL</strong> は意識しておくべきですね。</p>

<p>すいません。本日はホントにメモです笑</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomエディタを使ってReact.jsを試してみた]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/29/react-tutorial-by-using-atom/"/>
    <updated>2015-11-29T01:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/29/react-tutorial-by-using-atom</id>
    <content type="html"><![CDATA[<h4>Atomエディタとは</h4>

<p>筆者はこれまでWeb系のファイルは全てvimで書いてきました。<br/>
このまま、vimを使い続けても良いのですが、最近やっと一般的に認知され始めた <a href="https://atom.io/">Atom</a> を使ってみようかなと思いつきで始めてみます笑<br/>
(Atomが招待制だった頃に少々触ってはいたのですが、改めて触ってみると、便利ですね&hellip;。)</p>

<p>因みにAtomとはGitHub製のオープンソースエディタです。<br/>
2015年6月にバージョン1.0が公開され、本記事の執筆時点でバージョン1.2.4が最新版となっています。<br/>
基本的な使いやすいと思った機能を下記にあげておきます。</p>

<ul>
<li>HTML, CSS, JavaScriptにおける予測変換機能</li>
<li>HTML, CSS, JavaScriptにおける対応する括弧の表示</li>
<li>HTML, CSS, JavaScriptにおける属性の色彩表示</li>
</ul>


<p>本日はAtomエディタを使って、基本的なReact.jsの使い方を勉強したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>React.jsとは</h4>

<p>さて、続いて、React.jsについて簡単に説明します。<br/>
<a href="https://facebook.github.io/react/index.html">React.js</a>とはFacebook製のUI構築ライブラリです。MVCで言うところの <strong>View</strong> のみをサポートします。MVC全てをサポートするわけではないため、<a href="https://angularjs.org/">AngularJS</a>や<a href="http://backbonejs.org/">Backbone.js</a>との併用が可能です。</p>

<p>React.jsはその仕組から大規模設計の際にも管理が可能であるとのことなので、メリット/デメリットを見極めつつ、ケースバイケースで使うのが良いのでしょう。<br/>
今回は勉強の意味を兼ねて、触ってみたいと思います。</p>

<h4>React.jsを使って、基本的なことを書いてみる</h4>

<p>本記事では <strong>v0.14.0</strong> のReact.jsを利用しています。<br/>
〜v0.13.xまでと変更点もあるかと思うので、<a href="http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html">Release Note</a>は常に追うと良いでしょう。</p>

<p>では、早速書いていきます。基本的には本家のチュートリアルに沿って学んでいきました。<br/>
サンプルとして、クーポン一覧サイトを作ってみたいと思います。(実際のクーポンではありませんので、注意してください。)</p>

<p>まず、HTMLファイルに関しては本家のGitHub上のソースをそのまま流用すると楽だと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>React Tutorial<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- Not present in the tutorial. Just for basic styling. --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/base.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react-dom.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.6.15/browser.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/babel&quot;</span> <span class="na">src=</span><span class="s">&quot;js/coupon.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/babel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="c1">// To get started with this tutorial running your own code, simply remove</span>
</span><span class='line'>          <span class="c1">// the script tag loading scripts/example.js and start writing code here.</span>
</span><span class='line'>      <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、サイトのレイアウトは下記とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>#content
</span><span class='line'>┗━━ .couponBox
</span><span class='line'>       ┗━━ .couponList
</span><span class='line'>              ┗━━ .coupon
</span><span class='line'>                     ┣━━ .couponImg
</span><span class='line'>                     ┣━━ .couponName
</span><span class='line'>                     ┗━━ .shopName
</span></code></pre></td></tr></table></div></figure>


<p>これに伴い、CSSファイルを簡単に下記としました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">96</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.couponBox</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.couponList</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.coupon</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.couponImg</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.couponInfo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、最も重要なJSファイルは下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// テストデータ</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">couponName</span><span class="o">:</span> <span class="s2">&quot;ダブルチーズバーガー20円引き&quot;</span><span class="p">,</span> <span class="nx">shopName</span><span class="o">:</span> <span class="s2">&quot;マ◯ドナルド新宿店&quot;</span><span class="p">,</span> <span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;http://urx.blue/pxQ3&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">couponName</span><span class="o">:</span> <span class="s2">&quot;ビッグマック100円引き&quot;</span><span class="p">,</span> <span class="nx">shopName</span><span class="o">:</span> <span class="s2">&quot;マ◯ドナルド新宿店&quot;</span><span class="p">,</span> <span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;http://urx.blue/pxQg&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">couponName</span><span class="o">:</span> <span class="s2">&quot;フィレオフィッシュ30円引き&quot;</span><span class="p">,</span> <span class="nx">shopName</span><span class="o">:</span> <span class="s2">&quot;マ◯ドナルド新宿店&quot;</span><span class="p">,</span> <span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;http://urx.blue/pxQl&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クーポン一覧をラップするDivタグの作成</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">CouponBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="nx">displayName</span><span class="o">:</span> <span class="s1">&#39;CouponBox&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;couponBox&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">CouponList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クーポン一覧Divタグの作成</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">CouponList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">couponNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">coupon</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">Coupon</span> <span class="nx">couponName</span><span class="o">=</span><span class="p">{</span><span class="nx">coupon</span><span class="p">.</span><span class="nx">couponName</span><span class="p">}</span> <span class="nx">shopName</span><span class="o">=</span><span class="p">{</span><span class="nx">coupon</span><span class="p">.</span><span class="nx">shopName</span><span class="p">}</span> <span class="nx">img</span><span class="o">=</span><span class="p">{</span><span class="nx">coupon</span><span class="p">.</span><span class="nx">img</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="err">/Coupon&gt;</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;couponList&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{</span><span class="nx">couponNodes</span><span class="p">}</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クーポンDivタグの作成</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Coupon</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;coupon&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;couponImg&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">img</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;couponInfo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;couponName&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">couponName</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;shopName&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">shopName</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// レンダリング</span>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">CouponBox</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のソースコードより、下記の画面を作成しました。<br/>
<img src="http://grandbig.github.io/images/atom_react_1.png" alt="サンプルのクーポンサイト" /></p>

<p>React.jsを使うことで、</p>

<ul>
<li>レイアウトの要素をオブジェクト単位で捉えやすい</li>
<li>レイアウトをツリー構造で捉えやすい</li>
</ul>


<p>と感じました。<br/>
まだチュートリアルの範囲でしか触れていないので、これから徐々に利用範囲を拡大していくことで学んでいきたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSで検知可能なiBeaconの数について(別UUIDの場合)]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/16/multi-ibeacon-region-2/"/>
    <updated>2015-11-16T00:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/16/multi-ibeacon-region-2</id>
    <content type="html"><![CDATA[<h4>iOSで検知可能なCLBeaconRegionの数について</h4>

<p>さて、今日は久しぶりにiBeaconについて書きます。<br/>
以前、<a href="http://grandbig.github.io/blog/2015/06/14/multi-ibeacon-region/">複数のiBeaconを検知しよう！(別UUIDの場合)</a>で別UUIDの複数のiBeaconを検知する方法について書きました。<br/>
今回は、その限界数について見ていきたいと思います。</p>

<p><a href="https://developer.apple.com/jp/documentation/LocationAwarenessPG.pdf">位置情報とマッププログラミングガイド</a>を読むと、地理的領域の観測は最大20個まで可能とされています。<br/>
しかし、iBeacon領域の観測について最大数が書かれていませんでした。<br/>
Googleで調べてもなかなか出てこなかったので、自分で調べることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>結果から言うと、iBeacon領域の観測は <strong>最大20個</strong> まで可能でした。<br/>
(地理的領域の観測と同じでした。)</p>

<p>因みに、下記ソースで確認しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">var</span> <span class="nl">lm:</span><span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">uuids:</span><span class="p">[</span><span class="n">String</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">uuids</span> <span class="o">=</span> <span class="p">[</span> <span class="err">ここに</span><span class="n">UUID</span><span class="err">の文字列を</span><span class="mi">20</span><span class="err">個以上用意</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didChangeAuthorizationStatus</span> <span class="nl">status:</span> <span class="n">CLAuthorizationStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 位置情報サービスの許可状態が変更した場合に呼び出される処理</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">AuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">uuids</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">uuidString</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">uuids</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">NSUUID</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">UUIDString:</span> <span class="n">uuidString</span><span class="p">)</span>
</span><span class='line'>              <span class="n">let</span> <span class="n">beaconRegion</span> <span class="o">=</span> <span class="n">CLBeaconRegion</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">proximityUUID:</span> <span class="n">uuid</span><span class="o">!</span><span class="p">,</span> <span class="nl">identifier:</span> <span class="p">(</span><span class="s">&quot;beaconRegion&quot;</span><span class="o">+</span><span class="n">String</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span>
</span><span class='line'>              <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="o">?</span><span class="p">.</span><span class="n">startMonitoringForRegion</span><span class="p">(</span><span class="n">beaconRegion</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didStartMonitoringForRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Regionのモニタリングが開始したときに呼び出される処理</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(region)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didDetermineState</span> <span class="nl">state:</span> <span class="n">CLRegionState</span><span class="p">,</span> <span class="n">forRegion</span> <span class="nl">region:</span> <span class="n">CLRegion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Regionに対する状態が変化したときに呼び出される処理</span>
</span><span class='line'>      <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">Inside:</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Inside: \(region)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">Outside:</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Outside: \(region)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">Unknown:</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;Unknown: \(region)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>viewDidLoad</code>内でuuidsの初期化を行っていますが、ここで20個UUIDを設定すると、<code>didDetermineState</code>内でログが20回出力されました。<br/>
しかし、21個以上UUIDを設定した場合は、先ほどと同じく20回のログ出力となり、21個目以降に設定したUUIDに関してはログ出力されませんでした。<br/>
つまり、先に設定したUUIDが有効で、21個目以降のUUIDは無効ということになります。</p>

<p>複数のUUIDを大量に使う際には気をつけましょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlinを使ってみよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/kotlin-android-2/"/>
    <updated>2015-11-08T23:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/kotlin-android-2</id>
    <content type="html"><![CDATA[<h3>Kotlinを勉強しよう</h3>

<p>さて、本日はKotlinを勉強してみたいと思います。<br/>
勉強の題材としては、<a href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-android/">Google Sign-In SDK for Androidを使ってみよう！</a>で取り上げた <strong>Google Sign-In SDKによるOAuth2.0認証</strong> にしたいと思います。<br/>
その中で筆者が抑えておくべきと思ったところを基礎からメモっていきます。</p>

<p>(KotlinをAndroid Studioに導入する方法は以前書いた<a href="http://grandbig.github.io/blog/2015/10/25/kotlin-android/">Android StudioにKotlinを導入しよう！</a>を参照ください。)</p>

<p>では、早速、見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Kotlinで変数/定数の書き方</h4>

<p>最も基本的なことですが、変数/定数の書き方から異なります。</p>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>  <span class="c1">// 定数</span>
</span><span class='line'><span class="kd">private</span> <span class="n">GoogleApiClient</span> <span class="n">mGoogleApiClient</span><span class="o">;</span>    <span class="c1">// 変数</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="nl">TAG:</span><span class="n">Int</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span>                   <span class="c1">// 定数</span>
</span><span class='line'><span class="kd">private</span> <span class="n">var</span> <span class="nl">mGoogleApiClient:</span><span class="n">GoogleApiClient</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>  <span class="c1">// 変数</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは下記です。</p>

<ul>
<li>定数は<code>val</code>で変数は<code>var</code>を使う</li>
<li>定数は、val 定数名:型名 = 値</li>
<li>変数は、var 変数名:型名 = 値</li>
<li>初期値未定の変数は型名の後ろに<code>?</code>をつけて、<code>null</code>を代入<br/>
これをしないと『Property must be initialized or be abstract』エラーが発生する</li>
</ul>


<h4>Kotlinでのstatic定数の書き方</h4>

<p>Kotlinでは<code>static</code>は使いません。</p>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RC_SIGN_IN</span> <span class="o">=</span> <span class="mi">9001</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">companion</span> <span class="n">object</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">val</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span>
</span><span class='line'>  <span class="n">val</span> <span class="n">RC_SIGN_IN</span> <span class="o">=</span> <span class="mi">9001</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Kotlinでimplementの書き方</h4>

<p>Google Sign-In SDKでOAuth2.0認証をする際に、<code>GoogleApiClient.OnConnectionFailedListener</code>と<code>View.OnClickListener</code>のインターフェースを継承していました。</p>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span> <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">OnConnectionFailedListener</span><span class="o">,</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="o">:</span> <span class="n">AppCompatActivity</span><span class="o">(),</span> <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">OnConnectionFailedListener</span><span class="o">,</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlionでは<code>implements</code>ワードは書かずに<code>extends</code>したクラスの後ろに<code>,</code>区切りで書きます。</p>

<h4>Kotlinでキャストの書き方</h4>

<p>Google Sign-Inを実行するために置いていたボタンをソース上で取り出すときに<code>SignInButton</code>でキャストしていました。</p>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SignInButton</span> <span class="n">signInButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">SignInButton</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">var</span> <span class="nl">signInButton:</span><span class="n">SignInButton</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">)</span> <span class="n">as</span> <span class="n">SignInButton</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは<code>as</code>を使ってキャストします。</p>

<h4>KotlinでOverrideの書き方</h4>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは、<code>@</code>は不要で<code>fun</code>の前に書きます。<br/>
(Swiftと違って、<code>func</code>とは書かないんです。)</p>

<h4>Kotlinでメソッドの戻り値の書き方</h4>

<p>Javaの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="nl">menu:</span> <span class="n">Menu</span><span class="o">):</span> <span class="n">Boolean</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>『fun メソッド名(引数名: 引数の型): 戻り値の型』 と書きます。</p>

<h4>Kotlinでswitch文の書き方</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">:</span>
</span><span class='line'>          <span class="n">signIn</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinの場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onClick</span><span class="o">(</span><span class="nl">view:</span><span class="n">View</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">signIn</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlinでは<code>switch</code>ワードを使いません。<code>when</code>を使います。<br/>
<code>case 条件:</code>という書き方が<code>条件 -&gt;</code>になります。</p>

<p>さて、今回気になったのはこんなところです。<br/>
これからもどんどんKotlinでの書き方に慣れていきたいと思います。</p>

<p>因みに、今回のソースは、<a href="https://github.com/grandbig/KotlinGoogleSignInSample">GitHub</a>に上げてあります。<br/>
ご自由にお使いください。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for Androidを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-android/"/>
    <updated>2015-11-08T12:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-android</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-in SDKのAndroidでの使い方について見ていきたいと思います。<br/>
Androidの場合、Google製のため、親和性は元々高いのですが、推奨されているGoogle Sign-in SDKを使うことでより快適なコーディングやUXを提供できるのではと期待しています。</p>

<p>因みに、本書執筆時の環境は下記です。<br/>
* 端末: Nexus6<br/>
* OS: Android6.0<br/>
* IDE: Android Studio 1.5 preview2</p>

<p>では、早速、使い方を見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。(iOSと同じです。)</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-0.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-1.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-2.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はAndroid用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-3.png" alt="OAuth2.0クライアントISを作成2" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="http://grandbig.github.io/images/google-sign-in-android-6.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for Androidを実装しよう</h4>

<p><a href="https://developers.google.com/identity/sign-in/android/?hl=ja">Googleの公式サイト</a>に書かれていますが、英語が苦手な方向け(+自分のメモ書き)として説明していきたいと思います。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/android/start?hl=ja">Google Sign-In for Androidのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-4.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-5.png" alt="Enable Google services for your app" /></p>

<p>ここで、 <strong>App name</strong> にGoogle Developers Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力した後に、 <strong>Android package name</strong> を入力しましょう。</p>

<p>必要項目の入力が終わったら、Choose and configure servicesボタンを押しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-7.png" alt="Choose and configure servicesボタンを押す" /></p>

<p>結果、画面が遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-8.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方に <strong>SHA1</strong> を入力する項目があるので、これを入力して、 <strong>ENABLE GOOGLE SIGN-IN</strong> ボタンを選択しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-9.png" alt="Configuration Fileを作成しよう" /></p>

<p>因みにSHA1の調べ方は下記の通りです。</p>

<ol>
<li>ターミナルで/Users/{ユーザ名}/.androidの階層に移動</li>
<li><code>keytool -list -v -keystore "/Users/{ユーザ名}/.android/debug.keystore" -alias androiddebugkey -storepass android -keypass android</code>コマンドを入力</li>
<li>出力結果の証明書のフィンガプリント > SHA1の値を取得</li>
</ol>


<p>画面下の <strong>Generate configuration files</strong> ボタンが押せるようになるので、押しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-10.png" alt="Configuration Fileを作成しよう" /></p>

<p>jsonファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-11.png" alt="jsonファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、自身のプロジェクトのappフォルダ配下にダウンロードした<code>google-services.json</code>を配置しましょう。</p>

<p>続いて、<code>build.gradle</code>ファイルの設定にGoogle Play Services Pluginを追加しましょう。<br/>
まずは、<code>build.gradle(Project)</code>の<code>dependencies</code>内に<code>classpath 'com.google.gms:google-services:1.5.0-beta2'</code>を追加<br/>
次に、<code>build.gradle(app)</code>の最上部に<code>apply plugin: 'com.google.gms.google-services'</code>を追加<br/>
そして、<code>build.gradle(app)</code>の<code>dependencies</code>内に<code>compile 'com.google.android.gms:play-services-auth:8.3.0'</code>を追加</p>

<p>これで用意が整いましたので、ソースを書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'><span class="kn">package</span> <span class="o">...</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.design.widget.FloatingActionButton</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.design.widget.Snackbar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.widget.Toolbar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.Auth</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInAccount</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInOptions</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.ConnectionResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.SignInButton</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.api.GoogleApiClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span>
</span><span class='line'>        <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">OnConnectionFailedListener</span><span class="o">,</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RC_SIGN_IN</span> <span class="o">=</span> <span class="mi">9001</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">GoogleApiClient</span> <span class="n">mGoogleApiClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Button listenersの設定</span>
</span><span class='line'>      <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Google Sign-Inの設定</span>
</span><span class='line'>      <span class="n">GoogleSignInOptions</span> <span class="n">gso</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GoogleSignInOptions</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">GoogleSignInOptions</span><span class="o">.</span><span class="na">DEFAULT_SIGN_IN</span><span class="o">).</span><span class="na">requestEmail</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mGoogleApiClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">enableAutoManage</span><span class="o">(</span><span class="k">this</span> <span class="cm">/* FragmentActivity */</span><span class="o">,</span> <span class="k">this</span> <span class="cm">/* OnConnectionFailedListener */</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">addApi</span><span class="o">(</span><span class="n">Auth</span><span class="o">.</span><span class="na">GOOGLE_SIGN_IN_API</span><span class="o">,</span> <span class="n">gso</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Google Sign-Inボタンの設定</span>
</span><span class='line'>      <span class="n">SignInButton</span> <span class="n">signInButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">SignInButton</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">);</span>
</span><span class='line'>      <span class="n">signInButton</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="n">SignInButton</span><span class="o">.</span><span class="na">SIZE_STANDARD</span><span class="o">);</span>
</span><span class='line'>      <span class="n">signInButton</span><span class="o">.</span><span class="na">setScopes</span><span class="o">(</span><span class="n">gso</span><span class="o">.</span><span class="na">getScopeArray</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-Inした結果を受け取る処理</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">RC_SIGN_IN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">GoogleSignInResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Auth</span><span class="o">.</span><span class="na">GoogleSignInApi</span><span class="o">.</span><span class="na">getSignInResultFromIntent</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>          <span class="n">handleSignInResult</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-Inした結果を扱う処理</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSignInResult</span><span class="o">(</span><span class="n">GoogleSignInResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;handleSignInResult:&quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Signed in successfully, show authenticated UI.</span>
</span><span class='line'>          <span class="n">GoogleSignInAccount</span> <span class="n">acct</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getSignInAccount</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Signed out, show unauthenticated UI.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-In処理</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">signIn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">signInIntent</span> <span class="o">=</span> <span class="n">Auth</span><span class="o">.</span><span class="na">GoogleSignInApi</span><span class="o">.</span><span class="na">getSignInIntent</span><span class="o">(</span><span class="n">mGoogleApiClient</span><span class="o">);</span>
</span><span class='line'>      <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">signInIntent</span><span class="o">,</span> <span class="n">RC_SIGN_IN</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">:</span>
</span><span class='line'>              <span class="n">signIn</span><span class="o">();</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてレイアウトの作成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// content_main.xml</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">gms</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">SignInButton</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">id</span><span class="o">=</span><span class="s">&quot;@+id/button_sign_in&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_below</span><span class="o">=</span><span class="s">&quot;@+id/textView&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_alignParentStart</span><span class="o">=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_marginTop</span><span class="o">=</span><span class="s">&quot;100dp&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実装すると下記のような画面遷移ができます。</p>

<p><img src="http://grandbig.github.io/images/google-sign-in-android-12.png" alt="アプリ起動後の画面" /><br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-13.png" alt="アカウントの選択" /></p>

<p>Google Sign-In SDK for Androidを使うことで、UI/UXをiOS側と合わせることもできるので、非常に良いと思います。<br/>
ぜひ使ってみてはいかがでしょうか。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSがアップデートされました！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-update/"/>
    <updated>2015-11-08T01:31:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-update</id>
    <content type="html"><![CDATA[<h3>Google Sign-In SDK for iOSを利用する理由</h3>

<p>本日は再び、Google Sign-In SDK for iOSについてお話したいと思います。<br/>
筆者は業務でも積極的にGoogle Sign-In SDK for iOSを使っています。<br/>
理由は、</p>

<ul>
<li><a href="https://itunes.apple.com/jp/app/google/id284815942?mt=8">Google</a>, <a href="https://itunes.apple.com/jp/app/google+/id447119634?mt=8">Google+</a>アプリを入れているユーザはアカウントを入力しなくてもOAuth認証が可能</li>
<li>クライアント側で手軽にOAuth認証を実装できる</li>
</ul>


<p>といった2つがあります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>前者は特にユーザの手間を省けるので、非常に有用だと考えています。<br/>
例え、1つの端末内で複数のアカウントを使っていても、ユーザが選択できる形でOAuth認証をすることができます。</p>

<p><img src="http://grandbig.github.io/images/google-sign-in-update-1.png" alt="OAuth認証" /></p>

<p>もちろんGoogle, Google+共にインストールされていない端末であったとしても、メールアドレスとパスワードを入力する従来の方法で問題なくOAuth認証を通すことができます。</p>

<p>後者は以前紹介した手順(<a href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/">Google Sign-In SDK for iOSを使ってみよう！</a>を参照のこと)を踏むだけで、簡単に実装することができます。<br/>
OAuth認証で得られるトークン(アクセストークンやIDトークン)は端末ローカルで保存することも多いため、サーバサイドよりもクライアントサイドでOAuth認証を通す方が良い場合もあります。<br/>
あとは、サーバを自身で持てない場合もクライアントサイドで処理が済むので、非常に良いですね。</p>

<h3>Google Sign-In SDK for iOSがアップデートされて、さらに使いやすくなりました！</h3>

<p>上記で説明した通り、非常に実装が簡単でユーザにとっても利益のあるSDKではあるものの、微妙に使いにくい側面も持っていました。<br/>
それは、IDトークンを取得するタイミングが<code>[[GoogleSinIn sharedInstance] signIn];</code>と<code>[[GoogleSignIn sharedInstance] signInSilently];</code>の2つのみだったからです。<br/>
IDトークンはアクセストークンと同じく、有効期限が <strong>発行されてから1時間</strong> と定義されているため、IDトークンを利用する場合は割りと頻繁に更新情報を取得する必要があります。<br/>
しかし、先ほど2つのメソッドはアプリ起動後に <strong>ユーザがログイン済みか否かを判断した上で実行するメソッド</strong> であるため、頻繁に利用するシーンには不向きと言えます。(アプリ初回起動後とそれ以外との判断を自身で定義したフラグなどで管理する必要があるため)</p>

<p>それが先日公開されたv2.4.0から(<a href="https://developers.google.com/identity/sign-in/ios/release">Release Notes</a>を参照のこと)変更が加わりました。<br/>
具体的には、</p>

<ul>
<li><code>- (void) getAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) getTokensWithHandler:</code>が代わりに追加</li>
<li><code>- (void) refreshAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) refreshTokensWithHandler:</code>が代わりに追加</li>
</ul>


<p>の2点です。</p>

<p>これまでアクセストークンを取得するために利用していた<code>getAccessTokenWithHandler</code>ではアクセストークンのみを返却していましたが、<code>getTokenWithHandler</code>では<code>GIDAuthentication</code>オブジェクトごと返却してくれるようになったため、アクセストークンだけでなく、IDトークンも取得することができるようになりました。</p>

<p>また、<code>refreshAccessTokenWithHandler</code>ではアクセストークンのみをリフレッシュするものでしたが、<code>refreshTokenWithHandler</code>ではアクセストークンとIDトークンをリフレッシュしてくれるようになりました。</p>

<p>IDトークンはアクセストークンと同じ1時間だけ有効なトークンなので、自然と更新タイミングはアクセストークンと同じになります。<br/>
アクセストークンのみを使うのであれば、<code>getAccessTokenWithHandler</code>と<code>refreshAccessTokenWithHandler</code>で良かったのですが、IDトークンも使うとなると<code>getTokensWithHandler</code>および<code>refreshTokensWithHandler</code>でないと成り立ちません。</p>

<h3>OAuth認証を通して取得する各種トークンについて</h3>

<p>Google OAuth認証では様々なトークンが飛び交います。ここではそれぞれのトークンの利用用途について少し触れておきたいと思います。</p>

<ul>
<li>one-time code<br/>
これはアクセストークンを取得するための一時的なトークンです。<br/>
今回のSDKとは直接からみませんが、<a href="https://developers.google.com/identity/sign-in/web/server-side-flow?hl=ja">
Google Sign-In for server-side apps</a>に書かれている通りで、サーバサイドでアクセストークンを取得するために利用します。</li>
<li>access-token<br/>
これは各種APIを利用するために必要なトークンです。<br/>
API実行時にヘッダーにこのトークンを渡すことで、認証されたことを伝えることができます。(ヘッダーに入れていない場合はunauthorized errorが発生します。)</li>
<li>refresh-token<br/>
これはアクセストークンをリフレッシュするために利用するトークンです。<br/>
アクセストークンは有効期限が1時間なので、継続的にAPIを実行するためには、きちんとアクセストークンをリフレッシュする必要があります。</li>
<li>id-token<br/>
JWT(Json Web Token)と呼ばれるデータ形式で、ユーザのユニークな識別子が入っています。<br/>
各種サービス間でのID連携するときに利用します。<br/>
例えば、GREEにログインするときにYahoo!アカウントを使ってログインした場合に、ユーザの基本情報(名前やメールアドレス)が自動で入力されていることがあると思います。<br/>
そういった連携を組み込みたい場合に使います。</li>
</ul>


<p>今回、id-tokenを調べる上で、OpenID Connectの考え方に触れました。これまで全く気にしてこなかった内容なのですが、かなり大事であることがわかりました。<br/>
これについてもどこかで記事を書ければ良いなと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p>参考:<br/>
* <a href="http://webos-goodies.jp/archives/how_to_migrate_from_openid_to_openid_connect.html">Google アカウントの認証を OpenID から OpenID Connect に移行する方法</a><br/>
* <a href="http://www.slideshare.net/kura_lab/openid-connect-id">OpenID Connect 入門 〜コンシューマーにおけるID連携のトレンド〜</a><br/>
* <a href="http://oauth.jp/blog/2015/01/06/oauth2-multiple-response-type/">OAuth 2.0 の Response Type 全パターン</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLGeocoderによるジオコーディングについて]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/07/geocoder/"/>
    <updated>2015-11-07T23:04:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/07/geocoder</id>
    <content type="html"><![CDATA[<h3>ジオコーディング/逆ジオコーディングについて</h3>

<p>本日は、CoreLocation.frameworkによる <strong>ジオコーディング</strong> について書きたいと思います。まず、 <strong>ジオコーディング</strong> とは住所を緯度・経度に変換する技術のことです。逆に緯度・経度を住所に変換する技術を <strong>逆ジオコーディング</strong> と言います。</p>

<p>ジオコーディングは多くのサービスで利用されていることと思いますが、大抵の場合、GoogleやYahooのジオコーディングAPIを利用しているのではないでしょうか？<br/>
ですが、冒頭でも述べたようにあえてCoreLocation.frameworkによるジオコーディング/逆ジオコーディングについて見てみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>CoreLocation.frameworkでのジオコーディング/逆ジオコーディング方法</h4>

<p>早速、説明していきます。<br/>
ジオコーディング/逆ジオコーディングのためのメソッドはCLGeocoderクラスの中に含まれています。<br/>
下記のように使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ジオコーディング処理(住所を緯度・経度に変換)</span>
</span><span class='line'><span class="n">func</span> <span class="nf">geocode</span><span class="p">(</span><span class="nl">address:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">geocoder</span> <span class="o">=</span> <span class="n">CLGeocoder</span><span class="p">()</span>
</span><span class='line'>  <span class="n">geocoder</span><span class="p">.</span><span class="n">geocodeAddressString</span><span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">placeMarks:</span><span class="p">[</span><span class="n">CLPlacemark</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="nl">error:</span><span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">placeMark</span> <span class="k">in</span> <span class="n">placeMarks</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;latitude: \(placeMark.location?.coordinate.latitude), longitude: \(placeMark.location?.coordinate.longitude)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 逆ジオコーディング処理(緯度・経度を住所に変換)</span>
</span><span class='line'><span class="n">func</span> <span class="nf">reverseGeocode</span><span class="p">(</span><span class="nl">latitude:</span><span class="n">CLLocationDegrees</span><span class="p">,</span> <span class="nl">longitude:</span><span class="n">CLLocationDegrees</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocation</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">geocoder</span> <span class="o">=</span> <span class="n">CLGeocoder</span><span class="p">()</span>
</span><span class='line'>  <span class="n">geocoder</span><span class="p">.</span><span class="n">reverseGeocodeLocation</span><span class="p">(</span><span class="n">location</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">placeMarks:</span><span class="p">[</span><span class="n">CLPlacemark</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="nl">error:</span><span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">placeMark</span> <span class="o">=</span> <span class="n">placeMarks</span><span class="o">?</span><span class="p">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">country</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">country</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(country)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">administrativeArea</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">administrativeArea</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(administrativeArea)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subAdministrativeArea</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subAdministrativeArea</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subAdministrativeArea)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">locality</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">locality</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(locality)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subLocality</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subLocality</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subLocality)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">thoroughfare</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">thoroughfare</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(thoroughfare)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subThoroughfare</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subThoroughfare</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subThoroughfare)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は簡単なサンプルなので、ログ出力のみにしています。<br/>
実に簡単ですね！<br/>
逆ジオコーディングの場合、全ての値が入った上でplaceMarkが返されるわけではないので、思い描いた住所が出ない場合もありました。</p>

<h4>CoreLocation.frameworkでの逆ジオコーディングの精度</h4>

<p>では、このCoreLocation.frameworkによる逆ジオコーディングって、どの程度正確なんでしょうか？<br/>
Googleが公開している逆ジオコーディングAPIは<code>https://maps.googleapis.com/maps/api/geocode/json?latlng=&lt;緯度&gt;,&lt;経度&gt;&amp;sensor=false</code>です。<br/>
筆者が自宅で実機で実際に取得した位置情報を逆ジオコーディングして試したところ、Google APIの結果と必ず一致するわけではありませんでした。</p>

<p>どちらが正しかったかというと、正直なところ、Google APIの方が精度が高かったです。<br/>
これがあまり逆ジオコーディングの方法としてCoreLocation.frameworkが使われない理由なのかもしれません。<br/>
Appleはどんどんマップの精度向上に力を入れていますし、いつの日か、Googleと遜色のない結果が返ってくるかもしれません。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(2周年)]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/01/blog-2-year-anniversary/"/>
    <updated>2015-11-01T20:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/01/blog-2-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて2周年を迎えました</h3>

<p>なんと、先々月9/4時点で本技術ブログが2周年を迎えました！！<br/>
それを記念しまして年に1回のブログ振り返りをしたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p>まずは、アクセス数の推移から紹介していきましょう。<br/>
データは <strong>Google Analytics</strong> で取得しています。<br/>
結果をお見せすると、<br/>
<img src="http://grandbig.github.io/images/2anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
このようになっています。</p>

<p>もっと詳しく見ていきましょう。<br/>
1周年記念と比較した場合のグラフをご覧下さい。<br/>
<img src="http://grandbig.github.io/images/2anniversary2.png" alt="1周年記念からのアクセス数の推移" /></p>

<p>1周年記念のときは、平日が <strong>280〜320程度</strong> のセッション数で土日が <strong>90〜120程度</strong> のセッション数でした。それが最近では平日が <strong>320〜370程度</strong> のセッション数で土日が <strong>100〜150程度</strong> のセッション数にまで上昇しました。</p>

<p>因みに2015/10が月別換算で最高のセッション数/ページビュー数を記録しました！<br/>
<img src="http://grandbig.github.io/images/2anniversary3.png" alt="2015/10の記録" /></p>

<p>なんと初めて1ヶ月でのページビュー数が1,0000を突破しました。(あくまでもGoogle Analytics換算です。)</p>

<p>1周年記念時に <strong>『1年間で3万を超えるページビュー数を稼げたことが非常に嬉しい』</strong> と書かせて頂きましたが、一月で <strong>『1万を超えるページビュー数を稼げるようになった』</strong> ということが今回振り返ってみて一番の驚きでした。<br/>
いや〜成長しました笑。<br/>
(筆者の拙い技術ブログにいつもお付き合い頂きまして、皆様たいへんありがとうございます。)</p>

<p>ブログ開始時からの総計の値も記載します。<br/>
<img src="http://grandbig.github.io/images/2anniversary4.png" alt="ブログ開始からの各数値" /></p>

<ul>
<li>【セッション数】1周年時: 24,996 → 現在: 122,247</li>
<li>【ユーザー数】1周年時: 16,819 → 現在: 72,567</li>
<li>【ページビュー数】1周年時: 32,022 → 現在: 153,541</li>
<li>【ページ/セッション】1周年時: 1.28 → 現在: 1.26</li>
<li>【平均セッション時間】1周年時: 00:01:11 → 現在: 00:01:11</li>
<li>【直帰率】1周年時: 84.54% → 現在: 85.36%</li>
<li>【新規セッション率】1周年時: 67.28% → 現在: 59.36%</li>
</ul>


<p>※ 1周年時とは「ブログ開始〜1年後」で現在とは「ブログ開始〜現在」を指しています。</p>

<p>比較してみるとセッション数, ユーザ数, ページビュー数が1年目よりも2年目の方が飛躍的に上昇していることがわかります。<br/>
トータルで見たとき、直帰率が誤差の範囲程度ですが下がっていますね。<br/>
また新規セッション率が結構下がっているので、広く宣伝していかないと頭打ちに成りかねません。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>次に、本ブログの中で柱となっている記事について紹介します。<br/>
これは1周年のときに紹介したものと変化が起きているか見るのが楽しみでした笑</p>

<p><strong>1位: <a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a></strong><br/>
　　ページビュー数: 15,134 (9.86%)<br/>
　　平均ページ滞在時間: 00:07:00<br/>
<strong>2位: <a href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/">Xcode6でSingle View Applicationにチャレンジ</a></strong><br/>
　　ページビュー数: 8,068 (5.25%)<br/>
　　平均ページ滞在時間: 00:06:24<br/>
<strong>3位: <a href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/">はっきりさせよう！iOSのデバイストークン</a></strong><br/>
　　ページビュー数: 6,773 (4.41%)<br/>
　　平均ページ滞在時間: 00:04:45<br/>
<strong>4位: <a href="http://grandbig.github.io/blog/2013/11/30/fmdatabase/">FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！</a></strong><br/>
　　ページビュー数: 6,276 (4.09%)<br/>
　　平均ページ滞在時間: 00:06:50<br/>
<strong>5位: <a href="http://grandbig.github.io/">TOPページ</a></strong><br/>
　　ページビュー数: 6,200 (4.04%)<br/>
　　平均ページ滞在時間: 00:01:19</p>

<p>以上が上位5記事です。</p>

<p>結果を見て分かる通り、圧倒的に <strong>『Backgroundで位置情報を取得しよう！』</strong> が見られていました。これは1周年の時と一緒でした。初期の頃の記事にも関わらず依然としてたくさんのユーザ様に見て頂いているということはそれだけ長きに渡る価値のある記事であったと胸を張っても良いでしょうか？<br/>
続いては <strong>『Xcode6でSingle View Applicationにチャレンジ』</strong> がランクインしました。これは初めてiPhoneアプリ開発をする人向けに書いた記事でしたが、需要があったということでしょう。Storyboardは基本中の基本ですが、見た目以上に奥が深くもあります。筆者もまだまだ使いこなせているとは言えないと思っています。<br/>
3番目に <strong>『はっきりさせよう！iOSのデバイストークン』</strong> が多く見られていました。これは1周年時には2位だったのですが、1つランクを下げましたね。プッシュの機構は年々変化が起きているので、未だによく見られるということなのでしょうか。<br/>
4番目には <strong>『FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！』</strong> は1周年時に5位だった記事ですね。筆者のソースミスで多大なご迷惑をおかけした思い出深い記事でもあります。(※もちろんソースは修正しています笑)<br/>
5番目に滑り込んだのは、 <strong>『TOPページ』</strong> でした。このサイト自体が少しは知られるようになったのか、それとも他の記事を見ようとトップ画面に遷移した結果なのか計り知れませんが、気合を入れて記事を書き続けなくてはと思い直されます。</p>

<p>なんと、2013年の記事が3つもランクインしており、2014年の記事が1つという結果でした。<br/>
2015年の記事は当たり前ですが、年月が短いのでアクセス数も多くはないのでしょうが、来年また振り返ったときにランクインさせてみたいものです。</p>

<h4>広告収入の推移</h4>

<p>最後に広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
昨年も説明しましたが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、推移を見ていきます。<br/>
これまでの全期間の推移(2013/11/15〜2015/10/31での推移)は下図のようになっています。<br/>
<img src="http://grandbig.github.io/images/2anniversary5.png" alt="Google Adsenseの推移" /><br/>
見てお分かりの通り、見積もり収益額が8,000円を超えています。Google Adsenseは8,000円以上で初めてお金がもらえるのですが、2年目にして初めてGoogle様からお金を頂きました！<br/>
そして1回目の振り込みから早くも約4000円の収益を上げているので、きっと3周年を迎えるまでには2回目の振り込みも頂けるはず&hellip;.。</p>

<p>因みに、1年目と2年目の見積もり収益額を比較してみますと、1年目の2013/11/15〜2014/09/14は <strong>2,021円</strong> となっており、2年目の2014/09/15〜2015/09/14は <strong>9,019円</strong> となっていました。</p>

<p>ということで、2周年記念として振り返ってみましたが、まだまだ精進できるところがたくさんありますし、常に時代は流れているので、どんどん新しい技術が出てきています。<br/>
2年目はiOSに限らず、Androidに関する記事を書いたりと少しずつ技術の幅を広げてきました。筆者はもともとWeb系のエンジニアであったものの、最近はネイティブソースばかり書いてきました。今後はWeb系の技術に関することも学びつつ(サーバサイドも！)、徐々にではありますが、本ブログの対象範囲も広げていければと思っております。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS端末同士でBluetoothペアリングするときの注意点]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/29/bluetooth-pairing/"/>
    <updated>2015-10-29T00:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/29/bluetooth-pairing</id>
    <content type="html"><![CDATA[<h4>iOS端末同士でのBluetoothペアリング方法について</h4>

<p>さて、本日はiOS端末同士でBluetoothペアリングするときの注意点について書きたいと思います。<br/>
筆者は仕様に気づかずにだいぶ苦しめられました笑。</p>

<p>始めにおさらいの意味も兼ねて、Bluetoothでのペアリングについて書いていきます。<br/>
今回はSwiftで書きます。</p>

<p>まずはBluetoothの発信側から説明します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreBluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CBPeripheralManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 必要なプロパティの宣言</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">pm:</span><span class="n">CBPeripheralManager</span><span class="o">!</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">sUUID:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">CBUUID</span><span class="p">(</span><span class="nl">string:</span><span class="s">&quot;47EC089D-2FBB-410D-BEDF-C88730DBBD3A&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">characteristic:</span><span class="n">CBMutableCharacteristic</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// CBPeripheralManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span> <span class="o">=</span> <span class="n">CBPeripheralManager</span><span class="p">(</span><span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">queue:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ボタンをタップしたときに実行</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">peripheralStartAction</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// サービスの追加</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">service</span> <span class="o">=</span> <span class="n">CBMutableService</span><span class="p">(</span><span class="nl">type:</span> <span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">,</span> <span class="nl">primary:</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">characteristic</span> <span class="o">=</span> <span class="n">CBMutableCharacteristic</span><span class="p">(</span><span class="nl">type:</span> <span class="n">sUUID</span><span class="p">,</span> <span class="nl">properties:</span> <span class="n">CBCharacteristicProperties</span><span class="p">.</span><span class="n">Read</span><span class="p">,</span> <span class="nl">value:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">permissions:</span> <span class="n">CBAttributePermissions</span><span class="p">.</span><span class="n">ReadEncryptionRequired</span><span class="p">)</span>
</span><span class='line'>      <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">]</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">addService</span><span class="p">(</span><span class="n">service</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// アドバタイズ開始</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">advertisementData:</span><span class="p">[</span><span class="nl">String:</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nl">CBAdvertisementDataServiceUUIDsKey:</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">CBAdvertisementDataLocalNameKey:</span><span class="s">&quot;MyBlog&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">startAdvertising</span><span class="p">(</span><span class="n">advertisementData</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - CBPeripheralManagerDelegate -</span>
</span><span class='line'>  <span class="c1">// Bluetoothの状態が変化したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManagerDidUpdateState</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;state: \(peripheral.state)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// アドバタイズの開始結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManagerDidStartAdvertising</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;アドバタイズ開始失敗。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;アドバタイズ開始成功！&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// サービスの追加結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManager</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="n">didAddService</span> <span class="nl">service:</span> <span class="n">CBService</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;サービスの追加に失敗しました。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;サービス追加成功&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Readリクエストを取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManager</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="n">didReceiveReadRequest</span> <span class="nl">request:</span> <span class="n">CBATTRequest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  
</span><span class='line'>      <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span><span class="p">.</span><span class="n">isEqual</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// プロパティで保持しているキャラクタリスティックへのReadリクエストかどうかを判定</span>
</span><span class='line'>          <span class="c1">// CBMutableCharacteristicのvalueをCBATTRequestのvalueにセット</span>
</span><span class='line'>          <span class="n">request</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>                                                                          
</span><span class='line'>          <span class="c1">// リクエストに応答</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">respondToRequest</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="nl">withResult:</span> <span class="n">CBATTError</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目して頂きたいのが、<br/>
<code>self.characteristic = CBMutableCharacteristic(type: sUUID, properties: CBCharacteristicProperties.Read, value: nil, permissions: CBAttributePermissions.ReadEncryptionRequired)</code>の部分です。<br/>
<code>permissions</code>に<code>CBAttributePermissions.ReadEncryptionRequired</code>を設定することで下図のようなペアリングアラートが表示されます。</p>

<p><img src="http://grandbig.github.io/images/bluetooth-pairing-1.png" alt="Bluetoothペアリングアラート" /></p>

<p>続いて、Bluetoothの受信側の処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreBluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CBCentralManagerDelegate</span><span class="p">,</span> <span class="n">CBPeripheralDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 必要なプロパティの宣言</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">cm:</span><span class="n">CBCentralManager</span><span class="o">!</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">connectPeripheral:</span><span class="n">CBPeripheral</span><span class="o">!</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">sUUID:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">CBUUID</span><span class="p">(</span><span class="nl">string:</span><span class="s">&quot;47EC089D-2FBB-410D-BEDF-C88730DBBD3A&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// CBCentralManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="o">=</span> <span class="n">CBCentralManager</span><span class="p">(</span><span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">queue:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">centralStartAction</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// スキャン開始</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">scanForPeripheralsWithServices</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - CBCentralManagerDelegate -</span>
</span><span class='line'>  <span class="c1">// Bluetoothの状態が変化したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManagerDidUpdateState</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;state: \(central.state)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 周辺にBLEデバイスが見つかったときに通る処</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didDiscoverPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="nl">advertisementData:</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">AnyObject</span><span class="p">],</span> <span class="nl">RSSI:</span> <span class="n">NSNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="nl">uuidArray:</span><span class="p">[</span><span class="n">CBUUID</span><span class="p">]</span> <span class="o">=</span> <span class="n">advertisementData</span><span class="p">[</span><span class="s">&quot;kCBAdvDataServiceUUIDs&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">CBUUID</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">uuid:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">uuidArray</span><span class="p">.</span><span class="n">first</span><span class="o">!</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">uuid</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">sUUID</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Peripheralに接続</span>
</span><span class='line'>              <span class="n">self</span><span class="p">.</span><span class="n">connectPeripheral</span> <span class="o">=</span> <span class="n">peripheral</span>
</span><span class='line'>              <span class="n">self</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">connectPeripheral</span><span class="p">(</span><span class="n">connectPeripheral</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 接続が成功したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didConnectPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">peripheral</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>      <span class="c1">// サービス探索開始</span>
</span><span class='line'>      <span class="n">peripheral</span><span class="p">.</span><span class="n">discoverServices</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 接続に失敗したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didFailToConnectPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;接続失敗: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// MARK: - CBPeripheralDelegate -</span>
</span><span class='line'>  <span class="c1">// サービスの探索結果を受け取るときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didDiscoverServices</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">services:</span><span class="p">[</span><span class="n">CBService</span><span class="p">]</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">.</span><span class="n">services</span><span class="o">!</span>
</span><span class='line'>                              
</span><span class='line'>      <span class="k">for</span> <span class="n">service</span> <span class="k">in</span> <span class="n">services</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">peripheral</span><span class="p">.</span><span class="n">discoverCharacteristics</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">forService:</span> <span class="n">service</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// キャラクタリスティックの探索結果を受け取るときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didDiscoverCharacteristicsForService</span> <span class="nl">service:</span> <span class="n">CBService</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">characteristics:</span><span class="p">[</span><span class="n">CBCharacteristic</span><span class="p">]</span> <span class="o">=</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="o">!</span>
</span><span class='line'>                          
</span><span class='line'>      <span class="k">for</span> <span class="n">characteristic</span> <span class="k">in</span> <span class="n">characteristics</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;properties: \(characteristic.properties)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">peripheral</span><span class="p">.</span><span class="n">readValueForCharacteristic</span><span class="p">(</span><span class="n">characteristic</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの読込み結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didUpdateValueForCharacteristic</span> <span class="nl">characteristic:</span> <span class="n">CBCharacteristic</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;読込みに失敗しました。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;読込みに成功しました。service.uuid: \(characteristic.service.UUID), characteristic uuid: \(characteristic.UUID), value: \(characteristic.value)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さあ、これでペアリングアラートが出るはず！ということで2台のiOS端末で試してみました。<br/>
結果、 <strong>『アラートが表示されません！』</strong> でした。<br/>
どこか書き方が間違っているのかと思い、試行錯誤を繰り返したり、ググり続けたりしたところ、理由が判明しました。<br/>
<strong>2台共にiOS8端末かつiCloudに同じApple IDを設定している場合はセキュアと見なされてペアリングアラートが表示されない</strong> ということでした。</p>

<p>なるほど、出ないわけだ&hellip;ということで皆さんも気をつけてみてください。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発で役立つオープンソースライブラリのまとめサイト]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/25/ios-opensource/"/>
    <updated>2015-10-25T22:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/25/ios-opensource</id>
    <content type="html"><![CDATA[<h4>オープンソースライブラリは積極的に使おう！</h4>

<p>さて、本日は珍しくプログラミングそのものではなく、オープンソースライブラリのまとめサイトを紹介したいと思います。<br/>
と言っても、ほとんど皆さん当たり前のように使っていると思いますが笑。</p>

<p>Webアプリケーションと同じようにiOSアプリケーションでも当然の事ながらオープンソースのライブラリが存在します。<br/>
使いやすく役立つものから、ちょっとした心をくすぐるものまで様々なものがネット上にあふれています。<br/>
何の手がかりもなしに目的のものを探すのは困難だと思うので、筆者がよく使っているサイトを紹介します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Objective-Cならcocoa-CONTROLS</h5>

<p>こちらは最早、老舗と言えるかもしれません。<a href="https://www.cocoacontrols.com/platforms/ios/controls">cocoa-CONTROLS</a>はiOSおよびOSXアプリケーションの開発に利用可能なオープンソースライブラリをまとめてくれているサイトです。</p>

<p>下記が主な特徴となります。</p>

<ul>
<li>iOS, OSXで利用可能なライブラリが記載されています</li>
<li>Objective-Cだけでなく、Swiftで書かれたライブラリが記載されています(React Nativeもあります)</li>
<li>ライセンスによる検索が可能です。</li>
</ul>


<h5>SwiftならiOS cookies</h5>

<p>Swiftのライブラリを分野別にまとめたサイトが<a href="http://www.ioscookies.com/">iOS cookies</a>です。<br/>
こちらはcocoa-CONTROLSに比べて圧倒的にライブラリの数は少なくなりますが、各分野の有名ドコロのライブラリを抑えているので、目安にはなると思われます。</p>

<p>Swiftライブラリはまだまだしばらくはネット上で検索する必要が絶えないと思いますが、ふとした時に覗いてみると良いのではないでしょうか。</p>

<h4>その他の役立つサイトの紹介</h4>

<p>さて、アプリ開発をする上では、他にも必要なサイトがあります。<br/>
折角なので、それも紹介させてください。</p>

<h5>アプリのリリースに必要な画像を一式揃えよう</h5>

<p>アプリをリリースするためには様々なサイズの画像を用意する必要があります。<br/>
全てをいちいちメモして用意するのもたいへんなので、ここは<a href="http://makeappicon.com/">MakeAppicon</a>を使いましょう。<br/>
iOSだけでなくApple Watch用そしてAndroid用も一式そろえてくれます。</p>

<h5>アプリ関係の資料を作るなら実機つき画像が良いよね！</h5>

<p>アプリを紹介するための資料やアプリの使い方マニュアルなどを作る場合、アプリの実際の画面だけでも事足りるかもしれないのですが、どうせなら、iPhoneやAndroid端末の <strong>端末自体</strong> の画像もあった方がきれいな資料になりますよね？<br/>
そんなときには<a href="http://mockuphone.com/">MockUPhone</a>を使いましょう。</p>

<h5>アプリの画面内の色を設定するために&hellip;</h5>

<p>アプリの画面を作成するためには色を事細かに設定する必要が出てくるでしょう。<br/>
iOSではUIColorによる色設定を行うのですが、これがかなり特殊でありまして、Webアプリ出身者の筆者としてはなかなか苦労するところであります。<br/>
そんなときには<a href="http://www.peko-step.com/tool/tfcolor.html">RGB↔16進数変換サイト</a>と<a href="http://tobioka.net/wp-content/uploads/2012/05/hexrgb2uicolor.html">16進数↔UIColor変換サイト</a>を使うようにしています。</p>

<p>さて如何だったでしょうか。<br/>
もし、初めて知ったというサイトがあれば、ぜひ使ってみてください。<br/>
必ず役に立つこと請け合いです！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
