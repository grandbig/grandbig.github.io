<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-02-24T23:04:29+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[『Team Geek Googleのギークたちはいかにしてチームを作るのか』を読んで]]></title>
    <link href="http://grandbig.github.io/blog/2019/02/24/team-geek/"/>
    <updated>2019-02-24T20:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/02/24/team-geek</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は今更ながら読んで <strong>『Team Geek Googleのギークたちはいかにしてチームを作るのか』</strong> という本を紹介しつつ、<br/>
転職前後で自身の置かれた立場の変化から思ったことや感じたことを連々と書いていきたいと思います。</p>

<h3>書籍『Team Geek Googleのギークたちはいかにしてチームを作るのか』の紹介</h3>

<p>2013年に初版発行されたオライリー書籍で、 <code>Subversion</code> などのフリーソフトウェア開発に携わり、Googleでも働いていた Brian Fitzpatrickさんが執筆した書籍です。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&t=grandbig7-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=4873116309&linkId=3698919d5b20ae653e91ee7585b711eb&bc1=FFFFFF&lt1=_top&fc1=333333&lc1=0066C0&bg1=FFFFFF&f=ifr"></iframe>


<p></p>

<!-- more -->


<p>内容を簡潔に言うと、<br/>
『最高のエンジニアチームを構築し、円滑なチーム開発を実行するにはどうしたら良いのか』<br/>
についての実践的な考え方やコツを学べる本です。</p>

<p>その中でも特に重要な三本柱が、</p>

<p><strong>Humidity</strong> (謙虚)<br/>
<strong>Respect</strong> (尊敬)<br/>
<strong>Trust</strong> (信頼)</p>

<p>であり、これらをまとめて <strong>HRT</strong> と読んでいます。</p>

<p>本書は、全編を通して <strong>HRT</strong> を元に実行すべき所作について語られています。<br/>
しかも、著者の実体験を元に具体的なストーリーを挟みつつ描かれているため、<br/>
読者の立場に置き換えて対処方法などをイメージしやすいと思います。</p>

<p>また、著者はリーダポジションを経験しているため、リーダ目線で語られてはいますが、<br/>
実践内容はメンバーであっても行動に移せるため、リーダに限らずメンバーにとっても一見の価値がある書籍になっています。</p>

<p>個人的にはまさに <strong>HRT</strong> に共感したため、オススメしたい一冊だと心から感じています。</p>

<h3>転職前後で変わった立場から見るHRTを元にしたチーム構築について考えてみる</h3>

<p>さて、私は2月より新しい会社で働き始めているのですが、<br/>
ちょうどこの書籍を読んだことで、改めて自身の立場が変わり、意識すべき視点も変わったのだと気づきました。</p>

<p>良い機会ですので、前職で自身が考えていたことを振り返りつつ、現職でどのように立ち振る舞うべきかなどについて考えをまとめました。</p>

<h4>前職で新規参画者をチームに受け入れる側だった自分</h4>

<p>前職では約3年間働きました。<br/>
そして、その3年間をほぼ1つのプロダクトに費やしたことで、<br/>
気がつけば私はエンハンスチーム内で最も古株のメンバーとなっていました。</p>

<p>しかも人の入れ替わりが激しい現場だったため、<br/>
新規参画者の受け入れを幾度となく担当してきました。<br/>
その際に私自身が気をつけていた視点は下記の通りです。</p>

<ol>
<li>新規参画者の立ち上げには時間がかかるため、焦らない<br/>
● 開発を独り立ちしてこなせるようになるのに最低でも1〜2ヶ月<br/>
● チームに慣れて不安なく働けるようになるのに最低でも半年程度</li>
<li>初めから必要以上に情報を与えない(過度なプレッシャーを与えない)<br/>
● 直近の仕事に影響があるかないかを軸に、重要な情報から伝えていく<br/>
● 新規参画者では情報の重要度を判断できない</li>
<li>新規参画者のつっかえポイントは貴重な気づき<br/>
● チームに長くいると暗黙の了解が増え、不自然に気づきにくくなる</li>
</ol>


<p>当時は自然と上記の対応に経験とともに収束されていったのですが、<br/>
今考えてみると <strong>HRT</strong> に関係していると言えることに気づきました。</p>

<p>つまり、1と2は<br/>
新規参画者が現場に慣れて近い将来活躍してくれるだろうことを信じる = <strong>Trust</strong><br/>
であり、3は<br/>
自身がUPDATEすべき情報を得て改善できる = <strong>Humidity</strong><br/>
ということです。</p>

<h4>現職で新規参画者としてチームに受け入れられる側となった自分</h4>

<p>そして、今、私は転職したことで、「チームに『受け入れられる側』」になっています。<br/>
これまでと逆の立場になったことで <strong>HRT</strong> の原則に則るとどのような動き方ができるのか考えてみました。</p>

<ol>
<li>まずはその現場に慣れる<br/>
● 人を知り、ルールを知ることから始める</li>
<li>続いてチームの一員であることを自覚する<br/>
● 新規・既存に関わらずチームの課題は自分ごととして捉えるべき</li>
</ol>


<p>1については、</p>

<p>自分の経験値を正とするのではない = <strong>Humidity</strong><br/>
これまでこのプロダクトを担当してきたメンバーに敬意を払う = <strong>Respect</strong></p>

<p>という意味で、「過去、自分は◯◯は▲▲していたから&hellip;」と批判するべきではないということです。</p>

<p>そして、歴史を知り、現状を知った上で、初めて建設的な議論や提案になると思っています。<br/>
つまり、2のように自分ごととして捉えた上での行動が可能になるということです。</p>

<p>この順番さえ間違えなければ、一緒にチームを次のステップに進められると互いに信じていけるのではないかと思います。</p>

<p>逆に、経緯を知ろうともせずに、あるべき事実だけを突きつけ批判するような形を取れば、<br/>
<strong>HRT</strong> の全てに背いているため、チームから煙たがれることとなるでしょう。</p>

<h3>まとめ</h3>

<p>さて、今回は『Team Geek』の書籍について簡単に紹介し、<br/>
前職と現職での考え方と <strong>HRT</strong> との関係性について見てきました。</p>

<p>振り返ってみると、無意識的に <strong>HRT</strong> を意識した言動が取れていたこともあったのですが、<br/>
改めて言語化された形で体系的に学べる書籍があると非常に助かりますね。</p>

<p>エンジニア一人ひとりが働きやすい世の中にしていくためにも、<br/>
これからも更に本書籍が広まることを願ってやみません。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参照渡し(inout)と『Exclusive Access to Memory』]]></title>
    <link href="http://grandbig.github.io/blog/2019/02/16/inout-exclusive-access-to-memory/"/>
    <updated>2019-02-16T20:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/02/16/inout-exclusive-access-to-memory</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は <code>Exclusive Access to Memory</code> のクラッシュについてメモ書きしておきたいと思います。</p>

<p>筆者がこのクラッシュにあったのは、不用意にメソッドの引数を『参照型』にしてしまったためでした。<br/>
本記事では、 <strong>参照渡し</strong> と <strong>値渡し</strong> を説明しつつ、 <code>Exclusive Access to Memory</code> について見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>値渡し、参照渡しとは</h3>

<p>まず、値渡しと参照渡しについて説明します。</p>

<ul>
<li>メソッドの引数を <strong>値型</strong> にした場合

<ul>
<li>引数に渡されるのはコピーされた値です</li>
<li>メソッド内でその値を変更しても、元の値には影響ありません(コピーされているので)</li>
</ul>
</li>
<li>メソッドの引数を <strong>参照型</strong> にした場合

<ul>
<li>引数に渡されるのは、値のメモリ上のアドレスです</li>
<li>メソッド内でその値を変更すると、元の値にも影響があります</li>
</ul>
</li>
</ul>


<h3>Swiftでの値渡し、参照渡し</h3>

<p><code>Swift</code> では特に何も手を加えなければ、メソッドの引数は <strong>値渡し</strong> として処理されます。<br/>
これを <strong>参照渡し</strong> にしたい場合は引数の型の前に <code>inout</code> をつける必要があります。</p>

<p>つまり、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// 値渡しの場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">hoge</span><span class="p">(</span><span class="nl">array:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 参照渡しの場合</span>
</span><span class='line'><span class="n">func</span> <span class="nf">fuga</span><span class="p">(</span><span class="nl">array:</span> <span class="n">inout</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ということです。</p>

<h3>Exclusive Access to Memoryとは</h3>

<p>このエラーメッセージは、<br/>
『同じメモリに同時にアクセスすることを禁じる』<br/>
ことを指し示しています。</p>

<p><strong>参照渡し</strong> は値のメモリ上のアドレスにアクセスするため、<br/>
<strong>参照渡し</strong> の場合に気をつけなければなりません。</p>

<p>因みに、これはSwift4で取り入れられた制御とのことです。<br/>
詳しくは下記参照のこと&hellip;<br/>
<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md">0176-enforce-exclusive-access-to-memory.md</a></p>

<h3>Exclusive Access to Memoryに遭遇した場合の解決方法</h3>

<p>では、どうやって解決すれば良いのでしょうか。<br/>
考えられる手法としては下記2つかなと思っています。</p>

<ul>
<li>メモリへのアクセスタイミングをズラす</li>
<li><strong>参照渡し</strong> から <strong>値渡し</strong> に変更する</li>
</ul>


<p>前者で解決するのであればそれに越したことはないのですが、<br/>
iOSの <code>Lifecycleメソッド</code> や <code>Delegateメソッド</code> など、こちらでタイミングをズラすことのできない場合は、 <strong>値渡し</strong> に変更せざるを得ないこともあるでしょう。</p>

<h3>まとめ</h3>

<p>参照渡しを利用するときは、メモリアクセスに十分注意して設計する必要がありますね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初心者だけしゃない！『iOSアプリ設計パターン入門』へのススメ]]></title>
    <link href="http://grandbig.github.io/blog/2019/02/11/ios-architecture-impression/"/>
    <updated>2019-02-11T15:28:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/02/11/ios-architecture-impression</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は、<a href="https://peaks.cc/iOS_architecture">iOSアプリ設計パターン入門</a>という書籍を紹介したいと思います。</p>

<div class="peaks_widget" style="overflow:hidden; padding:20px; border:2px solid #ccc;"><div class="peaks_widget__image" style="float:left; margin-right:15px; line-height:0;"><a target="_blank" id="purchase" href="https://peaks.cc/grand_big/iOS_architecture"><img alt="iOSアプリ設計パターン入門" style="border:none; max-width:140px;" src="https://s3-ap-northeast-1.amazonaws.com/peaks-images/ios_architecture_project_cover_alpha.png"></a></div><div class="peaks_widget__info"><p style="margin:0 0 3px 0; font-size:110%; font-weight:bold;"><a target="_blank" id="purchase" href="http://peaks.cc/grand_big/iOS_architecture">iOSアプリ設計パターン入門</a></p><ul style="margin:0; padding:0;">
<li style="font-size:90%; list-style:none;"><span>著者：</span>
<span>関 義隆,</span><span>史 翔新,</span><span>田中 賢治,</span><span>松館 大輝,</span><span>鈴木 大貴,</span><span>杉上 洋平,</span><span>加藤 寛人,</span></li>
<li style="font-size:90%; list-style:none;">製本版,電子版</li>
<li style="font-size:90%; list-style:none;"><a target="_blank" id="purchase" style="text-decoration:underline; color:#1DA1F2;" href="http://peaks.cc/grand_big/iOS_architecture">PEAKSで購入する</a></li></ul></div></div>


<p></p>

<p>こちらの書籍は<a href="https://peaks.cc/">PEAKS</a>というクラウドファンディングの技術書版サービス内で成立したプロジェクトから生み出されたものです。</p>

<p>以前、<a href="https://peaks.cc/books/architecture_patterns">Android アプリ設計パターン入門</a>という書籍が執筆されていたのですが、<br/>
個人的には『iOS版もあれば絶対売れるのに&hellip;』と思っていました。<br/>
その後、ふとPEAKSのサイトを見た時に、待ちに待った <code>iOS版</code> が執筆のための応援を募っていることに気づき、その場で応援を即決したことを昨日のように覚えています。</p>

<p>そしてリリースされた書籍を手に取り読み込んでいくうちに、<br/>
予想通りの良書であったと再認識しました。<br/>
そんな想いを少しでも共有したいと思い、本記事を書いていこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>対象読者について</h3>

<p>PEAKSのページを見ると、対象読者は下記のように記されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>◆ アプリをどんなアーキテクチャで作るか迷っている方
</span><span class='line'>◆ ViewController, ViewModelがすぐに肥大してしまう方
</span><span class='line'>◆ 今後もメンテナンスし続けるアプリを作る方
</span><span class='line'>◆ アーキテクチャ変遷の歴史を知りたい方
</span><span class='line'>◆ そもそも設計って何？という方</span></code></pre></td></tr></table></div></figure>


<p>書籍のタイトルに『入門』というワードが入っているため、初心者向けのように思われるかもしれませんが、<br/>
上記の対象者を見て頂くとわかる通り、所謂 <code>Tech Lead</code> 人材にとっても役立つ書籍と言えるかと思います。</p>

<h3>内容について</h3>

<p>では、実際にどのような内容が書かれているのでしょうか。<br/>
まずは目次から見ていきましょう。</p>

<h4>目次</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>第Ⅰ部：設計を知る
</span><span class='line'> ├── 第１章：設計するということ
</span><span class='line'> ├── 第２章：設計にパターンを適用する前に
</span><span class='line'> ├── 第３章：Swiftらしく設計する
</span><span class='line'> └── 第４章：アーキテクチャのパターンを鳥瞰する
</span><span class='line'>第Ⅱ部：iOSアプリのための設計パターン
</span><span class='line'> ├── 第５章：MVC
</span><span class='line'> ├── 第６章：MVP
</span><span class='line'> ├── 第７章：MVVM
</span><span class='line'> ├── 第８章：Flux
</span><span class='line'> ├── 第９章：Redux
</span><span class='line'> ├── 第１０章：Clean Architecture
</span><span class='line'> ├── 第１１章：アプリの起動経路 - Application Coordinator の導入
</span><span class='line'> ├── 第１２章：画面遷移のパターン - Router の導入
</span><span class='line'> └── 第１３章：第2部まとめ - アーキテクチャの選定基準
</span><span class='line'> 第Ⅲ部：設計をサービスに導入する
</span><span class='line'> ├── 第１４章：Flux の導入例
</span><span class='line'> └── 第１５章：Redux の導入例 - 大規模アプリケーションに Redux を導入する
</span><span class='line'>
</span><span class='line'> ※細部は省略</span></code></pre></td></tr></table></div></figure>


<p>続いて筆者が思う各部それぞれのポイントについて紹介します。</p>

<h4>第Ⅰ部：設計を知る</h4>

<p>第Ⅰ部は、</p>

<ol>
<li>「設計とは何か？/なぜ設計をするのか？」の説明</li>
<li>設計をする上で知っておくべき&amp;身につけておくべき知識</li>
<li>設計原則をSwiftでどう実現させるのか</li>
<li>アーキテクチャの変遷(iOSならではの話を含む)</li>
</ol>


<p>などについて語られています。<br/>
1や2, 4に関しては、iOSに閉じない話も含まれているため、アーキテクチャ自体の読み物としても面白いと思います。</p>

<p>3で記載した通り、具体的なコードベースで設計原理のSwiftでの実現手法が書かれているため、<br/>
設計本でありがちな思想の提示に留まらないところに本書籍の価値があると感じました。</p>

<p>要は、『 <strong>言いたいことはわかるけど、どう書けば良いの？</strong> 』という読者の問いに答えられる書籍になっているということです。</p>

<h4>第Ⅱ部：iOSアプリのための設計パターン</h4>

<p>第Ⅱ部は、</p>

<ol>
<li>各種設計パターンの説明と具体例の提示</li>
<li>画面遷移の複雑さをどう解決するかの紹介</li>
<li>アーキテクチャを選定する難しさ</li>
</ol>


<p>などについて語られています。</p>

<p>1にある通り、概念の図式はもちろんのこと、具体的にコードを用いて説明されているため、<br/>
どんなアーキテクチャがあるのか知らないという方でも理解が進むように感じられます。</p>

<p>「書籍で読まずとも、ネットでググれば大抵理解できるのでは？」と思われる方もいるかもしれません。<br/>
その意見に対する見解としては、<br/>
『 <strong>各種アーキテクチャのスタンダードな理解/共通理解を持つための拠り所としての価値</strong> 』<br/>
だと思っています。</p>

<p>つまり、<br/>
ネット上には、各種アーキテクチャを説明する記事が多数見つかりますが、<br/>
物によってはオレオレ要素が含まれているため、<br/>
記事によって差異が見られ、『何が正しいの？』と思ってしまうことがあるということです。</p>

<p>また、チーム開発をする際に、人によって信じる依代が異なると、<br/>
コミュニケーションコストが増大する可能性もあります。</p>

<p>この書籍が必ずしもアーキテクチャ選定時の拠り所にすべきとは言いませんが、<br/>
1つの選択肢として与えられることは一読者として非常にありがたいと感じています。</p>

<p>2に関しては、ネイティブアプリ特有の課題に突っ込んだ内容となっています。<br/>
プロジェクトアサイン時に、キャッチアップのためソースコードを読むと思うのですが、<br/>
画面遷移処理がキレイにまとめられているとそれだけで立ち上がりコストがぐっと楽になると思います。</p>

<p>また、各種アーキテクチャでアプリ構築を始めたところ、<br/>
「画面遷移処理はどうしよう？」と思うこともあったりするので、ありがたいナレッジの共有だと感じました。</p>

<p>そして非常に共感したのが、3のアーキテクチャ選定に関する話です。<br/>
『 <strong>モダン開発に対する魅力がアーキテクチャの必要可否に勝って選定されることが本当に正しいのか？</strong> 』
ということを考えるのに良い内容だと感じています。</p>

<p>個人的にも、「流行りこそ正義」みたいな考え方が先行して失敗してしまった苦い思い出があるので、ぜひ読んで頂きたい章です。<br/>
(ホント、なかなか難しいんですよね&hellip;。プロダクトやチームにとってベターなアーキテクチャ選定って&hellip;)</p>

<h4>第Ⅲ部：設計をサービスに導入する</h4>

<p>第Ⅲ部は、</p>

<ol>
<li><code>Flux</code> や <code>Redux</code> を実開発で利用するための追加説明</li>
<li>開発だけでなく、テストに目を向けた説明</li>
</ol>


<p>などについて語られています。</p>

<p>入門系の技術書籍を読んだ後に思いがちな<br/>
『基本はわかったけど、応用に生かせない』というもどかしさ<br/>
を読者が埋めやすくするようなサポートだと感じています。</p>

<p><code>Flux</code> と <code>Redux</code> の2パターンに限った話ではありますが、<br/>
エラーハンドリング/テスト/DIなどの汎用的な内容も含まれているため、<br/>
一読の価値があると思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
個人的には、iOS関連の書籍に持続可能性を持たせることは非常に難しいと思っていたため、<br/>
本書に出会った時はとても感動しました。<br/>
今この時だけでなく、長期に渡って一助となる可能性を感じることができました。<br/>
これから繰り返し読み込んで理解を深めたいと思いますし、実業務に活かせるポイントを多分に含んでいると感じています。</p>

<p>とは言え、百聞は一見に如かずということで、実際に一読を考えてみてはいかがでしょうか？</p>

<p>と言ったところで本日はここまで。</p>

<div class="peaks_widget" style="overflow:hidden; padding:20px; border:2px solid #ccc;"><div class="peaks_widget__image" style="float:left; margin-right:15px; line-height:0;"><a target="_blank" id="purchase" href="https://peaks.cc/grand_big/iOS_architecture"><img alt="iOSアプリ設計パターン入門" style="border:none; max-width:140px;" src="https://s3-ap-northeast-1.amazonaws.com/peaks-images/ios_architecture_project_cover_alpha.png"></a></div><div class="peaks_widget__info"><p style="margin:0 0 3px 0; font-size:110%; font-weight:bold;"><a target="_blank" id="purchase" href="http://peaks.cc/grand_big/iOS_architecture">iOSアプリ設計パターン入門</a></p><ul style="margin:0; padding:0;">
<li style="font-size:90%; list-style:none;"><span>著者：</span>
<span>関 義隆,</span><span>史 翔新,</span><span>田中 賢治,</span><span>松館 大輝,</span><span>鈴木 大貴,</span><span>杉上 洋平,</span><span>加藤 寛人,</span></li>
<li style="font-size:90%; list-style:none;">製本版,電子版</li>
<li style="font-size:90%; list-style:none;"><a target="_blank" id="purchase" style="text-decoration:underline; color:#1DA1F2;" href="http://peaks.cc/grand_big/iOS_architecture">PEAKSで購入する</a></li></ul></div></div>


<p></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCTestでViewModelのテストを書いてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2019/01/30/xctest-2/"/>
    <updated>2019-01-30T11:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/01/30/xctest-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は、 <code>MVVM</code> アーキテクチャでiOSアプリを書いた場合の <code>Unit Test</code> について記事を書こうと思います。</p>

<p>だいぶ<a href="http://grandbig.github.io/blog/2016/01/11/xctest/">以前</a>に <code>XCTest</code> と <code>XCUITest</code> の初歩について紹介しましたが、<br/>
本記事では特に <code>XCTest</code> を用いた <code>Unit Test</code> に焦点をあてます。</p>

<p>では、早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>前提</h3>

<p>まずは、 <code>Unit Test</code> を書くにあたっての前提について確認しておきたいと思います。</p>

<h4>利用するソースコード</h4>

<p>今回説明に利用するソースコードは<a href="https://github.com/grandbig/footStepMeter">足跡計 v1.0.4</a>にします。</p>

<p>主な機能は下記の通りです。</p>

<ul>
<li>様々な精度で歩行ルートを記録可能</li>
<li>複数の歩行ルートを記録可能</li>
<li>歩行ルート履歴をいつでも閲覧可能</li>
<li>歩行ルート記録をメールで送信可能</li>
<li>不要になった歩行ルート記録は削除可能</li>
</ul>


<p>また、実際のアプリ画面は下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/xctest-2_1.png" alt="足跡計 v1.0.4の画面キャプチャ" /></p>

<h4>利用しているOSSライブラリ</h4>

<p>このアプリで利用しているOSSライブラリは下記の通りです。</p>

<ul>
<li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>

<ul>
<li><code>MVVM</code> アーキテクチャでアプリを構成するために利用しています。</li>
<li><code>RxCocoa</code> は <code>RxSwift</code> と基本的にはセットで利用します。</li>
<li><code>RxTest</code> はテストコードを書く時に利用します。</li>
</ul>
</li>
<li><a href="https://github.com/RxSwiftCommunity/RxDataSources">RxDataSources</a>

<ul>
<li><code>UITableView</code> 関連の処理を <code>Rx</code> 書く時のサポートとなるため利用しています。</li>
</ul>
</li>
<li><a href="https://github.com/realm/realm-cocoa">RealmSwift</a>

<ul>
<li>位置情報をアプリローカルに保存するために利用しています。</li>
</ul>
</li>
<li><a href="https://github.com/mac-cain13/R.swift">R.swift</a>

<ul>
<li>文字列のベタ書きやそれに寄るスペルミス等を防ぐために利用しています。</li>
</ul>
</li>
<li><a href="https://github.com/mono0926/LicensePlist">LicensePlist</a>

<ul>
<li>ライセンスページをアプリ外に配置するために利用しています。</li>
</ul>
</li>
</ul>


<h3>テストコードのサンプル1</h3>

<p>それでは実際にテストコードを見ていきましょう。</p>

<p>まず1つ目のサンプルとしては、下記画面のテストを取り上げて説明します。</p>

<p><img src="http://grandbig.github.io/images/xctest-2_2.png" alt="設定画面" /></p>

<p>この画面は、</p>

<ul>
<li>メイン画面の <code>UITabBar</code> の4項目目をタップして画面遷移した先の設定画面</li>
<li>この設定画面は <code>UITableView</code> で構成されたテーブルビューの画面</li>
<li>表示されている2項目は文言固定</li>
</ul>


<p>という仕様になっています。</p>

<h4>ViewModelのソースコード</h4>

<p>テストを書く前にそもそもの実装を紹介します。</p>

<h5>SettingView.strings</h5>

<p>文字列べた書きを避けるために <code>R.swift</code> を利用しているので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SettingView.strings</span>
</span><span class='line'><span class="s">&quot;title&quot;</span> <span class="o">=</span> <span class="s">&quot;SETTINGS&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;footprintHistory&quot;</span> <span class="o">=</span> <span class="s">&quot;FOOTPRINT HISTORY&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;aboutApp&quot;</span> <span class="o">=</span> <span class="s">&quot;ABOUT APP&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように定義しています。</p>

<h5>Injectable.swift</h5>

<p>ここは <code>ViewModel</code> クラスの <code>DI</code> 化をするために用意した <code>Protocol</code> になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Injectable.swift</span>
</span><span class='line'><span class="n">protocol</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">associatedtype</span> <span class="n">Dependency</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Injectable</span> <span class="n">where</span> <span class="n">Dependency</span> <span class="o">==</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">with:</span> <span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>SettingSectionModel.swift</h5>

<p>本画面ではテーブルビューの描画時に <code>RxDataSources</code> を利用しているため、その準備が必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SettingSectionModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SettingSectionModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">SettingSectionModel:</span> <span class="n">SectionModelType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Item</span> <span class="o">=</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">original:</span> <span class="n">SettingSectionModel</span><span class="p">,</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span> <span class="o">=</span> <span class="n">original</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>SettingViewModel.swift</h5>

<p>そして、 <code>ViewModel</code> のクラスです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SettingViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">SettingViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SettingSectionModel</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorRelays</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">viewDidLoadStream</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SettingSectionModel</span><span class="p">]</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SettingSectionModel</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">settingView</span><span class="p">.</span><span class="n">footprintHistory</span><span class="p">(),</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">settingView</span><span class="p">.</span><span class="n">aboutApp</span><span class="p">()]</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SettingSectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">viewDidLoadStream</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初期ロード時に、固定文言をセットしたテーブルビューを表示する必要があるため、<br/>
画面初期化時に即時に <code>Subscribe</code> するようにしており、<br/>
それを <code>Observable.deferred</code> で捕捉して、必要な値を <code>viewDidLoadStream</code> にバインディングする形で <code>View</code> に返しています。</p>

<h4>ViewModelのテストコード</h4>

<p>ではテストを書いていきます。</p>

<p>ここで書きたいテストは、</p>

<ul>
<li>When: 初期ロード時に</li>
<li>What: <code>RxDataSources</code> で処理可能な <code>SettingSectionModel</code> の形をした2つの固定文言を</li>
<li>How: <code>viewDidLoadStream</code> 経由で</li>
</ul>


<p>渡ってくることになります。</p>

<p>それを表したテストコードが下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SettingViewModelTests.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxTest</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">footStepMeter</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SettingViewModelTests:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">viewModel:</span> <span class="n">SettingViewModel</span><span class="o">!</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">TestScheduler</span><span class="p">(</span><span class="nl">initialClock:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">dependency</span> <span class="o">=</span> <span class="n">SettingViewModel</span><span class="p">.</span><span class="n">Dependency</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="o">=</span> <span class="n">SettingViewModel</span><span class="p">(</span><span class="nl">with:</span> <span class="n">dependency</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">tearDown</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">testViewDidLoadStream</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">settingSectionModels</span> <span class="o">=</span> <span class="n">scheduler</span><span class="p">.</span><span class="n">createObserver</span><span class="p">([</span><span class="n">SettingSectionModel</span><span class="p">].</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">viewDidLoadStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">settingSectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">scheduler</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 想定されるテスト結果の定義</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">settingView</span><span class="p">.</span><span class="n">footprintHistory</span><span class="p">(),</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">settingView</span><span class="p">.</span><span class="n">aboutApp</span><span class="p">()]</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">mock</span> <span class="o">=</span> <span class="p">[</span><span class="n">SettingSectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">expectedItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">Recorded</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">mock</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 実際の実行結果</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">settingSectionModels</span><span class="p">.</span><span class="n">events</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 想定結果と実行結果を比較</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">,</span> <span class="n">expectedItems</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>説明(1)</h5>

<p>テスト対象となる <code>SettingViewModel</code> とテストの実行タイミングを測る上で必要な <code>TestScheduler</code> を定義しています。</p>

<h5>説明(2)</h5>

<p>テスト実施前のセットアップとして、 <code>SettingViewModel</code> を初期化しています。</p>

<h5>説明(3)</h5>

<p>ここで具体的にテストを書いています。</p>

<ul>
<li>ストリームを捕捉する <code>Observer</code> として <code>settingSectionModels</code> を定義</li>
<li>それを <code>viewDidLoadStream</code> に流れた時のバインディング先として設定</li>
<li>固定文言2つが <code>RxDataSources</code> 用の形で流れてくるため、そのモックデータを定義</li>
<li>初期ロード時に流れるはずなので <code>[Recorded.next(0, mock)]</code> と設定</li>
<li>想定結果と実行結果を <code>XCTAssertEqual</code> を用いて比較</li>
</ul>


<h3>テストコードのサンプル2</h3>

<p>続いて、2つ目のサンプルですが、下記のテストの一部を紹介します。</p>

<p><img src="http://grandbig.github.io/images/xctest-2_3.png" alt="足跡履歴一覧画面" /></p>

<p>この画面は、</p>

<ul>
<li>設定画面の <code>FOOTPRINT HISTORY</code> をタップした時に画面遷移した先の足跡履歴一覧画面</li>
<li>この足跡履歴一覧画面は <code>UITableView</code> で構成されたテーブルビューの画面</li>
<li>各項目はアプリローカルに保存された情報から取得して表示している</li>
</ul>


<p>という仕様になっています。</p>

<p>幾つか他にも機能があるため、サンプル1よりもテスト項目数は多くなるのですが、説明のため上記1つに絞ります。</p>

<h4>ViewModelのソースコード</h4>

<p>さて、そもそものソースコードですが、 <code>Injectable.swift</code> は先程と同じなので省略します。</p>

<h5>FootprintRecordSectionModel.swift</h5>

<p>サンプル1と同じく、本画面ではテーブルビューの描画時に <code>RxDataSources</code> を利用しているため、その準備が必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FootprintRecordSectionModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">FootprintRecordSectionModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">FootprintRecordSectionModel:</span> <span class="n">SectionModelType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Item</span> <span class="o">=</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">original:</span> <span class="n">FootprintRecordSectionModel</span><span class="p">,</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span> <span class="o">=</span> <span class="n">original</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各行に表示する内容が、</p>

<ul>
<li>保存データのタイトル</li>
<li>その足跡数</li>
</ul>


<p>となっていて、対にしてデータを返却するために <code>(String, Int)</code> とタプルで書いています。</p>

<h5>RealmManager.swift</h5>

<p>今回のテストでは、アプリ内部に保存したデータを取得する処理を扱うため、その処理を実装する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// RealmManager.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">RealmManagerClient</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// MARK: - Protocol Properties</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Protocol Methods</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">setSaveTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">createFootprint</span><span class="p">(</span><span class="nl">location:</span> <span class="n">CLLocation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">existsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">delete</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">?&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">RealmManager:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">RealmManagerClient</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">titles</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">sorted</span><span class="p">(</span><span class="nl">byKeyPath:</span> <span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="nl">ascending:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="nl">forKey:</span> <span class="s">&quot;title&quot;</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">String</span><span class="p">],</span> <span class="n">let</span> <span class="n">distinctTitles</span> <span class="o">=</span> <span class="n">NSOrderedSet</span><span class="p">(</span><span class="nl">array:</span> <span class="n">titles</span><span class="p">).</span><span class="n">array</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">distinctFootprints</span> <span class="o">=</span> <span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]()</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">title</span> <span class="k">in</span> <span class="n">distinctTitles</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;title == &#39;\(title)&#39;&quot;</span><span class="p">).</span><span class="n">count</span>
</span><span class='line'>                    <span class="n">distinctFootprints</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">title</span><span class="p">,</span> <span class="n">count</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">distinctFootprints</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回直接扱う処理以外は省略して書きました。<br/>
基本的な <code>CRUD</code> の処理に加えて、本アプリ固有のビジネスロジックが存在します。<br/>
※ <code>protocol</code> 部分を書いたのは、後のテストコードに関わるためです。</p>

<h5>FootprintRecordViewModel</h5>

<p>冒頭に説明した通り、混乱を避けるため、今回のテストコードで利用しない部分はあえてコードを省略しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FootprintRecordViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">FootprintRecordViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">realmManager:</span> <span class="n">RealmManagerClient</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">FootprintRecordSectionModel</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorRelays</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">savedRecordStream</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="p">[</span><span class="n">FootprintRecordSectionModel</span><span class="p">]</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">realmManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">realmManager</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">FootprintRecordSectionModel</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">FootprintRecordSectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">realmManager</span><span class="p">.</span><span class="n">distinctByTitle</span><span class="p">())]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">savedRecordStream</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプル1と基本的には同じです。<br/>
返却値をアプリ内部に保存したデータにする必要があるため、<br/>
<code>realmManager.distinctByTitle()</code> を利用しています。</p>

<h4>ViewModelのテストコード</h4>

<p>ではテストを書いていきます。</p>

<p>ここで書きたいテストは、</p>

<ul>
<li>When: 初期ロード時に</li>
<li>What: <code>RxDataSources</code> で処理可能な <code>FootprintRecordSectionModel</code> の形をした保存済み足跡情報を</li>
<li>How: <code>savedRecordStream</code> 経由で</li>
</ul>


<p>渡ってくることになります。</p>

<p>それを表したテストコードが下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FootprintRecordViewModelTests.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">footStepMeter</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">FootprintRecordViewModelTests:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">viewModel:</span> <span class="n">FootprintRecordViewModel</span><span class="o">!</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">TestScheduler</span><span class="p">(</span><span class="nl">initialClock:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">(</span><span class="nl">configuration:</span> <span class="n">Realm</span><span class="p">.</span><span class="n">Configuration</span><span class="p">(</span><span class="nl">inMemoryIdentifier:</span> <span class="s">&quot;inMemory&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="c1">/// テスト用のモックRealmManagerClient</span>
</span><span class='line'>    <span class="n">final</span> <span class="n">class</span> <span class="nl">MockRealmManagerClient:</span> <span class="n">RealmManagerClient</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">setSaveTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">createFootprint</span><span class="p">(</span><span class="nl">location:</span> <span class="n">CLLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">mockFootprints</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">fetchFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">mockFootprints</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">existsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">mockDistinctData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">mockDistinctData</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">countFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">countFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">func</span> <span class="n">delete</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">?&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">mockFootprints</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">sorted</span><span class="p">(</span><span class="nl">byKeyPath:</span> <span class="s">&quot;id&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">mockDistinctData</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[(</span><span class="s">&quot;test1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test2&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">setUpInitialFootprint</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">footprint</span> <span class="o">=</span> <span class="n">Footprint</span><span class="p">()</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">latitude</span> <span class="o">=</span> <span class="mf">35.0</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">longitude</span> <span class="o">=</span> <span class="mf">137.0</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">accuracy</span> <span class="o">=</span> <span class="mf">65.0</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>        <span class="n">footprint</span><span class="p">.</span><span class="n">direction</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>        <span class="n">try</span><span class="o">!</span> <span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">realm</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">footprint</span><span class="p">,</span> <span class="nl">update:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// 初めにinMemoryに保存するデータを構築</span>
</span><span class='line'>        <span class="n">setUpInitialFootprint</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">dependency</span> <span class="o">=</span> <span class="n">FootprintRecordViewModel</span><span class="p">.</span><span class="n">Dependency</span><span class="p">(</span><span class="nl">realmManager:</span> <span class="n">MockRealmManagerClient</span><span class="p">())</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="o">=</span> <span class="n">FootprintRecordViewModel</span><span class="p">(</span><span class="nl">with:</span> <span class="n">dependency</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">tearDown</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// inMemoryのデータは全て削除</span>
</span><span class='line'>        <span class="n">try</span><span class="o">!</span> <span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">FootprintRecordViewModelTests</span><span class="p">.</span><span class="n">realm</span><span class="p">.</span><span class="n">deleteAll</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(5)</span>
</span><span class='line'>    <span class="c1">/// 初期ロード時に指定したデータが正しい順番&amp;内容でデータバインディングできることの確認</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">testSavedRecordStream</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">footprintSectionModels</span> <span class="o">=</span> <span class="n">scheduler</span><span class="p">.</span><span class="n">createObserver</span><span class="p">([</span><span class="n">FootprintRecordSectionModel</span><span class="p">].</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">savedRecordStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">footprintSectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">scheduler</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 想定されるテスト結果の定義</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&quot;test1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test2&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">mock</span> <span class="o">=</span> <span class="p">[</span><span class="n">FootprintRecordSectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">expectedItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">Recorded</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">mock</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 実際の実行結果</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">footprintSectionModels</span><span class="p">.</span><span class="n">events</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 想定結果と実行結果の比較</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="mf">.0</span><span class="p">,</span> <span class="n">expectedItems</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="mf">.0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="mf">.1</span><span class="p">,</span> <span class="n">expectedItems</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="mf">.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="mf">.0</span><span class="p">,</span> <span class="n">expectedItems</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="mf">.0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="mf">.1</span><span class="p">,</span> <span class="n">expectedItems</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">element</span><span class="o">!</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="mf">.1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>説明(1)</h5>

<p><code>viewModel</code> と <code>scheduler</code> はサンプル1と同じです。<br/>
 今回、ここで下記定義を追加しています。</p>

<p> <code>objective-c
static let realm = try! Realm(configuration: Realm.Configuration(inMemoryIdentifier: "inMemory"))
</code></p>

<p>これは、このテスト対象が『 <code>RealmSwift</code> に保存したデータを利用する処理であること』が理由です。<br/>
<code>RealmSwift</code> では特にモックデータを返却するような仕組みはないため、自身で実装する必要があります。</p>

<p>最も簡単な方法が <strong>インメモリで一時保存したモックデータを利用する</strong> といったものになります。</p>

<h5>説明(2)</h5>

<p><code>RealmSwift</code> に保存したデータを取得するために <code>FootprintRecordViewModel</code> 内では <code>RealmManagerClient</code> を利用しています。</p>

<p>下記より、</p>

<ul>
<li><code>FootprintRecordViewModel</code> の初期化時に <code>RealmManagerClient</code> 型のオブジェクトを渡す</li>
<li><code>RealmManagerClient</code> は <code>protocol</code> として定義している</li>
</ul>


<p>各メソッドの返却値をテスト用に自由にカスタマイズ可能です。<br/>
ここでは <code>RealmManagerClient</code> に準拠した <code>MockRealmManagerClient</code> を 定義して、<br/>
<code>FootprintRecordViewModel</code> の初期化時の引数に渡しています。</p>

<h5>説明(3)</h5>

<p>セットアップで <code>RealmSwift</code> に、計測した足跡履歴が保存されている状態とします。</p>

<h5>説明(4)</h5>

<p>一応、今回は <strong>インメモリで保存している</strong> ので、アプリが終了したタイミングでメモリから解放されるはずではあるのですが、<br/>
テスト終了時に必ず実行する処理として <code>tearDown</code> メソッド内に <strong>インメモリで保存したデータの削除</strong> を仕込んでいます。</p>

<h5>説明(5)</h5>

<p>ここはサンプル1と同じですね。</p>

<ul>
<li>ストリームを捕捉する <code>Observer</code> として <code>footprintSectionModels</code> を定義</li>
<li>それを <code>savedRecordStream</code> に流れた時のバインディング先として設定</li>
<li>固定文言2つが <code>RxDataSources</code> 用の形で流れてくるため、そのモックデータを定義</li>
<li>初期ロード時に流れるはずなので <code>[Recorded.next(0, mock)]</code> と設定</li>
<li>想定結果と実行結果を <code>XCTAssertEqual</code> を用いて比較

<ul>
<li>モックデータとして2つのデータを用意しているので、両方比較して想定通りであることを確認します</li>
<li>これはデータの並び順まで想定通りであることを確認したいためです</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
以上が <code>Unit Test</code> の書き方の事例紹介になります。<br/>
iOSの <code>Unit Test</code> では、</p>

<ul>
<li><code>protocol</code> 準拠してマニュアルモックを実装する</li>
<li>初期化時に、上記を渡すことでテストデータとして利用できる</li>
</ul>


<p>ことが重要だと思っています。</p>

<p>ここを始めから念頭に置きつつ実装しないと、テストコードが書けずに苦労することになるでしょう。<br/>
(もしくはテストコードを書くために、元々の実装を見直すことになりかねません。)</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職面接で聞かれた質問から求めている人材を考えてみる(2)]]></title>
    <link href="http://grandbig.github.io/blog/2019/01/26/mycareer-4/"/>
    <updated>2019-01-26T11:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/01/26/mycareer-4</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>3年前の転職活動と同様に、今回も考察してみたいと思います。<br/>
(因みに前回の記事は<a href="https://grandbig.github.io/blog/2016/12/22/mycareer-2/">こちら</a>です。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>転職活動で聞かれたこと</h3>

<p>企業や応募者の年齢などに関係するのかもしれませんが、3年前と比べて感じたのはほぼ同じ質問が多いということでした。</p>

<p>基本的には、</p>

<ul>
<li>自己紹介</li>
<li>職務経歴書の内容について</li>
<li>なぜ転職活動をしているのか</li>
<li>自身の今後のキャリアについて</li>
</ul>


<p>といったことがメインでした。<br/>
それぞれどういった流れで質疑応答していたのか、少し詳しく書きつつ、考察してみます。</p>

<h4>自己紹介</h4>

<p>挨拶もそこそこに、「まずは自己紹介をお願いします」と面接が始まります。<br/>
では、なぜ自己紹介を求められるのでしょうか？<br/>
それには幾つか理由があるのではないかと思います。</p>

<p>例えば、</p>

<ol>
<li>応募者のアピールポイントを聞きたい</li>
<li>聞き手側を考えて、要点をまとめて整理できているか確認したい</li>
</ol>


<p>といったことが考えられます。</p>

<h5>応募者のアピールポイントを聞きたい</h5>

<p>まず1点目からですが、基本的にはここで面接の流れがあらかた決まると思います。<br/>
自己紹介でマイナス面を強く推して発表する人はいないはずですから、<br/>
暗黙の了解的に <strong>応募者のアピールポイント</strong> であると面接官は認識するはずです。</p>

<p>面接は一世一代の人生のターニングポイントである可能性もありますから、<br/>
非常に緊張している応募者もいるかもしれません。</p>

<p>そういった観点からも、まずは <strong>応募者の自信のある内容</strong> から会話を始め、<br/>
能力面を見るために深く掘り下げていくのではないでしょうか。</p>

<h5>聞き手を考えて、要点をまとめて整理できているか確認したい</h5>

<p>次に2点目ですが、これは前提として捉えられることが多いかもしれません。<br/>
つまり、ここには加点要素はなく、整理できていて当たり前と見なされることが多いのではないかなと睨んでいます。<br/>
逆に、自己紹介がお粗末だと、『本当に自分のことなのかな？』と思われかねません&hellip;</p>

<h5>実際に話したこと</h5>

<p>では、筆者が実際に自己紹介で何を話したかについても簡単に紹介します。</p>

<ul>
<li>名前

<ul>
<li>○○と申します。どうぞよろしくお願い致します</li>
</ul>
</li>
<li>社会人歴

<ul>
<li>社会人歴8年目になります</li>
</ul>
</li>
<li>1社目での経歴

<ul>
<li>▲▲で約5年間働きました</li>
<li>iOSアプリ開発を中心にWEB FE/BE、時にはAndroidも担当しました。</li>
</ul>
</li>
<li>2社目での経験

<ul>
<li>◆◆に入社し、約3年働いております</li>
<li>iOSアプリ開発者として採用されましたが、WEB FE/BEの開発をすることになりました</li>
<li>その後、5名程度のチームのリーダを担当しました</li>
<li>昨年はiOSアプリ開発に復帰し、プロジェクト前半にiOSチームリーダを、後半をチーム全体のリーダを担当しました</li>
<li>今年度から10〜15名程度のチームリーダを担当しています</li>
</ul>
</li>
<li>自身の強み

<ul>
<li>iOSアプリ開発だけでなく、WEB FE/BEなど幅広く開発経験があること</li>
<li>プロダクトの初期構築(0→1)フェーズ、エンハンスフェーズ共に経験があること</li>
<li>5〜15名規模のチームリーダ経験があること</li>
</ul>
</li>
</ul>


<p>自分で語りやすい/面接官からの質問に対応しやすい内容を中心に話すように心がけていました。<br/>
実際に、上記内容から話が広がることがほとんどだったように記憶しています。</p>

<h3>職務経歴書の内容について</h3>

<p>個人的には、『自己アピールの内容』と『面接官が聞きたい内容』が一致しやすかった気がしていますが、<br/>
もちろん職務経歴書に書かれている『自己アピールに含まれない』内容も聞かれることはありました。</p>

<h4>自己アピールと面接官の聞きたい内容が一致していたパターン</h4>

<p>主に下記のような質問がありました。</p>

<ul>
<li>iOSアプリ開発以外にも広く開発経験があるが、最も得意な技術領域はどこか</li>
<li>0-1フェーズ案件でアーキテクチャは誰がどう決めたのか</li>
<li>チームリーダとしてどんな課題を抱え、それにどうアプローチしたか</li>
</ul>


<p>それぞれどんな意図があったのかを考察していきたいと思います。</p>

<h5>最も得意な技術領域はどこか</h5>

<p>この質問が出た背景は筆者の経歴に寄るところが大きいと思います。<br/>
運の良いことにiOSだけでなく、WEB FE/BEなどの開発に携わる機会を2社共に頂くことができました。</p>

<p>一方で、これが必ずしもプラスにのみ映るかと言うとそうとは言い切れません。<br/>
なぜなら、自己アピールのために経歴が誇張されている可能性があるためです。</p>

<p>例えば、</p>

<ul>
<li>チームで利用されていた技術ではあるが、応募者本人は一切利用していない</li>
<li>数週間しか触れていない技術だが、即戦力級の実力があるように振る舞う</li>
</ul>


<p>などでしょうか。</p>

<p>上記疑いを払拭するためにも、具体的なエピソードを交えて説明すると良いでしょう。</p>

<p>さて、この質問の意図について考察してみます。</p>

<ul>
<li>応募求人に適合しているか</li>
<li>同求人に適合していない場合でも、他に光る能力を持っているか</li>
</ul>


<p>前者は当たり前かもしれませんが、個人的には後者の観点もあるのではないかと考えています。<br/>
つまり、『iOSエンジニアの求人に応募してきているが、バックエンド開発の方が適合しそうだな』と考える可能性があるんじゃないかと言うことです。</p>

<p>そういった観点からか、実際に、『WEBフロントエンド開発に興味はありませんか？』など聞かれたこともありました。</p>

<h5>アーキテクチャは誰がどう決めたのか</h5>

<p>この質問は特定の技術領域の能力の深度を測ろうとしているのかなと予想しています。</p>

<p>プロダクト開発において(特に初期の)設計を失敗すると、今後の運用に多大な負荷を与えてしまいます。<br/>
予算や納期の都合もあった上で、その時の最適なアーキテクチャを選定することが非常に大切です。</p>

<p>まとめると、</p>

<ul>
<li>応募者が設計力を持ち合わせているかどうか</li>
<li>応募者が設計する際に大切にしている観点はどこか</li>
</ul>


<p>ということになるかと思います。</p>

<h5>チームリーダとして抱えた課題とそれに対するアプローチ</h5>

<p>面接官として出てくる現場の方々は基本的にはリーダ以上であることが多いと思います。<br/>
なので、チーム開発あるあるを共有しやすい関係にあると言えます。<br/>
逆に言えば、今まさにメインで担当されている内容であるため、スキルが測りやすいと言えるのではないでしょうか。</p>

<p>筆者の思うこの質問の観点は、</p>

<ul>
<li>チームリーダとしてのスキルや経験値を測りたい</li>
<li>チームリーダをやることに対してのモチベーションを知りたい</li>
</ul>


<p>の2点です。</p>

<p>前者は、具体的なエピソードから、チームリーダとして初心者/中堅/ベテラン/プロフェッショナルなど、どのレベル感なのかを測ろうとしているのではないかと思っています。<br/>
先程述べたように、現場のリーダが面接官として出てくるのですから、精度はある程度高いと期待値を持たれているはずです。(たぶん)</p>

<p>後者は、社内でどういった役割が期待できるかを見据えるために、<br/>
『致し方なくリーダをやっているのか』or『進んでリーダをやっているのか』を聞くのだと思います。</p>

<p>多くの企業が『リーダを担える人』を欲しがっているため、『リーダをやりたい』という気持ちは大いに喜ばれる可能性があります。<br/>
もちろんプロフェッショナル人材も同様に引く手数多なので、どちらがどうということはないのですが、<br/>
『致し方なくリーダをやっている』場合であっても、</p>

<ul>
<li>なぜ進んではやりたくないのか</li>
<li>どういったキャリアプランを積み上げていきたいのか</li>
</ul>


<p>を伝えられると納得感を持ってもらえるのではないでしょうか。</p>

<h4>その他</h4>

<p>『自己アピールの内容』には含めていなかったものの、職務経歴書に書かれていることで質問を受けることもありました。</p>

<p>例えば、</p>

<ul>
<li>若手の育成に関すること</li>
<li>個人での活動に関すること</li>
</ul>


<p>などです。</p>

<h5>若手の育成について</h5>

<p>IT人材不足が嘆かれる近年において、人材育成は業界全体はもちろんのこと、各企業も重要視しているポイントの一つです。<br/>
もしも、その経験があるのだとしたら、アピールして損はないと思います。</p>

<p>質問の意図としては、</p>

<ul>
<li>若手育成の経験があるかどうか</li>
<li>経験がなかったとしても、今後、若手育成を担えるかどうか</li>
</ul>


<p>辺りでしょうか。</p>

<h5>個人での活動について</h5>

<p>業務では複数人で1つのアプリを担当していることがほとんどです。<br/>
(アプリの規模が大きくなればなるほど)</p>

<p>となると、応募者がそのアプリに対してどこまで何を担当したのか、完成品を見ただけでは測るのが難しいことでしょう。</p>

<p>よって質問の意図としては、</p>

<ul>
<li>スキルを測るため</li>
<li>学習への姿勢や意欲を測るため</li>
</ul>


<p>と考えられます。</p>

<p>前者よりも後者を重視する企業も当然あるとは思いますが、<br/>
それなりに最低限の作り込みをしておかないと前者の理由で印象を損ないかねません。</p>

<p>筆者の思う最低限とは、</p>

<ol>
<li>App Storeに公開していること</li>
<li>デザインに統一感があること</li>
<li>UI/UXがAppleデフォルトの部品で構成されていること</li>
</ol>


<p>です。</p>

<p><strong>1</strong> は志半ばで中途半端に開発して終わる人が多い中で、最後までやり切る姿勢を見せることができます。<br/>
<strong>2</strong> はデザイナーでない限り、格好良い光るデザインのアプリを開発することは難しいと思います。<br/>
しかしながら、平凡なデザインであれば、色合い等も統一させることは、そこまで難しいことではないでしょう。<br/>
平凡でも見やすいデザインに保つことは印象を損なわないために最低限必要だと考えます。<br/>
<strong>3</strong> はデザインと同じで、奇をてらった最新鋭のUI/UXを表現するのは個人では至難の業です。<br/>
しかし、逆に言えば、Appleデフォルトの部品を使うことで、それらを利用することができるということは示せると言えます。</p>

<h3>なぜ転職活動をしているのか</h3>

<p>職務経歴書の内容に関して認識を合わせた後に、『なぜ今回、転職活動をしているのか』といった話に当然なります。<br/>
なぜなら、応募者は自己アピールのために、『現場の○○で▲▲な成果を上げることができました』と成功体験を語ることでしょう。<br/>
であるならば、『他者に誇れる成果を上げた現場で頑張り続けても良いのでは？』と自然と思えてくるはずだからです。</p>

<p>そのため、職務経歴書でアピールした内容に対して逆説的に説得力のある転職活動理由を説明する必要があると言えます。</p>

<p>この質問の意図としては</p>

<ul>
<li>転職理由に説得力があるかの確認</li>
<li>うちであれば解消できる話なのか確認</li>
</ul>


<p>の大きく2つが考えられます。</p>

<h4>転職理由に説得力があるかの確認</h4>

<p>先程述べた通り、ここで話す内容は『職務経歴書のアピールと逆説的』になる可能性があります。<br/>
よって説得力が求められるのですが、どのようにすれば納得感のある説明ができるのでしょうか。</p>

<p>ポイントは、<strong>『自己の努力で解決できる話かどうか』</strong> だと思います。</p>

<p>ただの努力不足に見える内容は面接官に響かず、必要戦力として計算されにくくなることでしょう。<br/>
(下手をすると他責的思考能力の持ち主と見なされかねません。)</p>

<p>わかりやすい例を一つ上げると、『企業の社風や文化』でしょうか。<br/>
こういった話に直結する理由を持っているのであれば、会話しやすいと思います。<br/>
(無理やり繋げようとすると逆に破綻するので、ご注意を&hellip;)</p>

<h4>うちであれば解消できる話なのか確認</h4>

<p>どこの企業でも言える話であると見なされると『本当にうちを希望しているのか？』と思われかねません。<br/>
よって、『その企業だからこそ解消できる』ということを伝える必要があります。</p>

<p>事前に企業研究をするにこしたことはないのですが、<br/>
調べきれなかったとしても、面接中に自身の希望と企業の実態が合っていないとわかることは互いにメリットのあることだと思います。</p>

<p>なので、個人的にはこの要素は面接中に必ず伝えるようにしています。</p>

<h3>自身の今後のキャリアについて</h3>

<p>30代に入ると、大きく2つの選択肢から選ぶ瞬間が必ず訪れます。</p>

<ul>
<li>マネジメントレイヤーに進む</li>
<li>プロフェショナルレイヤーに進む</li>
</ul>


<p>希望を聞いた上で、社内で活躍できる場所があるか想像を巡らせると思います。<br/>
これが配属部署に強く関係することもあるでしょう。</p>

<p>これは、どちらが正解という話ではないので、自らが希望する道を率直に伝えるのが良いでしょう。<br/>
ビジョンがない/迷っている状況だったとしても、</p>

<ul>
<li>どういった選択肢で迷っているのか</li>
<li>なぜ迷っているのか</li>
</ul>


<p>は伝えられるようにしておいた方が無難です。<br/>
『何も考えていない』と捉えられてしまうのが最も不利だと思われるため、最低限、理由を述べられるようにしておきたいものです。</p>

<p>業界の動向や景気などに左右される可能性もあるため、あくまでも現時点での考え方や希望で構わないのです。<br/>
当然のことながら、人間なので、今後の考え方が変わる可能性は十分にあるのですから&hellip;</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。<br/>
今回は筆者が実際に聞かれた質問を元に様々な考察をしてみました。</p>

<p>あくまでも筆者個人の考察なので、正解も何もないのですが、こういったまとめは後に自身で見直した時に役立つことも多いため、振り返ってみました。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods v1.6.0でハマる『linker command failed with exit code 1』エラーの対応]]></title>
    <link href="http://grandbig.github.io/blog/2019/01/26/cocoapods-linker-error/"/>
    <updated>2019-01-26T00:44:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/01/26/cocoapods-linker-error</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はドハマリして解決に時間がかかった <code>linker command failed with exit code 1</code> についての解決方法のメモです。</p>

<p>前提は、</p>

<ul>
<li><code>Xcode10.1</code></li>
<li><code>CocoaPods</code> のバージョンが <code>v1.5.3</code> だったのを <code>v1.6.0.rc1</code> にアップデートした</li>
</ul>


<p>とします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>現象</h3>

<p>Git上のConflictを解消しようと思っていたら、いつの間にかエラーが出るようになってしまっていました。<br/>
筆者の場合は <code>RealmSwift</code> を利用していたのですが、急に <code>Realm</code> に対して <code>linker command failed with exit code 1</code> と表示されるようになっていました。</p>

<h3>解決方法</h3>

<p>筆者の場合、2段階でハマりました。</p>

<ol>
<li><code>CocoaPods</code> が <code>sudoあり/なし</code> 両方でインストールしてしまっていた</li>
<li><code>v1.6.0.rc1</code> にアップデートしてしまっていた</li>
</ol>


<h4>CocoaPodsを重複してインストールしてしまった</h4>

<p>恐らく試行錯誤している間に誤ってインストールしてしまったのだと思います。<br/>
<code>CocoaPods</code> の何かでハマった時に、 <code>CocoaPods</code> のバージョンを旧バージョンに下げるなどの記事が見つかったりしますが、<br/>
知らず知らずのうちに重複してインストールしていると正しくバージョン管理ができません。</p>

<p>よって怪しいなと思ったら、 <code>CocoaPods</code> を全てアンインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">gem</span> <span class="n">uninstall</span> <span class="n">cocoapods</span>
</span><span class='line'><span class="n">$</span> <span class="n">sudo</span> <span class="n">gem</span> <span class="n">uninstall</span> <span class="n">cocoapods</span>
</span></code></pre></td></tr></table></div></figure>


<p>アンインストール後に <code>pod --version</code> を実行してバージョンが非表示であれば、全て削除できています。</p>

<h4>v1.6.0.rc1にアップデートしてしまった</h4>

<p>どうも <code>v1.6.0.rc1</code> が悪さをしているようでしたので、下記手順を実行して解決しました。</p>

<ol>
<li>“pod deintegrate”</li>
<li>“sudo gem install cocoapods-clean”</li>
<li>“pod clean”</li>
<li>Open the project and delete the “Pods” folder that should be red</li>
<li>“pod setup”</li>
<li>“pod install”</li>
</ol>


<p><a href="https://github.com/CocoaPods/CocoaPods/issues/8091">XCConfig files are not properly deintegrated from the user project</a>で同様に苦しんでいる方々がいたので、コメントに書かれた上記の解決策で解消できました。</p>

<h3>まとめ</h3>

<p><code>CocoaPods</code> 系ってたまにドハマリして時間取られることがあるので、気をつけねば&hellip;<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生2回目の転職を振り返る]]></title>
    <link href="http://grandbig.github.io/blog/2019/01/22/mycareer-3/"/>
    <updated>2019-01-22T18:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/01/22/mycareer-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は筆者の人生2回目となる転職活動と現職の振り返りを交えてブログを更新しようと思います。</p>

<p><a href="https://grandbig.github.io/blog/2016/12/11/mycareer-1/">前回</a>の記事から約2年ほど経過しました。<br/>
前回は転職後、半年以上経過してから書き起こしましたが、<br/>
今回はまだ次の会社では働いておらず、ただ今、有給消化期間となっております。</p>

<p>では、なぜこのタイミングで記事を書くのかというと、</p>

<ul>
<li>現在、少々時間があること</li>
<li>自分自身を振り返り、整理をして来月からの再始動に向かいたいこと</li>
</ul>


<p>が主な理由となります。</p>

<p>では早速、振り返っていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>自己紹介</h3>

<p>まずは自己紹介です。</p>

<ul>
<li>社会人8年目</li>
<li>32歳(転職活動時も32歳)</li>
<li>既婚</li>
<li>iOSエンジニア(+雑多に技術に勤しむ)</li>
</ul>


<p>どうぞよろしくお願いします。</p>

<h3>転職理由</h3>

<p>転職理由を話す前に2社目での経験について簡単に触れておきたいと思います。</p>

<h4>2社目での経験</h4>

<p>1社目の大手通信会社から社会人5年目の頃に転職し、2016年3月から働き始めました。<br/>
1社目とは異なり、既にエンジニアとしてのキャリアを数年積んでいる状態でしたので、<br/>
プログラミングを書く仕事から始まり、様々な経験を積むことができました。</p>

<p>結果、約3年ほど勤めたわけなのですが、その中で私が経験したことは以下の通りです。</p>

<h5>技術</h5>

<ul>
<li>フロントエンド: HTML, CSS, JavaScript, React, Redux, jQuery</li>
<li>バックエンド(WEB/AP/DB): Apache, Java, Spring Boot, MariaDB</li>
<li>モバイル: iOS(Swift / Objective-C)</li>
</ul>


<p>上記のように広範囲に技術に携われた理由についても簡単に説明します。</p>

<p>元々、『入社時には得意分野から入ってもらって、慣れたら徐々に担当範囲を広げよう』と当時の上長から言われていました。<br/>
ですが、様々なプロジェクト事情があり、WEBの人手が必要との判断で、WEB管理システムの構築を初めに担当することになりました。</p>

<p>そのプロジェクトでは、10数名でフロントからインフラまで1チームで見るという、<br/>
社内で数少ない体制を取っていたため、必然的に複数領域を担当することになったというのが実情です。</p>

<p>私自身、面接でも『広く技術に関わりたい』と伝えていたため、願ったり叶ったりでもありました。</p>

<p>ただ、今回は、</p>

<ul>
<li>1社目での私自身の広範囲に技術経験があったバックグラウンド</li>
<li>具体的に希望を言えば比較的通りやすい社風</li>
</ul>


<p>の2つがあったため、こういったチャンスを掴めたのかなと思っています。</p>

<h5>役割</h5>

<ul>
<li>開発メンバー</li>
<li>iOSチームのチームリーダ</li>
<li>開発チーム全体のチームリーダ</li>
</ul>


<p>次に、役割として上記のリーダ経験が積めた理由ですが、単純明快で、</p>

<ul>
<li>社員が圧倒的に少ない</li>
<li>筆者より年下で若手(20代)がほとんどの部署</li>
<li>まとめ役を担える人材が不足していた</li>
</ul>


<p>の3つだと思っています。</p>

<p>筆者も面接時に2〜3年後には自分のチームを持ちたいと伝えてはいましたが、<br/>
まさか入社から1年後にチームリーダになるとは思ってもいませんでした。</p>

<p>初めに依頼された時は、</p>

<ul>
<li>まだまだ開発し足りない！しばらく開発に集中したい！</li>
<li>チームリーダになったら、開発ができなくなり、あっという間に技術力が下がる</li>
</ul>


<p>など、思いが巡って不安でした。<br/>
ですが、他に適合する人がいないことも確かで、しぶしぶ担当するしかなかったことを覚えています。</p>

<p>ただ、今振り返ると、やっておいて良かったなと強く思います。<br/>
なぜなら、</p>

<ul>
<li>チーム開発のリードを苦手とするエンジニアは多いことを実感できた</li>
<li>チーム開発リードの経験が積めた</li>
</ul>


<p>からです。<br/>
これによって、自身をより違った側面からアピールすることができるようになりました。</p>

<h4>転職活動を始めたきっかけ</h4>

<p>ここまで説明してきた内容を見ると、『ではなぜ転職するの？』と思われる方もいるかもしれません。<br/>
筆者が転職しようと思った理由は下記2つあります。</p>

<ol>
<li>会社の目指す方向性や社風と自身にズレを感じた</li>
<li>結婚したことで、今後の働き方をよく考えるようになった</li>
</ol>


<p>それぞれ簡単に説明します。</p>

<h5>会社の目指す方向性や社風と自身にズレを感じた</h5>

<p>入社当初はマッチしていると感じていたものの、<br/>
組織の拡大や、それに伴う上層部の方針が変わっていく中で徐々に乖離が大きくなってしまったと感じました。</p>

<h5>結婚したことで、今後の働き方をよく考えるようになった</h5>

<p>今後、家族での生活を考えた時に、会社の福利厚生や働きやすい環境について真剣に考えたいという気持ちが芽生えました。</p>

<p>独身の時は、趣味の時間を如何に確保するかについて考えていましたが、<br/>
今は、加えて、家族としての時間を如何に確保するかも考えるようになりました。</p>

<p>以上より、転職活動を始めることを決心しました。</p>

<h3>転職活動</h3>

<p>続いて具体的な活動の話に入りたいと思います。</p>

<h4>転職活動開始時の気持ち</h4>

<p>今回は2回目の転職活動ということで、過去に経験があったため、そこまで進め方に不安を感じることはありませんでした。<br/>
ただ、現職の仕事を進めながら、転職活動のための時間を確保できるか心配ではありました。</p>

<p>一方で、『自身の価値が市場でどのように評価されるのか / 求められているのか』知りたい気持ちがありました。<br/>
そこでまずは、上記を確かめることからアプローチを始めました。</p>

<h4>市場調査を開始</h4>

<p>具体的には、下記ツールを利用して市場調査を開始しました。</p>

<ul>
<li><a href="https://www.bizreach.jp/">ビズリーチ</a></li>
<li><a href="https://www.wantedly.com/">Wantedly</a></li>
<li><a href="https://jobs.forkwell.com/">forkwell jobs</a></li>
</ul>


<h5>ビズリーチ</h5>

<p>登録しておくと、転職エージェントや企業からスカウトが来るので、<br/>
興味のある内容をピックアップして実際に話をしに行っていました。</p>

<p>この段階では、あくまでも市場調査が目的だったため、初めにその旨を伝えてから会うようにしていました。<br/>
会ってすぐに面接に進まずとも、時間が空いてからコンタクトすることも可能ですし、実際に筆者もそういったアクションを取りました。</p>

<h5>Wantedly</h5>

<p>以前から登録してはいたものの、初めて本格的に利用しました。<br/>
企業から届いたスカウトや自ら『話を聞きに行きたい』アクションを実行して、カジュアル面談に臨んでいました。</p>

<p>スタートアップ企業が多いイメージがあったのですが、大手企業も求人を載せていたり、カジュアル面談の要望を受け付けてくれます。<br/>
こちらから気軽にアクションを起こせるサービスなので、とても助かりました。</p>

<h5>forkwell jobs</h5>

<p>企業からスカウトが届いたり、自ら『話を聞きに行きたい』アクションが実行できるという点では、 <code>Wantedly</code> と同じです。<br/>
相違点は話を聞きに行った後に申請するとAmazonギフト券がもらえたりすることでしょうか。</p>

<p>また、『今週一番会いたい』といったスカウトが届くことがあり、企業の熱心度が見えるのも嬉しい機能でした。</p>

<p>恐らくツールごとに募集に力を入れている企業は分かれると思うので、複数登録しておいて損はないかなと思っています。</p>

<h4>市場調査の結果</h4>

<p>数ヶ月かけて、いろいろな企業の話を聞かせて頂き、どういった人を求めているのかが少しずつ見えてきました。<br/>
大手、ベンチャーに限らず必要としている人材は『中堅層』と筆者の中では結論づけることができました。</p>

<p>つまり、</p>

<ul>
<li>ある程度、エンジニアとしてのキャリアを積んでいること</li>
<li>チーム開発を意識した働き方ができること</li>
</ul>


<p>ということです。</p>

<p>もちろんプロフェッショナルな圧倒的技術力もあるに越したことはないのですが、<br/>
それを事業やプロダクトに活かせる『チーム開発力/リーディング力』を欲しているように感じたのです。</p>

<p>自身が実際に感じたことを念頭に置きながら、本格的に転職活動を開始するべく次の一手に進むことにしました。</p>

<h4>いざ転職活動を開始</h4>

<p>筆者が今回転職活動をするにあたって取った手法は次の3つです。</p>

<ul>
<li>転職エージェント経由で申し込み( <code>doda</code> )</li>
<li>直接企業に申し込み</li>
<li>友人紹介経由で申し込み</li>
</ul>


<p>一応、それぞれ意図を説明したいと思います。</p>

<h5>転職エージェント経由で申し込み</h5>

<p>具体的には、<a href="https://doda.jp/">doda</a>を利用しました。<br/>
約3年前に <code>doda</code> を利用した際に、非常に良いサービスだった記憶があったため、今回も迷わず利用しようと決めていました。</p>

<p>また、転職エージェントの担当者はその道のプロなので、転職市場や各業界、各企業について当然筆者よりも詳しいため、<br/>
いろいろと事前に話を聞きたいという気持ちがありました。</p>

<p>実際に面談にて質問させて頂いた内容を幾つかピックアップしておきます。</p>

<ul>
<li>今の年齢で現在の会社から転職して年収UPは望めるのか</li>
<li>自分自身で思う『自己価値』が市場に響くかどうか</li>
<li>こちらの希望に合う会社とは、どんな会社なのか(果たしてあるのか)</li>
</ul>


<p>因みに、転職エージェントを利用するメリットは下記があります。</p>

<ul>
<li>市場、業界、企業などについて質問できる/相談できる</li>
<li>日程調整や内定後の返事など全てお任せできる</li>
<li><code>LINE</code> で <code>doda</code> の担当者とやり取りできる<br/>
こちらは3年前にはなかったので、とてもやり取りが楽になりました。</li>
</ul>


<h5>直接企業に申し込み</h5>

<p>元々はビズリーチ経由で連絡先を知ったのですが、<br/>
当時のカジュアル面談後に『選考に進みたい場合は連絡ください』とお言葉を頂いていたので、メールして選考に入りました。</p>

<p>直接企業の担当者とやり取りをすると、早く選考が進んだため、スピーディな面がメリットに感じました。</p>

<h5>友人紹介経由で申し込み</h5>

<p>こちらは1社目の同期が働いていることを知っていたため、友人紹介経由での面接に進むことができました。<br/>
何となく、友人紹介の方が『自身と企業相互に合う/合わないが早めに検知できる』のかなと感じていたため、友人がいるようであれば、お願いしようと思っていました。</p>

<p>因みに、友人紹介だからといって合格しやすくなるといったことはないため、そういうメリットは望めません。<br/>
(業界の有名人だったり、企業次第では異なるかもしれません)</p>

<p>改めて友人紹介で感じたメリットを書き記しておくと、</p>

<ul>
<li>友人に会社のことを気軽に聞ける</li>
<li>友人経由でカジュアル面談を申し込むこともできる</li>
<li>採用担当者と直接やりとりができるので、転職活動がスピーディ</li>
</ul>


<p>という点です。</p>

<p>今回、筆者に快く対応してくれた友人には深く感謝しております。</p>

<h4>選考の内容</h4>

<p>今回、幾つか選考を受けさせて頂きました。<br/>
基本的には、</p>

<ul>
<li>コーディングテスト</li>
<li>性格診断テスト</li>
<li>面接2〜3回</li>
</ul>


<p>のセットが多かったように思います。<br/>
SPI的なテストが出題されることもありましたが、コーディングテストをMUSTにしている企業が多かった印象です。</p>

<h4>選考にあたっての準備</h4>

<p><strong>『普段のありのままの自分を出すことが大切』</strong> と言われればその通りなのですが、<br/>
<strong>『普段の自分を正しく伝えるための準備』</strong> はしておいて損はないかと思います。</p>

<p>(なんせテストも面接も1度でもミスをすると先に進めない現実がありますので&hellip;)</p>

<p>実際に筆者が行った準備としては下記になります。</p>

<ul>
<li>簡単に自己紹介できるよう、自分の <strong>オシ</strong> を心得ておく</li>
<li>転職理由/志望理由を自分の言葉で語れるようにしておく</li>
<li>志望企業をネットで調べる(所謂、企業分析)</li>
<li>コーディングテストの勘を養う</li>
</ul>


<p>言葉で書くと何だか大学生の就職活動と同じに見えますね&hellip;<br/>
ただ、侮るなかれ、自分の頭の中を整理しておけるので非常に役に立つと思います。</p>

<p>因みに筆者はコーディングテストの勘を養うために、<a href="https://paiza.jp/career">paiza</a>や<a href="https://www.hackerrank.com/">HackerRank</a>を利用していました。</p>

<h4>面接での服装</h4>

<p>初めての転職活動では勝手がわからないこともあり、常にスーツで臨みましたが、<br/>
今回は完全なるビジネスカジュアル寄りで臨みました。</p>

<p>なので、職場で噂が立ったり、『転職活動してるの？』と聞かれることはありませんでした。</p>

<h4>面接の時間</h4>

<p>今回は午前中に面接が入ることがなかったため、基本的に業務後に面接に行っていました。<br/>
(だいたい19:00〜 or 19:30〜 開始の面接を受けていました。)</p>

<p>仕事で残業せざるを得ないこともあるため、人によっては19時開始は不安かもしれませんが、<br/>
最近はどこの企業も残業に厳しいため、遅めの面接は難しいという側面もあります。<br/>
なので都合をつけるしかないのが実情ですね。</p>

<h4>転職活動の結果</h4>

<p>3社から内定を頂きました。<br/>
そして元々、志望度の高かった会社に入社することを決意しました。</p>

<p>決め手としては、話を聞く限り、私の転職理由とのマッチ度が高いと感じたためです。</p>

<h4>転職する上で役に立った活動</h4>

<p>前回同様、転職する上で役に立ったなと感じた活動を書いておきたいと思います。</p>

<h5>技術ブログ</h5>

<p>2社目に入社後、更新頻度をなかなか上げられなかったりしたのですが、<br/>
それでも『1回以上/月』は何とか死守することができました。</p>

<p>技術ブログは、</p>

<ul>
<li>最低限どの程度のプログラミング力があるのか</li>
<li>どういった方面にアンテナを張っているのか</li>
<li>性格や技術への姿勢(スタイル)がどんな感じか</li>
</ul>


<p>といったことが何となく見えるものだと思っています。<br/>
そういった面で、
今回も対面前から印象をグッと上げることに一役買ったのではないかなと思ったりしています。</p>

<h5>個人アプリの開発</h5>

<p>ここ3年間で言うと、そこまで活発に活動していたわけではないのですが、<br/>
主に下記観点で着手をしていました。</p>

<ul>
<li>業務がしばらくWEB寄りになり、久しぶりにiOSを触る時の肩慣らし</li>
<li>業務を通して学んだiOS知識をGitHubやブログに残すために開発</li>
<li>新たな学習をするための題材として既存アプリを元ネタに改修</li>
</ul>


<p>正直、質の良い、格好の良いアプリを作っているわけではないのですが、<br/>
『個人活動しているのことの姿勢』が評価された気がしました。</p>

<p>面接でも、<br/>
『アーキテクチャとしてMVVMを学びたくて』とか、<br/>
『開発だけでなくリリースやその後の分析まで経験したくて』など意識して話すようにしていたからかもしれません。</p>

<h5>本を読むこと</h5>

<p>前回はあまりやっていなかったのですが、最近は『本を読むこと』が多く、これが案外役に立ちました。</p>

<p>と言うのも、</p>

<ul>
<li>考え方の幅が広がり、面接での受け答えに意志や軸を持てる(ように見える？)</li>
<li>面接の質問で『最近読んで面白かった本は？』と、たまに聞かれることがあり、盛り上がる</li>
</ul>


<p>なんてことがあったからです。</p>

<p>因みに、筆者はiOSに限らず技術書を読みますし、<br/>
エンジニア組織論系やリーダシップ系、キャリアパス系も読んだりしていました。</p>

<h3>転職活動を終えて</h3>

<p>非常に穏やかな心境で悟りを開きそうな勢いです。</p>

<p>例のごとく、多くの方々への感謝の気持ちがどんどん湧いてきます。<br/>
特に、何度も繰り返し会話をさせて頂き、最後には快く送り出して頂いた役職者の方々には感謝しております。</p>

<p>2社目で学んだことを先に簡単に述べましたが、<br/>
本当は数本記事が書けるレベルの学びがありました。<br/>
エンジニアとして一回り大きく成長できたのも、この経験があってこそだと心から思います。</p>

<p>あと少し有給消化期間を終えた後に、再び働き始めますが、これまでの経験を存分に活かしていければと思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。</p>

<p>部分的にもう少し深く語りたいことがあったりするのですが、<br/>
自身の振り返りも兼ねて、転職活動を軸に内容あっさり目に書いてみました。</p>

<p>また機会があればということで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This is a feature to warn you that there is already a delegate の対応 ~ RxSwiftでUITableViewのリロード時にクラッシュする問題にぶつかった ~]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/30/rx-uitableview-crash/"/>
    <updated>2018-12-30T04:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/30/rx-uitableview-crash</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は表題にあるクラッシュ問題についてのメモです。<br/>
単純な話だったけど、しばらくハマってました笑</p>

<p>取り組んでいた内容としてはシンプルで、</p>

<ul>
<li><code>RxSwift</code> を利用していた</li>
<li><code>RxDataSources</code> を利用しようとした</li>
<li><code>UITableView</code> の <code>Cell</code> 削除アクションを <code>Rx</code> っぽく書きたかった</li>
</ul>


<p>というものです。</p>

<p><code>UITableView</code> の初期描画はうまくいくものの、 <code>Cell</code> 削除アクションを実行するとクラッシュしていました。</p>

<p>では早速内容について見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>クラッシュの内容</h3>

<p>どんなクラッシュが発生していたかというと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">feature</span> <span class="n">to</span> <span class="n">warn</span> <span class="n">you</span> <span class="n">that</span> <span class="n">there</span> <span class="n">is</span> <span class="n">already</span> <span class="n">a</span> <span class="n">delegate</span> <span class="p">(</span><span class="n">or</span> <span class="n">data</span> <span class="n">source</span><span class="p">)</span> <span class="n">set</span> <span class="n">somewhere</span> <span class="n">previously</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">action</span> <span class="n">you</span> <span class="n">are</span> <span class="n">trying</span> <span class="n">to</span> <span class="n">perform</span> <span class="n">will</span> <span class="n">clear</span> <span class="n">that</span> <span class="n">delegate</span> <span class="p">(</span><span class="n">data</span> <span class="n">source</span><span class="p">)</span> <span class="n">and</span> <span class="n">that</span> <span class="n">means</span> <span class="n">that</span> <span class="n">some</span> <span class="n">of</span> <span class="n">your</span> <span class="n">features</span>
</span><span class='line'><span class="n">that</span> <span class="n">depend</span> <span class="n">on</span> <span class="n">that</span> <span class="n">delegate</span> <span class="p">(</span><span class="n">data</span> <span class="n">source</span><span class="p">)</span> <span class="n">being</span> <span class="n">set</span> <span class="n">will</span> <span class="n">likely</span> <span class="n">stop</span> <span class="n">working</span><span class="p">.</span><span class="err">\</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>といったものが出ていました。</p>

<p>この内容でググってみると&hellip;</p>

<ul>
<li><a href="https://github.com/ReactiveX/RxSwift/issues/675">Maybe delegate was already set in <code>xib</code> or <code>storyboard</code> and now it&rsquo;s being overwritten in code.</a></li>
<li><a href="https://github.com/RxSwiftCommunity/RxDataSources/issues/185">How to change datasource and rebind to tableview</a></li>
<li><a href="https://github.com/ReactiveX/RxSwift/issues/706">Assertion failure in DelegateProxyType</a></li>
</ul>


<p>といった形でたびたび本家の <code>RxSwift</code> で意見交換されていました。</p>

<p>上記内で言われていることは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書けば解決するよって話だったりしました。<br/>
筆者的には、 <code>xib</code> で <code>delegate</code> や <code>dataSource</code> の設定などしていなかったので、半信半疑ながら上記をコードに記載して試していました。</p>

<p>が解決されず&hellip;</p>

<h3>解決方法</h3>

<p>では、一体どうやって解決したかというと、<br/>
クラッシュの内容とは全く関係のない部分の話でした&hellip;</p>

<p>筆者は <code>MVVM</code> アーキテクチャでプロジェクトを構成しており、<br/>
下記のように <code>ViewModel</code> を定義していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MainViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">sectionModels:</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: PublishRelays</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">requestDeleteRecordStream</span> <span class="o">=</span> <span class="n">PublishRelay</span><span class="o">&lt;</span><span class="n">IndexPath</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorRelays</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dataRelay</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="p">[(</span><span class="s">&quot;test1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test2&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test3&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">dataRelay</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">requestDeleteRecordStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">indexPath</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">sectionModel</span> <span class="o">=</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">items</span> <span class="o">=</span> <span class="n">sectionModel</span><span class="p">.</span><span class="n">items</span>
</span><span class='line'>                <span class="n">items</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="nl">at:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataRelay</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、 <code>View</code> の方では下記のように、 <code>Cell</code> が削除された場合を捕捉するようにしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// View</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MainViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Dependency</span> <span class="o">=</span> <span class="n">MainViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">tableView:</span> <span class="n">UITableView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">dataSource:</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;!</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">viewModel:</span> <span class="n">MainViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="o">=</span> <span class="n">dependency</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="n">available</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">unavailable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view.</span>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">CustomTableViewCell</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forCellReuseIdentifier:</span> <span class="s">&quot;Cell&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dataSource</span> <span class="o">=</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">configureCell:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">tableView</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">,</span> <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="s">&quot;Cell&quot;</span><span class="p">,</span>
</span><span class='line'>                                                         <span class="k">for</span><span class="o">:</span> <span class="n">IndexPath</span><span class="p">(</span><span class="nl">row:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">,</span> <span class="nl">section:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="o">?</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">item</span><span class="mf">.0</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="p">.</span><span class="n">disclosureIndicator</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">canEditRowAtIndexPath:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//////// ↓問題はココ /////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">dataRelay</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">records</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">items</span> <span class="o">=</span> <span class="n">records</span><span class="p">.</span><span class="n">first</span><span class="o">?</span><span class="p">.</span><span class="n">items</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">items</span><span class="p">(</span><span class="nl">dataSource:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataSource</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="c1">//////// ↑問題はココ /////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">itemDeleted</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">indexPath</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">requestDeleteRecordStream</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の <strong>問題はココ</strong> と書かれているところが間違っていました。<br/>
<code>ViewModel</code> 側で既に <code>SectionModel</code> としてデータを作成しているので、<br/>
<code>ViewController</code> 側では単に <code>tableView.rx.items</code> に流せば良かったのです。</p>

<p>それを改めて <code>SectionModel</code> の形に整形し直そうとしてしまっていました。<br/>
そして再度 <code>Observable</code> を生成して <code>tableView.rx.items</code> に流し込んでいました。</p>

<p>この問題の部分を下記のように修正したところクラッシュすることがなくなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">viewModel</span><span class="p">.</span><span class="n">dataRelay</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">items</span><span class="p">(</span><span class="nl">dataSource:</span> <span class="n">dataSource</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>クラッシュ内容にだいぶ惑わされましたが、<br/>
どうしてもわからない時は簡単なサンプルを作って試してみるのが良いなと改めて思いました。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxDataSourcesを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/28/rxdatasources/"/>
    <updated>2018-12-28T18:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/28/rxdatasources</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて今回は <a href="https://github.com/RxSwiftCommunity/RxDataSources">RxDataSources</a> の使い方について見ていきたいと思います。</p>

<p><code>RxDataSources</code> を利用することで、<br/>
<code>Cell</code> の選択/移動/削除などの扱いが書きやすくなるとのことのようです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>今回利用するライブラリをインストール</h3>

<p>まずは、今回の紹介サンプルで利用するライブラリのインストールから始めましょう。<br/>
<code>CocoaPods</code> を使いますので、下記のように <code>Podfile</code> を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="s">&quot;11.0&quot;</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;RxDataSourcesSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxSwift</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxCocoa</span><span class="err">&#39;</span><span class="p">,</span>    <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxDataSources</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">3.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;RxDataSourcesSampleTests&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RealmSwift</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTest</span><span class="err">&#39;</span><span class="p">,</span>     <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;RxDataSourcesSampleUITests&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RealmSwift</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxBlocking</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RxTest</span><span class="err">&#39;</span><span class="p">,</span>     <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">4.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>RxDataSourcesを利用したサンプル</h3>

<p>準備ができたので、実際に <code>ViewController</code> にサンプルを書いてみましょう。</p>

<h4>プロジェクト構成</h4>

<p>因みに、今回のプロジェクト構成は下記のようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">RxDataSourcesSample</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">└──</span> <span class="n">SectionModel</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SectionModelの実装</h4>

<p>Model配下に配置した <code>SectionModel</code> を実装します。<br/>
これは <code>RxDataSources</code> を利用するにあたって根幹をなす <code>Model</code> となるため非常に重要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SectionModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SectionModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">SectionModel:</span> <span class="n">SectionModelType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Item</span> <span class="o">=</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">original:</span> <span class="n">SectionModel</span><span class="p">,</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span> <span class="o">=</span> <span class="n">original</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回のサンプルでは <code>Header</code> は特にセットしないため、 <code>cell</code> 内に表示するデータを持つために <code>items</code> のみ定義します。<br/>
<code>SectionModel</code> は <code>struct</code> (構造体)で定義をし、<code>SectionModelType</code> を継承させます。</p>

<p><code>SectionModelType</code> の中身を覗いてみると非常にシンプルな作りになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">protocol</span> <span class="n">SectionModelType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">associatedtype</span> <span class="n">Item</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">]</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">original:</span> <span class="n">Self</span><span class="p">,</span> <span class="nl">items:</span> <span class="p">[</span><span class="n">Item</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Storyboardの実装</h3>

<p><code>Main.storyboard</code> は下図のように実装します。</p>

<p><img src="http://grandbig.github.io/images/rxdatasources.png" alt="Main.storyboardの実装" /></p>

<h3>ViewControllerの実装</h3>

<p>準備が整ったので <code>ViewController</code> を実装していきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">tableView:</span> <span class="n">UITableView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// dataSourceをRxDataSourcesを利用して定義する</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">dataSource:</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// cellに設定するデータを保持する</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">sectionModels:</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// cellに表示するデータの変更を検知して、dataSourceに知らせる</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">dataRelay</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Lifecycle methods</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Cellに設定するデータを格納</span>
</span><span class='line'>        <span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="p">[(</span><span class="s">&quot;test1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test2&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test3&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// RxDataSourcesを利用してCellを描画</span>
</span><span class='line'>        <span class="n">dataSource</span> <span class="o">=</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">configureCell:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">tableView</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">,</span> <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>                <span class="c1">// 引数名通り、与えられたデータを利用してcellを生成する</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="s">&quot;Cell&quot;</span><span class="p">,</span>
</span><span class='line'>                                                         <span class="k">for</span><span class="o">:</span> <span class="n">IndexPath</span><span class="p">(</span><span class="nl">row:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">,</span> <span class="nl">section:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="o">?</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">item</span><span class="mf">.0</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="p">.</span><span class="n">disclosureIndicator</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">canEditRowAtIndexPath:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>            <span class="c1">// この引数を設定しないと、Cellの削除アクションができない</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// dataRelayの変更をキャッチしてdataSourceにデータを流す</span>
</span><span class='line'>        <span class="n">dataRelay</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">items</span><span class="p">(</span><span class="nl">dataSource:</span> <span class="n">dataSource</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Cellを削除した場合にバインディングされる処理</span>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">itemDeleted</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">indexPath</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">sectionModel</span> <span class="o">=</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">items</span> <span class="o">=</span> <span class="n">sectionModel</span><span class="p">.</span><span class="n">items</span>
</span><span class='line'>                <span class="n">items</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="nl">at:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                              <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>                <span class="c1">// dataRelayにデータを流し込む</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataRelay</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 初期表示用のデータフェッチ</span>
</span><span class='line'>        <span class="n">fetch</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Private methods</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初期表示用のデータフェッチする処理</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">fetch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// sectionModelsを利用して</span>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// dataRelayにデータを流し込む</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataRelay</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに <code>Cell</code> を削除した場合に <code>deleteRow</code> を実行する必要はありません。<br/>
理由は、 <code>RxTableViewSectionedReloadDataSource</code> を利用すると <code>reloadData</code> が実行されるようになっているためです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// RxTableViewSectionedReloadDataSource.swift</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if os(iOS) || os(tvOS)</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="cp">#if !RX_NO_MODULE</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="n">import</span> <span class="n">Differentiator</span>
</span><span class='line'>
</span><span class='line'><span class="n">open</span> <span class="n">class</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="nl">S:</span> <span class="n">SectionModelType</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">TableViewSectionedDataSource</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">RxTableViewDataSourceType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Element</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">open</span> <span class="n">func</span> <span class="n">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nl">tableView:</span> <span class="n">UITableView</span><span class="p">,</span> <span class="nl">observedEvent:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Binder</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">dataSource</span><span class="p">,</span> <span class="n">element</span> <span class="k">in</span>
</span><span class='line'>            <span class="err">#</span><span class="k">if</span> <span class="n">DEBUG</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">_dataSourceBound</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>            <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>            <span class="n">dataSource</span><span class="p">.</span><span class="n">setSections</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>            <span class="n">tableView</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>  <span class="o">--&gt;</span> <span class="n">reloadData</span><span class="err">を実行するようになっている</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">on</span><span class="p">(</span><span class="n">observedEvent</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MVVMで実装してみよう</h3>

<p>おまけとして、 <code>MVVM</code> での実装例も載せておきます。</p>

<h4>プロジェクト構成</h4>

<p>プロジェクト構成は下図の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">RxDataSourcesSample</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">Protocol</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">└──</span> <span class="n">Injectable</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">└──</span> <span class="n">SectionModel</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">ViewModel</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">└──</span> <span class="n">MainViewModel</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">View</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">├──</span> <span class="n">Parts</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomTableViewCell</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="n">CustomTableViewCell</span><span class="p">.</span><span class="n">xib</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">├──</span> <span class="n">MainViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="err">│</span>    <span class="err">└──</span> <span class="n">MainViewController</span><span class="p">.</span><span class="n">xib</span>
</span><span class='line'>  <span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Viewの実装</h4>

<p>今回、 <code>MVVM</code> で実装するに辺り、 <code>storyboard</code> から <code>xib</code> に変更しました。<br/>
下図の通り単純に <code>xib</code> で <code>UITableView</code> を載せているだけです。</p>

<p><img src="http://grandbig.github.io/images/rxdatasources_2.png" alt="xibにUITableViewを載せる" /></p>

<p>また、 <code>xib</code> で <code>UITableViewCell</code> を用意します。</p>

<p><img src="http://grandbig.github.io/images/rxdatasources_3.png" alt="xibでCustomTableViewCellを用意" /></p>

<p><code>MVVM</code> で構成するために、 <code>Injectable</code> を定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Injectable.swift</span>
</span><span class='line'><span class="n">protocol</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">associatedtype</span> <span class="n">Dependency</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Injectable</span> <span class="n">where</span> <span class="n">Dependency</span> <span class="o">==</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">with:</span> <span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>MainViewController.swift</code> の実装です。<br/>
一部の処理を <code>ViewModel</code> に移行しているだけで、ほぼ変更はありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MainViewController.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxDataSources</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Injectableを継承</span>
</span><span class='line'><span class="n">class</span> <span class="nl">MainViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Dependency</span> <span class="o">=</span> <span class="n">MainViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">tableView:</span> <span class="n">UITableView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">dataSource:</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;!</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">viewModel:</span> <span class="n">MainViewModel</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 初期化時にViewModelを設定できるようにする</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="o">=</span> <span class="n">dependency</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="n">available</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">unavailable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view.</span>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="k">register</span><span class="p">(</span><span class="n">CustomTableViewCell</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forCellReuseIdentifier:</span> <span class="s">&quot;Cell&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dataSource</span> <span class="o">=</span> <span class="n">RxTableViewSectionedReloadDataSource</span><span class="o">&lt;</span><span class="n">SectionModel</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">configureCell:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">tableView</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">,</span> <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="s">&quot;Cell&quot;</span><span class="p">,</span>
</span><span class='line'>                                                         <span class="k">for</span><span class="o">:</span> <span class="n">IndexPath</span><span class="p">(</span><span class="nl">row:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">,</span> <span class="nl">section:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="o">?</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">item</span><span class="mf">.0</span>
</span><span class='line'>                <span class="n">cell</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="p">.</span><span class="n">disclosureIndicator</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">canEditRowAtIndexPath:</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">dataRelay</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">items</span><span class="p">(</span><span class="nl">dataSource:</span> <span class="n">dataSource</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">itemDeleted</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">indexPath</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// ViewModelにテーブルビューの行を削除操作を伝える</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">requestDeleteRecordStream</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ViewModelの実装</h4>

<p>さて、 <code>ViewModel</code> の実装です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MainViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Injectableを継承</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MainViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">sectionModels:</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: PublishRelays</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">requestDeleteRecordStream</span> <span class="o">=</span> <span class="n">PublishRelay</span><span class="o">&lt;</span><span class="n">IndexPath</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorRelays</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dataRelay</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="p">[(</span><span class="s">&quot;test1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test2&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;test3&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 画面初期描画時に初期設定のsectionModelsを渡す</span>
</span><span class='line'>        <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">SectionModel</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">dataRelay</span><span class="p">)</span>   <span class="c1">// dataRelayにデータを流し込む</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">requestDeleteRecordStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">indexPath</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">sectionModel</span> <span class="o">=</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">items</span> <span class="o">=</span> <span class="n">sectionModel</span><span class="p">.</span><span class="n">items</span>
</span><span class='line'>                <span class="n">items</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="nl">at:</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span> <span class="o">=</span> <span class="p">[</span><span class="n">SectionModel</span><span class="p">(</span><span class="nl">items:</span> <span class="n">items</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// dataRelayにデータを流し込む</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataRelay</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">strongSelf</span><span class="p">.</span><span class="n">sectionModels</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
書き方さえ慣れてしまえば案外簡単に利用できそうですよね。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アーキテクチャの選定ポエム〜選定って難しい〜]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/22/team-develop/"/>
    <updated>2018-12-22T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/22/team-develop</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは<a href="https://qiita.com/advent-calendar/2018/poem">技術的ポエム Advent Calendar 2018</a>の22日目の記事です。<br/>
今回はここ最近、感じている <strong>『アーキテクチャの選定の難しさ』</strong> について書いていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アーキテクチャ選定について</h3>

<p>新規プロダクトの開発をする時に、当然、アーキテクチャを選定する必要があります。</p>

<p>では、アーキテクチャはどのように選定すべきなのでしょうか？<br/>
筆者が振り返って今感じる、選定時に考えるべきポイントを紹介したいと思います。</p>

<p>個人的に大事だと思うポイントは下記の4つになります。</p>

<p>【ポイント】</p>

<ul>
<li>プロダクトの規模感</li>
<li>単発的なサービスか長期的に育てていくサービスか</li>
<li>チームメンバーのスキルセットの把握とマインドの統一</li>
<li>QCDの優先順位</li>
</ul>


<p>順を追って1つずつ説明していきましょう。</p>

<h3>プロダクトの規模感</h3>

<p>例えば、画面数が3〜4個でロジックが簡易なアプリに <code>Clean Architecture</code> を適用するのが本当に正しいのかという話です。<br/>
とは言え、『 <code>Testability</code> を高めた設計にしたい』という想いや、『新しい設計思想で開発したい』という想いも技術者なら持ち合わせて然るべきです。</p>

<p>なので、筆者個人としては、他ポイントと合わせた上で、結論を出すべきだと思っています。</p>

<h3>単発的なサービスか長期的に育てていくサービスか</h3>

<p>CM用の一時的なサービスであれば、そこまで運用を考えすぎずに、技術者の裁量で決めてしまっても良いように思えます。<br/>
もちろん、CMを打つタイミングでサービスが完成していないといった状況は避けるべきではありますが&hellip;</p>

<p>一方で長期的に育てていくサービスはどうすべきなのでしょうか？</p>

<p>筆者個人としては、下記理由から、現状よりも一段階上のレベルの挑戦をするのが適切だと思っています。</p>

<p>① 現時点でレガシーすぎる技術を使うと、 <strong>今後の採用に響く</strong> 可能性がある<br/>
② <strong>早くサービスを世に出す</strong> ということも事業として大切である<br/>
③ 挑戦が <strong>メンバーやチームを成長させる</strong></p>

<p>①は技術者であれば割と受け入れやすい、わかりやすい理由ではないかと思います。<br/>
②は技術への興味が強すぎると忘れ去られがちなこともありますが、<br/>
これを軽視してしまうと『誰の/何のためにサービスを作っているのか』などのゴールを見失う可能性があると思っています。</p>

<p>とは言え、③の観点は非常に重要だと思っています。<br/>
ただし、既に開発プロセスや利用ツールや、何らかのルールなど多分に新しい挑戦が組み込まれている場合は注意が必要です。<br/>
なぜなら、それらも <strong>異なる側面での挑戦である</strong> ことに他ならないからです。</p>

<p>挑戦は楽しい一方で、それなりに負担でもあるため、一度に多くの挑戦を組み込むと、デスマーチに近づく可能性が高くなることでしょう。</p>

<h3>チームメンバーのスキルセットの把握とマインドの統一</h3>

<p>アーキテクチャを選考するにあたって切っても切り離せないのが、チームメンバーのスキルセットとマインドだと筆者は考えています。<br/>
どういうことかと言うと、</p>

<p>もし、納期の厳しいスピードを最優先とされるプロジェクトにアサインされたとして、<br/>
誰も利用経験のないアーキテクチャを採用するかどうか</p>

<p>ということです。</p>

<p>基本的には、 <strong>チームを先導できるレベルの技術者がいない状況</strong> では、ハードルが高いなと思っています。<br/>
ただし、『利用経験のない』とは必ずしも、業務での利用経験とイコールと捉えなくとも良い気はしています。</p>

<p>なぜなら、これを許容しないと、誰も新しいことに挑戦できない世の中になるからです。<br/>
(世の中から挑戦が一切なくなると、創造性もなくなり&hellip;みたいな話にもなるのかもしれませんね。)</p>

<p>そして開発を始める前に必ずやらなければならないことが『マインドの統一』です。<br/>
事前にこれをしておかないと、技術的な問題にぶつかった際に、チームが崩壊するリスクも備えています。</p>

<p>筆者としては、チームメンバーに方針を納得してもらった上で一緒に開発を進めたいと思っています。<br/>
最低でも <strong>『なぜ / 今回 / このアーキテクチャを採用するのか』</strong> は説明し、納得してもらう必要があるでしょう。<br/>
欲を言えば、チームで意見交換をした上でアーキテクチャを選定したくはありますが、<br/>
チームのスキルセットや外部要因に影響されることでもあるため、次のレベルかなと思ったりします。</p>

<h3>QCDの優先順位</h3>

<p>プロジェクトを進める上で業務上設定される <code>QCD</code> の優先順位が存在するかと思います。<br/>
これはアーキテクチャを選定する上で最も影響のあるポイントと言っても過言ではないかもしれません。</p>

<p>他のポイントを説明する際にも「納期の厳しいスピードを最優先とされる」といった形で引用しましたが、特に技術者が気にするポイントは<code>Delivery</code>(納期)ではないでしょうか。<br/>
基本的に、サービスを世に送り出すことにおいて、<code>Delivery</code>が軽視されることは稀かと思います。<br/>
大抵の場合、<code>Quality</code>(品質)と同等かそれ以上に優先度が設定されることがあります。</p>

<p>また、<code>Quality</code> > <code>Delivery</code> > <code>Cost</code> の順番で優先度を設定したプロジェクトだったとしても、<br/>
途中で <code>Quality</code> を優先するために <code>Delivery</code> を変更することは至難の業である場合が多いと思います。<br/>
(何のための優先順位決めなのかと議論になることもありますが、ここでは論点がずれるため触れないこととします。)</p>

<p>筆者も上記のような経験を何度かしてきました。<br/>
その結果、アーキテクチャを決める上で厳しくシビアに判定しなければいけないポイントだと思うようになりました。</p>

<p>つまり、誤解を恐れずに言えば、<br/>
圧倒的に <code>Delivery</code> が優先される現場においては、他のポイントを考えるまでもなくアーキテクチャが決まると言うことです。</p>

<p>しかしながら、この <code>Delivery</code> の <code>MUST</code> 性はもう少し分解することが可能です。</p>

<p>極端な例で言えば、<br/>
『毎年決まった時期にリリースしているサービス』で『特定の層のほとんどが認知して利用しているサービス』<br/>
と<br/>
『今回初めてリリースするため、リリース後に徐々に広告を増やしてアピールしていくサービス』<br/>
では、<code>Delivery</code> 最優先と設定されたとしても、遅れた場合に生じる企業へのダメージは明らかに異なるでしょう。</p>

<p>よって、 <code>Delivery</code> が優先度高であるとは言っても、 <strong>本当に最上なのか</strong> はきちんと判断すると良いかと思います。</p>

<h3>まとめ</h3>

<p>さて、今回は、筆者がアーキテクチャ選定する時に大事だと思う4つの観点について説明しました。<br/>
文章で書くのは簡単ですが、実践は相当に難しいと思います。<br/>
何が難しいかで言うと、多面的かつ複合的に考える必要がある上に経験に頼る部分も大きくなるからです。</p>

<p>筆者も正直、上記4点から最良のアーキテクチャ選定ができたなと思える経験はなかなかありません。<br/>
失敗の方が圧倒的に多いです。</p>

<p>それでも、アーキテクチャ選定は今後も逃れることのできない、技術者が考えなくてはならない事柄だと思います。<br/>
そして恐らく完璧な答えなどない世界なんだと思います。<br/>
でも、だからこそ、責任のある重要な仕事であり、やりがいのある仕事なのではないでしょうか。</p>

<p>筆者自身も今後の経験で考え方が変わる可能性も十分にありますし、<br/>
この記事が最良だとも思っていませんが、<br/>
自身がまたアーキテクチャ設計に関わる時に思い出したり、誰かの役に少しでも立つのであれば幸いかなと思います。</p>

<p>と言ったところで本日はここまで。<br/>
ポエムでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5年前に初めて個人開発したアプリを再構築している話]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/12/personal-develop-footstepmeter/"/>
    <updated>2018-12-12T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/12/personal-develop-footstepmeter</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今年もやってきましたAdvent Calendarの季節！<br/>
こちらは<a href="https://qiita.com/advent-calendar/2018/private-developmen2">個人開発 #2 Advent Calendar 2018</a>の12日目の記事です。</p>

<p>今年は、5年前に初めて個人開発したアプリを再構築している話を思い出を交えながら書こうと思います。<br/>
とは言え、絶賛再構築中なので、恐らく本記事公開日までに作り終わらないと思うのですが、それも一興ということで大目に見て頂ければと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>5年前になぜ個人開発をしようと思ったのか</h3>

<p>まずは筆者がなぜ個人開発を始めようと思ったのかについて話したいと思います。<br/>
当時の筆者の状況やスキルを思い出してみます。</p>

<h4>状況</h4>

<ul>
<li>社会人3年目</li>
<li>当然、役職も重い責任も何もないぺーぺー</li>
<li>プロジェクトを1〜2個経験(内の1つは大炎上を経験)</li>
</ul>


<h4>スキル</h4>

<ul>
<li><code>HTML5, CSS3, jQuery</code>を利用したWEBフロントエンドの開発</li>
<li><code>iOS, Android</code>アプリの開発</li>
<li><code>Node.js, MongoDB</code>を用いたサーバサイドの開発</li>
</ul>


<h4>状況とスキルを見た振り返り</h4>

<p>一見、スキルを見ると凄そうに見えるかもしれませんが、<br/>
<code>iOS, Android</code>アプリの中身は<code>WebView</code>を利用しており、ネイティブコードは位置情報の取得やプッシュ通知などのごく一部でした。</p>

<p>また、当時、非常に新しかった<code>Node.js</code>や<code>MongoDB</code>も訳が分からず利用しており、<br/>
その知識やスキル不足からプロジェクトを大炎上させてしまいました。</p>

<p>その時に学んだ重要なことは、</p>

<ul>
<li>メモリ消費を考えて、何でもかんでも <code>DB</code> からデータを引っ張ってくるのは辞めよう</li>
<li>CPU消費を考えて、大量データを永遠と<code>for</code>ループ回すのは辞めよう</li>
</ul>


<p>といったエンジニアとしては『当たり前 &amp; これができなかったらごめんなさいで済まされないレベル』の話でした。</p>

<h4>個人開発を始めた理由</h4>

<p>そんな状態の私がなぜ個人開発を始めたのかというと&hellip;</p>

<ol>
<li>技術的な強みを1つ持ちたかった</li>
<li>エンジニアとしての将来が不安で悶々としていた</li>
</ol>


<p>という2つが大きな理由です。</p>

<p>理由2を満たすために、手始めに技術ブログを開設したのですが、<br/>
『どうせなら理由1も満たしたい！』という想いから、<br/>
当時最も興味のあった <code>iOS</code> アプリの開発を勉強しながら始めることにしました。<br/>
※ <code>iOS</code> ネイティブアプリの開発ができるようになるというのが当面の目標でした。<br/>
( <code>WebView</code>ではなく、ネイティブアプリの開発です。 )</p>

<h3>足跡計について</h3>

<p>初めのうちは基本的なXcodeの使い方などを試してブログに書いたりしていたのですが、<br/>
折角なので、1つアプリを完成させて世にリリースしたいという想いが強くなりました。<br/>
そうして完成した個人開発の第一段階アプリが『<a href="https://itunes.apple.com/jp/app/%E8%B6%B3%E8%B7%A1%E8%A8%88/id725412788?mt=8">足跡計</a>』です。</p>

<h4>足跡計の機能</h4>

<p>このアプリには、次のような機能を持たせました。</p>

<ul>
<li>様々な精度で歩行ルートを記録可能</li>
<li>複数の歩行ルートを記録可能</li>
<li>歩行ルート履歴をいつでも閲覧可能</li>
<li>歩行ルート記録をメールで送信可能</li>
<li>不要になった歩行ルート記録は削除可能</li>
</ul>


<p>このアプリを開発しようと思った理由は、<br/>
当時、業務にて位置情報を扱ったアプリ内 <code>WebView</code> のアプリを開発・運用しており、<br/>
位置情報機能は私にとって非常に扱いやすかったためです。</p>

<p>【足跡計のスクリーンショット】<br/>
<img src="http://grandbig.github.io/images/personal_development_footprintmeter_1.png" alt="足跡計のスクリーンショット" /></p>

<h4>今回再構築をしようと思った理由</h4>

<p>さて、ここまでは5年前の個人でのアプリ開発に至るまでの話をしてきました。<br/>
ここからが本題で、今回、筆者は思い切って、足跡計アプリを再構築しようと考えました。</p>

<p>その理由は、</p>

<ol>
<li>iPhoneXの画面にアプリが対応できておらず、格好悪い(上下の黒帯の幅が長い)</li>
<li>ホームアイコンとアプリ画面の色合いを統一させたい</li>
<li><code>MVVM</code> アーキテクチャを用いたアプリ開発を試したい</li>
</ol>


<p>という3つの想いがあったためです。</p>

<p>特に『3』に関しては、<br/>
筆者が業務で昨年から今年の春先にかけて <code>Clean Swift</code> アーキテクチャでのiOSアプリ開発に挑戦し、改めてiOSアプリのアーキテクチャのあり方に悩んだことが元となっています。</p>

<p>具体的に悩んだ内容に関しては後日別途書こうと思いますが、<br/>
上記経緯より、現在最も頻繁に採用されているであろう <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> を用いた <code>MVVM</code> アーキテクチャ設計をきちんと勉強しておきたいと思わずにはいられなかったのです。</p>

<p>では、前段はここまでとして、ここから先は、</p>

<ul>
<li>どのように設計を変更したのか(プロジェクト構成の話)</li>
<li><code>RxSwift</code> を用いた <code>MVVM</code> アーキテクチャで構成されたメインロジックの説明</li>
<li>その上で躓いたこと / ハマったこと</li>
</ul>


<p>を中心に説明し、最後に今後の展望とリリース時期を説明して終了にしたいと思います。</p>

<h3>足跡計の再構築について</h3>

<p>では、再構築について一つずつ説明してきましょう。</p>

<h4>プロジェクト構成の変更</h4>

<p>まずはアーキテクチャの変更によって生じたプロジェクト構成の変更について説明します。<br/>
これまでは <code>MVC</code> アーキテクチャを採用していたため、下記のようなプロジェクト構成になっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 再構築前のMVCアーキテクチャでのプロジェクト構成</span>
</span><span class='line'><span class="n">footStepMeter</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Enum</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">LocationAccuracy</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomAnnotation</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Footprint</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">FootprintManager</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Location</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">UIImage</span><span class="o">+</span><span class="n">Extension</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">SettingViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>一応、フォルダ分けして責務を見やすくしようとした形跡がありますが、<br/>
下記観点が全然ダメだなと今振り返って思います。</p>

<ul>
<li><code>Model</code> の責務がカオスになりかけている

<ul>
<li><code>UIImage+Extension</code> は <code>Model</code> 配下でなくても良いはず</li>
</ul>
</li>
<li><code>ViewController</code> がフォルダ分けされておらず、ただ並んでいる

<ul>
<li>今後、画面が増えてきた時に <code>ViewController</code> も増えるので視認性が悪くなる</li>
</ul>
</li>
</ul>


<p>今回は、 <code>MVVM</code> アーキテクチャを採用し、プロジェクト構成も見直しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">footStepMeter</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Enum</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">AlertActionType</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">LocationAccuracy</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">TabBarItemTag</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomAnnotation</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Footprint</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">RealmManager</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Parts</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomTableViewCell</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="n">PickerView</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Map</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">├──</span> <span class="n">MapViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">│</span>    <span class="err">└──</span> <span class="n">MapViewController</span><span class="p">.</span><span class="n">xib</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Setting</span>
</span><span class='line'><span class="err">│</span>    <span class="p">...</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewModel</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">MapViewModel</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">SettingViewModel</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="p">...</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Protocol</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">Injectable</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Extensions</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">UIImage</span><span class="o">+</span><span class="n">Extension</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">UIViewController</span><span class="o">+</span><span class="n">Rx</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="p">...</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>変更点としては、</p>

<ul>
<li><code>MVVM</code> なので、 <code>View</code> / <code>Model</code> / <code>ViewModel</code> フォルダを作る</li>
<li><code>Extension</code> 系は <code>Extensions</code> フォルダを作ってまとめる</li>
<li>疎結合の肝となる <code>Protocol</code> も専用に <code>Protocol</code> フォルダを作る</li>
<li><code>Storyboard</code> を廃止し、 <code>xib</code> を採用</li>
</ul>


<p>となります。<br/>
設計思想的な面で変更している部分はあるものの、以前に比べれば視認性は上がったと思っています。<br/>
(もう少し改善の余地はあるなと思いつつ&hellip;)</p>

<h4>RxSwiftを用いたMVVMアーキテクチャでの構成</h4>

<p>続いて、 <code>RxSwift</code> を用いた <code>MVVM</code> アーキテクチャで具体的に何をどのように書いているのか紹介したいと思います。<br/>
全ては紹介しきれないため、メイン画面であるマップ画面を元に一部を説明したいと思います。</p>

<h5>マップ画面の機能</h5>

<p>具体的にスクショを交えながら、機能を紹介します。</p>

<p><img src="http://grandbig.github.io/images/personal_development_footprintmeter_2.png" alt="歩行ルートの保存開始機能" /></p>

<p><img src="http://grandbig.github.io/images/personal_development_footprintmeter_3.png" alt="歩行ルートの保存終了機能" /></p>

<p><img src="http://grandbig.github.io/images/personal_development_footprintmeter_4.png" alt="歩行ルートの表示/非表示切替機能" /></p>

<p>さて、ここからはソースコードベースで実装について説明したいと思います。</p>

<h5>View / Model / ViewModelそれぞれの責務</h5>

<p>先程スクショベースでお見せした機能をロジックベースで言語化すると、</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
<li><code>Realm</code> から保存した位置情報を取得する</li>
</ul>


<p>のように言い換えられます。</p>

<p>では、 <code>View</code> / <code>Model</code> / <code>ViewModel</code> それぞれどんな責務を持たせれば良いのでしょうか。<br/>
下記にそれぞれの責務を簡単に書き出してみました。</p>

<ul>
<li><code>Model</code>

<ul>
<li>いわゆるビジネスロジックを担当する</li>
<li>例) API関連、ローカルDBを扱い関連など</li>
</ul>
</li>
<li><code>View</code>

<ul>
<li>ユーザアクションのキャッチ</li>
<li>画面の描画</li>
</ul>
</li>
<li><code>ViewModel</code>

<ul>
<li><code>View</code> と <code>Model</code> を繋ぐ</li>
<li><code>View</code> からの処理依頼を受けて、<code>Model</code>を介して必要な情報を取得し、<code>View</code>に特定の描画司令を出す</li>
</ul>
</li>
</ul>


<p>続いて、具体的に上記を実現する方法について説明します。</p>

<h5>Modelの説明</h5>

<p>まずは <code>Model</code> に関する実装から説明します。<br/>
本アプリの肝となる『計測した位置情報の <code>Realm</code> への保存』を実装するために、<br/>
<code>Realm</code> を管理する <code>RealmManager</code> を定義します。</p>

<p>また、 <code>Realm</code> に保存する形式を先に決める必要があるため、 <code>Footprint</code> という <code>Model</code> を作成します。</p>

<p>以下、 <code>Footprint</code> のソースコードです。<br/>
書式は <code>Realm</code> の使い方そのままなので詳細は省きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Model/Footprint.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 足跡</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Footprint:</span> <span class="n">Object</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ID</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="c1">// 保存した歩行ルートのタイトル</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="c1">// 緯度</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="c1">// 軽度</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="c1">// 位置の精度</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">accuracy:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="c1">// 歩行速度</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">speed:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="c1">// 歩行方向</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">direction:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="c1">// データの生成日時</span>
</span><span class='line'>    <span class="err">@</span><span class="n">objc</span> <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">created:</span> <span class="n">Double</span> <span class="o">=</span> <span class="n">Date</span><span class="p">().</span><span class="n">timeIntervalSince1970</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// プライマリーキーの設定</span>
</span><span class='line'>    <span class="n">override</span> <span class="k">static</span> <span class="n">func</span> <span class="n">primaryKey</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;id&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// インデックスの設定</span>
</span><span class='line'>    <span class="n">override</span> <span class="k">static</span> <span class="n">func</span> <span class="n">indexedProperties</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、 <code>RealmManager</code> のソースコードです。<br/>
まずは、 <code>protocol</code> として <code>RealmManagerClient</code> を定義します。<br/>
実際の <code>RealmManager</code> クラスは <code>RealmManagerClient protocol</code> を継承します。</p>

<p>こうすることで、テストを書く際にモックデータを返却することが容易になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Model/RealmManager.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">RealmManagerClient</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// MARK: - Protocol Properties</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Protocol Methods</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">setSaveTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">createFootprint</span><span class="p">(</span><span class="nl">location:</span> <span class="n">CLLocation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">existsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>RealmManagerClient protocol</code> を継承して各メソッドの実処理を実装すると、下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Model/RealmManager.swift</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">RealmManager:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">RealmManagerClient</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">title</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial Methods</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// タイトルの保存処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter title: 保存したいタイトル</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">setSaveTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - CRUD</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 位置情報のデータの保存処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter location: 保存する位置情報</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">createFootprint</span><span class="p">(</span><span class="nl">location:</span> <span class="n">CLLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">footprint</span> <span class="o">=</span> <span class="n">Footprint</span><span class="p">()</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">savedLastFootprint</span> <span class="o">=</span> <span class="n">fetchAllFootprints</span><span class="p">()</span><span class="o">?</span><span class="p">.</span><span class="n">last</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="p">(</span><span class="n">savedLastFootprint</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="o">?</span> <span class="p">((</span><span class="n">savedLastFootprint</span><span class="o">?</span><span class="p">.</span><span class="kt">id</span><span class="p">)</span><span class="o">!</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">latitude</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">longitude</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">accuracy</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="n">horizontalAccuracy</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="n">speed</span>
</span><span class='line'>            <span class="n">footprint</span><span class="p">.</span><span class="n">direction</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="n">course</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Realmへのオブジェクトの書き込み</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">realm</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">footprint</span><span class="p">,</span> <span class="nl">update:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">let</span> <span class="n">error</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;Error: code - \(error.code), description - \(error.description)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 保存している全位置情報データを取得する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Returns: 保存している全位置情報データ</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">footprints</span> <span class="o">=</span> <span class="n">fetchAllFootprints</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">footprints</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 指定したタイトルで保存されている位置情報データを取得する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter text: タイトル</span>
</span><span class='line'>    <span class="c1">/// - Returns: 指定したタイトルで保存されている位置情報データ</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">footprints</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;title == &#39;\(text)&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">footprints</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">footprints</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 指定したタイトルで保存されている位置情報データがあるか確認する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter text: タイトル</span>
</span><span class='line'>    <span class="c1">/// - Returns: 存在する場合はtrue, 存在しない場合はfalseを返却する</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">existsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">footprints</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;title == &#39;\(text)&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">footprints</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 保存したい全位置情報の数を取得する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Returns: 保存している位置情報の数</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 指定したタイトルで保存されている位置情報の数</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter text: タイトル</span>
</span><span class='line'>    <span class="c1">/// - Returns: 保存している位置情報の数</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">countFootprintsByTitle</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">footprints</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;title == &#39;\(text)&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">footprints</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Private Methods</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 保存している全位置情報データを取得する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Returns: 位置情報データ</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">fetchAllFootprints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Results</span><span class="o">&lt;</span><span class="n">Footprint</span><span class="o">&gt;?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">footprints</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Realm</span><span class="p">().</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">sorted</span><span class="p">(</span><span class="nl">byKeyPath:</span> <span class="s">&quot;id&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">footprints</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="n">_</span> <span class="n">as</span> <span class="n">NSError</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>protocol Injectableを用意することで依存関係の解決</h5>

<p>続いて、<code>ViewModel</code> や <code>View</code> の説明をする前に、<br/>
<code>ViewModel</code> と <code>View</code> の双方を疎結合にするための <code>protocol Injectable</code> を定義します。<br/>
※これは<a href="https://gihyo.jp/magazine/wdpress/archive/2018/vol106">WEB+DB PRESS V.106</a>で特集されていた手法をそのまま採用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">associatedtype</span> <span class="n">Dependency</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Injectable</span> <span class="n">where</span> <span class="n">Dependency</span> <span class="o">==</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">with:</span> <span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際の効力は <code>ViewModel</code> や <code>View</code> のソースを見て頂けると伝わるかと思います。</p>

<h5>ViewModelの説明</h5>

<p>では、<code>ViewModel</code>について次は見ていきます。</p>

<p>先程言語化した</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
<li><code>Realm</code> から保存した位置情報を取得する</li>
</ul>


<p>の5つを実装の内の幾つかを例に説明していきます。</p>

<p>繰り返しになりますが、 <code>ViewModel</code> ですので、以下を守ることを念頭に置くことが大事です。</p>

<ul>
<li><code>ViewModel</code> の責務

<ul>
<li><code>View</code> と <code>Model</code> を繋ぐ</li>
<li><code>View</code> からの処理依頼を受けて、<code>Model</code>を介して必要な情報を取得し、<code>View</code>に特定の描画司令を出す</li>
</ul>
</li>
</ul>


<p>まずは、 <code>ViewModel</code> の最低限の実装から先に説明します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MapViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MapViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">realmManager:</span> <span class="n">RealmManagerClient</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">locationManager</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">realmManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">realmManager</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>説明(1)</strong><br/>
<code>MapViewModel</code> クラスは <code>Injectable</code> プロトコルを継承するクラスとして定義します。</p>

<p><strong>説明(2)</strong><br/>
<code>Injectable</code> は <code>Generic Protocol</code> として定義されているため、
説明(1)の実装により、 <code>Dependency</code> を定義する必要が出てきます。<br/>
ここでは <code>struct</code> として、そのプロパティに</p>

<ul>
<li><code>CLLocationManager</code> 型の <code>locationManager</code></li>
<li><code>RealmManagerClient</code> 型の <code>realmManager</code></li>
</ul>


<p>を定義しています。</p>

<p>ミソなのが、 <code>RealmManager</code> ではなく <code>RealmManagerClient</code> としている点です。<br/>
<code>RealmManagerClient</code> は <code>protocol</code> なので、具体的な処理は書かれていません。<br/>
あくまでもインタフェースの提供のみです。</p>

<p>このため、テストを書く際に、レスポンスをモック化することが容易になるのです。<br/>
※ <code>CLLocationManager</code> はApple提供の純正品なので難しいですが&hellip;</p>

<p><strong>説明(3)</strong><br/>
<code>MapViewModel</code> の初期化メソッドの引数に <code>Dependency</code> 型の <code>dependency</code> を渡しています。<br/>
初期化時の引数として外部から渡せるようにすることで依存性を軽減しています。</p>

<p>説明(2)の実装を活かすために、外部から渡せるようにしたと言いかえることもできますね。</p>

<p>続いて、 <code>View</code> と <code>ViewModel</code> を繋ぐ <code>RxSwift</code> の実装部分を説明してきます。</p>

<p>5つの実装の内の</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
</ul>


<p>は下記の通りに実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MapViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MapViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">realmManager:</span> <span class="n">RealmManagerClient</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Drivers</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">locationManager</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">realmManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">realmManager</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialize stored properties</span>
</span><span class='line'>        <span class="c1">// 位置情報の取得許可の確認</span>
</span><span class='line'>        <span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span><span class="p">({()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">CLAuthorizationStatus</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>                <span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didChangeAuthorizationStatus</span>
</span><span class='line'>                <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">notDetermined</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedAlways:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 位置情報の取得情報の確認</span>
</span><span class='line'>        <span class="n">location</span> <span class="o">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didUpdateLocations</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="p">[])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">last</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">Driver</span><span class="p">.</span><span class="n">just</span><span class="p">)</span> <span class="o">??</span> <span class="n">Driver</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">realmManager</span><span class="p">.</span><span class="n">createFootprint</span><span class="p">(</span><span class="nl">location:</span> <span class="n">$0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">coordinate</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 位置情報の取得許可を要求</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// バックグラウンドでの位置情報取得を許可</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">allowsBackgroundLocationUpdates</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="c1">// バックグラウンドで位置情報取得がわかるように設定</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">showsBackgroundLocationIndicator</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample/Services/GeolocationService.swift">RxSwiftの公式ExampleのGeolocationService</a>と同じ実装です。</p>

<p>詳細は<a href="http://grandbig.github.io/blog/2018/10/06/rx-delegate/">GeolocationSampleから学ぶdelegateのRx対応</a>でも説明しているので、ここでは概略だけにします。</p>

<ul>
<li>位置情報の補足等を <code>Rx</code> でできるように独自に実装する必要があります</li>
<li>これにより <code>didChangeAuthorizationStatus</code> と <code>didUpdateLocations</code> を <code>locationManager.rx.xxx</code> のように <code>Rx</code> 実装方式に則って書けるようになります</li>
<li>それぞれハンドリングした値を <code>authorized</code> と <code>location</code> に渡すことで <code>View</code> で検知できるようにします</li>
</ul>


<p>また、5つの実装の内の</p>

<ul>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
</ul>


<p>は下記の通りに実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MapViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MapViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">dataTitle</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">isUpdatingLocation</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="c1">// MARK: PublishSubjects</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">startUpdatingLocationStream</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">(</span><span class="n">LocationAccuracy</span><span class="p">,</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">stopUpdatingLocationStream</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorRelays</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">errorStream</span> <span class="o">=</span> <span class="n">BehaviorRelay</span><span class="o">&lt;</span><span class="n">String</span><span class="o">?&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Initial method</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="c1">// Data Binding Handling</span>
</span><span class='line'>        <span class="c1">// 説明(6)</span>
</span><span class='line'>        <span class="n">observeStartUpdatingLocation</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">locationManager</span><span class="p">,</span> <span class="nl">realmManager:</span> <span class="n">realmManager</span><span class="p">)</span>
</span><span class='line'>        <span class="n">observeStopUpdatingLocation</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">locationManager</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(5)</span>
</span><span class='line'><span class="c1">// MARK: - Input</span>
</span><span class='line'><span class="n">extension</span> <span class="n">MapViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">startUpdatingLocation:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="p">(</span><span class="n">LocationAccuracy</span><span class="p">,</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">startUpdatingLocationStream</span><span class="p">.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">stopUpdatingLocation:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stopUpdatingLocationStream</span><span class="p">.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Output</span>
</span><span class='line'><span class="n">extension</span> <span class="n">MapViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">error:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">String</span><span class="o">?&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">errorStream</span><span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Data Binding Handling</span>
</span><span class='line'><span class="c1">// 説明(6)</span>
</span><span class='line'><span class="n">extension</span> <span class="n">MapViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// startUpdatingLocationStreamにデータバインディングされてきた場合の処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameters:</span>
</span><span class='line'>    <span class="c1">///   - locationManager: 位置情報管理マネージャ</span>
</span><span class='line'>    <span class="c1">///   - realmManager: Realm管理マネージャ</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">observeStartUpdatingLocation</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="nl">realmManager:</span> <span class="n">RealmManagerClient</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">startUpdatingLocationStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span><span class="p">,</span> <span class="n">let</span> <span class="n">dataTitle</span> <span class="o">=</span> <span class="n">element</span><span class="mf">.1</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">dataTitle</span> <span class="o">=</span> <span class="n">dataTitle</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">locationAccuracy</span> <span class="o">=</span> <span class="n">LocationAccuracy</span><span class="p">.</span><span class="n">toCLLocationAccuracy</span><span class="p">(</span><span class="n">element</span><span class="mf">.0</span><span class="p">)</span>
</span><span class='line'>                <span class="c1">// タイトルの設定</span>
</span><span class='line'>                <span class="n">realmManager</span><span class="p">.</span><span class="n">setSaveTitle</span><span class="p">(</span><span class="n">dataTitle</span><span class="p">)</span>
</span><span class='line'>                <span class="c1">// 同名タイトルの既存データが存在するか確認</span>
</span><span class='line'>                <span class="n">realmManager</span><span class="p">.</span><span class="n">existsByTitle</span><span class="p">(</span><span class="n">dataTitle</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">flatMapLatest</span><span class="p">({</span> <span class="n">isExist</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">?&gt;</span> <span class="k">in</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">isExist</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">alreadySameTitleErrorMessage</span><span class="p">())</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="c1">// 位置情報の取得精度を設定</span>
</span><span class='line'>                        <span class="n">locationManager</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">locationAccuracy</span>
</span><span class='line'>                        <span class="c1">// 位置情報の計測を開始</span>
</span><span class='line'>                        <span class="n">locationManager</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>                        <span class="n">strongSelf</span><span class="p">.</span><span class="n">isUpdatingLocation</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">})</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">unExpectedErrorMessage</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">strongSelf</span><span class="p">.</span><span class="n">errorStream</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// stopUpdatingLocationStreamにデータバインディングされてきた場合の処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter locationManager: 位置情報管理マネージャ</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">observeStopUpdatingLocation</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stopUpdatingLocationStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="c1">// 位置情報の計測を停止</span>
</span><span class='line'>                <span class="n">locationManager</span><span class="p">.</span><span class="n">stopUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">isUpdatingLocation</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>説明(4)</strong><br/>
<code>View</code> からの位置情報の取得開始と停止イベント通知をキャッチした後に、 <code>ViewModel</code> 内の処理に導くために実装している部分になります。<br/>
開発当初に <code>Observable</code> であり <code>Observer</code> でもある <code>PublishSubject</code> を利用する必要があったため、 <code>PublishSubject</code> 型として宣言しています。<br/>
現段階では <code>Observer</code> で十分な気がします。<br/>
(今後の宿題と言うことで&hellip;)</p>

<p><strong>説明(5)</strong><br/>
<code>startUpdatingLocationStream</code> と <code>stopUpdatingLocationStream</code> を <code>PublishSubject</code> として定義したことで、必要となった実装です。<br/>
<code>Observable</code> であり <code>Observer</code> でもある <code>PublishSubject</code> は便利な反面、<code>public</code> なプロパティとしておくと、誤って外側から <code>Observable</code> な機能を利用される可能性があります。</p>

<p>これを防ぐために <code>AnyObserver</code> 型のプロパティを外部に公開し、<code>PublishSubject</code> 型プロパティは <code>private</code> として内部に閉ざしています。</p>

<p>因みに、 <code>Input</code> / <code>Output</code> と分けて書くことで視認性が高まるので、<br/>
<code>error</code> に至っては <code>BehaviorRelay</code> 関連にも関わらず、この書式を取っています。<br/>
※ <code>error</code> は <code>Output</code> 時のみの利用かつ、<code>ObservableType</code> 型の <code>BehaviorRelay</code> なので誤った利用がされる恐れはないため。</p>

<p><strong>説明(6)</strong><br/>
実際に <code>View</code> からの指示を受け取った後に実行している処理になります。<br/>
この中で、必要な情報を <code>Model</code> を介して取得することで <code>MVVM</code> というアーキテクチャが取れているわけです。<br/>
<code>ViewModel</code> の中で、 <code>View</code> の描画に必要な情報を整理して、必要な情報を <code>View</code> に渡しつつ、実行処理を指示しています。</p>

<h5>Viewの説明</h5>

<p><code>ViewModel</code> に続いて <code>View</code> を説明します。<br/>
繰り返しになりますが、 <code>View</code> の責務は、</p>

<ul>
<li><code>View</code>

<ul>
<li>ユーザアクションのキャッチ</li>
<li>画面の描画</li>
</ul>
</li>
</ul>


<p>になります。<br/>
まずは、 <code>View</code> の最低限の実装から説明します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">MapKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">MapViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">Dependency</span> <span class="o">=</span> <span class="n">MapViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">MKMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">tabBar:</span> <span class="n">UITabBar</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">searchButton:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">viewModel:</span> <span class="n">MapViewModel</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial methods</span>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="o">=</span> <span class="n">dependency</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="n">available</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">unavailable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Lifecycle methods</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>説明(1)</strong><br/>
<code>ViewModel</code> と <code>View</code> を疎結合にするために、ここでも <code>Injectable</code> を利用します。<br/>
<code>MapViewController</code> を <code>Injectable</code> プロトコルを継承するクラスとして定義し、<br/>
<code>Dependency</code> を <code>MapViewModel</code> の別名として設定しています。</p>

<p><strong>説明(2)</strong><br/>
<code>ViewModel</code> からの指示を受け取れるように、 <code>MapViewModel</code> を宣言します。</p>

<p><strong>説明(3)</strong><br/>
<code>Injectable</code> プロトコルを継承するため、 <code>Dependency</code> を引数に持つ <code>init</code> メソッドが必要になります。<br/>
メソッド内で <code>viewModel</code> に <code>dependency</code> を与えていますが、<br/>
これは冒頭で説明した通り <code>Dependency</code> を <code>MapViewModel</code> の別名として設定しているため実現可能となります。</p>

<p>最低限の実装の次は「位置情報の計測を停止する」機能を元に、 <code>View</code> → <code>ViewModel</code> の実装を見てみます。</p>

<p>本アプリでは、<code>UITabBar</code>の「STOP」項目をタップすることで位置情報の計測停止処理を進めることができます。<br/>
よって、 <code>View</code> → <code>ViewModel</code> の部分は下記のように&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'> <span class="c1">// 説明(4)</span>
</span><span class='line'> <span class="c1">// Drive to ViewModel</span>
</span><span class='line'> <span class="n">private</span> <span class="n">func</span> <span class="nf">driveToViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tabBar</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didSelectItem</span>
</span><span class='line'>        <span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="nl">onNext:</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">strongSelf</span><span class="p">.</span><span class="n">didSelectTabBarItem</span><span class="p">(</span><span class="nl">tag:</span> <span class="n">item</span><span class="p">.</span><span class="n">tag</span><span class="p">)</span>
</span><span class='line'>            <span class="p">},</span> <span class="nl">onCompleted:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onDisposed:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(5)</span>
</span><span class='line'><span class="c1">/// 各タブバーアイテムタップ時の処理</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// - Parameter tag: タブバーアイテムのタグ</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">didSelectTabBarItem</span><span class="p">(</span><span class="nl">tag:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">itemTag</span> <span class="o">=</span> <span class="n">TabBarItemTag</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">tag</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">itemTag</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">start:</span>
</span><span class='line'>        <span class="n">startUpdatingLocationMode</span><span class="p">()</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">stop:</span>
</span><span class='line'>        <span class="n">stopUpdatingLocationMode</span><span class="p">()</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">footView:</span>
</span><span class='line'>        <span class="n">showOrHideFootprintMode</span><span class="p">()</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">settings:</span>
</span><span class='line'>        <span class="n">showSettingViewMode</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(6)</span>
</span><span class='line'><span class="c1">/// Stopモードに変更された場合に実行される処理</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">stopUpdatingLocationMode</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 確認アラートを表示、タブバーの選択表示をnilにする(全て未選択状態にする)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">confirmTitle</span><span class="p">(),</span>
</span><span class='line'>                                  <span class="nl">message:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">stopUpdatingLocationMessage</span><span class="p">(),</span>
</span><span class='line'>                                  <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">alert</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">promptFor</span><span class="p">(</span><span class="nl">alert:</span> <span class="n">alert</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">subscribe</span><span class="p">({</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>            <span class="c1">// アラートを消す</span>
</span><span class='line'>            <span class="n">alert</span><span class="p">.</span><span class="n">dismiss</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">false</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// アラートに表示されたOK/Cancelボタンのどちらをタップしたか確認</span>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">,</span> <span class="n">let</span> <span class="n">alertActionType</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">alertActionType</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="nl">ok:</span>
</span><span class='line'>                <span class="c1">// OKボタンをタップした場合</span>
</span><span class='line'>                <span class="c1">// タブバーの全アイテムを未選択の状態にする</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">tabBar</span><span class="p">.</span><span class="n">selectedItem</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>                <span class="c1">// ストップボタンをdisabledに変更</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">activateStartButton</span><span class="p">()</span>
</span><span class='line'>                <span class="c1">// 位置情報の取得停止をViewModelにバインディング</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">stopUpdatingLocation</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="nl">cancel:</span>
</span><span class='line'>                <span class="c1">// Cancelボタンをタップした場合</span>
</span><span class='line'>                <span class="c1">// タブバーの選択状態をスタートボタンの選択状態に戻す</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">startTag</span> <span class="o">=</span> <span class="n">TabBarItemTag</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>                <span class="n">strongSelf</span><span class="p">.</span><span class="n">tabBar</span><span class="p">.</span><span class="n">selectedItem</span> <span class="o">=</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">tabBar</span><span class="p">.</span><span class="n">items</span><span class="o">?</span><span class="p">[</span><span class="n">startTag</span><span class="p">.</span><span class="n">rawValue</span><span class="p">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>説明(4)</strong><br/>
<code>RxCocoa</code> 内に <code>UITabBar+Rx.swift</code> があり、その中で <code>Rx</code> 的に扱えるように <code>didSelectItem</code> が定義されています。<br/>
ここでは、それを用いて、 <code>UITabBar</code> のタブ項目をタップしたら、 <code>didSelectTabBarItem</code> メソッドを呼び出すように処理を書いています。</p>

<p><strong>説明(5)</strong><br/>
ここは1つ1つの処理が長くなり過ぎないように、単にメソッド分けしているだけです。<br/>
<code>tag</code> の <code>0</code> 〜 <code>3</code> で判別して処理分けしているのですが、<br/>
直で数字で <code>switch</code> 文を利用したくないので <code>TabBarItemTag</code> を定義しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// TabBarItemTag.swift</span>
</span><span class='line'><span class="k">enum</span> <span class="nl">TabBarItemTag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">stop</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">footView</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">settings</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>単にこれだけですが、何をタップした時にどんな処理をするのかが、こちらの方がひと目でわかりますよね。</p>

<p><strong>説明(6)</strong><br/>
ここで具体的に「STOP」をタップされた場合の処理を書いています。<br/>
重要なのは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 位置情報の取得停止をViewModelにバインディング</span>
</span><span class='line'><span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">stopUpdatingLocation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>の部分です。<br/>
「位置情報の計測を停止しますか？」という質問に「OK」と答えた際に実行される処理で、<br/>
<code>View</code> から <code>ViewModel</code> に指示が出ていることを伝えています。<br/>
(<code>Void</code>型のデータを <code>viewModel.stopUpdatingLocation</code> にバインディングしています。)</p>

<p>このような形で <code>View</code> と <code>ViewModel</code> は双方向データバインディングな関係を構築しています。</p>

<h4>今後の展望とリリース時期について</h4>

<p>ざっくりと <code>MVVM</code> で実装したソースコードを説明してきましたが、<br/>
冒頭でも述べた通り、まだアプリは完成しておりません&hellip;</p>

<p>そこで今後の展望ですが、下記2点となります。</p>

<ul>
<li><code>RxSwift</code> らしい書き方に修正する

<ul>
<li>学習しながら実装していた経緯もあり、無用に <code>PublishSubject</code> や <code>BehaviorRelay</code> を利用している箇所があります。</li>
<li>上記を <code>Driver</code> に置き換えることで視認性の向上に繋がると考えています。</li>
</ul>
</li>
<li>テストの拡充

<ul>
<li>正直、まだ十分にテストが書けていません&hellip;</li>
<li>折角、疎結合を意識しながら構築しているのでテストは書き切りたいと思っています。</li>
</ul>
</li>
</ul>


<p>それらを満たした上で、リリース時期は1月末を見込んでいます。<br/>
極力、早期なリリースを目指していきたいと思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回は5年前の個人開発アプリの再構築について紹介させて頂きました。</p>

<p>個人開発すると、業務で学んだ技術の復習になることもあるでしょうし、<br/>
新たな技術の学びにも繋がるかと思います。</p>

<p>筆者もめげずにこれからも新しい技術を学び続け、個人開発した結果をアウトプットしていきたいなと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKitのフォーマット崩れに困ったらSwimatを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/11/25/swimat/"/>
    <updated>2018-11-25T01:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/11/25/swimat</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>基本的に、Xcode上でフォーマットをかける場合は<a href="https://github.com/realm/SwiftLint">SwiftLint</a>を利用することがほとんどかと思うのですが、<br/>
<a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>の書式のようにSwiftLintでは解決できないフォーマットも一部あったため、<br/>
筆者はお試しで<a href="https://github.com/Jintin/Swimat">Swimat</a>を使ってみていました。</p>

<p>必要な時だけ利用するという使い方でも十分使いやすかったため、今日はSwimatについて紹介したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>インストール＆初期設定方法</h3>

<p>インストール方法は<a href="https://github.com/Jintin/Swimat/blob/master/README.md">README.md</a>を読めば特に詰まることなく進めることができると思います。<br/>
一応、参考までに、手順を書いておきます。</p>

<p>① <code>Homebrew</code> でインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">brew</span> <span class="n">cask</span> <span class="n">install</span> <span class="n">swimat</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストールが完了すると、</p>

<p><img src="http://grandbig.github.io/images/swimat_1.png" alt="Homebrewでswimatをインストール" /></p>

<p>のようにターミナルにログが出ると思います。</p>

<p>② システム環境設定で <code>Xcode Source Editor</code> の拡張機能として <code>Swimat</code> を設定する</p>

<p>システム環境設定を開いて、 <strong>拡張機能</strong> を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/swimat_2.png" alt="システム環境設定で拡張機能を選択する" /></p>

<p><code>Xcode Source Editor</code> として <code>Swimat</code> を設定します。</p>

<p><img src="http://grandbig.github.io/images/swimat_3.png" alt="Xcode Source EditorとしてSwimatを設定する" /></p>

<p>以上で準備完了です。<br/>
では、実際にXcode上で <code>Swimat</code> を利用してみましょう。</p>

<h3>Swimatを利用する</h3>

<p>冒頭で <code>PromiseKit</code> の話を出しましたので、ここでも <code>PromiseKit</code> を例に紹介します。</p>

<p><code>PromiseKit</code> を利用して以下のようなソースコードを書いたとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ここでは正しくフォーマットされた状態で書いています。</span>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">worker</span><span class="p">.</span><span class="n">fetchHospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">type:</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="nl">places:</span> <span class="n">results</span><span class="p">))</span>
</span><span class='line'>    <span class="n">strongSelf</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearch</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">type:</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>    <span class="n">strongSelf</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearch</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを普通にXcode上で書くと次のようなネストの状態になってしまいます。</p>

<p><img src="http://grandbig.github.io/images/swimat_4.png" alt="Swimatでフォーマットをかける前の状態" /></p>

<p>これに <code>Swimat</code> でフォーマットをかけます。<br/>
フォーマットをかけたい行を選択してから、 <code>Editor</code> > <code>Swimat</code> > <code>Format</code> を選択します。</p>

<p><img src="http://grandbig.github.io/images/swimat_5.png" alt="Swimatでフォーマットをかける" /></p>

<p>その結果、</p>

<p><img src="http://grandbig.github.io/images/swimat_6.png" alt="Swimatでフォーマットをかけた後の状態" /></p>

<p>のようにネストが正しく修正されます。</p>

<h3>まとめ</h3>

<p>如何でしたでしょうか？<br/>
もう少しで <code>GitHub</code> 上のスター数も1,000突破しそうな勢いですし、知っておいて損はないかと思います。<br/>
<code>PromiseKit</code> だけでなく有用な場面も当然あると思いますし、気になった方はぜひ使ってみてください。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！(4) ~ 成功処理と失敗処理の書き方 ~]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/20/rxswift-4/"/>
    <updated>2018-10-20T13:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/20/rxswift-4</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は <code>RxSwift</code> で、『ある条件のときのみ <code>Observer</code> に伝える』方法について見ていきたいと思います。<br/>
これは例えば、</p>

<ul>
<li>処理が成功した場合のみ、何か次のアクションを実行させる</li>
<li>処理の成功/失敗で次のアクション内容を変更する</li>
</ul>


<p>場合に必要な書き方です。<br/>
では具体的に見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>サンプルを元に書き方を学ぼう</h3>

<p>具体的なサンプルを見ながら書き方を学んでいきたいと思います。<br/>
今回のサンプルのアーキテクチャは <code>MVVM</code> を採用します。</p>

<p>各役割は</p>

<ul>
<li><code>Model</code> : ビジネスロジック</li>
<li><code>View</code> : ユーザ操作のキャッチと実描画処理</li>
<li><code>ViewModel</code> : プレゼンテーションロジック</li>
</ul>


<p>となります。<br/>
早速、サンプルを見ていきましょう。</p>

<h4>検索ボタンをタップした結果を表現する</h4>

<p>サンプルを例に考えます。</p>

<h5>サンプルの前提</h5>

<ul>
<li>検索ボタンをタップすると、レストラン検索APIを叩く</li>
<li>レストラン検索APIの取得が成功した場合、マップにレストランの場所を示すマーカを配置する</li>
<li>レストラン検索APIの取得が失敗した場合、エラーメッセージを表示する</li>
</ul>


<h5>Viewにユーザ操作のキャッチ部分を書く</h5>

<p>まずは、 <code>ViewController.swift</code> に「ユーザ操作のキャッチ」部分を書きます。<br/>
※必要のない処理は省略します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">searchButton:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">viewModel:</span> <span class="n">ViewModel</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">bind</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザの検索ボタンのタップ操作をキャッチ</span>
</span><span class='line'>      <span class="n">searchButton</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">searchButtonDidTap</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ViewModelにViewからのインプットをハンドリング&amp;レストラン検索APIを叩く</h5>

<p>続いて、上記で書いた <code>viewModel.searchButtonDidTap</code> を <code>ViewModel</code> に定義します。<br/>
<code>View</code> からユーザのタップ操作が伝えられた時に、レストラン検索APIを叩く処理も書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">ViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">apiClient:</span> <span class="n">GooglePlacesAPIClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">locationManager:</span> <span class="n">LocationManagerClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: PublishSubjects</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">searchButtonDidTapStream</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorSubjects</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">placesStream</span> <span class="o">=</span> <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="n">defaultPlaces</span><span class="p">)</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">errorStream</span> <span class="o">=</span> <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="n">String</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">apiClient</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">apiClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">locationManager</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">coordinate</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 検索ボタンタップ時に、レストラン検索APIを叩く</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">state</span> <span class="o">=</span> <span class="n">searchButtonDidTapStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Input</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">searchButtonDidTap:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">searchButtonDidTapStream</span><span class="p">.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Output</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">places:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">placesStream</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">error:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">errorStream</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、 <code>View</code> からのインプットとして <code>searchButtonDidTap</code> プロパティを用意します。<br/>
インプットがあった場合に、 <code>searchButtonDidTapStream.asObserver()</code> することで、呼び出しを伝搬する仕組みになっています。<br/>
その中で <code>apiClient.fetchRestaurants(coordinate: coordinate)</code> を叩いています。</p>

<h5>ViewModelにレストラン検索APIの取得成功/失敗の処理を書く：パターン１</h5>

<p>この <code>apiClient.fetchRestaurants(coordinate: coordinate)</code> の結果次第で <code>View</code> に表示させる処理を変えたいと思います。<br/>
<code>GooglePlacesAPIClient</code> クラスの <code>fetchRestaurants</code> の戻り値の定義は以下とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の <code>Result</code> と <code>Places</code> の定義は以下とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Result.swift</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">success</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">failure</span><span class="p">(</span><span class="nl">error:</span> <span class="n">Error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Places.swift</span>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Places:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">results:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">status:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Place</code> の定義の紹介は省略します。</p>

<p>準備ができたので、レストラン検索APIの取得成功/失敗の処理を見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="n">private</span> <span class="k">static</span> <span class="n">let</span> <span class="n">defaultPlaces</span> <span class="o">=</span> <span class="n">Places</span><span class="p">(</span><span class="nl">results:</span> <span class="p">[],</span> <span class="nl">status:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">ok</span><span class="p">(),</span> <span class="nl">htmlAttributions:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 検索ボタンタップ時</span>
</span><span class='line'><span class="n">let</span> <span class="n">state</span> <span class="o">=</span> <span class="n">searchButtonDidTapStream</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 処理が成功した場合</span>
</span><span class='line'><span class="n">state</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">result</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">.</span><span class="n">defaultPlaces</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">placesStream</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 処理が失敗した場合</span>
</span><span class='line'><span class="n">state</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">result</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">String</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">errorStream</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、処理が成功した場合と失敗した場合の処理を書いています。<br/>
処理が成功した場合はアウトプットである <code>placesStream</code> を経由して <code>View</code> に描画指示を出しています。<br/>
処理が失敗した場合はアウトプットである <code>errorStream</code> を経由して <code>View</code> に描画指示を出しています。</p>

<h5>Viewに描画処理を書く</h5>

<p><code>ViewModel</code> から指示の渡った後に <code>View</code> で実際に描画する処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">places</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">places</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">results</span> <span class="o">=</span> <span class="n">places</span><span class="p">.</span><span class="n">results</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">results</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">strongSelf</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>              <span class="n">results</span><span class="p">.</span><span class="n">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>                  <span class="c1">// マップにマーカを配置します</span>
</span><span class='line'>                  <span class="n">strongSelf</span><span class="p">.</span><span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">place</span><span class="p">)</span>
</span><span class='line'>              <span class="p">})</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">error</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">message</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">message</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="c1">// エラーメッセージをアラートに表示します</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ViewModelにレストラン検索APIの取得成功/失敗の処理を書く：パターン２</h5>

<p>パターン１で手法を一つ書きましたが、筆者的には</p>

<ul>
<li><code>View</code> に条件分岐などのロジックが必要になってしまう</li>
<li><code>ViewModel</code> で <code>bind</code> 先のオブジェクトの型は1つなので無駄な処理を書かざるを得ない

<ul>
<li>処理成功の場合の <code>return Observable.just(ViewModel.defaultPlaces)</code></li>
<li>処理失敗の場合の <code>return Observable.just(String())</code></li>
</ul>
</li>
</ul>


<p>というところが微妙だと感じています。</p>

<p>上記を踏まえて、もう１つ別の方法を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="c1">// 検索ボタンタップ時</span>
</span><span class='line'><span class="n">searchButtonDidTapStream</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">element</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">placesStream</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">errorStream</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これであれば、 <code>View</code> の方のロジックも下記のように多少減らすことができ、スッキリします。<br/>
( あっても困らない条件分岐ではありますけどね&hellip; )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">places</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">places</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">results</span> <span class="o">=</span> <span class="n">places</span><span class="p">.</span><span class="n">results</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>          <span class="n">results</span><span class="p">.</span><span class="n">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>              <span class="c1">// マップにマーカを配置します</span>
</span><span class='line'>              <span class="n">strongSelf</span><span class="p">.</span><span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">place</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">error</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">message</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="c1">// エラーメッセージをアラートに表示します</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
筆者的には、まだまだ全然 <code>RxSwift</code> の修行が足りないので、もっと良い書き方を学んでいきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムDelegateのRx対応]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/14/popuppickerview-rx/"/>
    <updated>2018-10-14T22:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/14/popuppickerview-rx</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>先日、<a href="https://grandbig.github.io/blog/2018/10/06/rx-delegate/">GeolocationSampleから学ぶdelegateのRx対応</a>を紹介しました。<br/>
今回は<a href="https://grandbig.github.io/blog/2018/10/13/popuppickerview/">下からニュッと出るPickerを作ろう！</a>で作成した <code>PickerView</code> に実装されている <code>Delegate</code> を <code>Rx</code> 対応させたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>PickerViewクラスの確認</h3>

<p>まずは、元となる <code>PickerView</code> クラスを提示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// ピッカービュー</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">toolBar:</span> <span class="n">UIToolbar</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">picker:</span> <span class="n">UIPickerView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Static Properties</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenWidth</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenHeight</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="nl">defaultPickerHeight:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">260.0</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="mf">0.2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">PickerViewDelegate</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">selectItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">selectedRowIndex:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial Methods</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">screenWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">defaultPickerHeight</span><span class="p">),</span>
</span><span class='line'>                  <span class="nl">selectItems:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">safeAreaTopInsets</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">keyWindow</span><span class="o">?</span><span class="p">.</span><span class="n">safeAreaInsets</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">safeAreaTopInsets</span> <span class="o">&gt;</span> <span class="n">CGFloat</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// iPhoneX , XS, XS MAX, XRの場合はUIPickerViewの高さを調整する</span>
</span><span class='line'>            <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mf">100.0</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectItems</span> <span class="o">=</span> <span class="n">selectItems</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">nib</span><span class="p">.</span><span class="n">pickerView</span><span class="p">.</span><span class="n">firstView</span><span class="p">(</span><span class="nl">owner:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">showsSelectionIndicator</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Picker Move Function</span>
</span><span class='line'>    <span class="c1">// PickerViewを表示する</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">showPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewYPosition</span> <span class="o">=</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span> <span class="o">-</span> <span class="n">pickerViewHeight</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">pickerViewYPosition</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// PickerViewを非表示にする</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">hiddenPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">cancelSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">doneSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">selectedRowIndex</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">selectedRowIndex</span><span class="p">])</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRowIndex</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDataSource</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">numberOfComponents</span><span class="p">(</span><span class="k">in</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">numberOfRowsInComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - PickerViewDelegate</span>
</span><span class='line'><span class="err">@</span><span class="n">objc</span>
</span><span class='line'><span class="n">public</span> <span class="n">protocol</span> <span class="nl">PickerViewDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では早速 <code>Rx</code> 対応させていきましょう。</p>

<h3>DelegateProxyとDelegateProxyTypeへの対応</h3>

<p>基本的には、 <code>CLLocationManagerDelegate</code> と同じです。<br/>
<code>DelegateProxy</code> と <code>DelegateProxyType</code> を継承したクラスを実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">PickerViewDelegate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">RxPickerViewDelegateProxy:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">PickerView</span><span class="p">,</span> <span class="n">PickerViewDelegate</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DelegateProxyType</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="nl">pickerView:</span> <span class="n">PickerView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">parentObject:</span> <span class="n">pickerView</span><span class="p">,</span> <span class="nl">delegateProxy:</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">(</span><span class="nl">pickerView:</span> <span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">selectedItemSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">closePickerViewSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">((</span><span class="n">index</span><span class="p">,</span> <span class="n">title</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(5)</span>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>細かく見ていきましょう。</p>

<h4>説明(1)</h4>

<p><code>currentDelegate</code> および <code>setCurrentDelegate</code> に対応する代わりに、 <code>HasDelegate</code> を継承させましょう。</p>

<h4>説明(2)</h4>

<p>自身で定義した <code>DelegateProxy</code> の継承クラスを登録するために、 <code>registerKnownImplementations</code> 内で <code>DelegateProxySubclass.register()</code> を実行します。</p>

<h4>説明(3)</h4>

<p><code>delegate</code> メソッドが呼び出されて処理が実行されたことを <code>Subscriber</code> に伝えるために、 <code>PublishSubject</code> 型のプロパティを用意します。</p>

<h4>説明(4)</h4>

<p><code>PickerViewDelegate</code> の <code>selectedItem(index:title:)</code> と <code>closePickerView()</code> メソッドは必須メソッドです。<br/>
<code>RxPickerViewDelegateProxy</code> はもちろん <code>PickerViewDelegate</code> も継承しますので、上記2つのメソッドを定義する必要があります。</p>

<p>これが呼び出されたタイミングで <code>Subscriber</code> に伝えるために、 <code>PublishSubject.onNext(element:)</code> を実行します。</p>

<h4>説明(5)</h4>

<p><code>deinit</code> が呼ばれるタイミングで、初期化したオブジェクトが破棄されるので、<br/>
<code>PublishSubject</code> からイベント送信完了を知らせるように実装しましょう。</p>

<h3>ReactiveへのPickerViewの適応</h3>

<p>これも <code>CLLocationManager</code> と適応方法は同じです。<br/>
まずは、全体像から&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// PickerView+Rx.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">PickerView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">PickerView</span><span class="p">,</span> <span class="n">PickerViewDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">selectedItem:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">closePickerView:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明します。</p>

<h4>説明(1)</h4>

<p><code>delegate</code> を <code>DelegateProxy</code> 型として定義します。<br/>
<code>DelegateProxy</code> の取得は <code>DelegateProxyType</code> プロトコルの <code>proxy</code> メソッドを利用します。</p>

<h4>説明(2)</h4>

<p>各 <code>delegate</code> メソッドが実行されたことを補足(監視)するために <code>Observable</code> 型の <code>selectedItem</code> と <code>closePickerView</code> を用意します。</p>

<h3>利用方法</h3>

<p>では、早速利用してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pickerView</span><span class="o">?</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">selectedItem</span>
</span><span class='line'>      <span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">subscribe</span><span class="p">({</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// Subscriberとして補足した情報を取得</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span><span class="o">?</span><span class="mf">.0</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">title</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span><span class="o">?</span><span class="mf">.1</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
</span><span class='line'>              <span class="c1">// ViewModelにsampleActionが定義されているとします</span>
</span><span class='line'>              <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">sampleAction</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>              <span class="p">})</span>
</span><span class='line'>              <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のような形で <code>ViewController</code> にて <code>Subscriber</code> としてアクションを補足し、 <code>ViewModel</code> に伝えることができるでしょう。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
1つ1つの意味を理解することはもちろん大切ですが、<br/>
何だか型にはまって書き方を覚えれば、自身で <code>Rx</code> 対応が簡単にできる気がしてきますね。</p>

<p><code>Rx</code> の癖が強いが故に、慣れれば利用しやすいということなのでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下からニュッと出るPickerを作ろう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/13/popuppickerview/"/>
    <updated>2018-10-13T12:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/13/popuppickerview</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日は様々記事で既に書かれている議題をあえて使おうと思います。<br/>
というのもほんのちょっとしたミスで非常にハマってしまった備忘録を残すためです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>作成手順</h3>

<p>① <code>New File...</code> > <code>User Interface</code> > <code>View</code> を選択し、 <code>xib</code> ファイルを作成しましょう</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_1.png" alt="xibファイルの作成" /></p>

<p>② <code>xib</code> 上で <code>UIPickerView</code> と <code>UIToolBar</code> を追加しましょう</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_2.png" alt="UIPickerViewとUIToolBarの追加" /></p>

<p>③ <code>xib</code> ファイルに対応する <code>swift</code> ファイルを作成しましょう<br/>
<code>New File...</code> > <code>Source</code> > <code>Swift File</code> を選択します。</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_3.png" alt="swiftファイルの作成" /></p>

<p>このタイミングで最低限、以下を定義しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>④ <code>xib</code> ファイルと <code>swift</code> ファイルの対応付け</p>

<p>下図のように、 <code>Placeholders</code> > <code>File's Owner</code> を選択して、<br/>
右メニューの <code>Show the Identity inspector</code> から <code>Custom Class</code> を設定します。</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_4.png" alt="xibファイルとswiftファイルの対応付け" /></p>

<p>⑤ <code>swift</code> ファイルに具体的な実装を書きましょう</p>

<p>始めに結論を書いてしますと以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// ピッカービュー</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">toolBar:</span> <span class="n">UIToolbar</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">picker:</span> <span class="n">UIPickerView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Static Properties</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenWidth</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenHeight</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="nl">defaultPickerHeight:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">260.0</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="mf">0.2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">PickerViewDelegate</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">selectItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">selectedRow:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial Methods</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">screenWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">defaultPickerHeight</span><span class="p">),</span>
</span><span class='line'>                  <span class="nl">selectItems:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>        <span class="c1">// 説明(1)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">safeAreaTopInsets</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">keyWindow</span><span class="o">?</span><span class="p">.</span><span class="n">safeAreaInsets</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">safeAreaTopInsets</span> <span class="o">&gt;</span> <span class="n">CGFloat</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// iPhoneX , XS, XS MAX, XRの場合はUIPickerViewの高さを調整する</span>
</span><span class='line'>            <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mf">100.0</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectItems</span> <span class="o">=</span> <span class="n">selectItems</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">nib</span><span class="p">.</span><span class="n">pickerView</span><span class="p">.</span><span class="n">firstView</span><span class="p">(</span><span class="nl">owner:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">showsSelectionIndicator</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="c1">// MARK: - Picker Move Function</span>
</span><span class='line'>    <span class="c1">// PickerViewを表示する</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">showPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewYPosition</span> <span class="o">=</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span> <span class="o">-</span> <span class="n">pickerViewHeight</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">pickerViewYPosition</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// PickerViewを非表示にする</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">hiddenPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">cancelSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">doneSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">selectedRow</span><span class="p">)</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDataSource</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">numberOfComponents</span><span class="p">(</span><span class="k">in</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">numberOfRowsInComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(3)</span>
</span><span class='line'><span class="c1">/// MARK: - PickerViewDelegate</span>
</span><span class='line'><span class="n">public</span> <span class="n">protocol</span> <span class="nl">PickerViewDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一部詳細を説明します。</p>

<h4>説明(1)</h4>

<p>昨年から <code>iPhoneX</code> が発売されましたので、 <code>UIPickerView</code> の高さを調整する必要があります。<br/>
今のところ、 <code>safeAreaInsets.top</code> が存在するのは、<br/>
<code>iPhoneX / XS / XS MAX / XR</code> といったホームボタンのない全面ディスプレイのみですので、<br/>
<code>safeAreaInsets.top &gt; CGFloat(0.0)</code> で判定できるでしょう。</p>

<h4>説明(2)</h4>

<p>下からニュッと出たり、下にニュッと引っ込んだりする動きは単に <code>UIView</code> の位置を <code>animate</code> メソッドで動かしているだけです。</p>

<h4>説明(3)</h4>

<p><code>UIToolBar</code> 上のボタンクリックで <code>UIPickerView</code> の挙動を操作したい場合があるでしょう。<br/>
そこで独自の <code>Delegate Methods</code> を用意しています。<br/>
この呼出は <code>IBAction</code> でハンドリングしている <code>cancelSelection</code> と <code>doneSelection</code> に紐づけています。</p>

<h3>筆者が躓いた点について備忘録</h3>

<p>筆者が本実装をしている際に、どうしても <code>UIPickerViewDelegate</code> のメソッドが呼び出されないという現象がありました。<br/>
原因は超絶基本的なことだったのですが、備忘録として残そうと思います。</p>

<p>まずは、誤っているソースコードから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、正しいソースコードは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記2つの違いが何かと言うと、<br/>
メソッドを <code>private</code> で定義しているか <code>public</code> で定義しているかだけです。<br/>
<code>private</code> にしていたためスコープ外となってしまい呼び出せていなかったのでした&hellip;<br/>
何という凡ミス&hellip;これで3時間ほど持っていかれました笑</p>

<h3>まとめ</h3>

<p>さて今回は筆者の備忘録的な記事になりましたが、<br/>
<code>UIPickerView</code> は相変わらずニュッと下から出る挙動はデフォルトで提供してくれていないため、参考になることでしょう。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeolocationSampleから学ぶdelegateのRx対応]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/06/rx-delegate/"/>
    <updated>2018-10-06T11:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/06/rx-delegate</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><code>RxSwift</code> を利用して <code>MVVM</code> アーキテクチャでアプリを開発することがあるでしょう。<br/>
その際に、ボタンタップやネットワーク通信であれば、何もやらずとも <code>RxSwift</code> が対応してくれていたり、 <code>RxSwift</code> に対応しているライブラリがあったりします。</p>

<p>しかし、デフォルトでは <code>RxSwift</code> に対応していない場合も当然あります。<br/>
ではそんなとき、どのようにして対応すれば良いでしょうか。</p>

<p>今日は、 <code>delegate</code> の <code>Rx</code> 対応について公式サンプルの <code>GeolocationSample</code> を元に説明してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>delegateのRx対応方法</h3>

<p>早速具体的に方法を見ていきましょう。<br/>
今回は公式サンプルの <code>GeolocationSample</code> を元に、 <code>CLLocationManagerDelegate</code> を <code>Rx</code> に対応させる方法を説明します。</p>

<h4>DelegateProxyとDelegateProxyTypeへの対応</h4>

<p><code>delegate</code> の <code>Rx</code> 対応でまず必要なことは</p>

<ul>
<li><code>DelegateProxy</code> クラスを継承するクラスを作成すること</li>
<li><code>DelegateProxyType</code> プロトコルを継承するクラスを作成すること</li>
</ul>


<p>です。<br/>
ここでは上記2つの条件を満たした <code>RxCLLocationManagerDelegateProxy</code> クラスを作ることとします。</p>

<h5>DelegateProxyの説明</h5>

<p><code>DelegateProxy.swift</code> を見てみると、下記のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// DelegateProxy.swift</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Base class for `DelegateProxyType` protocol.</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// This implementation is not thread safe and can be used only from one thread (Main thread).</span>
</span><span class='line'><span class="n">open</span> <span class="n">class</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="nl">P:</span> <span class="n">AnyObject</span><span class="p">,</span> <span class="n">D</span><span class="o">&gt;:</span> <span class="n">_RXDelegateProxy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">ParentObject</span> <span class="o">=</span> <span class="n">P</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">D</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>DelegateProxy</code> は <code>DelegateProxyType</code> プロトコルのベースクラスと説明されています。<br/>
<code>DelegateProxy</code> はジェネリッククラスであり、2つのパラメータ <code>P</code> と <code>D</code> を持ちます。</p>

<p>ここで、 <code>P</code> と <code>D</code> について説明します。</p>

<ul>
<li><code>D</code> :<br/>
<code>Rx</code> に対応させたい <code>delegate</code> を指定します<br/>
<code>D</code> は <code>Delegate</code> の頭文字と思われます</li>
<li><code>P</code> :<br/>
<code>delegate</code> である <code>D</code> をプロパティとして持つオブジェクトを指定します<br/>
<code>P</code> は <code>ParentObject</code> の頭文字と思われます</li>
</ul>


<p>今回の場合は、<br/>
<code>DelegateProxy&lt;CLLocationManager, CLLocationManagerDelegate&gt;</code> になります。</p>

<h5>DelegateProxyTypeの説明</h5>

<p><code>DelegateProxyType.swift</code> の中身を見てみると、下記のように説明されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// DelegateProxyType.swift</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">`DelegateProxyType` protocol enables using both normal delegates and Rx observable sequences with</span>
</span><span class='line'><span class="cm">views that can have only one delegate/datasource registered.</span>
</span><span class='line'><span class="cm">...</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>意訳すると、<br/>
<code>DelegateProxyType</code> は <code>delegate</code> と <code>Rx</code> との紐付けを実現するプロトコル<br/>
であることを指しています。</p>

<p>方式は図示化されていますので、見てみると何となく理解できると思います。<br/>
図では <code>UIScrollViewDelegate</code> を例に説明されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="o">+-------------------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">UIView</span> <span class="n">subclass</span> <span class="p">(</span><span class="n">UIScrollView</span><span class="p">)</span>            <span class="o">|</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">+-----------+-------------------------------+</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">Delegate</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'><span class="o">+-----------</span><span class="n">v</span><span class="o">-------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Delegate</span> <span class="n">proxy</span> <span class="o">:</span> <span class="n">DelegateProxyType</span>        <span class="o">+-----+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">|</span>                <span class="p">,</span> <span class="n">UIScrollViewDelegate</span>     <span class="o">|</span>     <span class="o">|</span>
</span><span class='line'><span class="o">+-----------+-------------------------------+</span>     <span class="o">+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T2</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T3</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">forwards</span> <span class="n">events</span>                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">to</span> <span class="n">custom</span> <span class="n">delegate</span>                  <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="n">v</span>
</span><span class='line'><span class="o">+-----------</span><span class="n">v</span><span class="o">-------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Custom</span> <span class="n">delegate</span> <span class="p">(</span><span class="n">UIScrollViewDelegate</span><span class="p">)</span>    <span class="o">|</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">+-------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>また <code>DelegateProxyType</code> は以下3つの <code>static</code> メソッドを定義しているため、<br/>
<code>DelegateProxyType</code> を継承すると、必ずこの3つのメソッドを持つ必要があります。</p>

<ul>
<li><code>registerKnownImplementations</code><br/>
このメソッドの中で必ず <code>DelegateProxySubclass.register()</code> を実行します。<br/>
これをすることで自身で定義した <code>DelegateProxy</code> の継承クラスを登録することができます。</li>
<li><code>currentDelegate</code><br/>
<code>ParentObject</code> の持つ <code>delegate</code> を返却する処理を書きます。</li>
<li><code>setCurrentDelegate</code><br/>
<code>ParentObject</code> に持つべき <code>delegate</code> を設定する処理を書きます。</li>
</ul>


<p>特に特殊なことをしない場合は、<br/>
<code>delegate</code> をプロパティとして持つオブジェクトである <code>ParentObject</code>に<br/>
<code>HasDelegate</code> プロトコルを継承させます。 　</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">extension</span> <span class="nl">CLLocationManager:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">CLLocationManagerDelegate</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、 <code>currentDelegate</code> と <code>setCurrentDelegate</code> を省略することができます。</p>

<h5>対応したコードを書いてみる</h5>

<p>基本的な説明は以上として、実際にコードに起こしてみましょう。<br/>
まずは結果から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>      <span class="c1">// ここは必須</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>      <span class="c1">// ここは必須</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span> <span class="c1">//  CLLocationManagerDelegateはCoreLocation内に定義されています</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// currentDelegateとsetCurrentDelegateの役割を担います</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">CLLocationManager:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">CLLocationManagerDelegate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DelegateProxy, DelegateProxyType, CLLocationManagerDelegateを継承</span>
</span><span class='line'><span class="c1">// DelegateをRxに対応させるために、元となるDelegateも継承が必須です</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">RxCLLocationManagerDelegateProxy:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DelegateProxyType</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初期化処理</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">parentObject:</span> <span class="n">locationManager</span><span class="p">,</span> <span class="nl">delegateProxy:</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 必須のstaticメソッド</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 説明(1)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="p">(</span><span class="n">locationManager</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">RxCLLocationManagerDelegateProxy</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">locationManager</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didUpdateLocationsSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didFailWithErrorSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didUpdateLocations:</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>        <span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didFailWithError</span> <span class="nl">error:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didFailWithError:</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ソースコードを一部補足説明します。</p>

<h6>説明(1)</h6>

<p><code>registerKnownImplementations</code> で説明した通り <code>register</code> メソッドを実行しています。<br/>
<code>register</code> メソッドは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// Store DelegateProxy subclass to factory.</span>
</span><span class='line'><span class="c1">/// When make &#39;Rx*DelegateProxy&#39; subclass, call &#39;Rx*DelegateProxySubclass.register(for:_)&#39; 1 time, or use it in DelegateProxyFactory</span>
</span><span class='line'><span class="c1">/// &#39;Rx*DelegateProxy&#39; can have one subclass implementation per concrete ParentObject type.</span>
</span><span class='line'><span class="c1">/// Should call it from concrete DelegateProxy type, not generic.</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="k">register</span><span class="o">&lt;</span><span class="n">Parent</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">make:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Parent</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">factory</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="nl">make:</span> <span class="n">make</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と定義されています。</p>

<p>クロージャの引数に <code>ParentObject</code> を必要とし、<br/>
そのクラス自身を戻り値を必要としているため、<br/>
<code>ParentObject</code> として <code>locationManager</code> を渡し、<br/>
それを元に初期化した <code>RxCLLocationManagerDelegateProxy</code> オブジェクトを戻り値として渡しています。</p>

<p>ここは説明のため省略書きしませんでしたが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="nf">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とも当然書けます。</p>

<h6>説明(2)</h6>

<p><code>PublishSubject</code> 型のプロパティを2つ定義しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didUpdateLocationsSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'><span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didFailWithErrorSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは説明(3)にも関わるのですが、<br/>
<code>delegate</code> メソッドが呼び出されて処理が実行されたことを <code>Subscriber</code> に伝えるために定義が必要となります。</p>

<h6>説明(3)</h6>

<p><code>delegate</code> メソッドを <code>Rx</code> で対応するための方法が、まさにココで直接的に書かれています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didUpdateLocations:</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は、 <code>didUpdateLocations</code> で取得した <code>locations</code> の情報を <code>Rx</code> 連携させるために、上記のように記述しています。<br/>
先程説明した <code>PublishSubject</code> が <code>Subscriber</code> にメソッドの実行タイミングでデータを伝える方法ですが、<br/>
<code>didUpdateLocationsSubject.onNext(locations)</code> で実行しています。</p>

<p><code>_forwardToDelegate?.locationManager(manager, didUpdateLocations: locations)</code> はメモリ観点から<br/>
<code>delegate</code> を引き続き利用していることを伝えるために利用しているように見えます。</p>

<h6>説明(4)</h6>

<p>最後に <code>deinit</code> 内で実行している処理ですが、<br/>
<code>deinit</code> が呼ばれるということは初期化したオブジェクトが破棄される時なので、イベントが送られることはないはずです。<br/>
よって <code>PublishSubject</code> からイベント送信完了を知らせるように実装しましょう。</p>

<h4>ReactiveへのCLLocationManagerの適応</h4>

<p>事前準備が整ったため、実際に <code>CLLocationManager</code> を <code>Rx</code> 適応させてみます。</p>

<p><code>RxSwift</code> では下記のように書くことで拡張できる仕組みを用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CLLocationManager+Rx.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">CLLocationManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが可能な理由は <code>Reactive.swift</code> を見てみると良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="n">Reactive</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">/// Base object to extend.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">let</span> <span class="nl">base:</span> <span class="n">Base</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Creates extensions with base object.</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - parameter base: Base object.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">base:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、拡張した後にやることは下記です。</p>

<ul>
<li><code>delegate</code> のラッパーを生成する</li>
<li>各 <code>delegate</code> メソッドに対応したラッパープロパティを生成する</li>
<li>キャストメソッドを用意する</li>
</ul>


<p>1つずつ説明していきましょう。</p>

<h5>delegateのラッパーを生成する</h5>

<p>このラッパーは <code>delegate</code> を <code>DelegateProxy</code> 型として定義します。<br/>
この <code>delegate</code> はもちろん <code>readOnly</code> で値の取得のみできるものとします。<br/>
<code>DelegateProxy</code> の取得は <code>DelegateProxyType</code> プロトコルの <code>proxy</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">Reactive wrapper for `delegate`.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">For more information take a look at `DelegateProxyType` protocol documentation.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>各delegateメソッドに対応したラッパープロパティを生成する</h5>

<p><code>RxCLLocationManagerDelegateProxy</code> で <code>didUpdateLocations</code> と <code>didFailWithError</code> の <code>delegate</code> メソッドに対応しました。<br/>
これらのメソッドに対応したラッパープロパティは以下のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: Responding to Location Events</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'> <span class="n">public</span> <span class="n">var</span> <span class="nl">didUpdateLocations:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">didFailWithError:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらも <code>readOnly</code> で値のみを <code>Observable</code> 型で取得できるように定義しています。</p>

<h5>キャストメソッドを用意する</h5>

<p>キャストメソッドを用意する理由は、<br/>
あるメソッドの処理の完了タイミングで何らかの処理を実行させたい<br/>
<code>methodInvoked</code> を利用するときに必要になります。</p>

<p>処理は下記の通りです。<br/>
<code>Optional</code> 型の場合とそうでない場合が必要になる可能性がありますので、2種類用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">fileprivate</span> <span class="n">func</span> <span class="n">castOrThrow</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resultType:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="n">as</span><span class="o">?</span> <span class="n">T</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">RxCocoaError</span><span class="p">.</span><span class="n">castingError</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">targetType:</span> <span class="n">resultType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">returnValue</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fileprivate</span> <span class="n">func</span> <span class="n">castOptionalOrThrow</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resultType:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">NSNull</span><span class="p">().</span><span class="n">isEqual</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="n">as</span><span class="o">?</span> <span class="n">T</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">RxCocoaError</span><span class="p">.</span><span class="n">castingError</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">targetType:</span> <span class="n">resultType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">returnValue</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回の場合、端末の位置情報を利用するので、 <code>CLLocationManagerDelegate</code> の <code>didChangeAuthorization</code> のハンドリングが必須になります。<br/>
この <code>delegate</code> メソッドは定期的に繰り返し利用する必要はありません。<br/>
状態が変わって、その情報を必要となったタイミングでだけ利用できれば良いのです。<br/>
よって <code>methodInvoked</code> を利用してプロパティを定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: Responding to Authorization Changes</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">didChangeAuthorizationStatus:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">CLAuthorizationStatus</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="p">.</span><span class="n">methodInvoked</span><span class="p">(</span><span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">CLLocationManagerDelegate</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="nl">_:didChangeAuthorization:</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">a</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">number</span> <span class="o">=</span> <span class="n">try</span> <span class="n">castOrThrow</span><span class="p">(</span><span class="n">NSNumber</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CLAuthorizationStatus</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">number</span><span class="p">.</span><span class="n">intValue</span><span class="p">))</span> <span class="o">??</span> <span class="p">.</span><span class="n">notDetermined</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上で必要な対応は全て完了です。</p>

<h3>Rxに対応したdelegateの使い方</h3>

<p>自作した <code>Rx</code> 対応後の <code>delegate</code> を利用する例も見ていきましょう。</p>

<h4>処理ロジックの実装</h4>

<p>公式サンプルでは処理ロジックに相当する <code>GeolocationService.swift</code> を下記のように実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GeolocationService.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">distanceFilter</span> <span class="o">=</span> <span class="n">kCLDistanceFilterNone</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBestForNavigation</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(2)</span>
</span><span class='line'>        <span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">locationManager</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">locationManager</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didChangeAuthorizationStatus</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">notDetermined</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedAlways:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(3)</span>
</span><span class='line'>        <span class="n">location</span> <span class="o">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didUpdateLocations</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="p">[])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">last</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">Driver</span><span class="p">.</span><span class="n">just</span><span class="p">)</span> <span class="o">??</span> <span class="n">Driver</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明していきましょう。</p>

<h5>説明(1)</h5>

<p>今回のサンプルは、</p>

<ul>
<li>位置情報の利用を許可したら、画面が切り替わる</li>
<li>取得した最新の位置情報を画面に表示する</li>
</ul>


<p>という、データ結果を画面に直接反映させる処理が含まれています。<br/>
よって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように <code>Driver</code> として定義しています。</p>

<h5>説明(2)</h5>

<p><code>authorized</code> は <code>delegate</code> メソッドである <code>didChangeAuthorization</code> が呼び出されたタイミングで値が変更される必要があります。 <br/>
今回は、<br/>
<code>Subscribe</code> するまでは <code>Observable</code> を生成せずに、 <code>Subscribe</code> されたタイミングで <code>Observable</code> を返す <code>Observable</code> を生成する<br/>
<code>deferred</code> メソッドを利用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">locationManager</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">locationManager</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// didChangeAuthorizationStatusからauthorizedの値を取得</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>            <span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didChangeAuthorizationStatus</span>
</span><span class='line'>            <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// エラーが発生した場合は .notDetermined で返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">notDetermined</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// .authorizedAlwaysの場合のみauthorizedにtrueを格納する</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedAlways:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>説明(3)</h5>

<p>最新の位置情報を取得したタイミングで通知します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">location</span> <span class="o">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didUpdateLocations</span>
</span><span class='line'>    <span class="c1">// エラーが発生した場合は、空配列で返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="p">[])</span>
</span><span class='line'>    <span class="c1">// 位置情報が格納されている場合はその値を、位置情報がない場合は空を返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">last</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">Driver</span><span class="p">.</span><span class="n">just</span><span class="p">)</span> <span class="o">??</span> <span class="n">Driver</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// CLLocationCoordinate2Dの値を返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Viewロジックの実装</h4>

<p>サンプルでは下記のように実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GeolocationViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">private</span> <span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">UILabel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">coordinates:</span> <span class="n">Binder</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Binder</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="p">{</span> <span class="n">label</span><span class="p">,</span> <span class="n">location</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Lat: \(location.latitude)</span><span class="se">\n</span><span class="s">Lon: \(location.longitude)&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">GeolocationViewController:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">noGeolocationView:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button2:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">label:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">noGeolocationView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">geolocationService</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">.</span><span class="n">instance</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(2)</span>
</span><span class='line'>        <span class="n">geolocationService</span><span class="p">.</span><span class="n">authorized</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">noGeolocationView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">isHidden</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(3)</span>
</span><span class='line'>        <span class="n">geolocationService</span><span class="p">.</span><span class="n">location</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">coordinates</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明していきましょう。</p>

<h5>説明(1)</h5>

<p>画面に位置情報を表示するために <code>UILabel</code> を独自に <code>Rx</code> に対応させています。<br/>
これは <code>CLLocationManager</code> を拡張した方法と同じですね。</p>

<h5>説明(2)</h5>

<p><code>authorized</code> が <code>true</code> の場合に <code>noGeolocationView</code> を非表示にするよう実装しています。</p>

<h5>説明(3)</h5>

<p>取得できた最新の位置情報を説明(1)で拡張した機能を利用して <code>UILabel</code> に表示するようにしています。</p>

<p>以上で <code>Rx</code> に対応させた <code>delegate</code> を利用することができました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか。<br/>
形式に沿って実装をすることで簡単に拡張することはできますが、<br/>
実装1つ1つを理解することでより深く <code>RxSwift</code> を現場で活用できるかと思います。</p>

<p>まだまだ筆者も理解が乏しいところがあるので、もっと深く勉強を続けていきたいと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(3) ~ コーディングテストから用途を見る ~ ]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/04/swift-base-3/"/>
    <updated>2018-10-04T17:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/04/swift-base-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて本日は久しぶりに <code>Swift</code> の基礎について書きたいと思います。<br/>
と言うのも、最近オンラインでのコーディングテストを日常的に解いてみているのですが、<br/>
ほとんどの場合、 <code>Swift</code> の基本的な書き方を求められるからです。<br/>
(それを如何に使って算数 or 数学を解くか的な問題が多いな〜と感じる今日このごろです。)</p>

<p><code>Swift</code> もとうとう <code>4.2</code> にまで上がってきていますし、<br/>
iOSアプリの新規開発はほぼ <code>Swift</code> を利用する世の中になっていると思いますので、<br/>
改めて見直して損はないでしょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>文字列分割</h3>

<p>まずは文字列分割について見ていきます。<br/>
コーディングテストでよくあるのが、</p>

<ul>
<li>入力値が半角スペースで区切られている文字列</li>
<li>その文字列を利用して、何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは下記のように配列化することが多いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 与えられる入力値が &quot;1 2 3 4 5&quot;の場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 3 4 5&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 半角スペースで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespace</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 出力すると下記のようになります</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>半角スペース以外で区切るパターンもあるので一例を載せておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 数字で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;a1b2c3d4e&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">decimalDigits</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 小文字アルファベットで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1a2B3う4日5キ6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 小文字アルファベットで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1a2b3c4D5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">lowercaseLetters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4D5&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 記号で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1/2?3_4-5@6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">punctuationCharacters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん <code>CharacterSet</code> 内の定義を利用せずとも下記のようにも書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ハイフン(-)で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1-2-3-4-5-6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ループ処理</h3>

<p>続いてループ処理です。</p>

<h4>for in</h4>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li>1つ目の入力値は、その後入力される入力値の数を表す</li>
<li>2つ目 〜 Xつ目の入力値を用いて何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは、下記のように <code>for in</code> 文を利用することが多いです。</p>

<p>入力値が</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 入力値</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように与えられたとすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">num</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように利用して、回答したりします。</p>

<h4>enumerated()</h4>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li>配列の偶数番目には○○をする</li>
<li>配列の奇数番目には▲▲をする</li>
<li>上記結果を用いて、何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは、配列の <code>index</code> を利用したいので、 <code>enumerated()</code> を利用することが多いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">input</span><span class="p">.</span><span class="n">enumerated</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 偶数の場合</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 奇数の場合</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>forEach</h4>

<p>コーディングテストの問題を解いて、最後に配列の要素を出力したい場合に利用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;おはよう&quot;</span><span class="p">,</span> <span class="s">&quot;こんにちは&quot;</span><span class="p">,</span> <span class="s">&quot;こんばんは&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">result</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// おはよう</span>
</span><span class='line'><span class="c1">// こんにちは</span>
</span><span class='line'><span class="c1">// こんばんは</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の並び替え</h3>

<p>そして、並び替えの処理です。<br/>
コーディングテストで、</p>

<ul>
<li>スコア順に並べる</li>
<li>逆さから文字列を読む</li>
</ul>


<p>などが問題となることがあります。<br/>
その場合には <code>sorted()</code> や <code>sorted(by:)</code> を利用しています。<br/>
下記は、単純な配列の並び替えの場合です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 単純な配列の並び替えの場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">68</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">sortedArray</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span>  <span class="c1">// 昇順</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sortedArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">//  [35, 68, 80, 100]</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="nl">by:</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&lt;</span> <span class="n">$1</span> <span class="p">})</span>       <span class="c1">// 昇順</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="c1">//  [35, 68, 80, 100]</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="nl">by:</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&gt;</span> <span class="n">$1</span> <span class="p">})</span>       <span class="c1">// 降順</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [100, 80, 68, 35]</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、逆さから文字列を読む場合です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;swift&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">input</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">reversed</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="c1">// tfiws</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列要素の最大値/最小値</h3>

<p>コーディングテストで</p>

<ul>
<li>生徒の点数を計算する</li>
<li>最高得点と最低得点を半角スペース区切りで出力する</li>
</ul>


<p>必要があるとしましょう。<br/>
そのケースでは <code>max()</code> , <code>min()</code> を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;\(input.max()!) \(input.min()!))</span>
</span><span class='line'><span class="c1">// 100 20</span>
</span></code></pre></td></tr></table></div></figure>


<h3>文字列から文字を取得</h3>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li><code>String</code> 型の数字の末尾を削除する</li>
<li>ある文字列の○番目の文字を出力する</li>
</ul>


<p>などのパターンでしょうか。</p>

<p><code>String</code> 型の数字の末尾を削除するには、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 算出方法１</span>
</span><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;123456789X&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">prefix</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num1</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 算出方法２</span>
</span><span class='line'><span class="n">let</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">before:</span> <span class="n">str</span><span class="p">.</span><span class="n">endIndex</span><span class="p">)]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift3までの算出方法 - deprecated なので利用しないようにしましょう</span>
</span><span class='line'><span class="n">let</span> <span class="n">num3</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">to:</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">before:</span> <span class="n">str</span><span class="p">.</span><span class="n">endIndex</span><span class="p">))</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num3</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いでしょう。</p>

<p>文字列から○番目の文字を出力するには、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;123456789&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3番目の文字列を取得する場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;3&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;4&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift3までの算出方法 - deprecated なので利用しないようにしましょう</span>
</span><span class='line'><span class="n">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">with:</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy:</span> <span class="mi">2</span><span class="p">)..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy:</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればOKです。<br/>
Swift3とSwift4の算出方法が異なり、○番目の数え方も1ズレているので注意しましょう。</p>

<p>逆に初めから抽出したい文字列があり、それが何番目かを知りたい場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;ABCDEFG&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;D&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">index</span><span class="o">?</span><span class="p">.</span><span class="n">encodedOffset</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればOKです。<br/>
気をつけておきたいのは、 <code>offset</code> には0番目から数えた場合の数字が入るため、+1しておくということです。</p>

<h3>文字列の置換</h3>

<p>特定の文字を見つけたら、別の特定の文字に置き換えるという問題が出た場合は下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;ABCDEFG&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">replacingOccurrences</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;ABC&quot;</span><span class="p">,</span> <span class="nl">with:</span> <span class="s">&quot;abc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="c1">// abcDEFG</span>
</span></code></pre></td></tr></table></div></figure>


<h3>合計値を求める</h3>

<p>英数国理社の5科目の合計点を出す必要があるとします。<br/>
どのように解決するかというと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">subjectScore</span> <span class="o">=</span> <span class="p">[</span><span class="mi">78</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">92</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">subjectScore</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">+</span> <span class="n">$1</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 365</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じで <code>reduce</code> メソッドを使いましょう。</p>

<h3>特定の条件を満たしたものを取得する</h3>

<p>例えば、合格ボーダの点数を超過している科目があるか確認する必要があるとします。<br/>
この場合は <code>filter</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 合格ボーダの点数が40点だとします。</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&gt;</span> <span class="mi">40</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [100, 60]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の要素全てに同じ処理を実行したい</h3>

<p>例えば、半角スペース区切りの数字で構成された文字列が入力値として与えられた場合に、<br/>
数字に変換して計算に利用するケースがあるでしょう。<br/>
この場合は <code>map</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 3 4 5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespaces</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">intArray</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">Int</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">intArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の要素全てに同じ処理を実行して、不要なものは切り捨てたい</h3>

<p>イメージとしては、 <code>map</code> と <code>filter</code> の良いとこ取りでしょうか。<br/>
以下のように <code>compactMap</code> を利用します。<br/>
もし、 <code>map</code> を利用したら <code>B</code> の部分でコケてしまうでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 B 4 5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespaces</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">intArray</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="n">Int</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">intArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [1, 2, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、Swift4.0以前では <code>flatMap</code> というメソッド名でしたが、Swift4.1から <code>compactMap</code> に改名されました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか。<br/>
今回はコーディングテストの視点から各メソッドの用途を説明してみました。<br/>
と言っても超基本的な内容なので、今更ではあるんですけどね。</p>

<p>と言うことで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(5周年)]]></title>
    <link href="http://grandbig.github.io/blog/2018/09/15/blog-5-year-anniversary/"/>
    <updated>2018-09-15T20:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/09/15/blog-5-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて早くも5周年</h3>

<p>今年も書きます。早5周年記念投稿！</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>アクセス数の推移</h4>

<p><strong>Google Analytics</strong> からデータアクセスの推移を見ていきたいと思います。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/5anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
2018年はアクセス数が全体的に減少傾向にあるという結果となりました。</p>

<p>もう少し詳細化したものを記載します。<br/>
以下、1年間のアクセス数の推移を示しています。<br/>
<img src="http://grandbig.github.io/images/5anniversary2.png" alt="1年間でのアクセス数の推移" /></p>

<p>特に2018年の5月を境に、平日のページビュー数が 400 〜 530 程度にまで落ち込んでしまいました。<br/>
原因は正直わかっていません&hellip;<br/>
1つ昨年度と違うことと言えば、少々、月あたりの投稿数が減ってしまったといったことでしょうか。<br/>
1つ1つの記事の質にも課題があるかもしれません。</p>

<p>因みにですが&hellip;<br/>
ブログ開始当初からの各値の総計は下図の通りです。<br/>
<img src="http://grandbig.github.io/images/5anniversary3.png" alt="ブログ開始からの各数値" /></p>

<p>平均ページ滞在時間は昨年度に比べて <code>9秒</code> 程、長くなっていますが、<br/>
離脱率は <code>1%</code> 程、増加してしまいました。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>続いてアクセス数が多かった記事ランキングです！！</p>

<p><strong>1位: <a href="https://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot/">Spring Bootでリダイレクト先にパラメータを渡す方法</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary4.png" alt="第1位記事の詳細データ" /></p>

<p><strong>2位: <a href="https://grandbig.github.io/blog/2016/07/16/git-reset/">GitでリモートにPushした内容を取り消したい！！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary5.png" alt="第2位記事の詳細データ" /></p>

<p><strong>3位: <a href="https://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary6.png" alt="第3位記事の詳細データ" /></p>

<p><strong>4位: <a href="https://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/">Docker for Macをインストールしよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary7.png" alt="第5位記事の詳細データ" /></p>

<p><strong>5位: <a href="https://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary8.png" alt="第4位記事の詳細データ" /></p>

<p>以上が上位5記事です。</p>

<p>昨年度とほとんど上位記事に違いはありませんでした。<br/>
強いて言うならば、4位の「Docker for Macをインストールしよう！」がトップ5に食い込んできたくらいでしょうか。<br/>
本ブログはiOSをメインに書いているものの、ギリギリ5位にiOS関連の記事が来るに留まるという結果となりました。</p>

<p>しかも、トップ5中の4つが2016年に書いた記事で、4位の記事も2017年ということで、なかなか新規記事が伸びていないことがわかります。<br/>
これもまた全体のアクセス数を減少させてしまった原因を表しているかもしれません&hellip;</p>

<h4>広告収入の推移</h4>

<p>広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
では、今年の推移(2017/09/01〜2018/09/14)を見ていきます。<br/>
<img src="http://grandbig.github.io/images/5anniversary9.png" alt="Google Adsenseの推移" /></p>

<p>上記期間のAdsense収益は <strong>10,424円</strong> でした。<br/>
昨年が8,600円だったことを考えると、収益は少々増えていることが確認できます。</p>

<h3>まとめ</h3>

<p>さて、今年は少々寂しい結果となってしまいましたが、如何でしたでしょうか？<br/>
筆者の反省点としては、何と言っても記事の数が少なくなってしまったことです。<br/>
やはり、誰かに少しでも役に立つ記事を数多く書くことを心がけてきた身としては、後悔の念が拭えません&hellip;</p>

<p>この反省を活かして、来年こそは良い結果をお届けできればと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftでif else VS switch]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/25/swift-if-else-switch-case/"/>
    <updated>2018-08-25T20:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/25/swift-if-else-switch-case</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>アプリ開発をしているとたまに <code>if xxx { ... } else if yyy { ... }</code> で書くか <code>switch</code>文を用いるか迷うことがあるかもしれません。<br/>
その際には処理速度や可読性を踏まえて選択することが一般的なのではないでしょうか。</p>

<p>今回は処理速度に振り切って、どちらが速いのか比較をしてみようと思います。<br/>
( <code>Java</code> で比較している例は見られたのですが、以外にも <code>Swift</code> で比較している例が見られなかったので。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>比較に用いるソースコードのサンプル</h3>

<p>まずは次のような <code>enum</code> を用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">dog</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cat</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">bird</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">mouse</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">lion</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>enum</code> の各要素を10,000件ずつ格納されて、かつその順番をシャッフルした配列を作成します。<br/>
以下は配列内の要素をシャッフルための処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Array+Extension.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">shuffle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">UInt32</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">indices</span><span class="p">.</span><span class="n">last</span><span class="o">!</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">j</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">swapAt</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてサンプルデータを生成する処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">makeSampleData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Animal</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">Animal</span><span class="p">]()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">100000</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">dog</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">cat</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">bird</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">mouse</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">lion</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">shuffle</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">array</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを以下の <code>if xxx { ... } else if yyy { ... }</code> と <code>switch</code> の処理で比較します。</p>

<p><code>if xxx { ... } else if yyy { ... }</code> の場合は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// if xxx { ... } else if yyy { ... } の場合</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">calculateIfElse</span><span class="p">(</span><span class="nl">animals:</span> <span class="p">[</span><span class="n">Animal</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dog</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">bird</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">lion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">animals</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">animal</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">dog</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">dog</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">cat</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">bird</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">bird</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">mouse</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mouse</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">lion</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;dog: \(dog), cat: \(cat), bird: \(bird), mouse: \(mouse), lion: \(lion)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;time diff: \(endTime.timeIntervalSince(startTime))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>switch</code> の場合は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// switch の場合</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">calculateSwitch</span><span class="p">(</span><span class="nl">animals:</span> <span class="p">[</span><span class="n">Animal</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dog</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">bird</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">lion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">animals</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">animal</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">animal</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">dog:</span>
</span><span class='line'>            <span class="n">dog</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">cat:</span>
</span><span class='line'>            <span class="n">cat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">bird:</span>
</span><span class='line'>            <span class="n">bird</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">mouse:</span>
</span><span class='line'>            <span class="n">mouse</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">lion:</span>
</span><span class='line'>            <span class="n">lion</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;dog: \(dog), cat: \(cat), bird: \(bird), mouse: \(mouse), lion: \(lion)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;time diff: \(endTime.timeIntervalSince(startTime))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>比較結果</h3>

<p>5回ずつ計測した結果を比較してみます。</p>

<p><code>if xxx { ... } else if yyy { ... }</code> の計測結果</p>

<p>1回目： 0.119907975196838 [sec]<br/>
2回目： 0.112887978553772 [sec]<br/>
3回目： 0.114282965660095 [sec]<br/>
4回目： 0.114437937736511 [sec]<br/>
5回目： 0.114798069000244 [sec]</p>

<p>平均： 0.11526292 [sec]</p>

<p><code>switch</code> の計測結果</p>

<p>1回目： 0.105566024780273[sec]<br/>
2回目： 0.106294989585876[sec]<br/>
3回目： 0.104817032814026[sec]<br/>
4回目： 0.105982065200806[sec]<br/>
5回目： 0.107689023017883[sec]</p>

<p>平均： 0.10606978 [sec]</p>

<p>以上より <code>switch</code> を利用した方が <code>0.00919314 [sec]</code> 速いことがわかりました。</p>

<h3>まとめ</h3>

<p>結論、処理速度を見ると複数ケースの比較が必要な場面では <code>switch</code> の方が有効なようです。<br/>
しかし、微々たる差ではあるので、可読性も考えながら最適な方法を選択すべきかと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayoutの実例（２）]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/18/autolayout-2/"/>
    <updated>2018-08-18T13:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/18/autolayout-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="https://grandbig.github.io/blog/2018/08/11/autolayout-1/">AutoLayoutの実例（１）</a>にて、<br/>
『 <code>UITableViewCell</code> 内に長さの異なる <code>UILabel</code> を持った <code>UIStackView</code> がある場合』の <code>AutoLayout</code> について説明しました。</p>

<p>今回は『 <code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合』<br/>
の <code>AutoLayout</code> について説明したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3><code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合</h3>

<p>下図のようなレイアウトを実現する場合</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_1.png" alt="UITableViewCell内に条件次第でisHiddenがtrueになるパーツを持つUIStackViewがある" /></p>

<p>これは前回のサンプルの、</p>

<ul>
<li><code>subTitleLabel</code> は文字列 <code>GOOD</code> 固定</li>
<li><code>titleLabel</code> には可変長の文字列を表示する</li>
<li><code>titleLabel</code> のすぐ右隣に <code>subTitleLabel</code> を表示する(要素は全て左詰め)</li>
<li>画像は固定サイズで表示する</li>
</ul>


<p>に加えて、以下仕様をプラスしました。</p>

<ul>
<li><code>hiddenLabel1</code> (条件次第で非表示になるオレンジ色のラベル)が <code>titleLabel</code> 等の下に配置</li>
<li><code>hiddenLabel2</code> (条件次第で非表示になる茶色のラベル)が更にその下に配置</li>
<li><code>button</code> が更にその下に配置</li>
<li>条件次第で <code>hiddenLabel2</code> と <code>button</code> がセットで非表示になる</li>
<li>条件次第で <code>hiddenLabel1</code> と <code>hiddenLabel2</code> , <code>button</code> が非表示になる</li>
</ul>


<h4>レイアウトの構成</h4>

<p><code>xib</code> 上のUIパーツは下図の通りです。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_2.png" alt="xib上の構成" /></p>

<p>構成について説明します。</p>

<ul>
<li>画像、 <code>titleLabel</code> , <code>subTitleLabel</code> は前回に引き続き1つの <code>UIStackView</code> 内に要素を配置しています

<ul>
<li>これは3つの要素の横の関係性が場合によって変化する仕様に対応するためです。</li>
</ul>
</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_7.png" alt="画像, titleLabel, subTitleLabelを囲むUIStackView" /></p>

<ul>
<li><code>hiddenLabel2</code> と <code>button</code> は条件次第で同時に非表示になるため、<code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_4.png" alt="hiddenLabel2とbuttonを囲むUIStackView" /></p>

<ul>
<li>条件次第で <code>hiddenLabel1</code> , <code>hiddenLabel2</code> , <code>button</code> が一気に非表示になるため、さらに <code>UIStackView</code> で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_5.png" alt="hiddenLabel1, hiddenLabel2, buttonを囲むUIStackView" /></p>

<ul>
<li>非表示になったときに、Cellの高さが動的に変わるように、全要素を <code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_6.png" alt="全要素を囲むUIStackView" /></p>

<h4>Cellの高さを要素の表示/非表示状態次第で可変にする</h4>

<p><code>ContentView</code> と全要素を囲む <code>UIStackView</code>の間に <code>Constraint</code> を付与するだけです。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_3.png" alt="ContentViewと全要素を囲むUIStackViewの間にConstraintを付与する" /></p>

<p>以前、<a href="http://grandbig.github.io/blog/2017/12/10/ios11-stackview-hidden/">iOS10とiOS11で比較するUIStackViewのhiddenとConstraintエラー</a>で説明しましたが、
iOS11からは <code>UIStackView</code> を <code>isHidden = true</code> にしても、<code>Constraint</code> エラーは出なくなったので、  かなり扱いやすくなっています。</p>

<h3>まとめ</h3>

<p>さて、今回の実例は前回の実例の追加版といった位置づけで書いてみました。<br/>
<code>UITableViewCell</code> で、条件により表示/非表示を切り替えて、動的に高さを変更する場面は多いと思います。<br/>
今は <code>AutoLayout</code> さえ正しく使えば簡単に対応できる内容となっていますので、必ず覚えておきましょう。</p>

<p>次回はもう少し複雑な <code>AutoLayout</code> の実例を紹介できればと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
