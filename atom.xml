<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-02-20T22:46:38+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dockerコンテナ内でApache設定を試してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-3/"/>
    <updated>2017-02-19T23:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/19/docker-for-mac-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回の<a href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2/">DockerにWebサーバーを立てよう！</a>に引き続きDocker内Apacheで遊んでみます。<br/>
前回はUbuntuへのApacheインストールから起動まで見てきました。<br/>
実際の現場でApacheを利用する際は様々な設定を施す必要があります。<br/>
本記事ではその一端を少しでも学ぼうということで書いていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>DocumentRootの設定</h3>

<p>Apacheでは設定ファイルで静的ファイルのルートパスを設定することができます。<br/>
デフォルトでは<code>/var/www/html</code>になっています。<br/>
これは、<code>/etc/apache2/sites-enabled/000-default.conf</code>で次のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">VirtualHost</span> <span class="o">*:</span><span class="mi">80</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">The</span> <span class="nx">ServerName</span> <span class="nx">directive</span> <span class="nx">sets</span> <span class="nx">the</span> <span class="nx">request</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">hostname</span> <span class="nx">and</span> <span class="nx">port</span> <span class="nx">that</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">uses</span> <span class="nx">to</span> <span class="nx">identify</span> <span class="nx">itself</span><span class="p">.</span> <span class="nx">This</span> <span class="nx">is</span> <span class="nx">used</span> <span class="nx">when</span> <span class="nx">creating</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">redirection</span> <span class="nx">URLs</span><span class="p">.</span> <span class="nx">In</span> <span class="nx">the</span> <span class="nx">context</span> <span class="nx">of</span> <span class="nx">virtual</span> <span class="nx">hosts</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">ServerName</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">specifies</span> <span class="nx">what</span> <span class="nx">hostname</span> <span class="nx">must</span> <span class="nx">appear</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">request</span><span class="err">’</span><span class="nx">s</span> <span class="nx">Host</span><span class="o">:</span> <span class="nx">header</span> <span class="nx">to</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">match</span> <span class="k">this</span> <span class="nx">virtual</span> <span class="nx">host</span><span class="p">.</span> <span class="nx">For</span> <span class="nx">the</span> <span class="k">default</span> <span class="nx">virtual</span> <span class="nx">host</span> <span class="p">(</span><span class="k">this</span> <span class="nx">file</span><span class="p">)</span> <span class="k">this</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">value</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">decisive</span> <span class="nx">as</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">used</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">last</span> <span class="nx">resort</span> <span class="nx">host</span> <span class="nx">regardless</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">However</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">must</span> <span class="nx">set</span> <span class="nx">it</span> <span class="k">for</span> <span class="nx">any</span> <span class="nx">further</span> <span class="nx">virtual</span> <span class="nx">host</span> <span class="nx">explicitly</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span><span class="nx">ServerName</span> <span class="nx">www</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">com</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ServerAdmin</span> <span class="nx">webmaster</span><span class="err">@</span><span class="nx">localhost</span>
</span><span class='line'>  <span class="nx">DocumentRoot</span> <span class="o">/</span><span class="kd">var</span><span class="err">/www/html</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Available</span> <span class="nx">loglevels</span><span class="o">:</span> <span class="nx">trace8</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">trace1</span><span class="p">,</span> <span class="nx">debug</span><span class="p">,</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">notice</span><span class="p">,</span> <span class="nx">warn</span><span class="p">,</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">crit</span><span class="p">,</span> <span class="nx">alert</span><span class="p">,</span> <span class="nx">emerg</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">It</span> <span class="nx">is</span> <span class="nx">also</span> <span class="nx">possible</span> <span class="nx">to</span> <span class="nx">configure</span> <span class="nx">the</span> <span class="nx">loglevel</span> <span class="k">for</span> <span class="nx">particular</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">modules</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span><span class="nx">LogLevel</span> <span class="nx">info</span> <span class="nx">ssl</span><span class="o">:</span><span class="nx">warn</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ErrorLog</span> <span class="nx">$</span><span class="p">{</span><span class="nx">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">error</span><span class="p">.</span><span class="nx">log</span>
</span><span class='line'>  <span class="nx">CustomLog</span> <span class="nx">$</span><span class="p">{</span><span class="nx">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">access</span><span class="p">.</span><span class="nx">log</span> <span class="nx">combined</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">For</span> <span class="nx">most</span> <span class="nx">configuration</span> <span class="nx">files</span> <span class="nx">from</span> <span class="nx">conf</span><span class="o">-</span><span class="nx">available</span><span class="o">/</span><span class="p">,</span> <span class="nx">which</span> <span class="nx">are</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">enabled</span> <span class="nx">or</span> <span class="nx">disabled</span> <span class="nx">at</span> <span class="nx">a</span> <span class="nx">global</span> <span class="nx">level</span><span class="p">,</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">possible</span> <span class="nx">to</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">include</span> <span class="nx">a</span> <span class="nx">line</span> <span class="k">for</span> <span class="nx">only</span> <span class="nx">one</span> <span class="nx">particular</span> <span class="nx">virtual</span> <span class="nx">host</span><span class="p">.</span> <span class="nx">For</span> <span class="nx">example</span> <span class="nx">the</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">following</span> <span class="nx">line</span> <span class="nx">enables</span> <span class="nx">the</span> <span class="nx">CGI</span> <span class="nx">configuration</span> <span class="k">for</span> <span class="k">this</span> <span class="nx">host</span> <span class="nx">only</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">after</span> <span class="nx">it</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">globally</span> <span class="nx">disabled</span> <span class="kd">with</span> <span class="s2">&quot;a2disconf&quot;</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span><span class="nx">Include</span> <span class="nx">conf</span><span class="o">-</span><span class="nx">available</span><span class="o">/</span><span class="nx">serve</span><span class="o">-</span><span class="nx">cgi</span><span class="o">-</span><span class="nx">bin</span><span class="p">.</span><span class="nx">conf</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">vim</span><span class="o">:</span> <span class="nx">syntax</span><span class="o">=</span><span class="nx">apache</span> <span class="nx">ts</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sw</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sts</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sr</span> <span class="nx">noet</span>
</span></code></pre></td></tr></table></div></figure>


<p>必要があれば書き換えて使いましょう。</p>

<h3>リバースプロキシ設定</h3>

<p>リバースプロキシとは、</p>

<ul>
<li>クライアントからのアクセスをキャッチして、特定のサーバへ送るプロキシサーバ</li>
<li>セキュリティや負荷分散などのために利用される</li>
</ul>


<p>ものです。<br/>
詳しくは<a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7">リバースプロキシ &ndash; wiki</a>を見てください。</p>

<p>設定はいたって簡単です。<br/>
まずは、モジュールの有効化をするために下記コマンドを打ちましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// プロキシモジュールの有効化</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">a2enmod</span> <span class="nx">proxy</span> <span class="nx">proxy_http</span>
</span><span class='line'><span class="nx">Enabling</span> <span class="nx">module</span> <span class="nx">proxy</span><span class="p">.</span>
</span><span class='line'><span class="nx">Considering</span> <span class="nx">dependency</span> <span class="nx">proxy</span> <span class="k">for</span> <span class="nx">proxy_http</span><span class="o">:</span>
</span><span class='line'><span class="nx">Module</span> <span class="nx">proxy</span> <span class="nx">already</span> <span class="nx">enabled</span>
</span><span class='line'><span class="nx">Enabling</span> <span class="nx">module</span> <span class="nx">proxy_http</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">activate</span> <span class="nx">the</span> <span class="k">new</span> <span class="nx">configuration</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">run</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">service</span> <span class="nx">apache2</span> <span class="nx">restart</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Apacheを再起動</span>
</span><span class='line'><span class="nx">$</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">init</span><span class="p">.</span><span class="nx">d</span><span class="o">/</span><span class="nx">apache2</span> <span class="nx">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、設定ファイルを更新します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">IfModule</span> <span class="nx">mod_proxy</span><span class="p">.</span><span class="nx">c</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">If</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="nx">use</span> <span class="nx">apache2</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">forward</span> <span class="nx">proxy</span><span class="p">,</span> <span class="nx">uncomment</span> <span class="nx">the</span>
</span><span class='line'>  <span class="err">#</span> <span class="s1">&#39;ProxyRequests On&#39;</span> <span class="nx">line</span> <span class="nx">and</span> <span class="nx">the</span> <span class="o">&lt;</span><span class="nx">Proxy</span> <span class="o">*&gt;</span> <span class="nx">block</span> <span class="nx">below</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">WARNING</span><span class="o">:</span> <span class="nx">Be</span> <span class="nx">careful</span> <span class="nx">to</span> <span class="nx">restrict</span> <span class="nx">access</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="o">&lt;</span><span class="nx">Proxy</span> <span class="o">*&gt;</span> <span class="nx">block</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Open</span> <span class="nx">proxy</span> <span class="nx">servers</span> <span class="nx">are</span> <span class="nx">dangerous</span> <span class="nx">both</span> <span class="nx">to</span> <span class="nx">your</span> <span class="nx">network</span> <span class="nx">and</span> <span class="nx">to</span> <span class="nx">the</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Internet</span> <span class="nx">at</span> <span class="nx">large</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">If</span> <span class="nx">you</span> <span class="nx">only</span> <span class="nx">want</span> <span class="nx">to</span> <span class="nx">use</span> <span class="nx">apache2</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">reverse</span> <span class="nx">proxy</span><span class="o">/</span><span class="nx">gateway</span> <span class="k">in</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">front</span> <span class="nx">of</span> <span class="nx">some</span> <span class="nx">web</span> <span class="nx">application</span> <span class="nx">server</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">DON</span><span class="err">’</span><span class="nx">T</span> <span class="nx">need</span>
</span><span class='line'>  <span class="nx">ProxyRequests</span> <span class="nx">Off</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Proxy</span> <span class="o">*&gt;</span>
</span><span class='line'>  <span class="err">#</span>   <span class="nx">AddDefaultCharset</span> <span class="nx">off</span>
</span><span class='line'>  <span class="err">#</span>   <span class="nx">Require</span> <span class="nx">all</span> <span class="nx">denied</span>
</span><span class='line'>  <span class="err">#</span>   <span class="err">#</span><span class="nx">Require</span> <span class="nx">local</span>
</span><span class='line'>    <span class="nx">Require</span> <span class="nx">all</span> <span class="nx">granted</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Proxy&gt;</span>
</span><span class='line'>  <span class="nx">ProxyPass</span> <span class="o">/</span><span class="nx">hoge</span><span class="o">/</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:80/hoge.html</span>
</span><span class='line'>  <span class="nx">ProxyPassReverse</span> <span class="o">/</span><span class="nx">hoge</span><span class="o">/</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:80/hoge.html</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Enable</span><span class="o">/</span><span class="nx">disable</span> <span class="nx">the</span> <span class="nx">handling</span> <span class="nx">of</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="s2">&quot;Via:&quot;</span> <span class="nx">headers</span><span class="p">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="p">(</span><span class="s2">&quot;Full&quot;</span> <span class="nx">adds</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">version</span><span class="p">;</span> <span class="s2">&quot;Block&quot;</span> <span class="nx">removes</span> <span class="nx">all</span> <span class="nx">outgoing</span> <span class="nx">Via</span><span class="o">:</span> <span class="nx">headers</span><span class="p">)</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Set</span> <span class="nx">to</span> <span class="nx">one</span> <span class="nx">of</span><span class="o">:</span> <span class="nx">Off</span> <span class="o">|</span> <span class="nx">On</span> <span class="o">|</span> <span class="nx">Full</span> <span class="o">|</span> <span class="nx">Block</span>
</span><span class='line'>  <span class="err">#</span><span class="nx">ProxyVia</span> <span class="nx">Off</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">vim</span><span class="o">:</span> <span class="nx">syntax</span><span class="o">=</span><span class="nx">apache</span> <span class="nx">ts</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sw</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sts</span><span class="o">=</span><span class="mi">4</span> <span class="nx">sr</span> <span class="nx">noet</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の設定について説明します。</p>

<ul>
<li><code>ProxyRequests Off</code>: フォワードプロキシをOFFにする設定です</li>
<li><code>&lt;Proxy *&gt; 〜 &lt;/Proxy&gt;</code>: アクセスパスに対するアクセス権限範囲を設定します</li>
<li><code>ProxyPass 元のアクセス要求パス 転送パス</code>: クライアントからのアクセス要求を転送します</li>
<li><code>ProxyPassReverse 元のアクセス要求パス 転送パス</code>: Apache に HTTP リダイレクト応答の Location, Content-Location, URI ヘッダの調整を担います</li>
</ul>


<p>筆者自身、フォワードプロキシという単語を意識して使ったことがなかったのですが、ごくごく普通に使われているものなんですよね&hellip;<br/>
Apache公式ページの下記記述を見るとよくわかります。</p>

<blockquote><p>ファイアウォールによって 制限されている内部のクライアントにインターネットへのアクセスを 提供するもの</p></blockquote>

<p>どうも<code>ProxyPassReverse</code>は理解するのが厄介だったようで多くの方が記事にしてくれていました。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/server/introduction_mod_proxy/">mod_proxy再入門 – ProxyPassとProxyPassReverse</a></li>
<li><a href="http://d.hatena.ne.jp/a666666/20090211/1234348004">やっとわかった、リバースプロキシの設定の意味</a></li>
</ul>


<p>上記設定をしたので下記にアクセスしてみます。<br/>
<code>http://localhost:15600/hoge/</code><br/>
結果は下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/docker_reverse_proxy.png" alt="リバースプロキシした画面を表示" /></p>

<p>このために用意した<code>hoge.html</code>が表示されました。</p>

<h3>RewriteRuleの設定</h3>

<p><code>Rewrite</code>はクライアントからのリクエストを内部変換してリダイレクトするような機能です。<br/>
今回は些か簡単な例を扱ったためリバースプロキシとの違いがわかりにくかったかもしれません。<br/>
あくまでも<code>Rewrite</code>はパスの読み替えであるため、物理的に別のサーバに接続を促すようなリバースプロキシならではの設定はできません。</p>

<p>まずはモジュールを有効化させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">a2enmod</span> <span class="nx">rewrite</span>
</span><span class='line'><span class="nx">Enabling</span> <span class="nx">module</span> <span class="nx">rewrite</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">activate</span> <span class="nx">the</span> <span class="k">new</span> <span class="nx">configuration</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">run</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">service</span> <span class="nx">apache2</span> <span class="nx">restart</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Apacheを再起動</span>
</span><span class='line'><span class="nx">$</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">init</span><span class="p">.</span><span class="nx">d</span><span class="o">/</span><span class="nx">apache2</span> <span class="nx">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、静的ファイルパスへのアクセス制限を変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /etc/apache2/apache2.conf</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Directory</span> <span class="o">/</span><span class="kd">var</span><span class="sr">/www/</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">Options</span> <span class="nx">Indexes</span> <span class="nx">FollowSymLinks</span>
</span><span class='line'>  <span class="nx">AllowOverride</span> <span class="nx">All</span>
</span><span class='line'>  <span class="nx">Require</span> <span class="nx">all</span> <span class="nx">granted</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>デフォルトでは上記が<code>AllowOverride None</code>だったのを<code>AllowOverride All</code>に変更しています。<br/>
さらに、<code>.htaccess</code>ファイルを作成して書き換えルールを記載します。<br/>
<code>.htaccess</code>を利用する設定は<code>apache2.conf</code>にデフォルトで記載されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /etc/apache2/apache2.conf</span>
</span><span class='line'><span class="err">#</span> <span class="nx">AccessFileName</span><span class="o">:</span> <span class="nx">The</span> <span class="nx">name</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">file</span> <span class="nx">to</span> <span class="nx">look</span> <span class="k">for</span> <span class="k">in</span> <span class="nx">each</span> <span class="nx">directory</span>
</span><span class='line'><span class="err">#</span> <span class="k">for</span> <span class="nx">additional</span> <span class="nx">configuration</span> <span class="nx">directives</span><span class="p">.</span>  <span class="nx">See</span> <span class="nx">also</span> <span class="nx">the</span> <span class="nx">AllowOverride</span>
</span><span class='line'><span class="err">#</span> <span class="nx">directive</span><span class="p">.</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="nx">AccessFileName</span> <span class="p">.</span><span class="nx">htaccess</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして実際の<code>RewriteRule</code>の記載です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /var/www/html/.htaccess</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">IfModule</span> <span class="nx">mod_rewrite</span><span class="p">.</span><span class="nx">c</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">RewriteEngine</span> <span class="nx">On</span>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="nx">fuga</span><span class="o">/</span><span class="p">(.</span><span class="o">*</span><span class="p">)</span><span class="nx">$</span> <span class="o">/</span><span class="nx">bar</span><span class="o">/</span><span class="nx">$1</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/IfModule&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプル用に、<code>/var/www/html</code>配下に<code>bar</code>フォルダを作成し、その配下に<code>index.html</code>を作成しました。<br/>
上記設定をしたので下記にアクセスしてみます。<br/>
<code>http://localhost:15600/fuga/</code><br/>
結果は下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/docker_rewrite.png" alt="RewriteRule適用" /></p>

<h3>ErrorDocumentの設定</h3>

<p>エラー発生時にカスタムエラーページを表示したいときなどに利用します。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /etc/apache2/site-enabled/000-default.conf</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">VirtualHost</span> <span class="o">*:</span><span class="mi">80</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">ErrorLog</span> <span class="nx">$</span><span class="p">{</span><span class="nx">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">error</span><span class="p">.</span><span class="nx">log</span>
</span><span class='line'>  <span class="nx">CustomLog</span> <span class="nx">$</span><span class="p">{</span><span class="nx">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">access</span><span class="p">.</span><span class="nx">log</span> <span class="nx">combined</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 以下、ErrorDocumentの設定</span>
</span><span class='line'>  <span class="nx">ErrorDocument</span> <span class="mi">404</span> <span class="nx">error_404</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'>  <span class="nx">ErrorDocument</span> <span class="mi">500</span> <span class="nx">error_500</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように設定が可能です。<br/>
Ubuntuの場合、<code>/etc/apache2/conf-enabled/localized-error-pages.conf</code>に<code>ErrorDocument</code>の構文が全てコメントアウトの状態で記載があるため、本格的にやるならきちんとファイルを分けた方が良さそうです。</p>

<h3>まとめ</h3>

<p>さて今回はApacheの設定を少し見ることができました。<br/>
WEBサーバとはどんなものなのか、わかったようでわかっていなかったことが見えてきた気がします。<br/>
引き続き勉強を続けていきたいものです。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerにWebサーバーを立てよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2/"/>
    <updated>2017-02-19T15:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回は前回(<a href="http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/">Docker for Macをインストールしよう！</a>)構築したDocker内のUbuntuサーバの中で遊んでみます。<br/>
まずは、基本となるWebサーバを立てるところから始めたいと思います。</p>

<p>今回は最も有名であろう(Nginxも人気ですが&hellip;) <strong>Apache</strong> を利用したWebサーバの構築をしてみます。<br/>
限りなく常識に近いと思うものの、一応概要だけ紹介すると、Apacheとは下記の通りです。</p>

<ul>
<li>正式名所は「 <strong>Apache HTTP Server</strong> 」</li>
<li>Webサーバソフトウェア</li>
<li>Apache Licenseで無償で提供</li>
<li>2.2系と2.4系があるがモダンなのは <strong>2.4系</strong></li>
</ul>


<p>というところで早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Host Macからアクセスするためのポートフォワード設定</h3>

<p>これからApacheをインストールするわけですが、その前にDockerコンテナにポートフォワード設定をしてみましょう。<br/>
Docker for Macなら簡単にできます。</p>

<p>１．該当コンテナの設定を見ましょう</p>

<p><img src="http://grandbig.github.io/images/docker_port_forward_1.png" alt="設定を見る" /></p>

<p>２．Port設定を見ましょう</p>

<p><img src="http://grandbig.github.io/images/docker_port_forward_2.png" alt="Port設定を見る" /></p>

<p>３．ポートフォワードの設定を追加する</p>

<p><img src="http://grandbig.github.io/images/docker_port_forward_3.png" alt="ポートフォワードの設定を追加" /></p>

<p>上記では、<code>http://localhost:15600/</code>でMacからアクセスできるようにしています。<br/>
<code>localhost</code>でなく、具体的にIPアドレスを指定しても良いようですが、今回は特に必要ないのでこれでいきます。</p>

<h3>Apacheのインストール</h3>

<p>まずは当然のことながらインストール作業から始めます。<br/>
DockerのUbuntuコンテナを起動した後にログインして、下記コマンドを叩きましょう。</p>

<p>ログインはDockerアプリに含まれている <strong>Kitematic</strong> からもできますし、コマンドでもできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// docker コンテナにログイン</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">exec</span> <span class="o">-</span><span class="nx">it</span> <span class="o">&lt;&lt;</span><span class="err">コンテナ名</span><span class="o">&gt;&gt;</span> <span class="nx">bash</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// apt-getのアップデート</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">update</span>
</span><span class='line'><span class="c1">// Apacheのインストール</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">apache2</span>
</span></code></pre></td></tr></table></div></figure>


<p>なぜ初めに<code>apt-get update</code>をやっているかと言うと、これをやらずに突き進もうとした際に下記エラーが発生したためです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">apache2</span>
</span><span class='line'><span class="nx">Reading</span> <span class="kr">package</span> <span class="nx">lists</span><span class="p">...</span> <span class="nx">Done</span>
</span><span class='line'><span class="nx">Building</span> <span class="nx">dependency</span> <span class="nx">tree</span>
</span><span class='line'><span class="nx">Reading</span> <span class="nx">state</span> <span class="nx">information</span><span class="p">...</span> <span class="nx">Done</span>
</span><span class='line'><span class="nx">E</span><span class="o">:</span> <span class="nx">Unable</span> <span class="nx">to</span> <span class="nx">locate</span> <span class="kr">package</span> <span class="nx">apache2</span>
</span></code></pre></td></tr></table></div></figure>


<p>きちんとApacheのインストールが完了したか確認するためにバージョンを見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// バージョン確認方法(1)</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apachectl</span> <span class="o">-</span><span class="nx">v</span>
</span><span class='line'><span class="nx">Server</span> <span class="nx">version</span><span class="o">:</span> <span class="nx">Apache</span><span class="o">/</span><span class="mf">2.4</span><span class="p">.</span><span class="mi">18</span> <span class="p">(</span><span class="nx">Ubuntu</span><span class="p">)</span>
</span><span class='line'><span class="nx">Server</span> <span class="nx">built</span><span class="o">:</span>   <span class="mi">2016</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">14</span><span class="nx">T12</span><span class="o">:</span><span class="mi">32</span><span class="o">:</span><span class="mi">26</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// バージョン確認方法(2)</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apache2</span> <span class="o">-</span><span class="nx">v</span>
</span><span class='line'><span class="nx">Server</span> <span class="nx">version</span><span class="o">:</span> <span class="nx">Apache</span><span class="o">/</span><span class="mf">2.4</span><span class="p">.</span><span class="mi">18</span> <span class="p">(</span><span class="nx">Ubuntu</span><span class="p">)</span>
</span><span class='line'><span class="nx">Server</span> <span class="nx">built</span><span class="o">:</span>   <span class="mi">2016</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">14</span><span class="nx">T12</span><span class="o">:</span><span class="mi">32</span><span class="o">:</span><span class="mi">26</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Apacheの起動確認</h3>

<p>インストール後はデフォルトで起動していると思いますが、念のため確認しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">init</span><span class="p">.</span><span class="nx">d</span><span class="o">/</span><span class="nx">apache2</span> <span class="nx">status</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">apache2</span> <span class="nx">is</span> <span class="nx">running</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、初期状態では<code>start</code>や<code>restart</code>コマンドを実行したときに下記警告が表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">init</span><span class="p">.</span><span class="nx">d</span><span class="o">/</span><span class="nx">apache2</span> <span class="nx">restart</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">Restarting</span> <span class="nx">Apache</span> <span class="nx">httpd</span> <span class="nx">web</span> <span class="nx">server</span> <span class="nx">apache2</span>                                                                                                                                                           <span class="nx">AH00558</span><span class="o">:</span> <span class="nx">apache2</span><span class="o">:</span> <span class="nx">Could</span> <span class="nx">not</span> <span class="nx">reliably</span> <span class="nx">determine</span> <span class="nx">the</span> <span class="nx">server</span><span class="err">’</span><span class="nx">s</span> <span class="nx">fully</span> <span class="nx">qualified</span> <span class="nx">domain</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">using</span> <span class="nx">XX</span><span class="p">.</span><span class="nx">XX</span><span class="p">.</span><span class="nx">XX</span><span class="p">.</span><span class="nx">XX</span><span class="p">.</span> <span class="nx">Set</span> <span class="nx">the</span> <span class="s1">&#39;ServerName&#39;</span> <span class="nx">directive</span> <span class="nx">globally</span> <span class="nx">to</span> <span class="nx">suppress</span> <span class="k">this</span> <span class="nx">message</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを回避するためには設定ファイルに<code>ServerName</code>を定義する必要があります。<br/>
(警告は出るものの、起動には何ら問題はありません。)</p>

<p>下記のように設定ファイルを開きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 設定ファイルを開く</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">vi</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">apache2</span><span class="o">/</span><span class="nx">apache2</span><span class="p">.</span><span class="nx">conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、<code>ServerName</code>を適当な場所に定義してやりましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /etc/apache2/apache2.conf</span>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'><span class="err">#</span> <span class="nx">Include</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">ports</span> <span class="nx">to</span> <span class="nx">listen</span> <span class="nx">on</span>
</span><span class='line'><span class="nx">Include</span> <span class="nx">ports</span><span class="p">.</span><span class="nx">conf</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ServerName</span> <span class="nx">xxx</span><span class="p">.</span><span class="nx">com</span>
</span><span class='line'><span class="c1">// 省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、エラーなく起動や再起動できることを確認できるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">init</span><span class="p">.</span><span class="nx">d</span><span class="o">/</span><span class="nx">apache2</span> <span class="nx">restart</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">Restarting</span> <span class="nx">Apache</span> <span class="nx">httpd</span> <span class="nx">web</span> <span class="nx">server</span> <span class="nx">apache2</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでApacheが起動していることが確認できたので、GETリクエストを投げてアクセスしてみましょう。<br/>
Ubuntu用のApacheデフォルトページが返却されるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1/</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span> <span class="nx">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="s2">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">=</span><span class="s2">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Webページにアクセス</h3>

<p>冒頭でポートフォワード設定をしたので、Apacheが起動しているのであれば、Macからページを見れるはずです！<br/>
早速見てみましょう。<br/>
設定した<code>http://localhost:15600/</code>でアクセスすると下記のようにページが表示されます。</p>

<p><img src="http://grandbig.github.io/images/docker_apache_1.png" alt="DockerコンテナのWEBページ" /></p>

<h3>便利コマンド利用するためにモジュールをインストール</h3>

<p>Webサーバを構築する上で、あまりにもまっさらなUbuntuだったため幾つか必要なものをインストールする必要がありました。<br/>
その紹介もおまけ程度に書いておきます。</p>

<h4>lessのインストール</h4>

<p>毎回<code>cat</code>コマンドで中身を見る必要性がないこともあると思います。<br/>
流石に<code>less</code>くらいはインストールしておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// lessのインストール</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">less</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// lessのバージョン確認</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">less</span> <span class="o">--</span><span class="nx">help</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lessコマンドで色をつける</h4>

<p>ついでに<code>less</code>コマンドで色を付けて見やすくする方法を書いておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// source-highlightのインストール</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">source</span><span class="o">-</span><span class="nx">highlight</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dockerコンテナ内の環境変数は<code>.dockerenv</code>ファイル内に書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// .dockerenvに下記を追加</span>
</span><span class='line'><span class="err">#</span><span class="nx">Source</span><span class="o">-</span><span class="nx">hilight</span> <span class="kd">with</span> <span class="nx">less</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">LESSOPEN</span><span class="o">=</span><span class="s2">&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">LESS</span><span class="o">=</span><span class="s1">&#39;-R&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果を反映させるために、下記コマンドを叩きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">source</span> <span class="o">~</span><span class="err">/.dockerenv</span>
</span></code></pre></td></tr></table></div></figure>


<h4>vi/vimのインストール</h4>

<p>ファイルを作成する際に必ず必要になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// vimのインストール</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">vim</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// vimのバージョン確認</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">vim</span> <span class="o">-</span><span class="nx">v</span>
</span><span class='line'><span class="c1">// viのバージョン確認</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">vi</span> <span class="o">-</span><span class="nx">v</span>
</span></code></pre></td></tr></table></div></figure>


<h4>curlのインストール</h4>

<p><code>curl</code>は試しにHTTPリクエストを投げてみたいことがあると思ったのでインストールしてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// curlのインストール</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">curl</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// curlのバージョン確認</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">-</span><span class="nx">V</span>
</span><span class='line'><span class="nx">curl</span> <span class="mf">7.47</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="nx">x86_64</span><span class="o">-</span><span class="nx">pc</span><span class="o">-</span><span class="nx">linux</span><span class="o">-</span><span class="nx">gnu</span><span class="p">)</span> <span class="nx">libcurl</span><span class="o">/</span><span class="mf">7.47</span><span class="p">.</span><span class="mi">0</span> <span class="nx">GnuTLS</span><span class="o">/</span><span class="mf">3.4</span><span class="p">.</span><span class="mi">10</span> <span class="nx">zlib</span><span class="o">/</span><span class="mf">1.2</span><span class="p">.</span><span class="mi">8</span> <span class="nx">libidn</span><span class="o">/</span><span class="mf">1.32</span> <span class="nx">librtmp</span><span class="o">/</span><span class="mf">2.3</span>
</span><span class='line'><span class="nx">Protocols</span><span class="o">:</span> <span class="nx">dict</span> <span class="nx">file</span> <span class="nx">ftp</span> <span class="nx">ftps</span> <span class="nx">gopher</span> <span class="nx">http</span> <span class="nx">https</span> <span class="nx">imap</span> <span class="nx">imaps</span> <span class="nx">ldap</span> <span class="nx">ldaps</span> <span class="nx">pop3</span> <span class="nx">pop3s</span> <span class="nx">rtmp</span> <span class="nx">rtsp</span> <span class="nx">smb</span> <span class="nx">smbs</span> <span class="nx">smtp</span> <span class="nx">smtps</span> <span class="nx">telnet</span> <span class="nx">tftp</span>
</span><span class='line'><span class="nx">Features</span><span class="o">:</span> <span class="nx">AsynchDNS</span> <span class="nx">IDN</span> <span class="nx">IPv6</span> <span class="nx">Largefile</span> <span class="nx">GSS</span><span class="o">-</span><span class="nx">API</span> <span class="nx">Kerberos</span> <span class="nx">SPNEGO</span> <span class="nx">NTLM</span> <span class="nx">NTLM_WB</span> <span class="nx">SSL</span> <span class="nx">libz</span> <span class="nx">TLS</span><span class="o">-</span><span class="nx">SRP</span> <span class="nx">UnixSockets</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて一先ず本記事の目的は達成できました。<br/>
が、Apacheのあまりにも簡単な基礎部分しか見ていません。<br/>
引き続き、最低限の設定を見ていきたいと思っています。</p>

<p>と言ったところで本日はここまで。</p>

<h3>参考</h3>

<p>以下、ページを参考にさせて頂きました。</p>

<ul>
<li><a href="http://www.nemotos.net/?p=1100">Ubuntuでlessを使って構文をカラー表示する方法</a></li>
<li><a href="http://qiita.com/maemori/items/e7318b088b9e4bf22310">docker-machineコマンド</a></li>
<li><a href="https://docs.docker.com/kitematic/userguide/">Kitematic user guide</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Macをインストールしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/"/>
    <updated>2017-02-13T00:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は <strong>Docker for Mac</strong> についてメモ程度に学んだことを書き残しておきたいと思います。<br/>
<code>Docker for Mac</code>とはMacアプリとしてインストールできるDockerです。<br/>
今までは、MacでDockerを利用するために<code>Docker Toolbox</code>と<code>Virtual Box</code>をインストールする必要がありましたが、<code>Docker for Mac</code>の登場により、いろいろとやってくれそうな感があります。<br/>
(筆者もDocker自体にそんなに詳しいわけではないので、1つずつ見ていきたいと思います。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Docker for Macのインストール</h3>

<p>簡単かと思いきや、なぜか詰まることもあるので書きます。<br/>
インストールは<a href="https://docs.docker.com/docker-for-mac/">Docker公式ページ</a>から可能です。<br/>
公式ページを見ると、 <strong>Download Docker for Mac</strong> という文字が見つかります。<br/>
<code>Stable channel</code>と<code>Beta channel</code>の2つがあるのですが、筆者は最終的に<code>Beta channel</code>をインストールしました。<br/>
なぜなら、<code>Stable channel</code>では<code>docker run hello-world</code>が実行エラーになったためです&hellip;</p>

<p><img src="http://grandbig.github.io/images/docker_1.png" alt="Docker for Mac Betaのダウンロード" /></p>

<p>インストールが完了すると、macのツールバーにDockerのマークが出現します。</p>

<p><img src="http://grandbig.github.io/images/docker_2.png" alt="ツールバーにDockerマーク" /></p>

<p>Dockerが正しくインストールされたので下記コマンドでバージョンを確認してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="o">--</span><span class="nx">version</span>
</span><span class='line'><span class="nx">Docker</span> <span class="nx">version</span> <span class="mf">1.13</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="nx">build</span> <span class="mi">092</span><span class="nx">cba3</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span><span class="o">-</span><span class="nx">compose</span> <span class="o">--</span><span class="nx">version</span>
</span><span class='line'><span class="nx">docker</span><span class="o">-</span><span class="nx">compose</span> <span class="nx">version</span> <span class="mf">1.11</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="nx">build</span> <span class="mi">7</span><span class="nx">c5d5e4</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span><span class="o">-</span><span class="nx">machine</span> <span class="o">--</span><span class="nx">version</span>
</span><span class='line'><span class="nx">docker</span><span class="o">-</span><span class="nx">machine</span> <span class="nx">version</span> <span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="nx">build</span> <span class="mi">15</span><span class="nx">fd4c7</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、Dockerが期待通りに動くことを確認するために下記コマンドを叩いてみましょう。<br/>
まずはDockerのバージョン確認です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">version</span>
</span><span class='line'><span class="nx">Client</span><span class="o">:</span>
</span><span class='line'> <span class="nx">Version</span><span class="o">:</span>      <span class="mf">1.13</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'> <span class="nx">API</span> <span class="nx">version</span><span class="o">:</span>  <span class="mf">1.26</span>
</span><span class='line'> <span class="nx">Go</span> <span class="nx">version</span><span class="o">:</span>   <span class="nx">go1</span><span class="p">.</span><span class="mf">7.5</span>
</span><span class='line'> <span class="nx">Git</span> <span class="nx">commit</span><span class="o">:</span>   <span class="mi">092</span><span class="nx">cba3</span>
</span><span class='line'> <span class="nx">Built</span><span class="o">:</span>        <span class="nx">Wed</span> <span class="nx">Feb</span>  <span class="mi">8</span> <span class="mi">08</span><span class="o">:</span><span class="mi">47</span><span class="o">:</span><span class="mi">51</span> <span class="mi">2017</span>
</span><span class='line'> <span class="nx">OS</span><span class="o">/</span><span class="nx">Arch</span><span class="o">:</span>      <span class="nx">darwin</span><span class="o">/</span><span class="nx">amd64</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Server</span><span class="o">:</span>
</span><span class='line'> <span class="nx">Version</span><span class="o">:</span>      <span class="mf">1.13</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'> <span class="nx">API</span> <span class="nx">version</span><span class="o">:</span>  <span class="mf">1.26</span> <span class="p">(</span><span class="nx">minimum</span> <span class="nx">version</span> <span class="mf">1.12</span><span class="p">)</span>
</span><span class='line'> <span class="nx">Go</span> <span class="nx">version</span><span class="o">:</span>   <span class="nx">go1</span><span class="p">.</span><span class="mf">7.5</span>
</span><span class='line'> <span class="nx">Git</span> <span class="nx">commit</span><span class="o">:</span>   <span class="mi">092</span><span class="nx">cba3</span>
</span><span class='line'> <span class="nx">Built</span><span class="o">:</span>        <span class="nx">Wed</span> <span class="nx">Feb</span>  <span class="mi">8</span> <span class="mi">08</span><span class="o">:</span><span class="mi">47</span><span class="o">:</span><span class="mi">51</span> <span class="mi">2017</span>
</span><span class='line'> <span class="nx">OS</span><span class="o">/</span><span class="nx">Arch</span><span class="o">:</span>      <span class="nx">linux</span><span class="o">/</span><span class="nx">amd64</span>
</span><span class='line'> <span class="nx">Experimental</span><span class="o">:</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Client</code>と<code>Server</code>の両方のバージョンが確認できるようです。<br/>
(中身があまり変わらないように見えるけど&hellip;)</p>

<p>続いて、ローカルに存在するDockerコンテナの確認です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">ps</span>
</span><span class='line'><span class="nx">CONTAINER</span> <span class="nx">ID</span>        <span class="nx">IMAGE</span>               <span class="nx">COMMAND</span>             <span class="nx">CREATED</span>             <span class="nx">STATUS</span>              <span class="nx">PORTS</span>               <span class="nx">NAMES</span>
</span></code></pre></td></tr></table></div></figure>


<p>何もないと当然ですが、上記のように何も表示されません。<br/>
最も初歩であろう<code>hello-world</code>コマンドです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">run</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">Unable</span> <span class="nx">to</span> <span class="nx">find</span> <span class="nx">image</span> <span class="s1">&#39;hello-world:latest&#39;</span> <span class="nx">locally</span>
</span><span class='line'><span class="nx">latest</span><span class="o">:</span> <span class="nx">Pulling</span> <span class="nx">from</span> <span class="nx">library</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="mi">78445</span><span class="nx">dd45222</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="nx">Digest</span><span class="o">:</span> <span class="nx">sha256</span><span class="o">:</span><span class="nx">c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7</span>
</span><span class='line'><span class="nx">Status</span><span class="o">:</span> <span class="nx">Downloaded</span> <span class="nx">newer</span> <span class="nx">image</span> <span class="k">for</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="o">:</span><span class="nx">latest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">Docker</span><span class="o">!</span>
</span><span class='line'><span class="nx">This</span> <span class="nx">message</span> <span class="nx">shows</span> <span class="nx">that</span> <span class="nx">your</span> <span class="nx">installation</span> <span class="nx">appears</span> <span class="nx">to</span> <span class="nx">be</span> <span class="nx">working</span> <span class="nx">correctly</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">To</span> <span class="nx">generate</span> <span class="k">this</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">Docker</span> <span class="nx">took</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">steps</span><span class="o">:</span>
</span><span class='line'> <span class="mi">1</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">Docker</span> <span class="nx">client</span> <span class="nx">contacted</span> <span class="nx">the</span> <span class="nx">Docker</span> <span class="nx">daemon</span><span class="p">.</span>
</span><span class='line'> <span class="mi">2</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">Docker</span> <span class="nx">daemon</span> <span class="nx">pulled</span> <span class="nx">the</span> <span class="s2">&quot;hello-world&quot;</span> <span class="nx">image</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Docker</span> <span class="nx">Hub</span><span class="p">.</span>
</span><span class='line'> <span class="mi">3</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">Docker</span> <span class="nx">daemon</span> <span class="nx">created</span> <span class="nx">a</span> <span class="k">new</span> <span class="nx">container</span> <span class="nx">from</span> <span class="nx">that</span> <span class="nx">image</span> <span class="nx">which</span> <span class="nx">runs</span> <span class="nx">the</span>
</span><span class='line'>    <span class="nx">executable</span> <span class="nx">that</span> <span class="nx">produces</span> <span class="nx">the</span> <span class="nx">output</span> <span class="nx">you</span> <span class="nx">are</span> <span class="nx">currently</span> <span class="nx">reading</span><span class="p">.</span>
</span><span class='line'> <span class="mi">4</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">Docker</span> <span class="nx">daemon</span> <span class="nx">streamed</span> <span class="nx">that</span> <span class="nx">output</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">Docker</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">which</span> <span class="nx">sent</span> <span class="nx">it</span>
</span><span class='line'>    <span class="nx">to</span> <span class="nx">your</span> <span class="nx">terminal</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">To</span> <span class="k">try</span> <span class="nx">something</span> <span class="nx">more</span> <span class="nx">ambitious</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">run</span> <span class="nx">an</span> <span class="nx">Ubuntu</span> <span class="nx">container</span> <span class="kd">with</span><span class="o">:</span>
</span><span class='line'> <span class="nx">$</span> <span class="nx">docker</span> <span class="nx">run</span> <span class="o">-</span><span class="nx">it</span> <span class="nx">ubuntu</span> <span class="nx">bash</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Share</span> <span class="nx">images</span><span class="p">,</span> <span class="nx">automate</span> <span class="nx">workflows</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">more</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">free</span> <span class="nx">Docker</span> <span class="nx">ID</span><span class="o">:</span>
</span><span class='line'> <span class="nx">https</span><span class="o">:</span><span class="c1">//cloud.docker.com/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">For</span> <span class="nx">more</span> <span class="nx">examples</span> <span class="nx">and</span> <span class="nx">ideas</span><span class="p">,</span> <span class="nx">visit</span><span class="o">:</span>
</span><span class='line'> <span class="nx">https</span><span class="o">:</span><span class="c1">//docs.docker.com/engine/userguide/</span>
</span></code></pre></td></tr></table></div></figure>


<p>ローカルに存在しないとダウンロードを始めます。<br/>
冒頭に述べた<code>Stable channel</code>では、ここで全くダウンロードができませんでした。<br/>
何はともあれ、これで <strong>Docker for Mac</strong> のインストール完了です。</p>

<h3>Docker for Macを使ってUbuntuをインストールしてみよう</h3>

<p>先程インストールした<code>hello-world</code>の結果の中に<code>To try something more ambitious, you can run an Ubuntu container with:</code>とありました。<br/>
興味本位ですが、コマンド叩いてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">run</span> <span class="o">-</span><span class="nx">it</span> <span class="nx">ubuntu</span> <span class="nx">bash</span>
</span><span class='line'><span class="nx">Unable</span> <span class="nx">to</span> <span class="nx">find</span> <span class="nx">image</span> <span class="s1">&#39;ubuntu:latest&#39;</span> <span class="nx">locally</span>
</span><span class='line'><span class="nx">latest</span><span class="o">:</span> <span class="nx">Pulling</span> <span class="nx">from</span> <span class="nx">library</span><span class="o">/</span><span class="nx">ubuntu</span>
</span><span class='line'><span class="mi">8</span><span class="nx">aec416115fd</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="mi">695</span><span class="nx">f074e24e3</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="mi">946</span><span class="nx">d6c48c2a7</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="nx">bc7277e579f0</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="mi">2508</span><span class="nx">cbcde94b</span><span class="o">:</span> <span class="nx">Pull</span> <span class="nx">complete</span>
</span><span class='line'><span class="nx">Digest</span><span class="o">:</span> <span class="nx">sha256</span><span class="o">:</span><span class="mi">71</span><span class="nx">cd81252a3563a03ad8daee81047b62ab5d892ebbfbf71cf53415f29c130950</span>
</span><span class='line'><span class="nx">Status</span><span class="o">:</span> <span class="nx">Downloaded</span> <span class="nx">newer</span> <span class="nx">image</span> <span class="k">for</span> <span class="nx">ubuntu</span><span class="o">:</span><span class="nx">latest</span>
</span><span class='line'><span class="nx">root</span><span class="err">@</span><span class="mi">3</span><span class="nx">e95790a60cb</span><span class="o">:</span><span class="err">/#</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>Ubuntu</code>がインストールできたようです。<br/>
しかも<code>Ubuntu</code>の中に入れてますね！</p>

<p>本当に<code>Ubuntu</code>インストールできたか確かめるためにもコマンドを叩いてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">root</span><span class="err">@</span><span class="mi">3</span><span class="nx">e95790a60cb</span><span class="o">:</span><span class="err">/# cat /etc/lsb-release</span>
</span><span class='line'><span class="nx">DISTRIB_ID</span><span class="o">=</span><span class="nx">Ubuntu</span>
</span><span class='line'><span class="nx">DISTRIB_RELEASE</span><span class="o">=</span><span class="mf">16.04</span>
</span><span class='line'><span class="nx">DISTRIB_CODENAME</span><span class="o">=</span><span class="nx">xenial</span>
</span><span class='line'><span class="nx">DISTRIB_DESCRIPTION</span><span class="o">=</span><span class="s2">&quot;Ubuntu 16.04.1 LTS&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">root</span><span class="err">@</span><span class="mi">3</span><span class="nx">e95790a60cb</span><span class="o">:</span><span class="err">/# arch</span>
</span><span class='line'><span class="nx">x86_64</span>
</span><span class='line'>
</span><span class='line'><span class="nx">root</span><span class="err">@</span><span class="mi">3</span><span class="nx">e95790a60cb</span><span class="o">:</span><span class="err">/# uname -a</span>
</span><span class='line'><span class="nx">Linux</span> <span class="mi">3</span><span class="nx">e95790a60cb</span> <span class="mf">4.9</span><span class="p">.</span><span class="mi">8</span><span class="o">-</span><span class="nx">moby</span> <span class="err">#</span><span class="mi">1</span> <span class="nx">SMP</span> <span class="nx">Wed</span> <span class="nx">Feb</span> <span class="mi">8</span> <span class="mi">09</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">13</span> <span class="nx">UTC</span> <span class="mi">2017</span> <span class="nx">x86_64</span> <span class="nx">x86_64</span> <span class="nx">x86_64</span> <span class="nx">GNU</span><span class="o">/</span><span class="nx">Linux</span>
</span></code></pre></td></tr></table></div></figure>


<p>バッチリですね！！<br/>
(正直な話、<code>uname -a</code>とか数年ぶりに叩いた気がして懐かしい&hellip;笑)</p>

<p>これで後はもう様々な便利なものをインストールして楽しめそうですね。</p>

<h3>Kitematicの紹介</h3>

<p>メニューバーのDockerマークをクリックすると、Docker for Macのメニュー項目が表示されます。<br/>
その中に<code>Kitematic</code>という聞きなれないものがあると思います。<br/>
こちらをインストールするとターミナルからコマンドを叩かずとも、GUIからクリック操作で様々なことが可能になります。</p>

<p><img src="http://grandbig.github.io/images/docker_3.png" alt="Dockerのメニュー" /></p>

<p>起動してログインすると(初めはアカウントがないと思うので作成しましょう。)、下記のような画面が表示されます。</p>

<p><img src="http://grandbig.github.io/images/docker_4.png" alt="Kitematic" /></p>

<p>最早、見るだけで心躍りますよね！？<br/>
様々なものをインストールして楽しめそうな気しかしません！</p>

<p>因みに、下記のようにコンテナの起動などが可能です。</p>

<p><img src="http://grandbig.github.io/images/docker_5.png" alt="KitematicでDockerコンテナ起動" /></p>

<h3>まとめ</h3>

<p>さて、今回は珍しく基盤よりなDockerで遊んでみました。<br/>
この付近の知識はあって困ることはないですし、Dockerかなり一般的になってきているので引き続きブログの題材として取り上げていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notificationとメインスレッド/サブスレッド]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/12/notification-and-thread/"/>
    <updated>2017-02-12T17:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/12/notification-and-thread</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日は久々にiOS関連の話を書きたいと思います。<br/>
正直なところSwiftを触って思ったのですが、今やXcodeではSwift3が標準装備されているため書き方が変わっており、業務で触らないまでも遅れを取らないように勉強しなきゃな&hellip;なんて感じてしまいました。</p>

<p>本日のお題は<br/>
『<code>Notification</code>はメインスレッド/サブスレッドのどちらで実行されるのか』<br/>
という話です。</p>

<p>筆者の理解では、普通に使う限りメインスレッドだと思っていたのですが、「使い方に寄るのでは？」なんて話題が上がったこともあって、調べてみたくなりました。<br/>
その調べ方と調査結果を書いていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Notificationとは</h3>

<p>まずは、<code>Notification</code>とは何かという話から始めましょう。<br/>
その名の通り、アプリ内で通知を行う仕組みを実装するために利用します。<br/>
少し前までは<code>NSNotification</code>という名前でしたので、こちらの名前の方がしっくりくるiOSエンジニアの方々は多いのではないでしょうか。</p>

<p>使い方は非常に簡単です。</p>

<p>１．監視対象のメソッドを登録する</p>

<p><img src="http://grandbig.github.io/images/notification_1.png" alt="監視対象のメソッドを登録" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 登録時にはaddObserverメソッドを利用する</span>
</span><span class='line'><span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">selector:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">doSomething</span><span class="p">),</span> <span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>２．監視対象メソッドの呼び出しを要求する</p>

<p><img src="http://grandbig.github.io/images/notification_2.png" alt="監視対象メソッドの呼び出し要求" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 呼び出し要求時にはpostメソッドを利用する</span>
</span><span class='line'><span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>３．監視対象メソッドを実行する</p>

<p><img src="http://grandbig.github.io/images/notification_3.png" alt="監視対象メソッドを実行" /></p>

<h3>Notificationとメインスレッド/サブスレッドの調査</h3>

<p>さて、本題に入ります。<br/>
<code>Notification</code>はメインスレッド/サブスレッドどちらで実行されるのでしょうか。</p>

<h4>普通に呼び出す場合</h4>

<p>まずは特異なことをせず、普通に実行してみます。<br/>
要件としては下記になります。</p>

<ul>
<li>アプリ起動時に<code>doSomething</code>メソッドを<code>NotificationCenter</code>に登録する</li>
<li>ボタンタップ時に<code>doSomething</code>メソッドの呼び出しを要求する</li>
<li><code>doSomething</code>メソッド内でメインスレッド/サブスレッドの判定処理を実行する</li>
</ul>


<p>ソースコードは下記となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">selector:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">doSomething</span><span class="p">),</span> <span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;このメソッドは\(Thread.isMainThread)で動いています。(false: サブスレッド, true: メインスレッド)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">checkThread</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は「呼び出し先の処理実行は <strong>メインスレッド</strong> 」となりました。</p>

<h4>GCDを利用して、サブスレッド内でメソッドを呼び出す</h4>

<p>次はサブスレッドで監視対象メソッドの呼び出し要求を実施します。<br/>
ソースコードは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">selector:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">doSomething</span><span class="p">),</span> <span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;このメソッドは\(Thread.isMainThread)で動いています。(0: サブスレッド, 1: メインスレッド)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">checkThread</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">global</span><span class="p">().</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は「呼び出し先の処理実行は <strong>サブスレッド</strong> 」となりました。</p>

<h4>GCDを利用して、メインスレッド内でメソッドを呼び出す</h4>

<p>今度はGCDを利用したメインスレッド内で監視対象メソッドの呼び出し要求を実施してみます。<br/>
ソースコードは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span><span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">selector:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">doSomething</span><span class="p">),</span> <span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;このメソッドは\(Thread.isMainThread)で動いています。(0: サブスレッド, 1: メインスレッド)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">checkThread</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">global</span><span class="p">().</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="nl">name:</span> <span class="n">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;SomeNotification&quot;</span><span class="p">),</span> <span class="nl">object:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は「呼び出し先の処理実行は <strong>メインスレッド</strong> 」となりました。</p>

<h3>まとめ</h3>

<p>調査結果をまとめると次の通りです。</p>

<p>「要求 <strong>元</strong> と <strong>同じスレッド</strong> で監視対象メソッドは実行されます。」<br/>
※登録時(<code>addObserver</code>)のスレッドは無関係です。</p>

<p>さて如何でしたでしょうか？<br/>
普段考えずに利用している様々な処理が実際にはどのスレッドで実行されるのか、どういった書き方をするとどのスレッドで実行されうるのか調べてみることも面白いですね。<br/>
ふとしたときにまた調べてみようと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReactアニメーション]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/04/react-animation-1/"/>
    <updated>2017-02-04T21:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/04/react-animation-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>少し期間が空いてしまいましたが、ブログを更新します。<br/>
今回は理解できていれば簡単なのに、なかなか実装できなかったReactアニメーションについてです。<br/>
これが何でかすご〜く苦労したんですね&hellip;<br/>
筆者自身が詰まったところから紐解く形で解説を載せていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3>Counterサンプルにアニメーションを追加しよう！</h3>

<p>まずはネタとして<a href="http://grandbig.github.io/blog/2017/01/02/redux-base-4/">前回</a>まで基礎を学ぶのに利用した<code>Counter</code>サンプルを利用します。<br/>
元々の<code>Counter</code>サンプルとは以下のものになります。</p>

<p><img src="http://grandbig.github.io/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>これに次の機能を1つ追加します。</p>

<ul>
<li>「Show Toast」ボタンを選択するとToastが表示される</li>
<li>「Show Toast」ボタンを連打すると追加でToastが表示される</li>
</ul>


<p>「<strong>Toast</strong> って何だろう&hellip;!?」と思う人もいるかもしれませんので、念のため説明します。<br/>
簡単に言うと、「ユーザにポップアップのような形で知らせるもの」です。<br/>
Androidユーザなら必ず見たことがあるはずです。(<a href="https://developer.android.com/guide/topics/ui/notifiers/toasts.html">Android Developers Toasts</a>)</p>

<p>今回目指す完成図は下記になります。</p>

<p><img src="http://grandbig.github.io/images/redux_base_2.png" alt="機能を追加したCounter Example画面" /></p>

<h4>フォルダ構成</h4>

<p>まずは例によってフォルダ構成を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">counter</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">src</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">actions</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">reducers</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">components</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">├──</span> <span class="nx">Counter</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">Toast</span>
</span><span class='line'>     <span class="err">│</span>           <span class="err">├──</span> <span class="nx">Toast</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">│</span>           <span class="err">└──</span> <span class="nx">Toast</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'>     <span class="err">└──</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Toast表示のActionを追加</h5>

<p>さて、まずはToastを表示するための<code>Action</code>を追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// actions/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createAction</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-actions&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">SHOW_TOAST</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;SHOW_TOAST&#39;</span><span class="p">);</span>  <span class="c1">// 追加</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">increment</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">INCREMENT</span><span class="p">);</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">decrement</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">DECREMENT</span><span class="p">);</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">showToast</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">SHOW_TOAST</span><span class="p">);</span>  <span class="c1">// 追加</span>
</span></code></pre></td></tr></table></div></figure>


<p>おわかりの通り、<code>showToast</code>がそのActionに該当します。</p>

<h4>Toast表示Action発行後のReducer処理</h4>

<p>続いて、<code>Reducer</code>の処理を書いていきます。<br/>
機能要件にあった通り、ボタンを連打することで複数のToastを表示します。<br/>
後で詳細を説明しますが、個々のToastを区別する必要があるため、固有値を付与します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// reducers/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">handleActions</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-actions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span>    <span class="c1">// 追加 (1)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">handleActions</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">INCREMENT</span><span class="o">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>   <span class="c1">// 追加 (2)</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">DECREMENT</span><span class="o">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>   <span class="c1">// 追加 (2)</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// 以下が追加 (3)</span>
</span><span class='line'>  <span class="nx">SHOW_TOAST</span><span class="o">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">num</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="nx">initialState</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれ説明します。</p>

<p>追加(1):<br/>
今回は簡単のため各Toastに与えるために固有値を<code>num</code>として定義し、初期値を0とします。<br/>
これをボタンタップ時にカウントアップして、その<code>num</code>を付与してToastを作成することで個々を区別することができます。</p>

<p>追加(2):<br/>
他のボタンをタップしたときに<code>state.num</code>がリセットされてしまわないように、<code>...state</code>を追加して、変化のない値も丸々返すようにしています。</p>

<p>追加(3):<br/>
Toast表示<code>Action</code>が<code>dispatch</code>された後に検知して、新たな<code>num</code>値を返却するために追加しました。</p>

<h4>Toast Componentの作成</h4>

<p>今回、最も重要な<code>Component</code>である<code>Toast Component</code>を作成していきましょう。<br/>
Reactで簡単にアニメーションを作成可能な<code>react-addons-css-transition-group</code>の<code>ReactCSSTransitionGroup</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./components/Toast/Toast.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactCSSTransitionGroup</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-css-transition-group&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;./Toast.css&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Toast</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">num</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">toast</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">num</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;toast&quot;</span><span class="o">&gt;</span><span class="nx">Get</span> <span class="nx">Wild</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;toast-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ReactCSSTransitionGroup</span>
</span><span class='line'>          <span class="nx">transitionName</span><span class="o">=</span><span class="s2">&quot;example&quot;</span>
</span><span class='line'>          <span class="nx">transitionEnterTimeout</span><span class="o">=</span><span class="p">{</span><span class="mi">1500</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">transitionLeaveTimeout</span><span class="o">=</span><span class="p">{</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">toast</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ReactCSSTransitionGroup&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Toast</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">num</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Toast</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ReactCSSTransitionGroup Component</code>の各パラメータは次の通りの意味です。</p>

<ul>
<li>transitionName: 基本となるアニメーション対象要素の名称</li>
<li>transitionEnterTimeout: 要素が追加された後のタイムアウト時間</li>
<li>transitionLeaveTimeout: 要素が消えた後のタイムアウト時間？</li>
</ul>


<p>CSSでもアニメーションを追加するので、<code>transitionEnterTimeout</code>や<code>transitionLeaveTimeout</code>が不要なんじゃないかと思ったりしたのですが、これらをつけないとエラーが出ます。</p>

<p><code>ReactCSSTransitionGroup</code>の子要素としてToast表示したいDOM要素を追加します。<br/>
この子要素に<code>key</code>パラメータとして<code>num</code>を渡しています。<br/>
これによってボタン連打で追加される各DOM要素が固有の要素であることを区別しています。<br/>
<code>key</code>の重要性については、<a href="http://qiita.com/koba04/items/a4d23245d246c53cd49d">React.jsの地味だけど重要なkeyについて</a>を見ることをオススメします。</p>

<p><code>key</code>に<code>num</code>を渡したいので、<code>Toast</code>の<code>propTypes</code>に<code>num: React.PropTypes.number.isRequired</code>と定義しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="o">./</span><span class="nt">components</span><span class="o">/</span><span class="nt">Toast</span><span class="o">/</span><span class="nt">Toast</span><span class="nc">.css</span>
</span><span class='line'><span class="nc">.toast-group</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.toast</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#f4df42</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">line-height</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.toast</span><span class="nd">:first-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.example-enter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">01</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.example-enter.example-enter-active</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">500</span><span class="n">ms</span> <span class="n">ease</span><span class="o">-</span><span class="n">in</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.example-leave</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.example-leave.example-leave-active</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">01</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">300</span><span class="n">ms</span> <span class="n">ease</span><span class="o">-</span><span class="n">in</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>アニメーションを実行するには<code>css</code>ファイルでスタイルをつけることも必要です。<br/>
それぞれ説明します。</p>

<ul>
<li><code>.toats-group</code><br/>
これは単にToast全体の表示位置を右上に固定したかったため追加したスタイルになります。</li>
<li><code>.toast</code><br/>
これはToastのデザインです。</li>
<li><code>.toast:first-child</code><br/>
Toast要素は必ず1つ残り続けてしまうため、1番目の要素は非表示としています。</li>
<li><code>.example-enter</code><br/>
Toastの表示し始めの透明度を設定しています。</li>
<li><code>.example-enter.example-enter-active</code><br/>
Toast表示アニメーションになります。</li>
<li><code>.example-leave</code><br/>
Toastの消え初めの透明度を設定しています。</li>
<li><code>.example-leave-active</code><br/>
Toastの非表示アニメーションになります。</li>
</ul>


<h4>Counter ComponentのボタンからToast表示までの流れ</h4>

<p><code>Toast Component</code>の作成が完了したので、これを<code>Counter Component</code>から呼び出すように実装していきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./components/Counter.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">PropTypes</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Toast</span> <span class="nx">from</span> <span class="s1">&#39;./Toast/Toast&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Counter</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">num</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span> <span class="c1">// 追加 (1)</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onShowToast</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span>  <span class="c1">// 追加 (1)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 省略...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 追加 (2)</span>
</span><span class='line'>  <span class="nx">showToast</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onShowToast</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 追加 (3)</span>
</span><span class='line'>  <span class="nx">renderToast</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Toast</span> <span class="nx">num</span><span class="o">=</span><span class="p">{</span><span class="nx">num</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 追加 (4)</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onIncrement</span><span class="p">,</span> <span class="nx">onDecrement</span><span class="p">,</span> <span class="nx">onShowToast</span><span class="p">,</span> <span class="nx">num</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nx">Clicked</span><span class="o">:</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span> <span class="nx">times</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onIncrement</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">+</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onDecrement</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">-</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementIfOdd</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Increment</span> <span class="k">if</span> <span class="nx">odd</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementAsync</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Increment</span> <span class="nx">async</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">{</span><span class="cm">/* 追加 (5) */</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showToast</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Show</span> <span class="nx">Toast</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderToast</span><span class="p">(</span><span class="nx">num</span><span class="p">)}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Counter</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つ1つ説明します。</p>

<p>追加 (1):<br/>
<code>num</code>は<code>Reducer</code>で変更された新しい<code>state</code>の<code>num</code>を受け付けるために<code>propTypes</code>に追加しました。<br/>
<code>onShowToast</code>はボタンクリック時に<code>Toast</code>表示アクションの実行を受け付けるために<code>propTypes</code>に追加しました。</p>

<p>追加 (2):<br/>
ボタンアクションで実行するための追加です。</p>

<p>追加 (3):<br/>
<code>Toast Component</code>の描画メソッドです。<br/>
1つ目の要素は非表示にCSSで設定しているので、初めから描画してしまって問題ありません。</p>

<p>追加 (4):<br/>
新たに<code>propTypes</code>として追加した<code>num</code>と<code>onShowToast</code>を利用するために書いています。</p>

<p>追加 (5):<br/>
ボタンクリック処理とToast描画処理を書いています。<br/>
Toastので位置はCSSで右上固定にしてあるので、DOM位置がどこになろうと問題ありません。</p>

<h4>Store周りの修正</h4>

<p>最後に<code>Store</code>周りの修正です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">bindActionCreators</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Provider</span><span class="p">,</span> <span class="nx">connect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s1">&#39;./components/Counter&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span><span class="p">,</span> <span class="nx">showToast</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./actions/index&#39;</span> <span class="c1">// 追加 (1)</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">counter</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rootEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapStateToPropsContainer</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">num</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span>    <span class="c1">// 追加 (2)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapDispatchToPropsContainer</span> <span class="p">(</span><span class="nx">dispatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">()),</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">()),</span>
</span><span class='line'>    <span class="nx">onShowToast</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">showToast</span><span class="p">())</span>    <span class="c1">// 追加 (3)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">AppContainer</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">mapStateToPropsContainer</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapDispatchToPropsContainer</span>
</span><span class='line'><span class="p">)(</span><span class="nx">Counter</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">AppContainer</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Provider&gt;,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでは<code>mapStateToPropsContainer</code>と<code>mapDispatchToPropsContainer</code>を実装しているので、<code>Reducer</code>で新たに作成された<code>state</code>を受け取ります。<br/>
それを適切に<code>Counter Component</code>に渡す必要があります。</p>

<p>追加 (1):<br/>
<code>Toast</code>表示アクションを<code>dispatch</code>に流し込む必要があるので、<code>showToast</code>を<code>action.js</code>から<code>import</code>しています。</p>

<p>追加 (2):<br/>
新たに生成された<code>state</code>の値を利用するために<code>mapStateToPropsContainer</code>に追記しています。</p>

<p>追加 (3):<br/>
<code>dispatch</code>に<code>Toast</code>表示アクションを流し込む設定を追記しています。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
上記実装をすることで連打によるToast表示ができるようになったはずです。<br/>
<code>ReactCSSTransitionGroup</code>周りを新たに学ぶ必要があったものの、基本的な<code>Redux</code>のデータフローを理解していればさほど難しくないことがわかったのではないでしょうか。<br/>
筆者は結局のところ、<code>Redux</code>のデータフロー周りで躓くことが多く、不必要に難しく感じてしまっていました。<br/>
アニメーションはWebサイト作りにおいて、なくてはならないものなので、これを機に<code>React</code>でのアニメーション作りの基礎を身に着けたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(4)]]></title>
    <link href="http://grandbig.github.io/blog/2017/01/02/redux-base-4/"/>
    <updated>2017-01-02T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/01/02/redux-base-4</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="http://grandbig.github.io/blog/2017/01/01/redux-base-3/">前回</a>で<code>connect()</code>を使ったReact&amp;ReduxでのWebサイトの実装について見ていきました。<br/>
今回は処理簡略化するためによく使われる<code>redux-actions</code>を利用した書き方について見ていきましょう。<br/>
これもまた基本が理解できていないとハマりポイントとなるため、知っておきたい内容の１つになります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Counterサンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter</strong> を見ていきましょう。<br/>
今回もわかりやすさのために同じサンプルを利用します。(<code>redux-actions</code>を利用した実装に改変しています。)<br/>
実装するWebサイトは下図の通りです。</p>

<p><img src="http://grandbig.github.io/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<h4>フォルダ構成</h4>

<p>まずは例によってフォルダ構成を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">counter</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">src</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">actions</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">reducers</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">components</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">Counter</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">└──</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h4>redux-actionsを利用したActionsの実装</h4>

<p>これまで<code>Actions</code>および<code>Create Actions</code>はシンプルに下記のように実装していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// actions/index.js</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">INCREMENT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">DECREMENT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを<code>redux-actions</code>を利用すると下記のように実装できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// actions/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createAction</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-actions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">increment</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">INCREMENT</span><span class="p">)</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">decrement</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">DECREMENT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは<code>createAction</code>メソッドを利用している点です。<br/>
このメソッドは「第一引数を指定すること」 = 「<code>type</code>プロパティを設定したオブジェクトを返却すること」になります。<br/>
つまり、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">increment</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">INCREMENT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">createActionでやっていることを素で書くと下記の通り</span>
</span><span class='line'><span class="cm">export const increment = () =&gt; {</span>
</span><span class='line'><span class="cm">  return { type: &#39;INCREMENT&#39; }</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>ということです。</p>

<h4>redux-actionsを利用したReducersの実装</h4>

<p>これまで<code>Reducers</code>の実装は下記のようにしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// reducers/index.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを<code>redux-actions</code>を利用すると下記のように実装できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// reducers/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">handleActions</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-actions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">handleActions</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">INCREMENT</span><span class="o">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">DECREMENT</span><span class="o">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="nx">initialState</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは<code>handleActions</code>メソッドを利用している点です。<br/>
<code>handleActions</code>は第一引数に各<code>Reducer</code>をマッピングするのに利用し、第二引数で<code>state</code>の初期値を設定します。<br/>
第二引数で設定する初期値を予め<code>const initialState = 0</code>とすることで、<code>(state = 0, action)</code>の代わりの役目を果たしています。</p>

<h3>まとめ</h3>

<p>今回はおまけ回として書いてみました。<br/>
やっと基本的なことが少しずつわかってきた段階なので、これからもっと学ばなければいけないことが多いと感じています。<br/>
<code>Redux</code>は他の言語でも特徴をまねたライブラリがわんさか出てきているので、ここで学んだことがWebに閉じた話ではなく、いろいろなところで活かせると信じています。<br/>
これからも機を見て、<code>Redux</code>について書いていければと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(3)]]></title>
    <link href="http://grandbig.github.io/blog/2017/01/01/redux-base-3/"/>
    <updated>2017-01-01T14:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/01/01/redux-base-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回の<a href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/">iOSエンジニアが苦しんだReduxの基礎(2)</a>で素のReactと素のReduxを組み合わせたExampleについて見ていきました。<br/>
今回は<code>connect()</code>を使ったReact&amp;ReduxによるWebサイトの実装について見ていきたいと思います。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Counterサンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter</strong> を見ていきましょう。<br/>
本来は素のReactと素のReduxを使ったExampleではあるのですが、今回の説明のために改変します。<br/>
実装するWebサイトは下図の通りです。</p>

<p><img src="http://grandbig.github.io/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>前回と異なるのはReactとReduxの連携に <strong>connect()</strong> を利用しているという点です。<br/>
では1つ1つ見ていきましょう。</p>

<h4>フォルダ構成</h4>

<p>まずはフォルダ構成を見ていきます。<br/>
(説明のために一部変更を加えています。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">counter</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">src</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">actions</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">reducers</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">components</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">Counter</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">└──</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h4>素の連携とconnect()による連携の比較</h4>

<p><code>Actions</code>, <code>Reducers</code>, <code>Components</code>に関しては、<a href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/">前回</a>と同じなので割愛します。<br/>
前回は、ReactとReduxの連携部分を下記のように書いていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s1">&#39;./components/Counter&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">counter</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./actions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rootEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()}</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())}</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())}</span>
</span><span class='line'>  <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はこの連携を<code>connect()</code>を利用して実装します。</p>

<p>まずは、必要なモジュールを追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="c1">// Providerとconnectを追加</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Provider</span><span class="p">,</span> <span class="nx">connect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s1">&#39;./components/Counter&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./actions/index&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">counter</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>connect()</code>で連携します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapStateToProps</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">state</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapDispatchToProps</span> <span class="p">(</span><span class="nx">dispatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">()),</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">AppContainer</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">mapStateToProps</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapDispatchToProps</span>
</span><span class='line'><span class="p">)(</span><span class="nx">Counter</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">AppContainer</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Provider&gt;,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つ1つ見ていきましょう。<br/>
<code>connect()</code>は4つの引数をセットできるのですが、中でも重要なのが次の2つです。</p>

<ol>
<li><code>mapStateToProps</code></li>
<li><code>mapDispatchToProps</code></li>
</ol>


<p>です。<br/>
全ては<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md">react-reduxのReadme</a>に書かれているのですが、ソースと合わせて見ていきます。<br/>
まずは、<code>mapStateToProps</code>からです。<br/>
Readmeには、</p>

<blockquote><p>If specified, the component will subscribe to Redux store updates. Any time it updates, mapStateToProps will be called. Its result must be a plain object*, and it will be merged into the component’s props. If you omit it, the component will not be subscribed to the Redux store.</p></blockquote>

<p>と書かれていますね。<br/>
これはソースで比較しても明らかです。<br/>
前回までは、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ために下記のようにしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// subscribeの第一引数にrenderメソッドを指定</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>State</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されていました。<br/>
今回は<code>connect()</code>を利用しているので<code>store.subscribe</code>が書かれていないことがわかると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapStateToProps</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">state</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// connectメソッドの第一引数は「stateを引数に持つメソッド」</span>
</span><span class='line'><span class="c1">// connectメソッドの第一引数にmapStateToPropsを設定</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">AppContainer</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">mapStateToProps</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapDispatchToProps</span>
</span><span class='line'><span class="p">)(</span><span class="nx">Counter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ですが、やっていることは同じで『Stateが変更されてStoreにそれが伝えられたときに <strong>mapStateToPropsは毎回実行</strong> されます。』
もし、<code>mapStateToProps</code>を<code>connect()</code>の第一引数に指定しなかった場合、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ことができません。</p>

<p>また、<code>return { value: state }</code>をすることで<code>Counter Component</code>の<code>propTypes</code>である<code>value</code>に値を渡しています。</p>

<p>続いて、<code>mapDispatchToProps</code>を見ていきます。<br/>
Readmeには、</p>

<blockquote><p>If an object is passed, each function inside it will be assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a dispatch call so they may be invoked directly, will be merged into the component’s props. If a function is passed, it will be given dispatch.</p></blockquote>

<p>と書かれていますね。<br/>
これは少々わかりづらいのですが、<code>Counter Component</code>がクリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment</code>や<code>decrement</code>で作成した<code>Actions</code>を渡せるように実装することを実現しています。<br/>
前回までは、『 <strong>StoreにStateの変更を知らせる</strong> 』ために下記のようにしていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()}</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())}</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())}</span>
</span><span class='line'>  <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように直接<code>Counter Component</code>に<code>onIncrement</code>および<code>onDecrement</code>を渡していました。<br/>
<code>connect()</code>を利用すると、第二引数の<code>mapDispatchToProps</code>の戻り値として<code>Action Creators</code>を設定することで実現できます。<br/>
これにより、<code>Counter Component</code>の<code>propTypes</code>である<code>onIncrement</code>と<code>onDecrement</code>に値を渡すことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapDispatchToProps</span> <span class="p">(</span><span class="nx">dispatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">()),</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// connectメソッドの第二引数は「dispatchを引数に持つメソッド」</span>
</span><span class='line'><span class="c1">// connectメソッドの第二引数にmapDispatchToPropsを設定</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">AppContainer</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">mapStateToProps</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapDispatchToProps</span>
</span><span class='line'><span class="p">)(</span><span class="nx">Counter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>これで<code>connect()</code>が何をしているのかが少しは見えてきました。<br/>
実行している処理内容がわかってくると、</p>

<ul>
<li><code>connect()</code>: ReactとReduxを<code>connect</code>(接続)する</li>
<li><code>mapStateToProps</code>: <code>State</code>を<code>Props</code>に<code>map</code>(マッピング)する</li>
<li><code>mapDispatchToProps</code>: <code>Dispatch</code>を<code>Props</code>に<code>map</code>(マッピング)する</li>
</ul>


<p>のように名称がそのものを表していたことが改めてわかります。<br/>
(理解促進してくれるような名称になっていますね。)</p>

<p>次回はさらに処理を簡略化して書くのに使われる<code>redux-actions</code>を利用した実装について見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/"/>
    <updated>2017-01-01T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/01/01/redux-base-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>早くも2017年になってしまいましたね。<br/>
本年もよろしくお願い致します。</p>

<p>今回は<a href="http://grandbig.github.io/blog/2016/12/31/redux-base-1/">iOSエンジニアが苦しんだReduxの基礎(1)</a>の続きを書いていきたいと思います。<br/>
前回はReduxのみを利用したWebサイトの実装について話をしましたが、今回はReactと組み合わせて行きたいと思います。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Counterサンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter</strong> を見ていきましょう。<br/>
実現するWebサイトは <strong>Counter Vanilla</strong> と同じで下図のようになります。</p>

<p><img src="http://grandbig.github.io/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>前回と異なるのはViewに <strong>React</strong> を利用しているという点です。<br/>
では1つ1つ見ていきましょう。</p>

<h4>フォルダ構成</h4>

<p>まずはフォルダ構成を見ていきます。<br/>
(説明のために一部変更を加えています。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">counter</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">src</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">actions</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">reducers</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">├──</span> <span class="nx">components</span>
</span><span class='line'>     <span class="err">│</span>     <span class="err">└──</span> <span class="nx">Counter</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">└──</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Actions</h4>

<p>今回<code>Actions</code>は<code>actions/index.js</code>にまとめています。<br/>
<code>Actions</code>と<code>Action Creators</code>について復習しておきます。</p>

<ul>
<li><code>Actions</code>

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>
</li>
<li><code>Action Creators</code>

<ul>
<li><code>Action</code>を作成するメソッド</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// actions/index.js</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">INCREMENT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">DECREMENT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Reducers</h4>

<p>今回<code>Reducers</code>は<code>reducers/index.js</code>にまとめています。<br/>
<code>Reducers</code>についても復習しておきます。</p>

<ul>
<li><code>Action</code>と<code>State</code>から新たな<code>State</code>を作成して返す</li>
<li>ポイントは<code>State</code>を更新するのではなく、 新しく作成した<code>State</code> を返すということ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// reducers/index.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// stateの初期値を0に設定</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Components</h4>

<p>今回は<code>React</code>を利用するので、描画部分を表現する<code>Components</code>を作成する必要があります。<br/>
<code>Components</code>には<code>Presentational Component</code>と<code>Container Component</code>の2種類が存在します。</p>

<ul>
<li><code>Presentational Component</code>

<ul>
<li>画面の描画を担当する<code>Component</code></li>
</ul>
</li>
<li><code>Container Component</code>

<ul>
<li><code>Presentational Component</code>にデータやコールバックを渡す<code>Component</code></li>
</ul>
</li>
</ul>


<p>本記事のExampleは簡単なため、<code>Presentational Component</code>のみ利用しています。<br/>
<code>Presentational Component</code>は<code>components/Counter.js</code>が該当します。<br/>
ソースコードは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// components/Counter.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">PropTypes</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Counter</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">incrementIfOdd</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// valueが奇数の場合のみonIncrementを実行</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onIncrement</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">incrementAsync</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1秒後にonIncrementを実行</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onIncrement</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 描画処理</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onIncrement</span><span class="p">,</span> <span class="nx">onDecrement</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nx">Clicked</span><span class="o">:</span> <span class="p">{</span><span class="nx">value</span><span class="p">}</span> <span class="nx">times</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onIncrement</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">+</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onDecrement</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">-</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementIfOdd</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Increment</span> <span class="k">if</span> <span class="nx">odd</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="s1">&#39; &#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementAsync</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Increment</span> <span class="nx">async</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Counter</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Counter Component</code>で最も重要なポイントは、<br/>
『描画には<code>value</code>, <code>onIncrement</code>, <code>onDecrement</code>の3つが必須』という点です。</p>

<h3>Store</h3>

<p>今回<code>Store</code>は<code>src/index.js</code>にまとめられています。<br/>
<code>Store</code>についても復習しておきましょう。</p>

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li><code>State</code>を更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることで<code>Store</code>に<code>State</code>の変更を知らせられる</li>
</ul>
</li>
<li><code>State</code>の状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることで<code>listener</code>は<code>getState</code>を通して<code>State</code>の状態を取得できる</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s1">&#39;./components/Counter&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">counter</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./actions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rootEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()}</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())}</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())}</span>
</span><span class='line'>  <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>少し詳しくポイントを見ていきましょう。<br/>
冒頭で必要なモジュールを読み込んでいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s1">&#39;./components/Counter&#39;</span>        <span class="c1">// Component</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">counter</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>                  <span class="c1">// Reducer</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./actions&#39;</span>  <span class="c1">// Action</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、下記のように<code>store</code>を作成しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// カウントアップ・ダウンのReducerを引数にStoreを生成</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、前回は<code>HTML</code>に全て構成を書いていましたが、今回は<code>React</code>を利用していますので、下記のように描画をしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// id=&quot;root&quot;のDOMを取得</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rootEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 描画メソッド</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="p">{</span><span class="cm">/* Counter Componentの呼び出し */</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()}</span>
</span><span class='line'>    <span class="nx">onIncrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">)}</span>
</span><span class='line'>    <span class="nx">onDecrement</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">)}</span>
</span><span class='line'>  <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rootEl</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 初期描画処理</span>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Counter Component</code>の3つの必須<code>propTypes</code>に下記を渡しています。</p>

<ul>
<li>value: <code>State</code>の値(<code>store.getState()</code>)</li>
<li>onIncrement: <code>Store</code>に<code>State</code>の増加を通知(<code>() =&gt; store.dispatch(increment)</code>)</li>
<li>onDecrement: <code>Store</code>に<code>State</code>の減少を通知(<code>() =&gt; store.dispatch(decrement)</code>)</li>
</ul>


<p>上記のようにすることで、<br/>
クリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment</code>および<code>decrement</code>で作成した<code>Actions</code>を渡せるようになりました。<br/>
これにより、『 <strong>StoreにStateの変更を知らせる</strong> 』ことができます。</p>

<p>その後、<code>render()</code>で描画処理を実行しています。</p>

<p>最後に、<code>listener</code>処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// subscribeの第一引数にrenderメソッドを指定</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>State</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されることになります。<br/>
こうすることで、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ことができます。</p>

<h3>まとめ</h3>

<p>さて、前回の素のReduxから、『ReactとReduxをそれぞれ素で利用する』ところまで進んできました。<br/>
ここまで割りとすんなり理解できたのであれば、<code>connect()</code>を利用したReact&amp;Reduxの実装の理解までもう少しだと思います。<br/>
Reduxの理解を促進する上で重要なのは、</p>

<ul>
<li>ユーザの操作結果を<code>Store</code>に伝えること</li>
<li><code>Store</code>の変更に応じて画面を再描画すること</li>
</ul>


<p>だと思っています。<br/>
ここまでの流れさえ理解できてしまえば、応用的な内容も躓かずに理解できるはずです。<br/>
さて次回はいよいよ<code>connect()</code>を利用したReact&amp;Reduxの実装について見ていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(1)]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/31/redux-base-1/"/>
    <updated>2016-12-31T01:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/31/redux-base-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今年も残すところ1日となりましたね。<br/>
筆者にとって2016年は新しいことだらけの1年となりました。<br/>
技術的にもこれまで触ってこなかったものに挑戦する機会を得ることができました。<br/>
その1つは本日のお題である <strong>Redux</strong> です。<br/>
実は現在進行系で理解に苦しんでいる途中なので、休暇中に理解を促進する意味も込めて記事を書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Reduxは難しい！？</h3>

<p>ここ最近、iOSエンジニアとして活動してきた筆者にとって <strong>なぜReduxが難しいと感じたのか</strong> について語りたいと思います。<br/>
結論から言うと、 <strong>ReactとReduxを組み合わせた場合の実装から入ったため</strong> 難しく感じたのではないかと思っています。<br/>
具体的には、ReactとReduxの公式ページや様々な紹介ページを読むと必ず出てくる <strong>connect()</strong> がかなり難しいと感じました。</p>

<p>プロジェクトに参画するタイミングによっては悠長に勉強をしている場合ではないと思いますが、<br/>
まずは素のReduxを理解することが最も近道だと実体験として感じました。</p>

<p>では、素のReduxはどうやって学べば良いのでしょうか？<br/>
Reduxで検索をしてもほとんどの場合、Reactと一緒に使われている記事しか出てこないと思います。<br/>
答えは簡単です！<br/>
(当たり前ではあるのですが、)公式のExampleを勉強すれば良いのです。</p>

<h3>Counter Vanilla サンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter Vanilla</strong> を見ていきましょう。<br/>
ソースコードは下記のようになっています。<br/>
(少々、Reduxの原則と照らし合わせられるようにソースコードを改変しています。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c">&lt;!--</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Redux</span> <span class="nx">basic</span> <span class="nx">example</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;https://unpkg.com/redux@latest/dist/redux.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nx">Clicked</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;value&quot;</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&lt;</span><span class="err">/span&gt; times</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;increment&quot;</span><span class="o">&gt;+&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;decrement&quot;</span><span class="o">&gt;-&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;incrementIfOdd&quot;</span><span class="o">&gt;</span><span class="nx">Increment</span> <span class="k">if</span> <span class="nx">odd</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;incrementAsync&quot;</span><span class="o">&gt;</span><span class="nx">Increment</span> <span class="nx">async</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span> <span class="p">};</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">INCREMENT</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">DECREMENT</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">counter</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">state</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>          <span class="k">case</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">state</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">Redux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">valueEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">valueEl</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">render</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;decrement&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;incrementIfOdd&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;incrementAsync&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())</span>
</span><span class='line'>          <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ブラウザに表示される画面は下記のようになります。<br/>
<img src="http://grandbig.github.io/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>これだけを見せられても実装内容がよくわからない(かもしれない)ですよね？<br/>
そこで1つ1つReduxの原則と照らし合わせつつ見ていきましょう。</p>

<h4>Actions</h4>

<p><code>Actions</code>とは</p>

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Action Creators</h4>

<p><code>Action Creators</code>とは</p>

<ul>
<li><code>Action</code>を作成するメソッド</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">INCREMENT</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">DECREMENT</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Reducers</h4>

<p><code>Reducers</code>とは</p>

<ul>
<li><code>Action</code>と<code>State</code>から新たな<code>State</code>を作成して返す</li>
<li>ポイントは<code>State</code>を更新するのではなく、 新しく作成した<code>State</code> を返すということ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。<br/>
※Counter Exampleのため、<code>state</code>は <strong>カウント数</strong> を表します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">counter</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">state</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 初期値は0として返却する</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Store</h4>

<p><code>Store</code>とは</p>

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li><code>State</code>を更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることで<code>Store</code>に<code>State</code>の変更を知らせられる</li>
</ul>
</li>
<li><code>State</code>の状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることで<code>listener</code>は<code>getState</code>を通して<code>State</code>の状態を取得できる</li>
</ul>
</li>
</ul>


<p>です。<br/>
Exampleでは下記のように<code>store</code>を作成しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Storeを作成するためのcreateStoreメソッドの第一引数にReducerを渡す</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">Redux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">(</span><span class="nx">counter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はCounter Exampleであるため、</p>

<ul>
<li>「+」ボタンを選択したら「+1」された結果が表示される</li>
<li>「-」ボタンを選択したら「-1」された結果が表示される</li>
</ul>


<p>ようになっています。<br/>
よって、「+ / -」ボタンをクリックしたタイミングで</p>

<ul>
<li>Storeに<code>state</code>の変更を知らせる</li>
<li><code>state</code>の変更を結果として描画に反映させる</li>
</ul>


<p>必要があります。<br/>
これはStore項目の冒頭で書いた<code>dispatch</code>と<code>listener</code>を利用することで達成できます。</p>

<p>まずは<code>dispatch</code>から見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 「+」ボタンを選択した場合</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 「-」ボタンを選択した場合</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;decrement&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のようにクリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment()</code>および<code>decrement()</code>で作成した<code>Actions</code>を渡しています。<br/>
こうすることで、『 <strong>Storeにstateの変更を知らせる</strong> 』ことができます。</p>

<p>次に<code>listener</code>から見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Click数を示すDOMの取得</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">valueEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 最新のstateの状態をClick数に反映するメソッド</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">valueEl</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 初期状態を表示するために実行</span>
</span><span class='line'><span class="nx">render</span><span class="p">()</span>
</span><span class='line'><span class="c1">// subscribeの第一引数にrenderメソッドを指定</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>state</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されることになります。<br/>
こうすることで、『 <strong>stateの変更結果として描画に反映させる</strong> 』ことができます。<br/>
<code>subscribe</code>は<code>state</code>の状態を監視する役割を持っていることがわかると思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はReduxの本質を理解するために、あえてReactを利用するExampleは選択しませんでした。<br/>
「React&amp;Reduxが全然わからん！！」という方はゆっくりと時間をとってReduxからチャレンジしてみることをオススメします。<br/>
次回はReactとの組み合わせを見ていきたいと思います。</p>

<p>参考:</p>

<ul>
<li><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a></li>
<li><a href="http://grandbig.github.io/blog/2016/12/06/reswift-2/">ReSwiftを勉強してみよう(2)</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職面接で聞かれた質問から求めている人材を考えてみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/22/mycareer-2/"/>
    <updated>2016-12-22T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/22/mycareer-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="http://qiita.com/advent-calendar/2016/job">転職 Advent Calendar 2016</a> 21日目の記事です。<br/>
枠が1つ余っているようなので、年の瀬も近いことですし、他に思い出せることがないか今年の転職を振り返っていました。<br/>
少しでも有益な情報を書こうという想いの元、表題の件について書いていきたいと思います。</p>

<p><a href="http://grandbig.github.io/blog/2016/12/11/mycareer-1/">転職 Advent Calendar 2016: 人生初転職を振り返る</a>を先に読んで頂けると話に入りやすいかもしれません。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>自己紹介</h3>

<p>改めて自己紹介です。</p>

<ul>
<li>社会人6年目</li>
<li>30歳(転職活動時は29歳)</li>
<li>独身</li>
<li>iOSエンジニア(+雑多に技術に勤しむ)</li>
</ul>


<p>どうぞよろしくお願いします。</p>

<h3>5W1Hで簡単に振り返る転職活動</h3>

<ul>
<li>Who: 私は</li>
<li>When: 2015年10〜12月に</li>
<li>Where: 東京都内で</li>
<li>How: 転職エージェントを利用して</li>
<li>Why: 内製エンジニアとして高みを目指して働きたいので</li>
</ul>


<p>転職活動をしていました。</p>

<h3>転職活動で聞かれたこと</h3>

<p>さて本題です。<br/>
私は今回が初転職だったため、面接と言えば『新卒入社を目指した時』と『バイト先を探していた時』くらいの経験しかありませんでした。<br/>
そのため、当初はどんなことを聞かれるのか想像もできませんでした。</p>

<h4>共通して聞かれたこと</h4>

<p>私は6社ほど面接を受けたのですが、どこでも必ず下記のことを聞かれました。</p>

<ul>
<li>自己紹介

<ul>
<li>これまでの経歴を説明する</li>
<li>どんなプロジェクトに属し、どんな立場で、何をしてきたのか</li>
<li>これまで経験したプロジェクトの規模</li>
</ul>
</li>
<li>なぜ転職活動をしているのか</li>
<li>自身の今後のキャリアについて</li>
</ul>


<p>「新卒のときにも聞かれたじゃん！」と思われるかもしれませんが、転職活動の方が実際に職務経歴があるため、より具体的に深掘って質問をされます。<br/>
ここは次の観点で見られているのではないかなと思っています。</p>

<ul>
<li>質問への回答

<ul>
<li>要領を得た答えになっているか</li>
<li>聞きたかったことが答えられているか</li>
</ul>
</li>
<li>論理的思考能力

<ul>
<li>わかりやすくポイントを絞って説明できているか</li>
</ul>
</li>
<li>人となりの確認

<ul>
<li>求める人物像にマッチしているか</li>
<li>会社の文化や雰囲気にマッチするかどうか</li>
</ul>
</li>
</ul>


<h4>技術的な質問</h4>

<p>新卒のときと大きく違ったのは具体的に技術質問をされることです。<br/>
内心、ここまで具体的に聞かれるのだと驚いていました。<br/>
例えば、</p>

<ul>
<li>Objective-Cの◯◯はどういうときに使っていますか？</li>
<li>Objective-Cで◯◯する方法を説明してください</li>
<li>Webアプリを開発するときに今なら AngularJS, React, Vue.js etc 何を使いますか？</li>
<li>RDBMSとNoSQLの使い分けを教えてください(どういう時にNoSQLを使うか)</li>
</ul>


<p>などです。<br/>
面接官の観点としては明快なのではないでしょうか？</p>

<ul>
<li>技術力のレベル

<ul>
<li>職務経歴書や履歴書の正当性を確認</li>
<li>できないのにできると書いていないか</li>
</ul>
</li>
</ul>


<h4>印象に残った質問</h4>

<p>印象に残った質問も幾つかありました。<br/>
例えば、</p>

<ol>
<li>あなたがスゴイと思うエンジニアはどういう人か</li>
<li>弊社のサービスの悪いところ/直した方が良いと思うところを上げてください</li>
<li>この業界に変革を起こすためのアイデアを教えてください</li>
</ol>


<p>といったことです。<br/>
これらはそれぞれ意図が異なる質問と思われます。</p>

<p>1は「考え方が『 <strong>技術ファースト</strong> 』なのか『 <strong>プロダクトファースト</strong> 』なのか」ということだと思っています。<br/>
2は「 <strong>興味を持ってプロダクトの下調べをしてきているか</strong> 」や「 <strong>エンジニアとして具体的に解決方法を提案できるか</strong> 」なのかなと思っています。<br/>
3は「 <strong>業界に興味を持っているか</strong> 」や「 <strong>本気でビジョンを持って面接に臨んできているのか</strong> 」なのかなと思っています。</p>

<h3>まとめ</h3>

<p>振り返ってみると、いずれも自身が面接官であれば聞いてみたい質問ばかりです。<br/>
『もし自身が面接官だったら』という視点で事前に考えをまとめてきていれば、面接で答えに困ることは少ないのかもしれませんね。</p>

<p>ということで2016年もあと僅かですが、今年(もしくは来年)転職活動を控えている方々に少しでも参考になれば幸いです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生初転職を振り返る]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/11/mycareer-1/"/>
    <updated>2016-12-11T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/11/mycareer-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="http://qiita.com/advent-calendar/2016/job">転職 Advent Calendar 2016</a> 11日目の記事です。<br/>
こんなにもランキング上位に来るとは夢にも思っていなかったので、気軽に参加した手前、内容に悩みました笑<br/>
が、振り返りの良きタイミングと軽く捉えて話を進めていきたいと思います。</p>

<p>今、転職に一歩踏み出そうか悩んでいる方達へのささやかな参考にでもなれば幸いです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>自己紹介</h3>

<p>まずは自己紹介です。</p>

<ul>
<li>社会人6年目</li>
<li>30歳(転職活動時は29歳)</li>
<li>独身</li>
<li>iOSエンジニア(+雑多に技術に勤しむ)</li>
</ul>


<p>どうぞよろしくお願いします。</p>

<h3>転職理由</h3>

<p>転職理由を話す前に1社目での経験について触れておこうかと思います。</p>

<h4>1社目での経験</h4>

<p>実は大学では機械工学を専攻しており、旋盤やフライス盤を扱っていた私ですが、縁あって大手通信会社に就職しました。<br/>
そんな私ですからプログラミングはおろかITや通信に関する技術や知識など持ち合わせていませんでした。</p>

<p>当時の私の中でのITエンジニアのイメージは、</p>

<ul>
<li>所謂、上流工程を生業にするエンジニア</li>
<li>プログラミングは外部会社に委託して、納品されたものをチェックする程度</li>
</ul>


<p>といったものでした。<br/>
(今思えば、1社目では上記のようなエンジニアが普通であって自分は特異な存在だった&hellip;)</p>

<p>結局は蓋を開けてみると、<br/>
まさかの <strong>プログラミングを書く</strong> というところからスタートだったわけです。<br/>
「入社してしまったのだからやるしかない」と、<strong>嫌い</strong> だったプログラミングに挑戦することになりました。</p>

<p>そこで約5年ほど働いた結果、私は次のような技術に触れることができました。</p>

<h5>技術</h5>

<ul>
<li>フロントエンド: HTML, CSS, JavaScript, jQuery</li>
<li>バックエンド(WEB/AP/DB): Apache, Nginx, Node.js, Java, Tomcat, MongoDB</li>
<li>モバイル: iOS(Objective-C / Swift), Android(Java)</li>
</ul>


<h5>役割</h5>

<ul>
<li>開発メンバー</li>
<li>開発チームのリーダー</li>
<li>PMO</li>
</ul>


<h5>なぜこんなにも経験が積めたか</h5>

<p>これには正直なところ運の要素が強いと思っています。<br/>
iPhoneやAndroidといったモバイル端末の登場が私の人生を大きく変えたと言っても過言ではないでしょう。<br/>
それだけ会社のみならず世の中にも大きな変革が起こった時代なのでした。</p>

<p>1社目での経験がなければ、私は未だにプログラミングが嫌いだったと思いますし、エンジニアとしての楽しさを知らずに生きていたことと思います。<br/>
このことについては本当に感謝しています。</p>

<h4>転職活動を始めたきっかけ</h4>

<p>では本題に入りましょう。<br/>
なぜそんなにも多くの経験をさせてもらい、エンジニアとして成長できたにも関わらず転職活動を始めるに至ったのか&hellip;</p>

<p>理由は2つあります。</p>

<ul>
<li>世間の情勢や会社の成長と共に、そこで内製エンジニアとして働くことに疑問を感じた</li>
<li>その会社の中で自分がやりたいことが見えなくなった</li>
</ul>


<p>入社当初は内製エンジニアの育成に力を注いでいた会社ではあったのですが、時代や会社の流れとともに淘汰されていくのを感じました。<br/>
いつの間にか、「自分達で作ることに意味があるんだ！」から「自分達で作ることに何の意味があるの？」に変わってしまっていたのです。</p>

<p>そんな情勢に悩みつつも、私は転職活動を始めるという勇気を持つことができませんでした。<br/>
それは『 <strong>転職 = 逃げ</strong> 』、『 <strong>転職 = 負け</strong> 』と自身が思い込んでしまっていたためです。</p>

<p>そんな中、転機が訪れます。<br/>
(私とは別の理由ですが)同様に悩んでいた同期から「転職エージェントサービスに登録し、担当者と会ってくる」という話を聞いたのです。<br/>
私は背中を押される形で同じエージェントサービスに登録し、担当者と会うことになりました。<br/>
私の転職活動はそこから始まったのです。</p>

<h3>転職活動</h3>

<p>そんなこんなで幕を開けた私の転職活動について話していきます。</p>

<h4>転職エージェントとの出会い</h4>

<p>結果から言えば、非常に良い方と巡り合い、転職活動をサポートして頂けました。<br/>
友達で転職活動がしたいと言う人がいたらぜひ紹介したいと思えるようなそんな方でした。</p>

<p>私は思っていることの全てをそこでぶつけました。<br/>
当時私が望んでいた会社は下記の条件を持った会社でした。</p>

<ul>
<li>内製エンジニアを必要としている会社</li>
<li>技術に理解がある会社</li>
<li>自社サービスを持っている会社</li>
<li>自分の頑張りが世の中に形として見える会社</li>
</ul>


<p>エージェントさんは私の希望を聞いた上でこんな話をしてくれました。</p>

<ul>
<li>私が(当時)働いている会社から技術力のある会社に転職する人は少ない</li>
<li>技術力を身につけるような会社ではないので、ハードルは高いかもしれない</li>
<li>ただ、その会社にしては珍しく技術を学んでいるので可能性はあると思う</li>
</ul>


<p>私自身、うすうすと感じてはいたものの、「やはりそうなのか&hellip;」という気持ちでした。<br/>
とは言え、やってみなければ結果など得られないわけで、ダメ元でも挑戦してみない理由が私には見つかりませんでした。<br/>
何もしないで現状を過ごすよりも思い切って選考に進んでみることにしたのです。</p>

<h4>転職活動と仕事の両立</h4>

<p>IT業界では割りと普通のことかもしれませんが、勤務中は私服でいることが多いと思います。<br/>
また、転職活動の面接でも(会社によると思いますが)スーツを強要されることは滅多にありません。<br/>
ですが、私は転職活動初心者であったため、「面接と言えばスーツは必須」と考えていました。<br/>
なので、当時の勤務先でもスーツで出社するように切り替えていました。<br/>
正直、周りは気づいていたと思いますし、時折「転職活動でもしてんの？」と絡まれることもありましたが、意に介さず通常通り勤務を続けていました。</p>

<p>当時の私の1日の過ごし方</p>

<p>5:30 起床<br/>
6:30 自宅を出る<br/>
7:30 〜 8:00 面接<br/>
8:30 〜 19:00 仕事<br/>
19:00 退社<br/>
19:30 〜 20:00 面接<br/>
20:30 〜 帰路につく<br/>
21:30 帰宅</p>

<p>といったような形でした。<br/>
結構大変でした&hellip;。<br/>
唯一の救いは、面接の時期が年末ということもあり、普段の仕事も繁忙期ではなかったことです。</p>

<h4>転職活動の結果</h4>

<p>4社から内定を頂きました。<br/>
そして初めに内定を提示頂いた会社に入社することを決めました。</p>

<p>決め手としては、</p>

<ul>
<li>面接後、スピード感を持って結果を伝えてくれたこと</li>
<li>私を必要としてくれていると感じられたこと</li>
<li>幅広いサービスを持っていて多くの経験ができそうだと感じたこと</li>
</ul>


<p>でした。</p>

<p>もちろん、悩まずに即決できたわけではありません。<br/>
最終的に2社の中で悩みました。<br/>
悩んだ末に総合的に判断して、今の会社に至ったわけです。</p>

<p>このときもエージェントの方から優先度の軸を立てて、各会社を採点してみることで整理ができるとアドバイス頂きました。<br/>
そのアドバイスを元に私は下表を作っていました。<br/>
見るポイントとしては、『 <strong>総合点を見ること</strong> 』と『 <strong>最も重視している軸の点数を見ること</strong> 』の2つだそうです。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"></th>
<th align="right">　●●社　</th>
<th>　▲▲社　</th>
<th align="right">　■■社　</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">技術に取り組める</td>
<td align="right">　5　</td>
<td>　5　</td>
<td align="right">　5　</td>
</tr>
<tr>
<td></td>
<td align="left">取り組める技術の幅が広い</td>
<td align="right">　5　</td>
<td>　5　</td>
<td align="right">　2　</td>
</tr>
<tr>
<td></td>
<td align="left">サービスに魅力がある</td>
<td align="right">　2　</td>
<td>　3　</td>
<td align="right">　4　</td>
</tr>
<tr>
<td></td>
<td align="left">働く上での難易度</td>
<td align="right">　5　</td>
<td>　5　</td>
<td align="right">　3　</td>
</tr>
<tr>
<td></td>
<td align="left">明確な評価制度がある</td>
<td align="right">　3　</td>
<td>　5　</td>
<td align="right">　3　</td>
</tr>
<tr>
<td></td>
<td align="left">グローバル視点・戦略</td>
<td align="right">　5　</td>
<td>　2　</td>
<td align="right">　3　</td>
</tr>
</tbody>
</table>


<p>  　　</p>

<h4>転職する上で役に立った活動</h4>

<p>これもある意味、エンジニアあるあるかもしれませんが、述べていきたいと思います。</p>

<h5>技術ブログ</h5>

<p>個人的に力を入れているのは何と言っても技術ブログです。<br/>
元々は激しくモチベーションが下がっていた社会人3年目の頃に同期から勧められたのがきっかけです。<br/>
初めは自分自身や友達しか見ないようなサイトだったのですが、コツコツと続けてきたおかげでそれなりに見てもらえるサイトに少しはなったと思っています。</p>

<p>面接は短時間なので、ある程度の人となりがわかったとしても技術レベルまで深く知ることはできません。<br/>
そんなときに自身をアピールするための1つの参考資料となるでしょう。<br/>
初めから素晴らしいことが書ける必要なんてないですし、恥をかく可能性だってありますが、モヤモヤしているなら騙されたと思って始めてみてください。<br/>
きっと楽しく感じられる時が来ると思います。</p>

<h5>個人アプリの開発</h5>

<p>技術ブログを始めてはみたものの、ネタに困ってしまったことがありました。<br/>
そんなときに思いついたのがアプリを個人で開発してみるというものでした。<br/>
モバイルアプリであればサーバを購入する必要はありませんし、気軽に始められること請け合いです。</p>

<p>これも実際の面接の時の話題の種になったり、ちょっとしたアイスブレイクになったりもするのでオススメです。</p>

<h5>勉強会への参加</h5>

<p>興味のある勉強会に参加される方は多いかもしれません。<br/>
技術ブログや個人アプリの開発よりも気軽に始められるのではないでしょうか？</p>

<p>一方で敷居が低いが故に面接時に「勉強会に参加しています」と言う人も多いことでしょう。<br/>
登壇している人であれば、ライバルは減りますが、<br/>
もしかしたら面接で大切なのは「何を目的に参加しているのか？」ということかもしれません。</p>

<p>私は下記目的を持って勉強会に参加していました。</p>

<ul>
<li>技術の情報収集</li>
<li>自身のレベルを把握</li>
<li>外部の空気を吸ってモチベーションを上げる</li>
</ul>


<h5>stackoverflowでの回答活動</h5>

<p>質問で利用することはあっても回答で利用することは少ないかもしれませんね。<br/>
敷居が高く感じられるかもしれませんが、逐一見ていると「これなら答えられるかもしれない！」と思う質問が出てくるかもしれません。<br/>
他者に物事を教えることは自身の振り返りにも繋がります。</p>

<p>また、私の場合は回答としてブログに以前書いた内容を参考までに知らせたりしていたため、<br/>
「いつもお世話になっています」といったコメントにはぐっとくるものがありました。</p>

<p>面接する側からすれば人に物を教えられるレベルであるという判断にも繋がるかなと思います。</p>

<h3>転職活動後</h3>

<p>ここまで転職活動について書いてきましたが、最後に転職活動が終わった後の心境などについて書いていきたいと思います。</p>

<h4>転職先が決定した後の心境について</h4>

<p>非常にシンプルです。</p>

<ul>
<li>負の感情がみるみる減っていく</li>
<li>これまでお世話になったことに、ただただ感謝し始める</li>
<li>残り僅かな期間を恩返しだと思って頑張りたくなる</li>
</ul>


<h4>転職直後の心境について</h4>

<p>これもまたシンプルです。</p>

<ul>
<li>知っている人や仲の良い人が誰もいないので、とてつもなく寂しい

<ul>
<li>特に昼ごはんのときにぼっちになるのは寂しかった(が、数日で慣れた)</li>
</ul>
</li>
<li>気軽に話せる人がいなくて寂しい

<ul>
<li>「おはようございます/すいません/ありがとうございます/お疲れ様でした」の毎日</li>
<li>無駄話をしている人が少ない環境にびっくり</li>
</ul>
</li>
</ul>


<p>そのうち人間関係が構築されていったり、慣れていったりするので気に病む必要はないのですが、転職で疲れるポイントであることは確かです。</p>

<p>あと、転職活動中は自身と会社のマッチングであるため、アピールしたい対象には存分にアピールしていると思います。<br/>
なので、入社後に「思ったより/聞いていたより●●だな〜」と思うこともあります。<br/>
(たぶんお互い様なんだと思いますが&hellip;)</p>

<h4>転職前後で変わった考え方について</h4>

<p>1社目にいるときと今とで当然ながら大きく変わったと感じることがあります。</p>

<p>1社目では、</p>

<ul>
<li>生き方

<ul>
<li>会社の中で生き抜くことばかりに固執していた</li>
</ul>
</li>
<li>働き方

<ul>
<li>個人ファースト</li>
<li>個人で結果を残してこそ組織が映える</li>
</ul>
</li>
<li>立ち位置

<ul>
<li>新卒入社の温室育ちでわがままに言いたい放題</li>
</ul>
</li>
</ul>


<p>でした。<br/>
それが2社目では、</p>

<ul>
<li>生き方

<ul>
<li>社会の中で生きることに目を向けることができるようになった</li>
</ul>
</li>
<li>働き方

<ul>
<li>チームファースト</li>
<li>まずはチームとして結果を残し、その中で個人としてどんな役割を担ったのか</li>
</ul>
</li>
<li>立ち位置

<ul>
<li>若手がほとんどなので簡単に音を上げられない</li>
<li>不満や愚痴を言ってられない</li>
</ul>
</li>
</ul>


<p>のように変わりました。<br/>
まだまだ働き始めたばかりで変わるべきところもあるかと思いますが、自分にとっては必要なことであったように感じています。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はたまたまAdvent Calendarに参加を決めたことで貴重な機会を得ることができました。<br/>
やはり、1年に1度振り返るのは必要なことだなと再認識しました。<br/>
また、転職活動のときに思い描いていた野望や情熱が思い出され、未来の自分への叱咤激励にもなりました。<br/>
来年はもっと頑張れる自分でありたいと思ういつつ本記事の結びとさせてください。</p>

<p>拙い文章にお付き合い頂きましてありがとうございました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReSwiftを勉強してみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/06/reswift-2/"/>
    <updated>2016-12-06T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/06/reswift-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは<a href="http://qiita.com/advent-calendar/2016/ios2">iOS その2 Advent Calendar 2016</a> 6日目の記事です。</p>

<p>今年は仕事でiOSを触る機会がめっきりと減ってしまったのですが、<br/>
「やはり１年を振り返るのならiOS Advent Calendarは欠かせないでしょう」ということで投稿することにしました。</p>

<p>最近、筆者が仕事で着手し始めた <strong>Redux</strong> に関連するということで <strong>ReSwift</strong> について見ていきたいと思います。<br/>
タイトルが <strong>(2)</strong> になっているのは、<br/>
以前に興味を持って自主的に取り組んでみた<a href="http://grandbig.github.io/blog/2016/09/03/reswift-1/">ReSwiftを勉強してみよう！(1)</a>の続きという意味です。<br/>
しかし、Advent Calendarの記事でもあるので本記事のみで完結する形で書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回は公式GitHubに上がっている<a href="https://github.com/ReSwift/CounterExample-Navigation-TimeTravel">CounterExample-Navigation-TimeTravel</a>を元にReSwiftを勉強していきたいと思います。</p>

<h3>ReSwiftに出てくるモノと役割</h3>

<p>ReSwiftに出てくるモノと役割について改めて見直しをしてみましょう。</p>

<ul>
<li>Store

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li>Stateを更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることでStoreにStateの変更を知らせられる</li>
</ul>
</li>
<li>Stateの状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることでlistenerは<code>getState</code>を通してStateの状態を取得できる</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>サンプルでは下記が該当します。<br/>
Storeの宣言は下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">var</span> <span class="n">mainStore</span> <span class="o">=</span> <span class="n">RecordingMainStore</span><span class="o">&lt;</span><span class="n">AppState</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>      <span class="nl">reducer:</span> <span class="n">AppReducer</span><span class="p">(),</span>
</span><span class='line'>      <span class="nl">state:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">typeMaps:</span><span class="p">[</span><span class="n">counterActionTypeMap</span><span class="p">,</span> <span class="n">ReSwiftRouter</span><span class="p">.</span><span class="n">typeMap</span><span class="p">],</span>
</span><span class='line'>      <span class="nl">recording:</span> <span class="s">&quot;recording.json&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このサンプルでは<a href="https://github.com/ReSwift/ReSwift-Recorder">ReSwiftRecorder</a>モジュールを利用しているため通常のStore宣言とは異なります。<br/>
ですが、重要なのは、<code>reducer</code>に<code>AppReducer()</code>を指定していることと、Storeが管理するStateの初期値を<code>state: nil</code>としているということです。</p>

<ul>
<li>State

<ul>
<li>アプリの状態</li>
</ul>
</li>
</ul>


<p>サンプルでは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppState.swift</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">AppState:</span> <span class="n">StateType</span><span class="p">,</span> <span class="n">HasNavigationState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">counter:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">navigationState:</span> <span class="n">NavigationState</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルでは<code>CounterViewController</code>でカウント数の増加および減少をさせる処理が実装されており、<br/>
<code>tabBarController</code>や<code>Button</code>のアクションなどで表示される画面を切り替える処理が実装されているため上記のように<code>counter</code>と<code>navigationState</code>の2つでアプリの状態を表すと定義しています。</p>

<ul>
<li>Action

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>
</li>
<li>ActionCreator

<ul>
<li>Actionを作成するメソッド</li>
</ul>
</li>
</ul>


<p>サンプルでは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CounterAction.swift</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">CounterActionIncrease:</span> <span class="n">StandardActionConvertible</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">type</span> <span class="o">=</span> <span class="s">&quot;COUNTER_ACTION_INCREASE&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">standardAction:</span> <span class="n">StandardAction</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">toStandardAction</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">StandardAction</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StandardAction</span><span class="p">(</span><span class="nl">type:</span> <span class="n">CounterActionIncrease</span><span class="p">.</span><span class="n">type</span><span class="p">,</span> <span class="nl">payload:</span> <span class="p">[</span><span class="o">:</span><span class="p">],</span> <span class="nl">isTypedAction:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルの<code>CounterAction.swift</code>の<code>CounterActionIncrease</code>はActionおよびActionCreatorの役割を兼ねています。</p>

<ul>
<li>Reducer

<ul>
<li>ActionとStateから新たなStateを作成して返す</li>
<li>ポイントはStateを更新するのではなく、 <strong>新しく作成したState</strong> を返すということ</li>
</ul>
</li>
</ul>


<p>サンプルでは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CounterReducer.swift</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">AppReducer:</span> <span class="n">Reducer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">handleAction</span><span class="p">(</span><span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">AppState</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AppState</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">AppState</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">counter:</span> <span class="n">counterReducer</span><span class="p">(</span><span class="nl">action:</span> <span class="n">action</span><span class="p">,</span> <span class="nl">counter:</span> <span class="n">state</span><span class="o">?</span><span class="p">.</span><span class="n">counter</span><span class="p">),</span>
</span><span class='line'>            <span class="nl">navigationState:</span> <span class="n">NavigationReducer</span><span class="p">.</span><span class="n">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">state</span><span class="o">?</span><span class="p">.</span><span class="n">navigationState</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">counterReducer</span><span class="p">(</span><span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">counter:</span> <span class="n">Int</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">??</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">_</span> <span class="n">as</span> <span class="nl">CounterActionIncrease:</span>
</span><span class='line'>        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">_</span> <span class="n">as</span> <span class="nl">CounterActionDecrease:</span>
</span><span class='line'>        <span class="n">counter</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">counter</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルでは、<code>handleAction</code>メソッドで「引数として受け取った<code>action</code>と<code>state</code>から作成した<code>AppState</code>を返却」しています。<br/>
カウントアップの処理がReducerに伝わった場合には、<br/>
<code>counterReducer</code>メソッドでそのActionに合わせて新たに必要なStateの情報を生成しています。<br/>
(カウントアップの場合は<code>CounterActionIncrease</code>アクションなので<code>counter += 1</code>しています。)</p>

<h3>ReSwiftに出てくるモノ同士の連携</h3>

<p>1個1個のモノと役割については理解が進みました。<br/>
続いて、それらの連携について見ていきましょう。<br/>
そのためには<code>ViewController</code>を見ていくのがわかりやすいかなと思います。</p>

<h4>カウントアップ・ダウンに見る連携</h4>

<p>まずは<code>CounterViewController</code>ですが、<br/>
「+」や「-」ボタンをタップすることで画面中央に表示されたカウントを増減させる画面です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CounterViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwiftRouter</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CounterViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">StoreSubscriber</span><span class="p">,</span> <span class="n">Routable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">let</span> <span class="n">identifier</span> <span class="o">=</span> <span class="s">&quot;CounterViewController&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">counterLabel:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillAppear</span><span class="p">(</span><span class="n">_</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mainStore</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillDisappear</span><span class="p">(</span><span class="n">_</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mainStore</span><span class="p">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">newState</span><span class="p">(</span><span class="nl">state:</span> <span class="n">AppState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 新規Stateをキャッチ</span>
</span><span class='line'>    <span class="c1">// 画面のラベルを更新</span>
</span><span class='line'>    <span class="n">counterLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;\(state.counter)&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">increaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>      <span class="n">CounterActionIncrease</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">decreaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>      <span class="n">CounterActionDecrease</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>細かく見ていきましょう。<br/>
Storeの役割で説明した「Stateの状態を追えるように<code>subscribe</code>を提供する」に相当する部分が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewWillAppear</span><span class="p">(</span><span class="n">_</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewWillDisappear</span><span class="p">(</span><span class="n">_</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>になります。<br/>
<code>viewWillAppear</code>で<code>subscribe</code>を実行することで、その画面が表示されるときにStateの監視を開始して、<code>viewWillDisappear</code>で<code>unsubscribe</code>を実行することで、その画面が非表示になるときにStateの監視を終了することにしています。</p>

<p>また、「Stateを更新するための<code>dispatch</code>を提供する」に相当する部分が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">increaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>    <span class="n">CounterActionIncrease</span><span class="p">()</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">decreaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>    <span class="n">CounterActionDecrease</span><span class="p">()</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>になります。<br/>
ユーザが「+」ボタンをタップしたときに<code>increaseButtonTapped</code>が呼び出されます。<br/>
そのときに上記アクションが実行されたことを<code>dispatch</code>を実行することでStoreに知らせています。<br/>
<code>decreaseButtonTapped</code>も同様です。</p>

<h4>画面切り替えに見る連携</h4>

<p>続いて<code>tabBarController</code>による画面の切り替えですが、これもこのサンプルでは状態変化として扱っています。<br/>
ただし、<code>ReSwiftRouter</code>モジュールで役割を担っているので、これを利用すれば開発者が新たに書く部分は非常に少なくなります。</p>

<p><code>UITabBarControllerDelegate</code>を利用してタブをタップしたタイミングをキャッチします。
そのときに、<code>ReSwiftRouter</code>の<code>SetRouteAction</code>を利用してタブによる画面切り替えのアクションをStoreに伝えています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">AppDelegate:</span> <span class="n">UITabBarControllerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">tabBarController</span><span class="p">(</span><span class="n">_</span> <span class="nl">tabBarController:</span> <span class="n">UITabBarController</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">shouldSelect</span> <span class="nl">viewController:</span> <span class="n">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">viewController</span> <span class="n">is</span> <span class="n">CounterViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>        <span class="n">SetRouteAction</span><span class="p">([</span><span class="s">&quot;TabBarViewController&quot;</span><span class="p">,</span> <span class="n">CounterViewController</span><span class="p">.</span><span class="n">identifier</span><span class="p">])</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">viewController</span> <span class="n">is</span> <span class="n">StatsViewController</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span>
</span><span class='line'>        <span class="n">SetRouteAction</span><span class="p">([</span><span class="s">&quot;TabBarViewController&quot;</span><span class="p">,</span> <span class="n">StatsViewController</span><span class="p">.</span><span class="n">identifier</span><span class="p">])</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>SetRouteAction</code>は下記のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">SetRouteAction:</span> <span class="n">StandardActionConvertible</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="nl">route:</span> <span class="n">Route</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">animated:</span> <span class="n">Bool</span>
</span><span class='line'>  <span class="n">public</span> <span class="k">static</span> <span class="n">let</span> <span class="n">type</span> <span class="o">=</span> <span class="s">&quot;RE_SWIFT_ROUTER_SET_ROUTE&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">public</span> <span class="n">init</span> <span class="p">(</span><span class="n">_</span> <span class="nl">route:</span> <span class="n">Route</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">route</span> <span class="o">=</span> <span class="n">route</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">animated</span> <span class="o">=</span> <span class="n">animated</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">action:</span> <span class="n">StandardAction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">route</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">payload</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">Route</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">animated</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">payload</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;animated&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">Bool</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">public</span> <span class="n">func</span> <span class="n">toStandardAction</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">StandardAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">StandardAction</span><span class="p">(</span>
</span><span class='line'>      <span class="nl">type:</span> <span class="n">SetRouteAction</span><span class="p">.</span><span class="n">type</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">payload:</span> <span class="p">[</span><span class="s">&quot;route&quot;</span><span class="o">:</span> <span class="n">route</span> <span class="n">as</span> <span class="n">AnyObject</span><span class="p">,</span> <span class="s">&quot;animated&quot;</span><span class="o">:</span> <span class="n">animated</span> <span class="n">as</span> <span class="n">AnyObject</span><span class="p">],</span>
</span><span class='line'>      <span class="nl">isTypedAction:</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>中身を見てみると<code>CounterAction</code>と同様に<code>toStandardAction</code>を利用しているのがわかります。<br/>
デバッグしていくとわかりますが、<code>tabBarController</code>を通した画面の切り替えでは、カウントアップやカウントダウンは無関係であるため<code>AppReducer</code>ではcountの状態を増減させることはありません。<br/>
変化するのは<code>AppState.navigationState</code>のみです。<br/>
こちらも追っていくとわかるのですが、下記の<code>NavigationReducer</code>に処理が引き継がれています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="n">NavigationReducer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">handleAction</span><span class="p">(</span><span class="n">_</span> <span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">NavigationState</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NavigationState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">state</span> <span class="o">=</span> <span class="n">state</span> <span class="o">??</span> <span class="n">NavigationState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">let</span> <span class="n">action</span> <span class="n">as</span> <span class="nl">SetRouteAction:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">setRoute</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nl">setRouteAction:</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">let</span> <span class="n">action</span> <span class="n">as</span> <span class="nl">SetRouteSpecificData:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">setRouteSpecificData</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nl">route:</span> <span class="n">action</span><span class="p">.</span><span class="n">route</span><span class="p">,</span> <span class="nl">data:</span> <span class="n">action</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">func</span> <span class="n">setRoute</span><span class="p">(</span><span class="n">_</span> <span class="nl">state:</span> <span class="n">NavigationState</span><span class="p">,</span> <span class="nl">setRouteAction:</span> <span class="n">SetRouteAction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NavigationState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">state</span> <span class="o">=</span> <span class="n">state</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">route</span> <span class="o">=</span> <span class="n">setRouteAction</span><span class="p">.</span><span class="n">route</span>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">changeRouteAnimated</span> <span class="o">=</span> <span class="n">setRouteAction</span><span class="p">.</span><span class="n">animated</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、<code>NavigationReducer</code>の中で<code>NavigationState</code>型のオブジェクトを生成して返しています。<br/>
なので、アプリの状態である<code>AppState</code>が持つのは、</p>

<ul>
<li>counter: アプリのカウント状態</li>
<li>navigationState: アプリの画面状態</li>
</ul>


<p>と言えます。</p>

<h3>まとめ</h3>

<p>相変わらず、(流行っていないというのもあるかもしれませんが&hellip;)ReSwiftに関する日本語の記事が少ないですね。<br/>
恐らく、Web業界のようにFluxやReduxが実際のサービスに取り入れられているとは言い難いのでしょう。<br/>
その理由として考えられるのは、iOSの場合はデフォルトとしてStoryboardやViewControllerというものが存在し、Appleもそれをそのまま利用することを推奨しているからかもしれません。<br/>
しかしながら、複雑なアプリが世の中で求められるようになるに従って『ViewControllerの肥大化』や『複数人での開発による統一性の崩れ』といった課題により真剣に考えざるを得なくなってきました
。<br/>
必ずしも、これらの課題を解決するためにReSwiftを使わなければならないということはないのですが、1つの方法論として知っておくことで選択肢も増えてきます。<br/>
ただ、WebでReact&amp;Reduxを取り入れるのと同様に理解するためのハードルが高くもあるので現場で嫌がられることもあるかもしれません。<br/>
また、保守性として高いとは決して言えません。開発メンバーの入れ替えが発生したときにReSwiftを勉強するコストが発生します。<br/>
Webと違ってそこまで浸透しているとは言えないため、より導入が難しいと言えるでしょう。<br/>
ここにある種の矛盾が生じているわけですね&hellip;</p>

<p>筆者がちょうどReact&amp;Reduxに触れる機会が増えてきたため、良い機会だと思って、iOSでのReSwiftの利用メリットなどを合わせて考えていきたいと思っています。<br/>
そろそろ個人でのアプリ開発も復活させたい気持ちもありますし、その際には積極的に導入してみようかな&hellip;</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side SwiftでMongoDBと遊んでみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/05/swift-perfect-mongo/"/>
    <updated>2016-12-05T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/05/swift-perfect-mongo</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは<a href="http://qiita.com/advent-calendar/2016/swift2">Swift その2 Advent Calendar 2016</a> 5日目の記事です。<br/>
今年は筆者が興味を持っている <strong>Server Side Swift</strong> について書きたいと思います。
Swiftサーバを立てるために、<a href="http://grandbig.github.io/blog/2016/10/30/swift-perfect/">以前の記事</a>でも利用した<a href="https://github.com/PerfectlySoft/Perfect">Perfect</a>を使います。</p>

<p>ただ単にSwiftサーバを立てても面白くないので、提供されているMongoDB接続モジュールを利用して遊んでみようと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>SwiftによるAP・DBサーバの構築</h3>

<p>早速、Perfectを用いてSwiftによるAP・DBサーバを構築しようと思います。<br/>
基本的には<a href="https://github.com/PerfectlySoft/Perfect-MongoDB">ReadMe</a>に従えば良いのですが、丁寧に１つずつ見ていきます。</p>

<h4>必要モジュールのインストール</h4>

<p>流石に <strong>Homebrew</strong> はインストールされている方が多いと思いますが、入れていない方は下記コマンドで入れましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>また今回は <strong>MongoDB</strong> を利用するため、 <strong>mongodb</strong> および <strong>mongo-c</strong> をインストールする必要があります。<br/>
mongodbに関しては、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install mongodb</span></code></pre></td></tr></table></div></figure>


<p>でOKです。(自動起動などに関しては<a href="http://grandbig.github.io/blog/2016/11/20/brew-install-db/">こちら</a>を参照ください。)<br/>
続いて、mongo-cは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install mongo-c</span></code></pre></td></tr></table></div></figure>


<p>でインストール完了できるはずです。</p>

<h4>xcodeprojを作成</h4>

<h5>テンプレートのダウンロード</h5>

<p>0からPerfectを用いてサーバを構築しても良いのですが、Perfectではテンプレートを用意してくれています。<br/>
せっかくなので <code>git clone</code> してテンプレートをダウンロードして使いましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/PerfectlySoft/PerfectTemplate.git
</span><span class='line'>cd PerfectTemplate</span></code></pre></td></tr></table></div></figure>


<h5>MongoDBモジュールを利用するように編集</h5>

<p><strong>Perfect-MongoDB</strong> を利用するので、<code>Package.swift</code>を編集しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PackageDescription</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">package</span> <span class="o">=</span> <span class="n">Package</span><span class="p">(</span>
</span><span class='line'>  <span class="nl">name:</span> <span class="s">&quot;PerfectTemplate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">targets:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nl">dependencies:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span> <span class="s">&quot;https://github.com/PerfectlySoft/Perfect-HTTPServer.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span><span class="s">&quot;https://github.com/PerfectlySoft/PerfectLib.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Package</span><span class="p">(</span><span class="nl">url:</span><span class="s">&quot;https://github.com/PerfectlySoft/Perfect-MongoDB.git&quot;</span><span class="p">,</span> <span class="nl">majorVersion:</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">minor:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReadMeでは <strong>Perfect-HTTPServer</strong> は書かれていないのですが、これを使った方が便利なので、テンプレートに残したまま進めます。</p>

<h5>Packageからxcodeprojを作成</h5>

<p><code>Package.swift</code>の編集が終わったら、下記コマンドを実行して<code>xcodeproj</code>ファイルを作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">swift</span> <span class="n">package</span> <span class="n">generate</span><span class="o">-</span><span class="n">xcodeproj</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうすれば下図のような結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_1.png" alt="フォルダ構成" /></p>

<h4>MongoDBにデータを作成</h4>

<p>サンプルを作成するためにもデータがなきゃ話になりませんよね？<br/>
ということでデータを入れましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MongoDBにアクセス</span>
</span><span class='line'><span class="n">$</span> <span class="n">mongo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DBとCollectionの作成</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">use</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">createCollection</span><span class="p">(</span><span class="err">&#39;</span><span class="n">testCollection</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;ok&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DBの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">show</span> <span class="n">dbs</span><span class="p">;</span>
</span><span class='line'><span class="n">local</span>  <span class="mf">0.000</span><span class="n">GB</span>
</span><span class='line'><span class="n">test</span>   <span class="mf">0.000</span><span class="n">GB</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Collectionの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">show</span> <span class="n">collections</span>
</span><span class='line'><span class="n">testCollection</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データのインサート</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="nl">name:</span> <span class="err">&#39;</span><span class="n">takahiro</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">30</span><span class="p">,</span> <span class="nl">hobby:</span> <span class="err">&#39;</span><span class="n">blog</span><span class="err">&#39;</span><span class="p">});</span>
</span><span class='line'><span class="n">WriteResult</span><span class="p">({</span> <span class="s">&quot;nInserted&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="nl">name:</span> <span class="err">&#39;</span><span class="n">ichiro</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">43</span><span class="p">,</span> <span class="nl">hobby:</span> <span class="err">&#39;</span><span class="n">baseball</span><span class="err">&#39;</span><span class="p">});</span>
</span><span class='line'><span class="n">WriteResult</span><span class="p">({</span> <span class="s">&quot;nInserted&quot;</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MongoDBにアクセスして全データを取得</h4>

<p>データの作成も完了したので、実際にGETリクエストでMongoDBからデータを取得する処理を書いてみましょう。<br/>
(ReadMeではPerfect-HTTPServerを利用しない方法で書かれていたため本記事とは若干異なります。)</p>

<h5>テンプレートファイルの確認</h5>

<p>まずは、初めから作成されている処理内容を確認します。<br/>
説明は下記ソースコードにコメントを書いたので参照ください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// HTTPサーバの生成</span>
</span><span class='line'><span class="n">let</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HTTPServer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// リクエストに対するルーティングを設定</span>
</span><span class='line'><span class="n">var</span> <span class="n">routes</span> <span class="o">=</span> <span class="n">Routes</span><span class="p">()</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// レスポンスヘッダーの設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">setHeader</span><span class="p">(.</span><span class="n">contentType</span><span class="p">,</span> <span class="nl">value:</span> <span class="s">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンスボディの設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;&lt;html&gt;&lt;title&gt;Hello, world!&lt;/title&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンス完了処理</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// サーバにルーティング設定を適用</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">addRoutes</span><span class="p">(</span><span class="n">routes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポートを設定</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">serverPort</span> <span class="o">=</span> <span class="mi">8181</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ドキュメントルートのパスを設定</span>
</span><span class='line'><span class="n">server</span><span class="p">.</span><span class="n">documentRoot</span> <span class="o">=</span> <span class="s">&quot;./webroot&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// arguments.swiftで定義されているメソッド</span>
</span><span class='line'><span class="c1">// 更なるサーバ定義が必要な場合はここを見ましょう(SSLなど)</span>
</span><span class='line'><span class="n">configureServer</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// HTTPサーバの起動</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">PerfectError</span><span class="p">.</span><span class="n">networkError</span><span class="p">(</span><span class="n">let</span> <span class="n">err</span><span class="p">,</span> <span class="n">let</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Network error thrown: \(err) \(msg)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記をXcodeをからRunさせた状態で <code>http://localhost:8181</code> にアクセスしてみましょう。<br/>
Hello Worldの結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_2.png" alt="Hello World" /></p>

<h5>MongoDB関連処理ファイルの作成</h5>

<p>続いて、MongoDBへの接続・切断やデータ取得などの処理を作成していきます。<br/>
これは別クラスの中に書いていきましょう。</p>

<p>今回はMongoDB関連の処理をハンドリングするということで<code>mongoHandler.swift</code>というファイルを作成します。<br/>
因みにただ作成しただけでは、XcodeがCompile対象として正しく認識してくれないので、自身で設定を変えましょう。<br/>
下図のようにTARGETSから実行ファイルを選択して、Compile Sourcesとして<code>mongoHandler.swift</code>を追加してください。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_3.png" alt="Compile Sourcesに追加" /></p>

<p>では実際のソースを見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">MongoHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">client:</span> <span class="n">MongoClient</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">database:</span> <span class="n">MongoDatabase</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">collection:</span> <span class="n">MongoCollection</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBへの接続処理</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// コネクション確立</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MongoClient</span><span class="p">(</span><span class="nl">uri:</span> <span class="s">&quot;mongodb://localhost&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// testデータベースへの接続</span>
</span><span class='line'>    <span class="n">database</span> <span class="o">=</span> <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">getDatabase</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// testCollectionコレクションへの接続</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">getCollection</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;testCollection&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBからの切断処理</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">collection</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchAll</span><span class="p">(</span><span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="n">_</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>    <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データ全件取得のためBSONオブジェクトを初期化してクエリとして設定</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">fnd</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データ格納用に配列を定義</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 取得したデータを配列に格納する</span>
</span><span class='line'>    <span class="c1">// fndはMongoCursor型であり、for文での繰り返し処理が可能</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">fnd</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">asString</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// JSONStringに変換</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">data</span><span class="se">\&quot;</span><span class="s">:[\(arr.joined(separator: &quot;</span><span class="p">,</span><span class="s">&quot;))]}&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MongoDBから切断</span>
</span><span class='line'>    <span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDBへの接続・切断処理は共通処理となることは容易に想像できるため、切り出しました。</p>

<h5>main.swiftからmongoHandler.swiftを呼び出す</h5>

<p>さて、<code>main.swift</code>から<code>mongoHandler.swift</code>を呼び出してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="c1">// MongoHandlerの初期化</span>
</span><span class='line'><span class="n">let</span> <span class="n">mongoHandler</span> <span class="o">=</span> <span class="n">MongoHandler</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GETリクエストでMongoDBのデータ全取得</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">mongoHandler</span><span class="p">.</span><span class="n">searchAll</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>http://localhost:8181</code>にアクセスすれば下図のような結果が得られるはずです。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_4.png" alt="データ全件取得結果" /></p>

<h4>MongoDBにアクセスして指定のクエリでデータを取得</h4>

<p>全件取得の方法はわかったので、続いてクエリありの検索を実行してみましょう。<br/>
先程述べた通り、下記のようなデータが格納されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name</code>、<code>age</code>、<code>hobby</code>を指定して検索するのはそんなに難しくないと思います。</p>

<h5>nameを指定してデータを取得</h5>

<p>わかりやすいところからと言うことで<code>name</code>を指定してデータを取得してみます。<br/>
まずは<code>mongoHandler.swift</code>にクエリ指定のメソッドを追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">MongoHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">client:</span> <span class="n">MongoClient</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">database:</span> <span class="n">MongoDatabase</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">collection:</span> <span class="n">MongoCollection</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// open a connection</span>
</span><span class='line'>        <span class="n">client</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MongoClient</span><span class="p">(</span><span class="nl">uri:</span> <span class="s">&quot;mongodb://localhost&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// set database, assuming &quot;test&quot; exists</span>
</span><span class='line'>        <span class="n">database</span> <span class="o">=</span> <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">getDatabase</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// define collection</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">getCollection</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;testCollection&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="n">database</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="n">client</span><span class="o">?</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// searchAllメソッドは省略</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// =====ここから追加========================================================</span>
</span><span class='line'>      <span class="n">func</span> <span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="n">_</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>          <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">fnd</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="nl">query:</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// データ格納用に配列を定義</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 取得したデータを配列に格納する</span>
</span><span class='line'>      <span class="c1">// fndはMongoCursor型であり、for文での繰り返し処理が可能</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">fnd</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">asString</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// JSONStringに変換</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">data</span><span class="se">\&quot;</span><span class="s">:[\(arr.joined(separator: &quot;</span><span class="p">,</span><span class="s">&quot;))]}&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>      <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>      <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// MongoDBから切断</span>
</span><span class='line'>      <span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>searchAll</code>との違いは引数に<code>BSON</code>型の<code>query</code>を追加しているところです。</p>

<p>続いて、<code>main.swift</code>にGETリクエストで<code>name</code>パラメータをキャッチできるように処理を追加していきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>                  <span class="c1">// ここを追加</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// nameパラメータを指定したGETリクエストのハンドリング</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/name/{name}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// クエリとして渡すパラメータをセット</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけで準備万端です。<br/>
<code>http://localhost:8181/name/takahiro</code>にアクセスすると下記結果が得られます。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_5.png" alt="nameパラメータを指定したGETリクエスト結果" />_</p>

<h5>ObjectIdを指定してデータを取得</h5>

<p>続いて、少しクエリの書き方に迷うかもしれない<code>ObjectId</code>を指定したデータ検索をしてみましょう。<br/>
<code>mongoHandler.swift</code>には特に変更がありません。<br/>
<code>main.swift</code>のみ変更していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTP</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">MongoDB</span>
</span><span class='line'><span class="n">import</span> <span class="n">libmongoc</span>                <span class="c1">// ここを追加</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ObjectIdパラメータを指定したGETリクエストのハンドリング</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/oid/{oid}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// bson_oid_t型のオブジェクトの初期化</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">oid:</span> <span class="n">bson_oid_t</span> <span class="o">=</span> <span class="n">bson_oid_t</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// String型からbson_oid_t型に変換</span>
</span><span class='line'>  <span class="n">bson_oid_init_from_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oid</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;oid&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="c1">// クエリとして渡すパラメータをセット</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;_id&quot;</span><span class="p">,</span> <span class="nl">oid:</span> <span class="n">oid</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// クエリを指定して検索</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>肝なのが、<code>import libmongoc</code>をしているということです。<br/>
このライブラリの各種メソッドを利用することでServer Side Swiftから<code>ObjectId</code>を指定したデータ検索が可能になります。</p>

<p>少し詳しく説明すると、<br/>
クエリとして<code>ObjectId</code>を渡すためには<code>public func append(key k: String, oid: bson_oid_t) -&gt; Bool</code>を利用する必要があります。<br/>
しかし、このメソッドの第二引数をよく見ると、<code>bson_oid_t</code>型となっています。</p>

<p>GETリクエストの時点で<code>bson_oid_t</code>型でパラメータを渡すわけにもいかないので、  サーバサイド側で変換する必要があります。<br/>
そのために利用するメソッドが<code>void bson_oid_init_from_string (bson_oid_t *oid, const char *str);</code>です。<br/>
筆者もSwiftで初めて利用したのですが、このメソッドは戻り値が<code>void</code>型のため何も返ってきません。<br/>
が、第一引数に参照渡しとして<code>bson_oid_t</code>型オブジェクトを設定することで、メソッドの処理結果が<code>oid</code>に格納されます。<br/>
これでめでたくクエリとして<code>ObjectId</code>が設定できるわけです。</p>

<p>では、<code>http://localhost:8181/oid/58392222a8589d99c931303d</code>にアクセスしてみましょう。</p>

<p><img src="http://grandbig.github.io/images/perfect-mongo_6.png" alt="ObjectIdパラメータを指定したGETリクエスト結果" /></p>

<h4>MongoDBにデータを保存</h4>

<p>検索に関してはざっと見てきたので、MongoDBへの保存処理も見ていきましょう。</p>

<h5>insertメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>insert</code>メソッドを利用します。<br/>
(他にも<code>save</code>メソッドもあります。)</p>

<p>まずは <code>mongoHandler.swift</code> へのメソッド追加からです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">save</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの保存処理</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">insert</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="nl">document:</span> <span class="n">query</span><span class="p">)</span> <span class="n">as</span> <span class="n">MongoResult</span>
</span><span class='line'>  <span class="c1">// データ保存結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">insert</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にPOSTで届いたリクエストパラメータがJSONStringなのでDictionary型に変換します。<br/>
その処理を <code>decode.swift</code> ファイルを新規作成して追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// decode.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectHTTPServer</span>
</span><span class='line'><span class="n">import</span> <span class="n">PerfectLib</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">try</span> <span class="n">postBody</span><span class="o">?</span><span class="p">.</span><span class="n">jsonDecode</span><span class="p">()</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span><span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decoded</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にPOSTリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">post</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// JSONString型をDictionary型に変換</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">decodedParam</span> <span class="o">=</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">request</span><span class="p">.</span><span class="n">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 各パラメータ単位でBSONオブジェクトに格納</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;age&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="nl">int32:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">Int</span><span class="p">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;hobby&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;hobby&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// データ保存</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで処理は完成です。<br/>
ではPOSTリクエストを投げてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot;:&quot;Hanako&quot;, &quot;age&quot;: 24, &quot;hobby&quot;: &quot;game&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再度、MongoDBを検索してみると下記のような結果が得られるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58391469a8589d99c931303c&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;blog&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;58392222a8589d99c931303d&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;ichiro&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">43</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;baseball&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;Hanako&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;game&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>main.swift</code>でリクエストパラメータとして取得した<code>age</code>を <strong>Int32</strong> 型に変換しているのには理由があります。<br/>
これを仮に <code>bson.append(key: "age", int: value as! Int)</code> とした場合、MongoDBには <code>NumberLong</code>として保存されてしまいます。 <br/>
これは32bitか64bitかの違いですね。</p>

<h5>insertメソッドのMongoInsertFlagについて</h5>

<p>先程、<code>insert</code>メソッドを利用しましたが、実は第一引数のみ持っている <code>insert</code> メソッドを利用していました。<br/>
実は他にも <code>public func insert(document: BSON, flag: MongoInsertFlag = .none) -&gt; Result</code> といった第二引数を持つ <code>insert</code> メソッドが存在します。</p>

<p>少し気になったのでこの <code>MongoInsertFlag</code>について調べてみました。<br/>
<code>MongoInsertFlag</code>は<code>MongoCollection.swift</code>内に <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoInsertFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">continueOnError</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">noValidate</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_insert_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_INSERT_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">continueOnError:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_INSERT_CONTINUE_ON_ERROR</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">noValidate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mongoc_insert_flags_t</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">MONGOC_INSERT_NO_VALIDATE</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで<code>MONGOC_INSERT_NONE</code>, <code>MONGOC_INSERT_CONTINUE_ON_ERROR</code>, <code>MONGOC_INSERT_NO_VALIDATE</code>の3つがフラグとして用意されていることがわかります。<br/>
これらはそれぞれ次のような意味とのことです。</p>

<ul>
<li><code>MONGOC_INSERT_NONE</code>

<ul>
<li>特別何もしません。</li>
</ul>
</li>
<li><code>MONGOC_INSERT_CONTINUE_ON_ERROR</code>

<ul>
<li>途中でエラーが発生したとしても後続の<code>insert</code>処理がある場合は続ける</li>
</ul>
</li>
<li><code>MONGOC_INSERT_NO_VALIDATE</code>

<ul>
<li>インサート前に値のバリデーションチェックをしない

<ul>
<li>MongoDBへの保存処理前にAPサーバ時点などでバリデーションチェックはした方が良い</li>
</ul>
</li>
<li>これをすることで処理時間を短縮することができる</li>
</ul>
</li>
</ul>


<h4>MongoDBのデータを更新</h4>

<p>MongoDBへの更新処理も見ていきましょう。</p>

<h5>updateメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>update</code>メソッドを利用します。</p>

<p><code>mongoHandler.swift</code>にメソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">selector:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの更新</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">update</span><span class="p">,</span> <span class="nl">selector:</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// データ更新結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">updated</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にPUTリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">post</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(更新内容として渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">updateBson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">selectorBson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">updateBson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>      <span class="n">selectorBson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// JSONString型をDictionary型に変換</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">decodedParam</span> <span class="o">=</span> <span class="n">decode</span><span class="p">(</span><span class="nl">postBody:</span> <span class="n">request</span><span class="p">.</span><span class="n">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 各パラメータ単位でBSONオブジェクトに格納</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;age&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="nl">int32:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">Int</span><span class="p">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;hobby&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="n">updateBson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;hobby&quot;</span><span class="p">,</span> <span class="nl">string:</span> <span class="n">value</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// データ更新</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="nl">update:</span> <span class="n">updateBson</span><span class="p">,</span> <span class="nl">query:</span> <span class="n">selectorBson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的にはPOSTと同じ感じで処理を書くことができます。<br/>
しかしながら気をつけなくてはいけないのが、<strong>$setが利用できない</strong> ということです。<br/>
通常、MongoDBでは、 <strong>$setを使わないと</strong> &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;name&quot;</span> <span class="o">:</span> <span class="s">&quot;Hanako&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="mi">24</span><span class="p">,</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;game&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの更新</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="nl">_id:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">)},</span> <span class="p">{</span><span class="s">&quot;hobby&quot;</span><span class="o">:</span> <span class="s">&quot;go shopping&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// データの確認</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="p">.</span><span class="n">testCollection</span><span class="p">.</span><span class="n">find</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span> <span class="s">&quot;_id&quot;</span> <span class="o">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;583afcaedcab265c1821fb51&quot;</span><span class="p">),</span> <span class="s">&quot;hobby&quot;</span> <span class="o">:</span> <span class="s">&quot;go shopping&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となってしまいます。<br/>
現状、<code>Perfect-MongoDB</code>に実装されているメソッドを見ると<code>$set</code>はないようです。<br/>
そのため、今回はあえてPOST同様に全てのパラメータをクライアント側から下記のように投げることにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo/583afcaedcab265c1821fb51 -X PUT -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot; : &quot;Hanako&quot;, &quot;age&quot; : 24, &quot;hobby&quot;: &quot;game&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>updateメソッドのMongoUpdateFlagについて</h5>

<p><code>update</code>メソッドにも実は<code>MongoUpdateFlag</code>というオプションを設定できるメソッドが存在します。<br/>
<code>MongoUpdateFlag</code>は<code>MongoInsertFlag</code>と同じく <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoUpdateFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">upsert</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">multiUpdate</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">noValidate</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_update_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">upsert:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_UPSERT</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">multiUpdate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_UPDATE_MULTI_UPDATE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">noValidate:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mongoc_update_flags_t</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">MONGOC_UPDATE_NO_VALIDATE</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれのフラグの意味は下記の通りです。</p>

<ul>
<li><code>MONGO_UPDATE_NONE</code>

<ul>
<li>特別何もしません</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_UPSERT</code>

<ul>
<li>検索に引っかからない場合は<code>insert</code>します</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_MULTI_UPDATE</code>

<ul>
<li>検索にヒットする件数が複数の場合は全て更新します</li>
</ul>
</li>
<li><code>MONGOC_UPDATE_NO_VALIDATE</code>

<ul>
<li>アップデート前に値のバリデーションチェックをしません</li>
</ul>
</li>
</ul>


<h4>MongoDBのデータを削除</h4>

<p>MongoDBからのデータ削除処理も見ていきましょう。</p>

<h5>removeメソッドでデータを保存</h5>

<p>保存には<code>MongoClient</code>の<code>remove</code>メソッドを利用します。</p>

<p><code>mongoHandler.swift</code>にメソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// mongoHandler.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">delete</span><span class="p">(</span><span class="nl">query:</span> <span class="n">BSON</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">HTTPRequest</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">HTTPResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// MongoDBへの接続</span>
</span><span class='line'>  <span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 指定コレクションが見つからない場合は処理終了</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データ削除処理</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">removed</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="nl">selector:</span> <span class="n">query</span><span class="p">,</span> <span class="nl">flag:</span> <span class="p">.</span><span class="n">none</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// データ削除結果によって返却値を変更</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">removed</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="nl">success:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Succeeded&quot;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">returning</span> <span class="o">=</span> <span class="s">&quot;Failed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// レスポンスデータとして設定</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">appendBody</span><span class="p">(</span><span class="nl">string:</span> <span class="n">returning</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// レスポンス処理完了</span>
</span><span class='line'>  <span class="n">response</span><span class="p">.</span><span class="n">completed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDBから切断</span>
</span><span class='line'>  <span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして <code>main.swift</code> にDELETEリクエストのハンドリング処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="nl">method:</span> <span class="p">.</span><span class="n">delete</span><span class="p">,</span> <span class="nl">uri:</span> <span class="s">&quot;/mongo/{oid}&quot;</span><span class="p">,</span> <span class="nl">handler:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// BSON型オブジェクトの初期化(クエリとして渡す)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bson</span> <span class="o">=</span> <span class="n">BSON</span><span class="p">()</span>
</span><span class='line'>  <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 処理完了時にBSONオブジェクトを削除</span>
</span><span class='line'>    <span class="n">bson</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">oid:</span> <span class="n">bson_oid_t</span> <span class="o">=</span> <span class="n">bson_oid_t</span><span class="p">()</span>
</span><span class='line'>  <span class="n">bson_oid_init_from_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oid</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">urlVariables</span><span class="p">[</span><span class="s">&quot;oid&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="n">bson</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">key:</span> <span class="s">&quot;_id&quot;</span><span class="p">,</span> <span class="nl">oid:</span> <span class="n">oid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データ削除</span>
</span><span class='line'>  <span class="n">mongoHandler</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="nl">query:</span> <span class="n">bson</span><span class="p">,</span> <span class="nl">request:</span> <span class="n">request</span><span class="p">,</span> <span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のようなDELETEリクエストを投げてみればデータが削除されていることが確認できるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//localhost:8181/mongo/583afcaedcab265c1821fb51 -X DELETE -H &quot;Content-Type: application/json&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>removeメソッドのMongoRemoveFlagについて</h5>

<p><code>remove</code>メソッドにも実は<code>MongoRemoveFlag</code>というオプションを設定できるメソッドが存在します。<br/>
<code>MongoRemoveFlag</code>は<code>MongoUpdateFlag</code>と同じく <strong>enum</strong> として定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">MongoRemoveFlag:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">singleRemove</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">mongoFlag:</span> <span class="n">mongoc_remove_flags_t</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">none:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_REMOVE_NONE</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">.</span><span class="nl">singleRemove:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">MONGOC_REMOVE_SINGLE_REMOVE</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>フラグの意味は下記の通りです。</p>

<ul>
<li><code>MONGOC_REMOVE_NONE</code>

<ul>
<li>特に何のオプションもつけません。</li>
<li>検索にヒットしたデータは全て削除します。</li>
</ul>
</li>
<li><code>MONGOC_REMOVE_SINGLE_REMOVE</code>

<ul>
<li>初めに該当したデータ1件のみを削除します。</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>以上で基本的なCRUDに対応したAPサーバとDBサーバをSwiftとMongoDBで構築することができました。<br/>
これから何かサービスでも&hellip;と思っていたら時間切れ&hellip;<br/>
今回は一旦ここまでとしたいと思いますが、今後の展望としてはSwift製iOSアプリと連携させてiOSアプリを作成するか、もしくはReact / Reduxを使ったWebサービスと連携させたいと企んでいます。<br/>
処理速度とかリソースの消費具合とかは全然比較もしていないのでわからないですが、Swiftによるサーバサイド構築によるメリットも今後Appleさんが？明らかにしてくれるかもしれません。</p>

<p>何と言っても新しい技術や取り組みは楽しいですね！！<br/>
と言ったところで本日はここまで。</p>

<h3>参考URL</h3>

<ul>
<li><a href="http://perfect.org/docs/MongoDB.html">Perfect MongoDB Documentation</a></li>
<li><a href="http://mongoc.org/libbson/1.3.5/bson_oid_init_from_string.html">Libbson API Reference: Bson Oid Init</a></li>
<li><a href="http://mongoc.org/libmongoc/1.4.0/updating-document.html">Libbson API Reference: Update Document</a></li>
<li><a href="http://mongoc.org/libmongoc/1.0.0/mongoc_insert_flags_t.html">MongoDB C Driver API Reference: Insert Flag</a></li>
<li><a href="http://mongoc.org/libmongoc/1.2.3/mongoc_update_flags_t.html">MongoDB C Driver API Reference: Update Flag</a></li>
<li><a href="http://mongoc.org/libmongoc/1.3.2/mongoc_remove_flags_t.html">MongoDB C Driver API Reference: Remove Flag</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitのFetchでSSLエラーが出たときの対応]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/25/git-ssl-error/"/>
    <updated>2016-11-25T21:46:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/25/git-ssl-error</id>
    <content type="html"><![CDATA[<h3>突如としてエラーが発生した場合の対応</h3>

<p>先程、思いがけずエラーが出たのでメモします。<br/>
GitでFetchしようとして下記エラーが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/Cellar/git/2.10.2/bin/git -C /Users/&lt;username&gt;/git/iOS/Server\ Side\ Swift/PerfectTemplate/Packages/PerfectLib.git fetch --tags origin
</span><span class='line'>error: RPC failed; curl 56 SSLRead() return error -36
</span><span class='line'>fatal: The remote end hung up unexpectedly
</span><span class='line'>fatal: early EOF
</span><span class='line'>fatal: index-pack failed
</span><span class='line'>
</span><span class='line'>error: exit(128): git -C /Users/&lt;username&gt;/git/iOS/Server\ Side\ Swift/PerfectTemplate/Packages/PerfectLib.git fetch --tags origin</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>これはどうもSSLに関するエラーが出ているようです。<br/>
なので下記をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew reinstall git --with-brewed-curl --with-brewed-openssl</span></code></pre></td></tr></table></div></figure>


<p>これで再度、Gitコマンドを打ってみれば万事OKです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blogを別PCに移行しようとして苦労した話]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/20/move-octopress/"/>
    <updated>2016-11-20T23:55:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/20/move-octopress</id>
    <content type="html"><![CDATA[<h3>新しいPCを購入したので、Octopress Blogを移行してみました</h3>

<p>さて、本日は新しく購入したMacbook Proに本ブログの投稿環境を移行した話を書きます。<br/>
何気に今まで目を背けていたことが仇となって結構苦労しました(汗)</p>

<p>今後、PCを買い換えることがまたあると思うのでメモ代わりに残しておこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>１．ローカルとリモートのソースを合わせる<br/>
当然ではあるのですが、Gitで管理しているローカルとリモートのソースを合わせます。<br/>
筆者は実は2年間くらい放置していたので、結構、デグレっててたいへんで、しかもこれが尾を引くことに&hellip;</p>

<p>２．<code>source</code> ブランチをクローンする<br/>
最新にした<code>source</code>ブランチを新しいMacbook Pro側でクローンします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source https://github.com/XXX/XXX.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>３．<code>master</code>ブランチを<code>_deploy</code>ディレクトリとしてクローンする<br/>
ブランチを<code>master</code>に変更することを忘れずに！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd XXX.github.io
</span><span class='line'>$ git clone https://github.com/XXX/XXX.github.io.git _deploy</span></code></pre></td></tr></table></div></figure>


<p>４．<code>bundler</code>をインストールする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>５．GitHub Pagesを設定する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.com):</span></code></pre></td></tr></table></div></figure>


<p>自分のGitHub Pagesを入力しましょう。</p>

<p>６．GitHub > Settings > SSH Keys に公開鍵を登録する<br/>
まずは下記コマンドで秘密鍵、公開鍵を作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen</span></code></pre></td></tr></table></div></figure>


<p><code>~/.ssh</code>配下に<code>id_rsa.pub</code>と<code>id_rsa</code>が作成されているので、<code>id_rsa.pub</code>を開いて中身をコピーします。<br/>
それを GitHub > Settings > SSH Keys で New SSH Key を選択して、登録します。</p>

<p>これで、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -T git@github.com
</span><span class='line'>Hi username! You've successfully authenticated...</span></code></pre></td></tr></table></div></figure>


<p>という結果が得られます。</p>

<p>７．強制プッシュを設定する<br/>
<code>rake deploy</code>すると下記エラーが出てしまうようになり、かなり悩みました&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>To https://github.com/XXX/XXX.github.io
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'https://github.com/XXX/XXX.github.io'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>Conflictが起こっているわけではないのに&hellip;<br/>
悩んだ挙句、その場しのぎで強制プッシュを設定するようにしました。<br/>
設定は<code>Rakefile</code>を変更することで可能です。<br/>
これまで下記の設定がなされていたので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin #{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<p>これを下記に変えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin +#{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<p>これでプッシュができるようになり、<code>rake deploy</code>が成功したので、ブログも無事に更新できました。<br/>
このままで良いとは思えないものの、他に解決方法わからず&hellip;一旦これで良いかな笑</p>

<p>といったところで本日はここまで。</p>

<p>参考ページ</p>

<ul>
<li><a href="https://help.github.com/articles/error-permission-denied-publickey/">GitHub Help: Error: Permission denied (publickey)</a></li>
<li><a href="http://stackoverflow.com/questions/17609453/rake-gen-deploy-rejected-in-octopress">rake gen_deploy rejected in Octopress</a></li>
<li><a href="http://momota.github.io/blog/2016/01/29/octopress/">複数の環境で Octopress を使ってブログを書く</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewでMongoDBをインストール]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/20/brew-install-db/"/>
    <updated>2016-11-20T00:10:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/20/brew-install-db</id>
    <content type="html"><![CDATA[<h3>PC移行したことで発生したHomebrew対応し直し</h3>

<p>さて、本日はMacbook Proを購入したことでブログ作成環境を移行する必要があったので、その際に気づいたことをメモしておきます。</p>

<p>これまではMongoDBやMySQLなどのDB系はインストールした後に、次回、PCログイン時に自動起動させるために手動でデーモン起動設定をする必要がありました。<br/>
しかし、今回、筆者が <strong>Homebrew</strong> で上記をインストールしてみたところ、新たな記述が出力されるようになっていました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// MongoDBの例
</span><span class='line'>$ brew install mongodb
</span><span class='line'>==&gt; Downloading https://homebrew.bintray.com/bottles/mongodb-3.2.11.sierra.bottle.tar.gz
</span><span class='line'>######################################################################## 100.0%
</span><span class='line'>==&gt; Pouring mongodb-3.2.11.sierra.bottle.tar.gz
</span><span class='line'>==&gt; Caveats
</span><span class='line'>To have launchd start mongodb now and restart at login:
</span><span class='line'>  brew services start mongodb
</span><span class='line'>Or, if you don't want/need a background service you can just run:
</span><span class='line'>  mongod --config /usr/local/etc/mongod.conf
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/mongodb/3.2.11: 18 files, 245.4M</span></code></pre></td></tr></table></div></figure>


<p>上記が実際に出力された記述になります。<br/>
筆者が注目したのは、 <strong>brew services start mongodb</strong> の部分です。<br/>
これを叩けば、デーモン起動設定がされるのでは！？と思った次第です。</p>

<p>では実際にコマンドを叩いてみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew services start mongodb
</span><span class='line'>==&gt; Tapping homebrew/services
</span><span class='line'>Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...
</span><span class='line'>remote: Counting objects: 10, done.
</span><span class='line'>remote: Compressing objects: 100% (7/7), done.
</span><span class='line'>remote: Total 10 (delta 0), reused 6 (delta 0), pack-reused 0
</span><span class='line'>Unpacking objects: 100% (10/10), done.
</span><span class='line'>Tapped 0 formulae (37 files, 46.8K)
</span><span class='line'>==&gt; Successfully started `mongodb` (label: homebrew.mxcl.mongodb)</span></code></pre></td></tr></table></div></figure>


<p>起動しているか下記コマンドで確認してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ps aux | grep mongo
</span><span class='line'>takahiro      5468   0.2  0.2  2584528  25672   ??  S    11:24PM   0:00.22 /usr/local/opt/mongodb/bin/mongod --config /usr/local/etc/mongod.conf
</span><span class='line'>takahiro      5472   0.0  0.0  2432804   1924 s000  S+   11:24PM   0:00.00 grep mongo</span></code></pre></td></tr></table></div></figure>


<p>これで既に起動していることを確認できました。<br/>
すごく便利になりましたね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(3周年)]]></title>
    <link href="http://grandbig.github.io/blog/2016/11/03/blog-3-year-anniversary/"/>
    <updated>2016-11-03T10:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/11/03/blog-3-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて3周年を迎えました</h3>

<p>なんと、先々月9/4時点で本技術ブログが3周年を迎えました！！
正直な話、すっかり忘れていました笑<br/>
しかも、こんなに長く続くとは夢にも思わず&hellip;<br/>
それを記念しまして年に1回のブログ振り返りをしたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p>まずは今年も、アクセス数の推移から紹介していきましょう。<br/>
データは <strong>Google Analytics</strong> から取得しています。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/3anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
流石にアクセス数の増加は厳しいかと思いきや、傾きは微増していますね。</p>

<p>詳細を見ると、<br/>
<img src="http://grandbig.github.io/images/3anniversary%EF%BC%92.png" alt="1年間でのアクセス数の推移" /><br/>
微増とお伝えした意味がわかるかと思います。<br/>
下記のような推移に思えますね。</p>

<ul>
<li>1周年記念: 280〜320セッション(平日)</li>
<li>2周年記念: 320〜370セッション(平日)</li>
<li>3周年記念: 350〜400セッション(平日)</li>
</ul>


<p>また、2016/10に月額最高のセッション数/ページビュー数を記録しました！<br/>
<img src="http://grandbig.github.io/images/3anniversary3.png" alt="2016/10の記録" /><br/>
なんと今年はセッション数でも10,000を突破しました。</p>

<p>さて、ブログ開始時からの総計の値はどうなったのかと言いますと、<br/>
<img src="http://grandbig.github.io/images/3anniversary4.png" alt="ブログ開始からの各数値" /></p>

<ul>
<li>【セッション数】1周年時: 24,996 → 2周年時: 122,247 → 現在: 227,125</li>
<li>【ユーザー数】1周年時: 16,819 → 2周年時: 72,567 → 現在: 130,823</li>
<li>【ページビュー数】1周年時: 32,022 → 2周年時: 153,541 → 現在: 280,770</li>
<li>【ページ/セッション】1周年時: 1.28 → 2周年時: 1.26 → 現在: 1.24</li>
<li>【平均セッション時間】1周年時: 00:01:11 → 2周年時: 00:01:11 → 現在: 00:01:11</li>
<li>【直帰率】1周年時: 84.54% → 2周年時: 85.36% → 現在: 86.06%</li>
<li>【新規セッション率】1周年時: 67.28% → 2周年時: 59.36% → 現在: 57.60%</li>
</ul>


<p>※ 1周年時とは「ブログ開始〜1年後」で現在とは「ブログ開始〜現在」を指しています。</p>

<p>2年目と比べると、セッション数/ユーザー数/ページビュー数がかなり増えていることがわかります。(2倍とまでは行きませんでしたが&hellip;)<br/>
これは恐らく、安定したアクセスを保てているということでしょう。<br/>
ただ、新規セッション率が年々減っているのが気になりますね。<br/>
全体としてのアクセス数が増えているため、一概に新規ユーザーの取り込みができていないということはできませんが、4年目も新しい情報を入れることを強く意識して、著しい低下を避けたいと思います。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>今年も見てきましょう。<br/>
アクセス数が多かった記事ランキング！！<br/>
筆者も毎年楽しみにしています笑</p>

<p><strong>1位: <a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a></strong><br/>
　　ページビュー数: 7,863 (6.18%)<br/>
　　平均ページ滞在時間: 00:07:16<br/>
<strong>2位: <a href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
　　ページビュー数: 5,348 (4.20%)<br/>
　　平均ページ滞在時間: 00:07:39<br/>
<strong>3位: <a href="http://grandbig.github.io/blog/2015/05/16/swift-base/">Swiftの基礎を理解しよう！(1)</a></strong><br/>
　　ページビュー数: 3,783 (2.97%)<br/>
　　平均ページ滞在時間: 00:06:50<br/>
<strong>4位: <a href="http://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
　　ページビュー数: 3,535 (2.78%)<br/>
　　平均ページ滞在時間: 00:07:03<br/>
<strong>5位: <a href="http://grandbig.github.io/blog/2014/04/16/unixtime/">Objective-cでUNIX時間を取得する方法</a></strong><br/>
　　ページビュー数: 3,179 (2.52%)<br/>
　　平均ページ滞在時間: 00:06:50</p>

<p>以上が上位5記事です。</p>

<p>3年目も <strong>『Backgroundで位置情報を取得しよう！』</strong> が最も多いという結果になりました。<br/>
ただし、去年までと異なるのは、2位以下に2,000ページビュー数の差をつけているものの、その割合が3%以上下がっているという点です。<br/>
総合のページビュー数が増えているにも関わらず、上記の結果が得られているということはアクセスが分散していることを意味しています。<br/>
つまり、それだけ興味をそそる記事を継続的に書けているということでしょう。</p>

<p>続いて、驚いたのがAndroidに関する記事が入ってきているということです。<br/>
毎月、アクセス数が多いなとは思っていたのですが、まさか年間通して2位に入ってくるとは夢にも思っていませんでした。<br/>
筆者の感覚だとiOSに関する記事の方が圧倒的に日本語で探しやすいイメージがあるので、案外、Androidの記事を多数載せた方が全体的なアクセス数が飛躍的に増えるのかもしれませんね。</p>

<p>そして3位にはSwiftの基礎に関する記事がランクインしました。<br/>
今年はSwiftのオープンソース化も相まって、より興味を引き立てられたのかもしれません。<br/>
筆者は最近特にサーバサイドでのSwiftの利用に非常に興味があるため、その辺りの記事も今後増えていくことになるかなと思います。</p>

<p>さてさて、4位はXCTestがランクインしていますね。<br/>
これまでアプリでのテストはオープンソースライブラリを利用するか、目視でのテストをするかに留まっており、自動テストを実施する人も少なかったのかもしれません。<br/>
しかし、Xcode7からAppleが本気で取組み始めた成果が表れており、本家のXCTestを使おうとした人が増えたのかもしれませんね。</p>

<p>最後の5位は筆者も『なぜ！？』と思わざるをえない意外な記事がランクインしました。<br/>
UNIX時間の出し方自体は何も難しいことはないはずなのになぜでしょうか&hellip;<br/>
思いつくとすれば、日本に閉じたアプリではなく、世界に向けたアプリを開発する人が増えたからなのかもしれません。</p>

<p>今年は1位以外は全て去年から入れ替わるという結果になりました。<br/>
特に2016年の記事が2つ入ったことが筆者としては非常に嬉しいです。<br/>
過去の記事が誰かの役に立つことも、もちろん喜ばしいことではあるのですが、自分自身がレベルアップするためにも新しい記事が受け入れられるようにならなくてはと思っています。<br/>
来年はどうなるのか今から楽しみでなりません。</p>

<h4>広告収入の推移</h4>

<p>最後に広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
毎年説明していますが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、推移を見ていきます。<br/>
これまでの全期間の推移(2013/11/15〜2016/11/03での推移)は下図のようになっています。<br/>
<img src="http://grandbig.github.io/images/3anniversary5.png" alt="Google Adsenseの推移" /><br/>
見てお分かりの通り、見積もり収益額が20,000円を超えています。Google Adsenseは8,000円以上で初めてお金がもらえるのですが、今年もGoogle様からお金を頂きました！</p>

<p>しかしながら、今年は新たな取組みにもチェレンジしました。<br/>
それはGoogle Adwordsです。<br/>
Google Adwordsは検索結果にページへ誘導するための謳い文句が綴られた広告を掲載することができるツールです。<br/>
クリック数に応じて、Google社にお金を支払う仕組みとなっています。<br/>
本ブログでは下図のような広告を表示していました。</p>

<p><img src="http://grandbig.github.io/images/3anniversary6.png" alt="本ブログの広告" /></p>

<p>これを掲載し続けた結果が次のとおりです。<br/>
<img src="http://grandbig.github.io/images/3anniversary7.png" alt="Google Adwordsの推移" /></p>

<p>結構、クリックされますし、お金を支払うことになります。<br/>
だいたい、月々2,000円程かかっていたので、どんなにGoogle Adsenseで稼いだとしても、今のところは毎月赤字でした&hellip;笑</p>

<p>そもそもの目的が収入増加ではなく、どんなものなのか知りたいという知的好奇心からきたものなので、勉強代と思えば安い!?</p>

<h3>まとめ</h3>

<p>さて、今年もブログの1年間のまとめを見てきました。<br/>
筆者は月単位で記事をこのくらいは書きたいと決めて書いていることが多いので、何とか継続して書けています。<br/>
一方でタスクになっているなと感じる月も確実に存在しており、ブログ記事としての質の低下に繋がるのではと危惧することも少なくありません。<br/>
ですが、質を重視しすぎるが故に記事を書かなくなることもしたくはありません。<br/>
ここについては今年の課題として紳士に向き合いつつ、折り合いをつけていければと思います。<br/>
ただ、この1年の振り返り記事は書くのが非常に楽しかったな〜<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side Swift: Perfect を使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/30/swift-perfect/"/>
    <updated>2016-10-30T22:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/30/swift-perfect</id>
    <content type="html"><![CDATA[<h3>Server Side SwiftライブラリのPerfect</h3>

<p>本日は以前書いたサーバサイドSwiftの続きを書きます！<br/>
と言いたかったところなのですが、Swift ExpressはSwift3.0やXcode8に対応しておらず、何もできなかったため、方向転換して最もSTAR数の多い<a href="https://github.com/PerfectlySoft/Perfect">PerfectlySoft/Perfect</a>を使うことにしました。</p>

<p>よくよく見るとMySQLだけでなくMongoDB接続用にもモジュールが用意されており、なかなか良さそうではないですか！！<br/>
とは言いつつも、そんなにすぐにMaster Of Perfectにはなれないので少しずつ見ていくことにします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h4>チュートリアルを触ってみる</h4>

<p>まずは何はともあれGitHubの <em>Getting Started</em> からやらないと話になりません。<br/>
手順は簡単です。</p>

<p>１．テンプレートプロジェクトをクローンする<br/>
<code>git clone https://github.com/PerfectlySoft/PerfectTemplate.git</code></p>

<p>２．ビルドを実行する<br/>
クローンした<code>PerfectTemplate</code>フォルダ内に入り、ビルドを実行しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd PerfectTemplate
</span><span class='line'>$ swift build</span></code></pre></td></tr></table></div></figure>


<p>３．サーバを起動します<br/>
なんと後は下記コマンドでサーバを起動するだけです。</p>

<p><code>.build/debug/PerfectTemplate</code></p>

<p>正しく起動すれば、下記ログが出力されます。<br/>
<code>Starting HTTP server on 0.0.0.0:8181 with document root ./webroot</code><br/>
またログの指示通りChromeで<code>http://localhost:8181/</code>にアクセスすれば<code>Hello World</code>が拝めます。</p>

<h4>ルーティングの書き方について学ぶ</h4>

<p>では次に簡単なルーティングについて学んでいきましょう。<br/>
チュートリアルでは、下記GETリクエストのみ受け付けていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(.</span><span class="nx">contentType</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Hello, world!&lt;/title&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>最も単純なGETリクエストですね。<br/>
では、<code>ID: 100</code>のユーザ情報を取得するGETリクエストはどう受け付けるのでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user/{id}&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(.</span><span class="nx">contentType</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;text/html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;body&gt;You GET UserInfo with \(request.urlVariables)&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけです。<br/>
では、POSTリクエストの受け付けはどうでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">post</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;body&gt;You POSTed user data to catch your POST request.&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これも簡単ですね。<br/>
書き方に若干の違いはあれど、最早Node.jsとそんなに変わらん&hellip;</p>

<p>おまけで、POSTリクエストで届いたJSONStringをバラバラっと分解して返却してみました。<br/>
そのためにまずはJSONStringをデコードする処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// decode.swift</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PerfectHTTPServer</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PerfectLib</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">postBody</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="o">:</span> <span class="nx">Any</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">guard</span> <span class="kd">let</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="k">try</span> <span class="nx">postBody</span><span class="o">?</span><span class="p">.</span><span class="nx">jsonDecode</span><span class="p">()</span> <span class="nx">as</span><span class="o">?</span> <span class="p">[</span><span class="nb">String</span><span class="o">:</span><span class="nx">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">print</span><span class="p">(</span><span class="nx">decoded</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">decoded</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを下記のように利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// main.swift</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">Routes</span><span class="p">()</span>
</span><span class='line'><span class="nx">routes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">method</span><span class="o">:</span> <span class="p">.</span><span class="nx">post</span><span class="p">,</span> <span class="nx">uri</span><span class="o">:</span> <span class="s2">&quot;/user&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">decodedParam</span> <span class="o">=</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">postBody</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">postBodyString</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="k">in</span> <span class="nx">decodedParam</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="nx">userInfo</span> <span class="o">=</span> <span class="nx">userInfo</span> <span class="o">+</span> <span class="s2">&quot;name is \(value as! String).\n&quot;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s2">&quot;email&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="nx">userInfo</span> <span class="o">=</span> <span class="nx">userInfo</span> <span class="o">+</span> <span class="s2">&quot;email is \(value as! String).&quot;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">appendBody</span><span class="p">(</span><span class="nx">string</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;POST handler: \(userInfo)&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">completed</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、実装できたのでクライアントからリクエストを投げてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// クライアントからPOSTリクエストを投げます</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8181/user -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;name&quot;:&quot;Ichiro&quot;, &quot;email&quot;: &quot;xxx@gmail.com&quot;}&#39;</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;&lt;</span><span class="nx">body</span><span class="o">&gt;</span><span class="nx">POST</span> <span class="nx">handler</span><span class="o">:</span> <span class="nx">name</span> <span class="nx">is</span> <span class="nx">Ichiro</span><span class="p">.</span>
</span><span class='line'><span class="nx">email</span> <span class="nx">is</span> <span class="nx">xxx</span><span class="err">@</span><span class="nx">gmail</span><span class="p">.</span><span class="nx">com</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/body&gt;&lt;/html&gt;xxxx:PerfectTemplate</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて今回は<code>Perfect</code>を使ったサーバサイドSwiftを見てみました。<br/>
まだまだ基本的なリクエストの受付しかみていませんが、既にいろいろなモジュールが用意されているようなので、継続的に見ていきたいと思います。<br/>
やっぱりライブラリを作るなら、最新の状況についていかないと見捨てられるな〜と思ってしまいました。<br/>
(今回で言うと、Swift3やXcode8とかですね。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsでrouterモジュールでルーティング！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/30/node-router/"/>
    <updated>2016-10-30T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/30/node-router</id>
    <content type="html"><![CDATA[<h3>Expressなしで簡単にルーティングしよう！</h3>

<p>さて、久しぶりにNode.jsについて書きます。<br/>
筆者が本格的にNode.jsを利用していたのは3〜4年前だったため、Expressをよく利用していました。<br/>
その後、Expressを利用するほどのリッチな機能を必要としない、簡易的なデモ用のサーバサイドの仕組みを作るのにバリバリ自作ルーティングをしていました。<br/>
しかし、ここにきてExpressを利用するでもなく、かと言って自作でルーティング処理を書くのも若干面倒だと感じるとき果たしてどうすれば良いのかふと気になりました。<br/>
「きっと今の世の中なら何らかのモジュールが出ているはず！」と思った筆者は早速探してみることに&hellip;</p>

<p>そこで見つけたのが<a href="https://github.com/pillarjs/router">router</a>です。<br/>
このモジュールを利用すれば、次のように簡単にルーティングを実装することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">finalhandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;finalhandler&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">start</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">finalhandler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// GETリクエストのハンドリング</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users/:path&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// POSTリクエストのハンドリング</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">users</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">users</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Invalid API Syntax\n&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;server has started.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、 <code>server.js</code> はモジュールとして切り出しています。<br/>
実際には <code>app.js</code> で呼び出すようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./server&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、今後たくさんのリクエストを捌くことを考えると、もう少しリクエスト内容ごとにファイルを分けた方が良いですよね&hellip;<br/>
と言うことで少々修正します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// server.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">finalhandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;finalhandler&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./users&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   サーバ起動処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">finalhandler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users/:path&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>  <span class="c1">// GETリクエスト</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>        <span class="c1">// POST, PUT, DELETEリクエスト</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;server has started.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように<code>server.js</code>はサーバ起動だけに絞りました。<br/>
そしてリクエストを受け付けたあとの処理は下記のように<code>users.js</code>に書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// users.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s2">&quot;text/plain; charset=utf-8&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Invalid API Syntax\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにまとめることで可読性高くなるので、ルーティングの意味も出てくるというものですね。<br/>
因みに、GETとPOSTリクエストを送れば下記のような結果が得られます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8888/users/20161029</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="mi">20161029</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// POSTリクエスト</span>
</span><span class='line'><span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8888/users -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;value&quot;:&quot;Sample&quot;}&#39;</span>
</span><span class='line'><span class="c1">// 結果</span>
</span><span class='line'><span class="nx">Sample</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Node.jsでデバッグ</h3>

<p>筆者はこれまで <code>node-inspector</code> を利用していたのですが、何とv6.3.0からデバッグ機能が標準装備されているらしいですね！<br/>
早速ですが使ってみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Node.jsでデバッグ起動</span>
</span><span class='line'><span class="nx">node</span> <span class="o">--</span><span class="nx">inspect</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9229</span><span class="p">.</span>
</span><span class='line'><span class="nx">Warning</span><span class="o">:</span> <span class="nx">This</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">experimental</span> <span class="nx">feature</span> <span class="nx">and</span> <span class="nx">could</span> <span class="nx">change</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">start</span> <span class="nx">debugging</span><span class="p">,</span> <span class="nx">open</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">URL</span> <span class="k">in</span> <span class="nx">Chrome</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="o">-</span><span class="nx">devtools</span><span class="o">:</span><span class="c1">//devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/f1478fd8-33f2-4bca-8ab4-4ac9be3515cb</span>
</span><span class='line'><span class="nx">server</span> <span class="nx">has</span> <span class="nx">started</span><span class="p">.</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">attached</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力される <code>chrome-devtools://devtools/remote/serve_file/@....</code> の部分をChromeのアドレスバーに貼りましょう！<br/>
<code>node-inspcetor</code> さながらのデバッグができるはずです。</p>

<p>因みに、起動時のオプションとして <code>--debug-brk</code> をつけると必ず1行目でデバッグが停止します。<br/>
一度停めたい場合はオプションを使いましょう。</p>

<h3>まとめ</h3>

<p>今回はNode.jsに触る機会があったため、どうすれば簡単にルーティングが実装できるのか調べてみました。<br/>
Expressを使っても良かったのですが、極力不要なモジュールを取り込みたくない気持ちがあったので割りと最低限にできて良かったなと思いました。<br/>
Node.jsは少しずつリハビリしながら思い出していくことにしようかな。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NoSQLの特性を調べよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/09/nosql/"/>
    <updated>2016-10-09T11:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/09/nosql</id>
    <content type="html"><![CDATA[<h3>NoSQLとは</h3>

<p>本日は珍しくiOS以外について書きます。<br/>
今やそんなに目新しい技術ではなくなってきたNoSQLですが、改めてどんなものか復習してみようと思います。<br/>
筆者が馴染みのあるNoSQLはMongoDBとRedisくらいなのでまだまだ知らないことも多く、一度まとめてみます。</p>

<p>NoSQLとは「Not only SQL」の略でMySQLやOracleなどの所謂RDBMSではないデータベースを指します。<br/>
その名の通りSQLは使いません(SQL相当のものはあったりします)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>NoSQLの代表例</h3>

<p>NoSQLには様々なものが存在します。<br/>
特によく取り上げられるものを見ていきましょう。<br/>
(今回取り上げるのはオープンソースなものに限ります。)</p>

<h4>MongoDB</h4>

<p>筆者が最も馴染みのあるNoSQLはMongoDBです。<br/>
普通ならあり得ないかもしれませんが、筆者にとって初めて触れたデータベースでもあります。</p>

<p>【概要】</p>

<ul>
<li>ドキュメントと呼ばれるJSONっぽいデータ構造でデータを保存する

<ul>
<li>JavaScript好きな人には見やすいデータ形式</li>
<li>サーバサイドもJavaScriptで書きたいNode.js好きな人が寵愛するポイントでもある</li>
</ul>
</li>
<li>ドキュメントの集合をコレクションと言う

<ul>
<li>RDBMSのテーブルのイメージで考えればRDBMSしか触っていない人も理解しやすい</li>
</ul>
</li>
<li>データベースに直接JavaScriptを流し込むことができる</li>
<li>CRUDクエリが高速

<ul>
<li>筆者の中では特にinsertが得意なイメージ</li>
</ul>
</li>
<li>v3.0からパフォーマンスが大幅に改善されている

<ul>
<li>昔MongoDBを見限った人は再度見ることを勧める</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>WEBシステムでの利用

<ul>
<li>結局、RDBMSでないと&hellip;みたいな意見もあるが、割りと実例多いし普通に使える</li>
</ul>
</li>
<li>位置情報系サービスでの利用

<ul>
<li>位置情報関連のIndexが充実して使いやすいイメージ</li>
</ul>
</li>
<li>大量データの蓄積に利用

<ul>
<li>ログの蓄積として活躍できる</li>
<li>NoSQLがそもそもビッグデータに最適な作りになっているパターンが多い</li>
</ul>
</li>
</ul>


<h4>Redis</h4>

<p>続いて馴染みのあるNoSQLがRedisです。</p>

<p>【概要】</p>

<ul>
<li>メモリ上にKVS(key-value store)を構築する</li>
<li>メモリ上にデータを持つのでRead/Write共に高速</li>
<li>ディスクにも定期的にデータを保存するがリアルタイムではない</li>
</ul>


<p>【用途】</p>

<ul>
<li>キャッシュ用のDBとして利用

<ul>
<li>セッション情報の格納で使われることはかなり多い</li>
<li>WebSocketを使ったリアルタイムな処理にも向いている</li>
</ul>
</li>
</ul>


<h4>CouchDB</h4>

<p>今まで触ったことのないDBですが、調べてみました。<br/>
MongoDBに似ているイメージだったのですが、全然違うんですね&hellip;</p>

<p>【特徴】</p>

<ul>
<li>ドキュメント指向データベース

<ul>
<li>JSON形式でデータ保存</li>
<li>MongoDBと同じくデータをドキュメントと呼ぶ</li>
</ul>
</li>
<li>RESTful APIでCRUD操作

<ul>
<li>DBに馴染みがないと逆に入りやすい特徴かもしれません</li>
<li>URIでドキュメントがマッピングされている</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>ローカルストレージとして利用

<ul>
<li>iOSやAndroidアプリ内のローカルストレージとして利用する</li>
</ul>
</li>
<li>1リクエストで単体データを取得する場面

<ul>
<li>まさに紙ドキュメントをPDF化したようなデータを格納して、URIマッピング特性活かすような場面</li>
</ul>
</li>
</ul>


<p>あまり複雑なデータ構造に適しているようには思えなかったのが正直なところです。<br/>
NoSQLどころかRDBMSにも馴染みがない一方でAPサーバ周りの構築はしたことがある人が触るときにとっつきやすそうなイメージを持ちました。</p>

<h4>Cassandra</h4>

<p>これまた触ったことのないDBですが、調べてみました。</p>

<p>【特徴】</p>

<ul>
<li>分散型データベースシステム

<ul>
<li>列指向型</li>
<li>KVSの一種でもある</li>
</ul>
</li>
<li>リッチなデータモデルを持つ

<ul>
<li>データの最小単位をカラムと呼ぶ</li>
<li>カラムの集合をスーパーカラムと呼ぶ(5次元配列として持つ場合のみ)</li>
<li>RDBMSで言うところのテーブルに当たるのがカラムファミリ</li>
</ul>
</li>
<li>耐障害性が高い

<ul>
<li>マスターノードのないアーキテクチャ</li>
<li>データは各ノードに分散や複製されるためデータ損失のリスクも低い</li>
</ul>
</li>
<li>世界的に有名な企業がこぞって利用

<ul>
<li>Facebook, Twitter, Adobe, Cisco, Netflix など</li>
</ul>
</li>
</ul>


<p>【用途】</p>

<ul>
<li>DBを止めたくない耐障害性を求められるシステム</li>
<li>超大規模案件

<ul>
<li>そもそもFacebookでその用途で開発されていたし&hellip;</li>
<li>Twitterでも新着ツイートのデータ格納に使われていたとか&hellip;</li>
<li>データマイニングとか分析系に強そう</li>
</ul>
</li>
</ul>


<p>Cassandraはかなり堅牢かつ大規模サービスでの利用に最適なイメージを持ちました。<br/>
逆に特性を知っていないと持て余しそうなくらい&hellip;</p>

<h3>最後に</h3>

<p>さて如何でしたでしょうか？<br/>
結局、興味があるものに少し触れただけになってしまいましたが、筆者自身の見解も広がりました。<br/>
MongoDBやRedisも中途半端にかじって終わってる感があるのでもっと勉強したいと思っていましたが、Cassandraとかかなり実用途ありそうなのでだいぶ興味を惹かれました。<br/>
一方でそんな大規模なサービスを日本企業初でやることって世界に比べたら相当少ないんだろうなと思いました。<br/>
ま、機会を見つつ1つ1つ身につけていければ良いかなというところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
