<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2013-10-16T23:12:59+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリで使おう様々なWeb-API]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/16/xcode-api/"/>
    <updated>2013-10-16T22:03:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/16/xcode-api</id>
    <content type="html"><![CDATA[<h3>Web-APIを使ってJSON形式でデータを取得したい！</h3>

<p>iPhoneアプリをいざ作ろう！となったとき◯◯のデータを使って、▼▲なアプリが作れたらな〜なんて思うことはないでしょうか？<br/>
でもいざ作ろうとすると膨大なデータを自分で作ることもできないし、作り方もわからない…。あ〜作れない〜てなことになるでしょう。そんなときは既にどこかの誰かが作った<strong>API</strong>を使えばいいわけです。世の中にはとても便利なAPIが溢れています(たぶん&hellip;)<br/>
しかし、気をつけておきたいのはそれが無料なのか、商用フリーなのかということです。</p>

<!--more-->


<h4>Web-APIの例</h4>

<p>どのくらい無料&amp;商用フリーで使えるAPIがあるのか探してみました。<br/>
※商用フリーでもライセンス表記など条件があるかもしれないので十分ご注意下さい。<br/>
・OpenStreetMap：Map情報の取得<br/>
　<a href="http://www.openstreetmap.org/">OpenStreetMap公式ページ</a><br/>
・OpenWeatherMap：天気情報の取得<br/>
　<a href="http://openweathermap.org/">OpenWeatherMap公式ページ</a><br/>
・HeartRails Geo API：Map情報の取得<br/>
　<a href="http://geoapi.heartrails.com/api.html">HeartRails Geo API公式ページ</a><br/>
・HeartRails Express API：鉄道・路線情報の取得<br/>
　<a href="http://express.heartrails.com/api.html">HeartRails Express API公式ページ</a><br/>
・detectFace();：顔認識情報の取得<br/>
　<a href="http://detectface.com/">detectFace();公式ページ</a></p>

<p>因みに筆者はどれも使ったことがありません&hellip;。Google Maps APIは使ったことがあるって程度です。</p>

<h4>XcodeでJSON形式を扱うためには</h4>

<p>さて、APIを利用すると、xmlまたはjsonのどちらかを指定して下さいといったことがあります。私はjsonを扱うことが多いため(というか、xmlは使ったことがないので&hellip;)ここではjson形式を扱うことについてご紹介致します。<br/>
恐らく、ほとんどの方々が<strong>SBJson</strong>を利用されているのではないでしょうか？ネットで調べても真っ先に出てくると思います。<br/>
ライセンスも修正BSDライセンス(New BSD License)なので商用でも非常に使いやすいです。<br/>
使うための準備としては<br/>
1: <a href="https://github.com/stig/json-framework/">公式ページ</a>に上がっているのでダウンロード<br/>
2: json-framework-master/src/main/objc/直下のファイルを全てコピー<br/>
3: 追加したいXcodeプロジェクトに追加(SBJsonなどフォルダを作って、その配下に置いた方が見やすいでしょう)<br/>
4: JSONを扱いたいファイルで<strong>#import &ldquo;SBJson.h&rdquo;</strong>と表記<br/>
となります。<br/>
<img src="http://grandbig.github.io/images/xcode_sbjson_add.png" alt="XcodeにSBJsonを追加" /></p>

<p>準備ができたら後は簡単です。<br/>
参考までに今回は<strong>OpenWeatherMap API</strong>を利用したサンプルを作成します。</p>

<p>作成するサンプルは日本の東京の天候を取得して、ラベルに表示するというものです。<br/>
では例によってViewController.m, ViewController.h, ViewController.xibファイルを追加するところまで作成して下さい。<br/>
で、ViewController.mファイルのViewDidLoad関数に以下を書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  // ①
</span><span class='line'>  NSString *url = @"http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp";
</span><span class='line'>  // ②
</span><span class='line'>  NSString *urlEscapeStr = [[NSString  stringWithString:url] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>  // ③
</span><span class='line'>  NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:urlEscapeStr] cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:15];
</span><span class='line'>  // ④
</span><span class='line'>   NSData *responseData = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];
</span><span class='line'>  // ⑤
</span><span class='line'>  SBJsonParser* parser = [[SBJsonParser alloc]init];
</span><span class='line'>  // ⑥
</span><span class='line'>  NSDictionary *result = [parser objectWithData:responseData];
</span><span class='line'>  // ⑦
</span><span class='line'>  NSArray *main = [result valueForKeyPath:@"weather.main"];
</span><span class='line'>  NSString *weather = main[0];
</span><span class='line'>  label1.text = weather;</span></code></pre></td></tr></table></div></figure>


<p>① OpenWeatherMap APIのリクエストURLをセット<br/>
② リクエストURLをUTF8でエンコード※stringByAddingPercentEscapesUsingEncodingを使うとAPIでよく使われる<strong>&amp;</strong>はエスケープされません。<br/>
③ 通信するためにNSMutableURLRequest型のrequestを作成<br/>
④ 通信<br/>
⑤ ここからSBJsonを利用します。まずはSBJsonを初期化<br/>
⑥ JSON形式で来たデータをNSDictionary型に格納<br/>
⑦ weather.mainの値を抽出してラベルに表示<br/>
※ label1はViewController.xibでセットしたラベルになります。</p>

<p>その結果がこれ↓<br/>
<img src="http://grandbig.github.io/images/xcode_openweathermap_sample.png" alt="OpenWeatherMapで天気を取得してラベルに表示してみた" /></p>

<p>こんな簡単にAPIを使えるなら、やらない手はないですよね？<br/>
筆者もAPIを使ったアプリの開発をこれから考えようと思います。<br/>
ってことで今日は以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/"/>
    <updated>2013-10-14T19:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/14/submit-ios-app</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリの申請に苦労した話</h3>

<p>9月から細々と開発を続けていたiPhoneアプリをとうとう申請することにしました。開発が終盤に差し掛かるにつれて、ブログをなかなか書くことができなかったのですが、ひとまず一段落したということで久しぶりに書きます。</p>

<!--more-->


<h4>iPhoneアプリを申請する前の注意点</h4>

<p>まず、申請についてお話する前に、申請前に気をつけなくてはならないことについて紹介します。<br/>
<strong>1: 外部のframeworkを使用している場合</strong><br/>
現在、世の中には無数のframeworkがgithubに上がっています。下手に自分で開発をするよりも、既に先駆者が開発し、バグを修正し続けたものを使用した方がはるかに安定したアプリとなり、さらに迅速に開発をすすめることができます。<br/>
しかし、注意しなくてはならないのは<strong>ライセンス</strong>です。ライセンスの種類としてはMITライセンス, GPLライセンス, MPLライセンス…などなどあります。これらのライセンスにのっとった使い方をしないとアプリの公開を中止せざるを得なくなるなど様々なことが起きてしまうことでしょう。<br/>
MITライセンスは比較的面倒なことが少ないので、MITライセンスだと「ラッキー！」と思います笑<br/>
詳しいライセンス条件については<a href="http://smkn.xsrv.jp/blog/2009/03/summary_for_gpl_mit_cc_etc/">GPLやMITやCCなど主要ライセンスの内容と意味のまとめ</a>などの先駆者のページをご参照下さい。<br/>
<strong>2: ネット上のアイコンを使用している場合</strong><br/>
iPhoneアプリを開発する上で欠かすことができないもの、それは画像(アイコン)です。<a href="http://www.adobe.com/jp/products/illustrator.html">Adobeイラストレータ</a>やフリーソフトの<a href="http://www.gimp.org/">Gimp</a>, 最近で言うと<a href="https://www.google.com/webdesigner/">Google Web Designer</a>(ただし、ベータ版)などが使いこなせる方は悩む必要はないのですが、ほとんどの方がフリーアイコンをネット上から探されるのではないでしょうか。<br/>
このときも当然ライセンスに気をつけなくてはなりません。特に商用フリーを謳っているものであってもよくよく詳細を見てみるとリンクを貼る、あるいはメール送信して許可をとるなど制限があることがあります。これに気づかずに、実装したままアプリを申請してしまうとこれまたアプリの公開を中止することになりかねません。<br/>
十分にライセンスには注意しましょう。<br/>
また、制限のない商用フリーアイコンであったとしても、明らかに著作権を違反しているものもあります。映画やアニメのキャラクターを使ったりしている場合ですね…。ま、これはぱっと見でわかるでしょう。</p>

<h4>ホームアイコンの作成方法</h4>

<p>筆者はホームアイコンの作成を考えたとき、初めに思い浮かんだのがGimpを使うという方法でした。しかし、ネットで調べてみると、あぁKeynoteを使えばよいのかと思い知らされました。Keynoteは有料アプリだったので購入する必要がありましたが、筆者はインストール済みだったため、このハードルは既にクリアしていました。<br/>
個人的にはGimpは慣れないと非常に使いにくいと思っているので、使い慣れたPowerPointに近いKeynoteを選択しました。<br/>
最近はiOS7になって、フラットデザイン押しになったこともあり、あえて立体感を出すようにアイコンに影をつけるといったことをする必要もあまりないでしょう。なので、Keynote上で正方形ベースにアイコンを貼ったり、文字を書いたりするだけで作成ができてしまうんです。<br/>
唯一、困るのが1024×1024など大きなアイコンやスプラッシュ画面の作成ではKeynoteのスライドをはみ出してしまうということだったのですが、スライドの大きさはカスタマイズできるので問題ありませんでした。<br/>
参考: <a href="http://support.apple.com/kb/HT2925?viewlocale=ja_JP">アーカイブ &ndash; Keynote 2: スライドの解像度をデフォルトのサイズから変更する方法</a></p>

<h4>iTunes Connect上で登録</h4>

<p>さて、いよいよアプリの申請作業に入っていきます。筆者はてっきり、iTunes Connect上で終了するのかと思っていたのですが、アプリ自体の送信は別作業なんですね…。<br/>
筆者は<a href="http://docs.monaca.mobi/ja/manual/deploy/appstore/reg_appstore/">iOS版アプリのApp Storeへの登録</a>を見て滞りなくiTunes Connectに登録できました。思った以上に必須項目が多かったこと、アプリの説明文章を考えていなかったり、App Storeで公開するキャプチャを用意してなかったり準備が足りなかったことが響き、とても時間がかかりました。(特に3.5インチのキャプチャは困りました。なんとかシミュレータ起動することでクリアしましたが…)</p>

<h4>アプリをAppleに送信する方法</h4>

<p>いよいよアプリをAppleに送ります。これにはどうやら２種類の方法があるようです。<br/>
<strong>1: Application Loaderを使う方法</strong><br/>
iTunes ConnectからダウンロードするApplication Loaderを利用することで申請ができるようです。しかし、筆者が試したところ、何度やっても『ネットワークが接続できません』と出てしまい、ダメでした。途方に暮れていたところ、次の方法の存在を知りました。<br/>
<strong>2: Xcodeを使う方法</strong>
もう１つの方法はXcodeを使う方法です。ここでは証明書の発行&amp;プロビジョニングファイルの発行と設定などは省略します。<br/>
まずは、Product > Archiveを選択して下さい。<br/>
<img src="http://grandbig.github.io/images/xcode_archive1.png" alt="ProductからArchiveを選択" /><br/>
するとOrganizerウィンドウが開かれるので『Distribute&hellip;』を選択して下さい。<br/>
<img src="http://grandbig.github.io/images/xcode_archive2.png" alt="Distributeを選択" /><br/>
次に『Submit to the iOS App Store』を選択して下さい。<br/>
<img src="http://grandbig.github.io/images/xcode_archive3.png" alt="Submit to the iOS App Storeを選択" /><br/>
最後にユーザ名とパスワードを確認して次に進めば終了です。
<img src="http://grandbig.github.io/images/xcode_archive4.png" alt="UsernameとPasswordを確認" /></p>

<p>さて、リジェクトされることも十分考えられますので、気長に待ちつつ、何か参考になることがあれば、ブログでもどしどし紹介していこうと思います。ということで本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebViewのキャッシュの仕組みを見極めよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/05/webview-cache/"/>
    <updated>2013-10-05T02:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/05/webview-cache</id>
    <content type="html"><![CDATA[<h3>WebViewとcache.manifestの関係性を知ろう！</h3>

<p>前回はPCで見た場合のキャッシュについて調べました。本日も引き続きキャッシュについて調べてみたいと思います。<br/>
筆者が最も疑問を感じていたのはiPhoneアプリ内でWebViewを利用したときキャッシュはどうなるのか？ということです。<br/>
今日は実際に実機でテストをしながら進めます。<br/>
そしてどうせならばiOS7搭載の実機で試してみましょう！</p>

<!--more-->


<h4>cache.manifestのキャッシュはどこに保存される？</h4>

<p>前回説明したcache.manifestを使用すると、そのキャッシュはどこに保存されるのか確認します。<br/>
まずはcache.manifestをindex.htmlで読み込まない以下の場合で見てみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--index.html--&gt;
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--cache.manifestは読み込まない--&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
</span><span class='line'>      &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
</span><span class='line'>      &lt;meta name="format-detection" content="telephone=no"&gt;
</span><span class='line'>      &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
</span><span class='line'>      &lt;title&gt;Cache-Test&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;div id="word"&gt;Cache Test&lt;/div&gt;
</span><span class='line'>      &lt;img src="./image1.png" /&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>このページを簡単なWebViewアプリに表示します。<br/>
CachePracticeという名前のアプリを作成してiOS7の端末にインストールしました。<br/>
<img src="http://grandbig.github.io/images/cachepractice_1.PNG" alt="iOS7にWebViewアプリをインストール" /></p>

<p>さて立ち上げてみましょう！<br/>
<img src="http://grandbig.github.io/images/cachepractice_2.PNG" alt="cache.manifestを設定していないページをWebViewに表示" /></p>

<p>このときのアプリ内のデータをPCにダウンロードして見てみましょう。
<img src="http://grandbig.github.io/images/cachepractice3.jpg" alt="cache.manifestを設定していないページを読み込んだ場合" /><br/>
Cache.dbというものがありますね。</p>

<p>では次に以下のcache.manifestを読み込ませたindex.htmlをWebViewで表示した場合を見てみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--index.html--&gt;
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--cache.manifestを読み込む--&gt;
</span><span class='line'>&lt;html manifest="cache.manifest"&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
</span><span class='line'>      &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
</span><span class='line'>      &lt;meta name="format-detection" content="telephone=no"&gt;
</span><span class='line'>      &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
</span><span class='line'>      &lt;title&gt;Cache-Test&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;div id="word"&gt;Cache Test&lt;/div&gt;
</span><span class='line'>      &lt;img src="./image1.png" /&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/cachepractice4.png" alt="cache.manifestを設定したページをWebViewに表示" /><br/>
このようにApplicationCache.dbというものが作られました。どうやらcache.manifestでのキャッシュはここに保存されているようですね。<br/>
それを裏付けるようにcache.manifestに画像を新たに追加したところApplicationCache.dbのサイズが増えました</p>

<h4>今後の調査について</h4>

<p>cache.manifestについては大体わかりました。<br/>
次に調べるとしたらネイティブ側のキャッシュ機構です。様々なサイトでネイティブキャッシュはCache.dbで保存されると書かれています。<br/>
因みにSQLite 3.7.0以上から<strong>WAL(Write-Ahead log)</strong>方式になりました。現在普及しているiOSではSQLite3.7.0以上を利用しているため、自動的にWAL方式でキャッシュしています。
先ほど上げた画像を見てもCache.db, Cache.db-shm, Cache.db-walが生成されていることが確認できます。</p>

<p>これら3つのファイルのサイズを眺めているとCache.db-walがどんどん増大していきます。一方でCache.dbのサイズは大きくならないんですよね&hellip;。このことからネイティブキャシュはDB(Cache.db)からキャッシュ情報を取り出すのではなく、ログファイル(Cache.db-wal)からキャッシュ情報をリカバリしているように思えます。
もっと詳しいことがわかれば追記したいと思います。</p>

<p>とりあえず、今日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cache.manifestのキャッシュがかなり厄介!?]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/04/html5-cache-dot-manifest/"/>
    <updated>2013-10-04T00:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/04/html5-cache-dot-manifest</id>
    <content type="html"><![CDATA[<h3>cache.manifestで苦労することまとめ</h3>

<p>本日は筆者が日頃から困っているcache.manifestについて紹介したいと思います。<br/>
『な〜んだWebか〜。ネイティブアプリとは関係ないかな〜』なんて思っていませんか？<br/>
ネイティブアプリではWebViewを実装することができます。このWebViewにも大いに関わってくるところなので、知って損はないでしょう。</p>

<!--more-->


<h4>cache.manifestの基本を簡単に紹介</h4>

<p>cache.manifestを使ったことがあるという方は多いでしょうが、おさらい程度に基本を確認しておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cache.manifestの記載例
</span><span class='line'>CACHE MANIFEST
</span><span class='line'>
</span><span class='line'>#version 1.0
</span><span class='line'>
</span><span class='line'>CACHE:
</span><span class='line'>image1.png
</span><span class='line'>
</span><span class='line'>NETWORK:
</span><span class='line'>base.css
</span><span class='line'>
</span><span class='line'>FALLBACK:</span></code></pre></td></tr></table></div></figure>


<p>・CACHEはキャッシュしたいファイルを記載します。<br/>
・NETWORKは毎回サーバに問い合わせたいファイルを記載します。<br/>
・FALLBACKはキャッシュできなかった場合の代わりのファイルを記載します。
・キャッシュしたいファイルの設定は変わらないがキャッシュの変更を読み込ませたいというときにversionをアップさせましょう。(なぜ必要か詳しくは例を交えて説明します)</p>

<h4>cache.manifestを試そう</h4>

<p>実際に簡単なhtml, css, cache.manifestを作成してcache.manifestの挙動を確認してみます。</p>

<p>まずはcache.manifestを読み込む設定を書くindex.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//index.html
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html manifest="cache.manifest"&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
</span><span class='line'>      &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
</span><span class='line'>      &lt;meta name="format-detection" content="telephone=no"&gt;
</span><span class='line'>      &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
</span><span class='line'>      &lt;title&gt;Cache-Test&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;div id="word"&gt;Cache Test&lt;/div&gt;
</span><span class='line'>      &lt;img src="./image1.png" /&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>次にcache.manifestの変更がわかりやすいようにcssを作成しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html, body {
</span><span class='line'>  position: absolute;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>  padding: 0;
</span><span class='line'>  margin: 0;
</span><span class='line'>  background-color: white;
</span><span class='line'>}
</span><span class='line'>#word {
</span><span class='line'>  font-size: 30px;
</span><span class='line'>  text-align: center;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これをChromeで表示すると
<img src="http://grandbig.github.io/images/cachetest1.png" alt="Chromeで確認しよう" /><br/>
このようになっています。</p>

<p>画像はデバッガツールで詳細を見た様子です。cache.manifestで書いたimage1.pngだけでなくcache.manifestの読み込みを書いた<strong>index.html自体もキャッシュ</strong>されています。因みにbase.cssファイルはキャッシュされていないことも確認できます。<br/>
base.cssは毎回読み込みに行くので変更内容は次回アクセス時に即座に反映されます。<br/>
重要な事は<strong>cache.manifestを編集していなくても反映される</strong>ということです。</p>

<p>一方でindex.htmlの内容を以下に変えてみたとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;body&gt;
</span><span class='line'>  &lt;div id="word"&gt;Cache Test&lt;/div&gt;
</span><span class='line'>  &lt;img src="./image1.png" /&gt;
</span><span class='line'>  &lt;div&gt;test&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>これでブラウザを更新してみましょう。divタグを追加したにも関わらず何も変化がないはずです。<br/>
CACHEで設定したファイルの変更を知らせるためには必ずcache.manifestに変更を加えて下さい。(この場合はcache.manifestのバージョンを上げれば十分です。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cache.manifestのコメントアウトのバージョンを変更しよう
</span><span class='line'>CACHE MANIFEST
</span><span class='line'> 
</span><span class='line'>#version 1.0.1
</span><span class='line'> 
</span><span class='line'>CACHE:
</span><span class='line'>image1.png
</span><span class='line'> 
</span><span class='line'>NETWORK:
</span><span class='line'>base.css
</span><span class='line'> 
</span><span class='line'>FALLBACK:</span></code></pre></td></tr></table></div></figure>


<p>さて改めてブラウザを更新しましょう。あれ？まだ何も変わらない！と思うかもしれませんが、よくよくデバッガツールを見てみて下さい。<br/>
<img src="http://grandbig.github.io/images/cachetest2.png" alt="キャッシュが更新されている" /><br/>
cache.manifestの更新を読み込んでいます。</p>

<p>ここでもう一度ブラウザを更新しましょう。すると、先ほど追加したdivタグが表示されているはずです。</p>

<p>つまり、cache.manifestの読み込みを書いたindex.html自体を更新するためには2回ブラウザを更新する必要があるということです。<br/>
これをもし、iPhoneのネイティブアプリをWebViewを用いることで作るとしたらアプリの再起動が2回以上必要になります。ユーザにそれを強いるのはかなりハードルが高いと言えるでしょう。</p>

<p>以上をまとめます。<br/>
・cache.manifestの読み込みを設定したhtmlファイル(index.htmlなど)は更新することのないファイルとしましょう。<br/>
・更新が生じる可能性のあるhtmlファイルは(index.htmlに)ロードするようにしましょう！</p>

<p>本日はcache.manifestを用いた場合のキャッシュについて試しました。次回はネイティブ側でキャッシュ設定をした場合、どんな挙動を示すのか追いたいと思います。(cache.manifestと併用させた場合どうなるかも追えればと思います。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone実機でSQLiteで作成したDBを参照しよう]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/30/read-iphone-device-db/"/>
    <updated>2013-09-30T00:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/30/read-iphone-device-db</id>
    <content type="html"><![CDATA[<h3>iPhone実機でのDB参照方法をマスターしよう！</h3>

<p>本日はiPhone実機でのSQLiteで作成したDBの参照方法について説明したいと思います。<br/>
シミュレータの場合は結構書いてあったのですが、実機では見つかりにくかったり、情報がばらついていたりしたのでメモ程度に書きます。</p>

<!--more-->


<h4>Litaをインストール</h4>

<p>LitaとはSQLiteのデータベース管理ツールです。GUIなので操作も参照しやすいですし、もちろんスリーソフトです。<br/>
<a href="http://www.dehats.com/drupal/?q=node/58">公式ページ</a>からインストールしましょう。インストール方法については多くのページで詳しく書かれているので簡単に紹介する程度にします。</p>

<p>＜Litaインストール手順＞<br/>
①公式ページにアクセス<br/>
②Install Nowと書かれているボックスをクリック<br/>
③他のソフト同様、ドラッグ&amp;ドロップでLitaをApplicationフォルダに持っていく<br/>
④Launchpadをクリックして、その中のLitaをクリックする<br/>
⑤案内に沿って進めればインストール完了</p>

<h4>iPhone実機からアプリ内データをダウンロード</h4>

<p>シミュレータであれば、<strong>/Users/ユーザ名/Library/Application Support/iPhone Simulator/使用シミュレータのバージョン/Applications/適当な文字列/Documents/直下</strong>にdbがあります。パスの中で途中、適当な文字列と書きましたが、これは勝手に作成されるフォルダのため、文字列が何になるかはわかりません。参照したいアプリがどのフォルダにあるかは１つ１つ中身を見てappファイル名を見るようにしています。<br/>
実機の場合はPC上にdbが作られるわけではなく、実機の中に作られるので、実機からデータをダウンロードしてくる必要があります。その手順を説明します。</p>

<p>＜実機からデータをダウンロードする手順＞<br/>
①Xcodeを起動<br/>
②Window > Organizerを起動<br/>
③参照したい端末 > Applications > 該当アプリを選択<br/>
④フッターからDownloadを選択<br/>
⑤拡張子がxcappdataのファイルをダウンロードできる</p>

<p><img src="http://grandbig.github.io/images/xcode_organizer1.png" alt="XcodeのOrganizerを開いて実機のデータをダウンロード" /></p>

<p>このファイルはパッケージなので、右クリックで「パッケージの内容を表示」を選択することで中身が確認できます。<br/>
中身はAppDataフォルダとAppDataInfo.plistファイルが入っています。<br/>
DBは<strong>AppData/Documents/直下</strong>にあります。これを先ほど紹介したLitaで開けば実機の指定アプリが作成したDBを参照することができます。</p>

<p>筆者は上記の方法でDB内データを確かめながら進めていますが、とても便利です。むしろ今まで知らなかったので何となくDBうまくいってそうだなと思いながらやっていましたが、きちんと確認すべきですね&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapに好きな画像を配置しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/28/put-annotation/"/>
    <updated>2013-09-28T18:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/28/put-annotation</id>
    <content type="html"><![CDATA[<h3>Mapにピンではなく、自分の好きな画像を配置したい！！</h3>

<p>さて、筆者は思った以上にハマってしまいました。マップを表示して、よく見る赤ピンを配置するまでは余裕だったのですが、如何せんその先が上手くいかず時間がかかってしまいました。ネット上でいろいろとヒントをもらいましたが、なかなかわかりづらかったのでブログにメモしておきます。</p>

<!--more-->


<h4>Mapを表示しよう</h4>

<p>iOS6以降から実装されたApple独自のMapを嫌う人もいるかもしれませんが、実装は最も簡単です。(iOS5以前であればGoogleのMapが表示されます。)<br/>
まず、AnnotationPracticeという名前でプロジェクトを作成します。<br/>
例によって<a href="http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app/">Let&rsquo;s Create an iPhone App</a>のときと同様にViewControllerの追加まで進めます。そして、今回はMapを表示するので、<strong>MapKit.framework</strong>をライブラリに追加します。<br/>
<img src="http://grandbig.github.io/images/annotationpractice1.png" alt="AnnotationPractice.xcodeprojを作成" /></p>

<p>AppDelegate.mファイルでViewController.xibに設定している画面を表示できるよう設定することを忘れずに。(リマインドとして下記に書いておきます。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// AppDelegate.mファイルに下記を書くこと
</span><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
</span><span class='line'>{
</span><span class='line'>  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen] bounds];
</span><span class='line'>  self.window.backgroundColor = [UIColor whiteColor];
</span><span class='line'>  [self.window makeKeyAndVisible];
</span><span class='line'>  UIViewController *viewCtl = [[ViewController alloc] init];
</span><span class='line'>  self.window.rootViewController = viewCtl;
</span><span class='line'>                                  
</span><span class='line'>  return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>さて、次にViewController.hファイルを下記のようにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.hファイルの内容
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;MapKit/MapKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController &lt;MKMapViewDelegate&gt; {
</span><span class='line'>      IBOutlet MKMapView *mapView;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>また、ViewController.xibでMapを貼り付けて、そのMapとViewController.hで定義したmapViewを結びつけます。<br/>
<img src="http://grandbig.github.io/images/annotationpractice2.png" alt="Map ViewをViewController.xibに貼り付け" /></p>

<p>さあ、これで端末を繋いで実行すればマップが下のように表示されます。
<img src="http://grandbig.github.io/images/annotationpractice3.png" alt="Mapが表示されます" /></p>

<h4>赤いピンを配置しよう</h4>

<p>画像を配置したいのですが、ここはぐっと我慢してまずはデフォルトの赤ピンを配置してみることにします。</p>

<p>新たにCustomAnnotationクラスを作成します。<br/>
＜手順＞<br/>
①プロジェクトを右クリックして<strong>New File&hellip;</strong><br/>
②Subclass ofで<strong>NSObject</strong>を選択<br/>
③ClassをCustomAnnotationとする(クラス名なので好きな名前でOK)</p>

<p>追加できたら、早速CustomAnnotation.hとCustomAnnotation.mの両ファイルを編集しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// CustomAnnotation.hファイル
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;
</span><span class='line'>#import &lt;MapKit/MapKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface CustomAnnotation : NSObject &lt;MKAnnotation&gt; {
</span><span class='line'>  CLLocationCoordinate2D coordinate;
</span><span class='line'>  IBOutlet NSString *annotationTitle;
</span><span class='line'>  IBOutlet NSString *annotationSubtitle;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
</span><span class='line'>- (id)initWithLocationCoordinate:(CLLocationCoordinate2D) _coordinate
</span><span class='line'>                           title:(NSString *)_annotationTitle subtitle:(NSString *)_annotationannSubtitle;
</span><span class='line'>- (NSString *)title;
</span><span class='line'>- (NSString *)subtitle;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>CLLocationCoordinate2Dの型ではIBOutletを指定できないので、少々面倒ですが、CustomAnnotation.hに@propertyを書き、CustomAnnotation.mファイルに@synthesizeを書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// CustomAnnotation.mファイル
</span><span class='line'>#import "CustomAnnotation.h"
</span><span class='line'>
</span><span class='line'>@implementation CustomAnnotation
</span><span class='line'>@synthesize coordinate;
</span><span class='line'>
</span><span class='line'>- (NSString *)title {
</span><span class='line'>      return annotationTitle;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSString *)subtitle {
</span><span class='line'>      return annotationSubtitle;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (id)initWithLocationCoordinate:(CLLocationCoordinate2D) _coordinate
</span><span class='line'>                           title:(NSString *)_annotationTitle subtitle:(NSString *)_annotationSubtitle {
</span><span class='line'>  coordinate = _coordinate;
</span><span class='line'>  self-&gt;annotationTitle = _annotationTitle;
</span><span class='line'>  self-&gt;annotationSubtitle = _annotationSubtitle;
</span><span class='line'>  return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>initWithLocationCoordinate関数を定義して初期化時に位置(緯度・経度), 吹き出しのタイトル, 吹き出しのサブタイトルを設定したannotationを返すようにします。</p>

<p>そしてViewController.mファイルを下記のように編集して、赤いピンを配置します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>// ①CustomAnnotation.hファイルをimport
</span><span class='line'>#import "CustomAnnotation.h"
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ViewController
</span><span class='line'>
</span><span class='line'>- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
</span><span class='line'>{
</span><span class='line'>  self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
</span><span class='line'>  if (self) {
</span><span class='line'>      // Custom initialization
</span><span class='line'>  }
</span><span class='line'>  return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>
</span><span class='line'>  // ②CustomAnnotationクラスの初期化(インスタンス化)
</span><span class='line'>  CustomAnnotation *ann1 = [[CustomAnnotation alloc] initWithLocationCoordinate:CLLocationCoordinate2DMake(35.685623, 139.763153) title:@"TEST" subtitle:@"test"];
</span><span class='line'>  // ③ついでにユーザの現在地を表示するように設定
</span><span class='line'>  [mapView setShowsUserLocation:YES];
</span><span class='line'>  // ④annotationをマップに追加
</span><span class='line'>  [mapView addAnnotation:ann1];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>  [super didReceiveMemoryWarning];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>これでプロジェクトを実行してみましょう。以下のようになるはず。<br/>
<img src="http://grandbig.github.io/images/annotationpractice4.png" alt="Mapに赤いピンを配置" /></p>

<h4>Mapに好きな画像を配置しよう</h4>

<p>よし、これでやっと画像配置の段階に移れそうです。<br/>
赤いピンを好きな画像に置き換えるためにはMKAnnotationViewクラスを使います。まずはViewController.mファイルのviewDidLoad関数内に1行追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>
</span><span class='line'>  CustomAnnotation *ann1 = [[CustomAnnotation alloc] initWithLocationCoordinate:CLLocationCoordinate2DMake(35.685623, 139.763153) title:@"大手町駅" subtitle:@"千代田線"];
</span><span class='line'>  // 下記１行を追加
</span><span class='line'>  [mapView setDelegate:self];
</span><span class='line'>  [mapView setShowsUserLocation:YES];
</span><span class='line'>  [mapView addAnnotation:ann1];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>これを追加することでaddAnnotationを実行した後にviewForAnnotation関数内の処理を実行するようになります。viewForAnnotation関数で実行したい処理を書きます。(もちろんViewController.mファイルに記述します。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.mファイル内にviewForAnnotation関数を記述
</span><span class='line'>-(MKAnnotationView*)mapView:(MKMapView*)_mapView viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation {
</span><span class='line'>  // ①ユーザの現在地はデフォルトの青丸マークを使いたいのでreturn: nil
</span><span class='line'>  if (annotation == mapView.userLocation) {
</span><span class='line'>      return nil;
</span><span class='line'>  } else {
</span><span class='line'>      MKAnnotationView *annotationView;
</span><span class='line'>      // ②再利用可能なannotationがあるかどうかを判断するための識別子を定義
</span><span class='line'>      NSString* identifier = @"Pin";
</span><span class='line'>      // ③dequeueReusableAnnotationViewWithIdentifierで"Pin"という識別子の使いまわせるannotationがあるかチェック
</span><span class='line'>      annotationView = (MKAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
</span><span class='line'>      // ④使い回しができるannotationがない場合、annotationの初期化
</span><span class='line'>      if(annotationView == nil) {
</span><span class='line'>          annotationView = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:identifier];
</span><span class='line'>      }
</span><span class='line'>      // ⑤好きな画像をannotationとして設定
</span><span class='line'>      annotationView.image = [UIImage imageNamed:@"foot_30.png"];
</span><span class='line'>      annotationView.annotation = annotation;
</span><span class='line'>      return annotationView;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>これでプロジェクトを実行すると、めでたく自分で設定した画像が表示されます。<br/>
<img src="http://grandbig.github.io/images/annotationpractice5.png" alt="足あと画像がMapに表示" /></p>

<h4>吹き出しをつける</h4>

<p>画像をタップしたときに吹き出しを出すようにしましょう。<br/>
viewForAnnotation関数内で設定を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>annotationView.image = [UIImage imageNamed:@"foot_30.png"];
</span><span class='line'>// ここに追加
</span><span class='line'>annotationView.canShowCallout = YES;
</span><span class='line'>annotationView.annotation = annotation;</span></code></pre></td></tr></table></div></figure>


<p>今回の例ではtitleにTEST, subtitleにtestとしましたが、例えば何らかの取得した値を表示したいということもあるでしょう。その場合、数値, 日付などをNSString型に変換した上で設定する必要があります。ここで結構ハマりました(汗)<br/>
何にハマったかというとNSStringの初期化です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 失敗例(メモリリークが発生する例)
</span><span class='line'>NSString *str1 = [NSString stringWithString:@"test"];
</span><span class='line'>NSString *str2 = [NSString stringWithFormat:@"test:%f",123];
</span><span class='line'>
</span><span class='line'>// 成功例
</span><span class='line'>NSString *str1 = [NSString initWithString:@"test"];
</span><span class='line'>NSString *str2 = [NSString initWithFormat:@"test:%f",123];</span></code></pre></td></tr></table></div></figure>


<p>stringWithString, stringWithFormatを使用した場合、簡易コンストラクタで生成され、releaseタイミングがNSStringに委ねられるとのことです。なので、アプリ起動時に画像をタップするときにはメモリが解放されてしまっているためにメモリリークエラーを引き起こすものと思われます。<br/>
initWithString, initWithFormatでコンストラクタを生成するようにした方が良さそうです。<br/>
次のサイトを参考にしました。(<a href="http://iphone-app-developer.seesaa.net/article/183323144.html">iPhoneアプリ開発備忘録</a>)</p>

<p>基本中の基本かもしれませんが、一つ一つ理解しながら開発できたので、良い勉強になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backgroundで位置情報を取得しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/"/>
    <updated>2013-09-27T22:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/27/location-nstimer</id>
    <content type="html"><![CDATA[<h3>アプリがBackground起動のときでも位置情報を取得しよう！</h3>

<p>本日は位置情報を使ったアプリの開発について紹介します。<br/>
皆さんはiPhoneを使うとき果たして位置情報サービスをONにされてますでしょうか？<br/>
スマートフォンが多くの人に普及した近年では、その電池使用量の多さから『電池の使用を抑えるためには位置情報サービスをOFFにしましょう！』と言った声が現実にもネットにもあふれんばかりです。確かに位置情報サービスをONにしているとGPSを使うため、通常よりも電池を消費してしまいます。しかしながら、それ以上に非常に便利で役立つお得なアプリがどんどん世の中に出てきています。また、iOS7からiBeaconをサポートするため、その勢いは留まることを知らないでしょう。<br/>
そう、今後は位置情報サービスをONにすることへの抵抗が下がっていく可能性があるのです。では早速、開発について話を進めていきましょう！</p>

<!--more-->


<h4>簡単に位置情報を習得してみよう！</h4>

<p>まず、以前紹介した<a href="http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app/">Let&rsquo;s Create an iPhone App</a>のときと同様に下記状態までプロジェクト作成を進めて下さい。<br/>
<img src="http://grandbig.github.io/images/locationpractice.png" alt="LocationPractice.xcodeprojを作成" /><br/>
『Let&rsquo;s Create an iPhone App』のとき作成したようにViewControllerを追加し、今回は<strong>CoreLocation.framework</strong>というライブラリを追加しましょう。</p>

<p>位置情報の取得をするためにはCoreLocation.frameworkの中で定義されている<strong>CLLocationManagerクラス</strong>を利用します。<br/>
ViewController.mファイル内でCLLocationManagerクラスを使うためにViewController.hファイルで以下を定義しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.hファイルの内容
</span><span class='line'>
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>// ①CoreLocationのimportを書く
</span><span class='line'>#import &lt;CoreLocation/CoreLocation.h&gt;
</span><span class='line'>
</span><span class='line'>// ②DelegateにCLLocationManagerDelegateを設定
</span><span class='line'>@interface ViewController : UIViewController &lt;CLLocationManagerDelegate&gt; {
</span><span class='line'>  // ③メンバ変数を定義
</span><span class='line'>  IBOutlet CLLocationManager *locationManager;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>①CoreLocation.frameworkをViewController.m内で利用するためにimportする<br/>
②CLLocationManager関係の処理はCLLocationManagerクラスに任せてしまいたいのでDelegateを設定<br/>
※深く考えこまずにframwork使うときはDelegateを設定するようにしましょう。<br/>
③メンバ変数としてCLLocationManagerを定義します。</p>

<p>次にViewController.mファイルを編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.mファイルの内容
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  // ①locationManager初期化
</span><span class='line'>  locationManager = [[CLLocationManager alloc] init];
</span><span class='line'>  // ②位置情報サービスのON/OFFで挙動を分岐
</span><span class='line'>  if ([CLLocationManager locationServicesEnabled]) {
</span><span class='line'>      // ③locationManagerの各プロパティを設定
</span><span class='line'>      locationManager.delegate = self;
</span><span class='line'>      locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters;
</span><span class='line'>      locationManager.activityType = CLActivityTypeFitness;
</span><span class='line'>      locationManager.pausesLocationUpdatesAutomatically = NO;
</span><span class='line'>      locationManager.distanceFilter = 100.0;
</span><span class='line'>      // ④位置情報の取得開始
</span><span class='line'>      [locationManager startUpdatingLocation];
</span><span class='line'>  } else {
</span><span class='line'>      NSLog(@"Location services not available.");
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>...
</span><span class='line'>// ⑤位置情報更新時
</span><span class='line'>- (void)locationManager:(CLLocationManager *)manager
</span><span class='line'>    didUpdateToLocation:(CLLocation *)newLocation
</span><span class='line'>             fromLocation:(CLLocation *)oldLocation {
</span><span class='line'>  // ⑥ログを出力
</span><span class='line'>  NSLog(@"didUpdateToLocation latitude=%f, longitude=%f, accuracy=%f, time=%@",
</span><span class='line'>      [newLocation coordinate].latitude,
</span><span class='line'>      [newLocation coordinate].longitude,
</span><span class='line'>      newLocation.horizontalAccuracy,
</span><span class='line'>      newLocation.timestamp);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>①当然のごとく初期化<br/>
②位置情報サービスの設定がON/OFFの場合で挙動を分けるために条件分岐を用意<br/>
③locationManagerの各プロパティを設定しましょう。<br/>
・desireAccuracy：位置情報の取得精度の設定です。6種類の中から選択します。<br/>
　kCLLocationAccuracyBestForNavigation：iOS4以降から使用可能です。最高精度。<br/>
　kCLLocationAccuracyBest：iOS3までの最高精度設定でした。<br/>
　kCLLocationAccuracyNearestTenMeters：誤差10mの設定<br/>
　kCLLocationAccuracyHundredMeters：誤差100mの設定<br/>
　kCLLocationAccuracyKilometer：誤差1kmの設定<br/>
　kCLLocationAccuracyThreeKilometers：誤差3kmの設定<br/>
・activityType：ユーザの移動タイプに合わせて位置情報の更新頻度を設定可能です。(iOS6以降から使用可能)<br/>
　CLActivityTypeFitness：ユーザが歩行移動のときに最適<br/>
　CLActivityTypeAutomotiveNavigation：ユーザが車で移動するときに最適<br/>
　CLActivityTypeOtherNavigation：ユーザがボート/電車/飛行機で移動するときに最適<br/>
　CLActivityTypeOther：その他<br/>
・pausesLocationUpdatesAutomatically：位置情報が自動的にOFFになる設定(iOS6以降から使用可能)<br/>
　アプリがBackground起動中に位置情報の更新が15分以上ない場合に自動でGPS起動がOFFになります。NOを設定することで回避できます。<br/>
・distanceFilter：ここで設定した距離以上移動した場合に位置情報を取得する設定<br/>
　単位は[m]です。<br/>
④位置情報の取得を開始します。<br/>
　停止する場合はstopUpdatingLocationになります。<br/>
⑤位置情報が更新されたときに実行される関数です。<br/>
⑥位置情報が正しく取得されていることを確認するためにログを出力しましょう。<br/>
　latitude, longitude: 緯度, 経度<br/>
　verticalAccuracy: 海抜高度の精度<br/>
　horizontalAccuracy：水平精度(マップを見たときの縦横の精度)  <br/>
　timestamp：位置情報の取得時刻<br/>
　speed：速度<br/>
　cource：方角</p>

<p>たったこれだけのことでiPhoneの位置情報を取得することができるようになります。</p>

<h4>NSTimerで定期時間ごとに位置情報を取得してみよう！</h4>

<p>先ほどdidUpdateToLocationを紹介しました。これは位置情報が更新された際に実行されます。逆に言えば、いつ位置情報を使った処理を実行できるかがわからないということになります。もし、5分毎に位置情報を使った処理を実行したいということがあればNSTimerを使う必要があります。<br/>
それではNSTimerを使って先ほどのソースを書き直してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.hファイルの内容
</span><span class='line'>
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;CoreLocation/CoreLocation.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController &lt;CLLocationManagerDelegate&gt; {
</span><span class='line'>  IBOutlet CLLocationManager *locationManager;
</span><span class='line'>  // NSTimerを定義
</span><span class='line'>  IBOutlet NSTimer *timer;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.mファイルの内容
</span><span class='line'>...
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  locationManager = [[CLLocationManager alloc] init];
</span><span class='line'>  if ([CLLocationManager locationServicesEnabled]) {
</span><span class='line'>      locationManager.delegate = self;
</span><span class='line'>      locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters;
</span><span class='line'>      locationManager.activityType = CLActivityTypeFitness;
</span><span class='line'>      locationManager.pausesLocationUpdatesAutomatically = NO;
</span><span class='line'>      locationManager.distanceFilter = 100.0;
</span><span class='line'>      [locationManager startUpdatingLocation];
</span><span class='line'>      // 5分ごとに繰り返しgetGpsDataを実行するようにタイマーを設定
</span><span class='line'>      timer = [NSTimer scheduledTimerWithTimeInterval:300 target:self selector:@selector(getGpsData:)userInfo:nil repeats:YES];
</span><span class='line'>  } else {
</span><span class='line'>      NSLog(@"Location services not available.");
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>...
</span><span class='line'>- (void)getGpsData:(NSTimer *)theTimer {
</span><span class='line'>  CLLocation *location = [locationManager location];
</span><span class='line'>  CLLocationCoordinate2D coordinate = [location coordinate];// 座標を取得
</span><span class='line'>  NSString *lat = [NSString alloc] initWithFormat:@"%f", coordinate.latitude];  // 経度を取得
</span><span class='line'>  NSString *lng = [NSString alloc] initWithFormat:@"%f", coordinate.longitude]; // 緯度を取得
</span><span class='line'>  NSLog(@"+++++ [デリゲートによらない場合]緯度,经度: %@, %@", lat, lng);
</span><span class='line'>  [lat release];
</span><span class='line'>  [lng release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Backgroundでも位置情報サービスを使えるように設定しよう！</h4>

<p>せっかくNSTimerを使って、定期間隔ごとに位置情報を利用した処理を実行することができるようになったので、アプリをBackground起動したときにも処理が実行されるように設定していきましょう。<br/>
①プロジェクトのCapabilityのBackgrounds Modeを設定(Xcode5から設定が必要)<br/>
プロジェクト > ターゲット > Capability > Background Modeの<strong>Location updates</strong>にチェックを入れる<br/>
<img src="http://grandbig.github.io/images/locationpractice2.png" alt="Location updatesにチェック" /><br/>
②plistの編集(どのXcodeのバージョンでも設定が必要)<br/>
Add Rowで<strong>Required Background Modes</strong>を追加して下さい。次にその値として<strong>App registers for location updates</strong>を選択して下さい。<br/>
<img src="http://grandbig.github.io/images/locationpractice3.png" alt="Required Background Modesを追加" /></p>

<p>これで端末をPCに繋いでプロジェクトを実行している状態で、ログの出力を確認して下さい。アプリがForeground起動のときでもBackground起動のときでもログが出力されることを確認できるはずです。</p>

<p>ここで重要なことを追記致します。NSTimerを用いてBackgroundで位置情報を定期的に取得できるのは<strong>標準位置情報サービス(startUpdatingLocation)</strong>のときのみです。<strong>大幅変更位置情報サービス(startMonitoringSignificantLocationChanges)</strong>ではできません。これは忘れがちなので注意が必要です。</p>

<p>因みに、Foreground, Backgroundと聞き慣れないかもしれないので説明しておくと<br/>
・Foreground起動：端末にアプリの起動画面が表示されている状態<br/>
・Background起動：端末にアプリの画面は表示されていないが、ホームボタン２回押しでアプリのアイコン(iOS6以前)またはアプリの画面(iOS7以降)が確認できる状態<br/>
ということです。<br/>
<img src="http://grandbig.github.io/images/ios_bg_app.png" alt="アプリのBackground起動" /></p>

<h4>最後に</h4>

<p>以上、少しは参考になったでしょうか。
そのうち本日、紹介した機能を使って実際にアプリを開発してみようと思います。では今日はこの辺で。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はっきりさせよう！iOSのデバイストークン]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/"/>
    <updated>2013-09-24T22:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/24/ios-devicetoken</id>
    <content type="html"><![CDATA[<h3>iOSのデバイストークンを理解しよう！</h3>

<p>今回はプッシュ通知をユーザに送る機能を備えたiPhoneアプリを開発したことがあるエンジニアであれば周知の事実であろう『iOSのデバイストークン』について改めて勉強したいと思います。<br/>
筆者は正直、今日まで全くの勘違いをしていました&hellip;。デバイストークンとはアプリ毎に異なるのだと思い込んでいたのです。</p>

<!--more-->


<h4>公式ドキュメントを読もう！</h4>

<p>まずは何と言っても<a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/RemoteNotificationsPG.pdf" title="Local Notificationおよび
Push Notificationプログラミングガイド">Appleの公式ドキュメント</a>から理解してみよう！ということです。<br/>
ドキュメントには『<em>APNsが初めてデバイスに接続したときに、APNsからそのデバイスに渡される不透過なデバイス識別子です。(たとえて言えば、デバイストークンは通知先を識別するための電話番号と同じ機能を果たします)</em>』とあります。ここからわかることはデバイストークンとは個人を特定できるユニークなものだということです。<br/>
次に読み進めていくと、『<em>APNsは、TLSのピアツーピア認証を利用して、接続してきたデバイスの認証を行います</em>』、『<em>プロバイダとAPNs間の接続信頼も、TLSのピアツーピア認証を利用して確立されます。</em>』と書かれています。何だかふ〜んと言った感じで読み飛ばしてしまいそうですが、実はここは結構重要でした。
このTLS接続は『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行う</em>』ことで確立させます。<br/>
最低限ここまで抜粋できれば良しとしましょう笑</p>

<h4>実際に取得してみた結果は？</h4>

<p>百聞は一見にしかずということで、実際に自分の目で確かめてみることにしました。</p>

<p>手順は省き、結果を言うと『デバイストークンは端末ごとにユニークなもの』です。</p>

<p>アプリごとにユニークではない、１端末につき１つのデバイストークンということがポイントです！<br/>
それではアプリAにプッシュを送ろうとすると、アプリBにプッシュが届くのではないか？と思うかもしれません。私も昨日まで完全にそう思っていました。が、ここで先ほど述べた</p>

<p>『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行うことでTLS接続を確立する</em>』</p>

<p>が意味を成すのです。<br/>
そう、秘密鍵と証明書を使用してTLS接続を確立している時点でアプリAへの依頼なのかアプリBへの依頼なのか決まっているのです。</p>

<h4>因みに&hellip;</h4>

<p>因みに、そもそも私がデバイストークンとは端末のアプリごとに異なると思っていた理由を紹介しましょう。<br/>
先ほどの説明の中でデバイストークンは１端末につき１つのデバイストークンと言いましたが、それをいきなり覆します！<br/>
実はDevelopment版とProduction版でデバイストークンは異なるんです！<br/>
これに私は完全に翻弄されてしまったのです(汗)<br/>
そして、プッシュの証明書が異なれば(つまりはアプリごと)デバイストークンは異なるのだと思いこんでしまったのです&hellip;。</p>

<p>ではなぜDevelopment版とProduction版でデバイストークンは異なるのでしょうか？完全なる答えはわかりませんが、<br/>
Development版はプロバイダアプリケーションの初版の開発とテストに使用されるサンドボックス環境であり、アクセス先として『<em>gateway.sandbox.push.apple.com</em>』を設定します。<br/>
一方でProduction版のアクセス先はsandboxを外した『<em>gateway.push.apple.com</em>』を設定します。<br/>
なるほど、アクセス先が違うのでデバイストークンが変わりそうな気がします&hellip;<br/>
参考までにサイトのページを載せておきます。<br/>
<img src="http://grandbig.github.io/images/apple_developer_site1.png" alt="Apple Developer サイト" /></p>

<p>ここまで説明した内容は全てiOS6.1以前のものであり、iOS7は含みません。<a href="http://blog.katty.in/4162" title="iOS7でプッシュ通知のデバイストークンに大きな変更">iOS7からはアプリごとに異なるといった記事</a>も見られるので、またのちほど実験していくつもりです。</p>

<p>皆さんもぜひ自分の眼でお試しあれ<br/>
しかし、今回は全部、文字になってしまったな〜。気が向いたらもう少しわかりやすく編集し直します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6とiOS7の両方で使えるようにtoolbarを調整する方法]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/22/xcode5-toolbar/"/>
    <updated>2013-09-22T12:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/22/xcode5-toolbar</id>
    <content type="html"><![CDATA[<h3>iOS6/iOS7で使えるようにtoolbarを調整しよう！</h3>

<p>どうも。筆者が先週末から１週間ほど風邪で寝込んでいる間にiPhone5S/5Cが発売されたようですね。また、それに先駆けてiOS7とXcode5の正式版も一般にリリースされたということで完全に乗り遅れてしまいました(泣)<br/>
そろそろ体力も復帰してきたということで気になっていたXcode5に触れてみることにしました。<br/>
今回はiOS7になったことで見た目はささやかな違いなんですが、実は結構面倒かもしれないtoolbarの変換に着目しました。まずはその違いを実際に見て頂きましょう。
<img src="http://grandbig.github.io/images/ios6_7_difference.png" alt="twitterでtoolbarを比較しよう" /></p>

<!--more-->


<p>このようにiOS7対応アプリではステータスバーを含めたtoolbarを作成する必要があります。もちろんiOS6ではステータスバーを含まないのでtoolbarの高さが異なります。<br/>
『単純にtoolbarの高さを調整すれば良いのでは？』と思うかもしれませんが、下記画像を見て頂くとわかるようにdisabledになっていて変更できません&hellip;<br/>
<img src="http://grandbig.github.io/images/noChange_toolbar_height.png" alt="変更できないtoolbarの高さ" /><br/>
これを変更するために、『Show the File inspector』を選択して、『Use Autolayout』のチェックを外します。そして、iOS6からの目線でiOS7を調整するために(慣れの問題ですが…)『View as』をiOS6.1 and Earlierに変更します。<br/>
<img src="http://grandbig.github.io/images/nocheck_use_autolayout.png" alt="Use Autolayoutのチェックを外す" /><br/>
それによって『Show the Size inspector』で<em>iOS6/7 Deltas</em>が表示されるようになります。<br/>
<img src="http://grandbig.github.io/images/iOS6_7_Deltas.png" alt="iOS6/7 Deltasが表示される" /><br/>
ステータスバーのheightは20pxなので、iOS7はiOS6よりもheightが20px高くなります。また、位置はiOS6での最上位置(0px)よりも上に20px つまり-20pxになります。<br/>
<img src="http://grandbig.github.io/images/iOS6_7_Deltas_set.png" alt="iOS6/7 Deltasに値を設定" /></p>

<p>これでtoolbarの設定は完了です。因みにtoolbarと合わせてWebViewやMapViewを使うときには同じくこれらのパーツも調整する必要がありますのでご注意を。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's create an iPhone App]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app/"/>
    <updated>2013-09-13T23:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/13/lets-create-an-iphone-app</id>
    <content type="html"><![CDATA[<h3>Flash Lightアプリを作ろう！</h3>

<p>最近iPhoneに実装されたLEDライトの点滅間隔を調べる機会がありました。<br/>
そこで、そのときに作った、簡単な『Flash Light アプリ』を紹介しましょう！</p>

<!--more-->


<h4>ViewControllerを新規追加</h4>

<p>まずは表示に必要なViewControllerを追加しましょう！<br/>
1: プロジェクトを右クリックして、『New File&hellip;』を選択<br/>
2: Objective-c Classを選択してNext<br/>
3: Class 『ViewController』, Subclass of 『UIViewController』を選択してNext<br/>
4: xcodeprojファイルと同じ場所に保存</p>

<h4>AppDelegateファイルを編集</h4>

<p>次にViewControllerをアプリ起動時に表示できるように設定しましょう。<br/>
そのためにはAppDelegateファイルを編集する必要があります。では『AppDelegateファイル』とは何でしょうか？<br/>
AppDelegateファイルとは簡単に言えば、アプリの起動/停止をトリガーとして何かアクションを起こす役目を持っています。<br/>
これはアプリを開発する上で非常に重要なファイルと言えるでしょう。</p>

<p>AppDelegate.mファイル内でViewControllerを扱うために</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "AppDelegate.h"
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>
</span><span class='line'>@implementation AppDelegate</span></code></pre></td></tr></table></div></figure>


<p>とViewControllerをimportしましょう。</p>

<p>では実際にViewControllerをアプリwindowに設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class='line'>  // ウィンドウの初期化と生成
</span><span class='line'>  _window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>  // 背景色を指定(今回は黒色)
</span><span class='line'>  _window.backgroundColor = [UIColor blackColor];
</span><span class='line'>  // ウィンドウを表示
</span><span class='line'>  [_window makeKeyAndVisible];
</span><span class='line'>
</span><span class='line'>  // ViewControllerの初期化と生成
</span><span class='line'>  UIViewController* viewCtl = [[[ViewController alloc] init] autorelease];
</span><span class='line'>  // ViewControllerをウィンドウに設定
</span><span class='line'>  _window.rootViewController=viewCtl;
</span><span class='line'>  return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ViewController.h/ ViewController.mを編集</h4>

<p>さて、これでViewControllerに実装したものをウィンドウに表示する設定が終わりました。<br/>
今度はLEDライトの点滅方法を考えるわけですが、そもそもLEDライトってどうやって扱うんでしょうか？</p>

<p>答えは『AVFoundation.framework』を使います！<br/>
因みにライブラリ追加は以下の手順。<br/>
1: プロジェクトを選択<br/>
2: TARGETSを選択<br/>
3: BuildPhasesを選択<br/>
4: Link Binary With Librariesを選択<br/>
5: +を選択して『AVFoundation.framework』を追加<br/>
<img src="http://grandbig.github.io/images/add_framework.png" alt="AVFoundation.frameworkを追加" /></p>

<p>ただ、安心してはいけません。必ず使うものはimportしましょう！<br/>
ViewController.hファイルにimport</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>// 以下のAVFoundationを追加
</span><span class='line'>#import &lt;AVFoundation/AVFoundation.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>いきなり自動点滅は難しいので、まずはスイッチでLEDのON/OFFを切り替えられるようにしてみましょう。<br/>
ViewController.hを引き続き編集</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  // スイッチを定義
</span><span class='line'>  IBOutlet UISwitch *sw;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// スイッチのON/OFF切り替え用関数を宣言
</span><span class='line'>-(IBAction)switchChanged:(id)sender;</span></code></pre></td></tr></table></div></figure>


<p>次にViewController.mを編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// スイッチのON/OFF切り替え用関数の処理を定義
</span><span class='line'>- (IBAction)switchChanged:(id)sender {
</span><span class='line'>  // 背面カメラを初期化
</span><span class='line'>  AVCaptureDevice *captureDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
</span><span class='line'>
</span><span class='line'>  // スイッチがONのとき
</span><span class='line'>  if(sw.on) {
</span><span class='line'>      // LEDの点灯は下記3行
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOn;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>  // スイッチがOFFのとき
</span><span class='line'>  } else {
</span><span class='line'>      // LEDの消灯は下記3行
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOff;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ViewController.xibファイルを編集</h4>

<p>そしてViewController.xibを編集します。<br/>
xibの編集はアプリに表示する画面を直接編集することに相当します。</p>

<p>1: 右下リストからSwitchを選択し、ドラッグ&amp;ドロップでViewにスイッチを持ってきます。<br/>
2: 定義したswとViewに載せたSwitchを結びつけるために、左側メニューにあるPlaceholdersのFile&rsquo;s Ownerを右クリック<br/>
3: Outletsのswの右端◯からドラッグ&amp;ドロップでView上のスイッチまで持っていきます。<br/>
4: 同様にswitchChangedも右端◯からドラッグ&amp;ドロップでView上のスイッチに持っていき、Value Changedを選択</p>

<p><img src="http://grandbig.github.io/images/edit_xib.png" alt="スイッチの結びつけ" /></p>

<p>以上で手動でのLEDのON/OFFができました。動作は実機で確認しましょう！(シミュレータはLEDないので…)</p>

<h4>LEDのON/OFFを自動化</h4>

<p>LEDのON/OFFを自動化するためにNSTimerを使いましょう！<br/>
ViewController.hにNSTimerを宣言</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface ViewController : UIViewController {
</span><span class='line'>  ...
</span><span class='line'>  IBOutlet NSTimer *timer;
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ViewController.mを編集</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// LEDの現在のON/OFF状態を判別するためにフラグを設定
</span><span class='line'>static BOOL ledFlag = NO;
</span><span class='line'>...
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  
</span><span class='line'>  // timerを設定(1秒ごとに処理を実行)
</span><span class='line'>  timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(ledChange:)userInfo:nil repeats:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// timerで設定した定期間隔ごとに処理される内容を定義
</span><span class='line'>- (void)ledChange:(NSTimer *)theTimer {
</span><span class='line'>  AVCaptureDevice *captureDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
</span><span class='line'>
</span><span class='line'>  // LEDがOFFだった場合はONにする
</span><span class='line'>  if(ledFlag == NO) {
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOn;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>      ledFlag = YES;
</span><span class='line'>  // LEDがONだった場合はOFFにする
</span><span class='line'>  } else {
</span><span class='line'>      [captureDevice lockForConfiguration:NULL];
</span><span class='line'>      captureDevice.torchMode = AVCaptureTorchModeOff;
</span><span class='line'>      [captureDevice unlockForConfiguration];
</span><span class='line'>      ledFlag = NO;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>これでLEDを1秒ごとに点滅させることができるようになりました。</p>

<p>さ〜て、いかがだったでしょうか？<br/>
今や簡単に誰でもアプリが作れる時代です。ぜひ、皆さんも作ってみて下さい。<br/>
余談ですが、iOS7から懐中電灯機能はアプリをインストールするまでもなく搭載されることとなったので、懐中電灯アプリはAppleに申請しても通らないと思います(汗)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeを始めてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/05/start-xcode/"/>
    <updated>2013-09-05T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/05/start-xcode</id>
    <content type="html"><![CDATA[<h2>Xcodeとは</h2>

<p>アップルが提供している統合開発環境(IDE)の名称です。<br/>
『iPhone/iPadアプリを開発したい！』という方、Mac PCを買ったら速攻インストールです！<br/>
(XcodeはもちろんApp Storeからインストールできます）</p>

<p>この記事時点での最新版は4.6.3ですが、今月中にはXcode5.0が発表されることでしょう。<br/>
さてさて、早速Xcodeを起動してみましょう。</p>

<h3>プログラミングまでの準備</h3>

<p>Xcodeを起動すると次のウィンドウが表示されます。
<img src="http://grandbig.github.io/images/xcode1.png" alt="Welcome to Xcode" /></p>

<!--more-->


<p>プロジェクトを新規作成する場合は『Create a new Xcode project』を選択しましょう。
すると次の画面で『Choose a template for your new project』と言われます。
<img src="http://grandbig.github.io/images/xcode2.png" alt="Choose Project" />
とは言え、何だか選択肢が多いですね…。ここで選択を失敗すると一気に時間がかかってしまいそうな予感がしますね……。<br/>
本来は<em>Single View Application</em>の方が初心者向きかもしれないのですが、筆者はあまり慣れておりません(汗)<br/>
ってことで今回は<em>Empty Application</em>を選択します。(この違いについてはいつの日か説明したいと思います)</p>

<p>すると今度は『Choose options for your new project』と言われます。
<img src="http://grandbig.github.io/images/xcode3.png" alt="Choose Options" />
入力するのは『Product Name』, 『Organization Name』,『Company Identifier』の3つです。後から変更も可能なので、ここでは『blog_test』,『筆者の名前』,『jp.co.test』としておきましょう。</p>

<p>はい！新規プロジェクト作成できました〜。
<img src="http://grandbig.github.io/images/xcode4.png" alt="Choose Options" /></p>

<p>次回はアプリでも作ってみようかな</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressインストールしてみました]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/04/octopress-install/"/>
    <updated>2013-09-04T00:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/04/octopress-install</id>
    <content type="html"><![CDATA[<h2>Octopressとは</h2>

<p>GitHub Pagesと組み合わせて、無料で簡単にブログが作れると噂のフレームワークです。
その噂の真相を確かめるべく、いざOctopressをインストールしてみました。</p>

<p>それがまさかこんな苦労するなんて夢にも思わず…</p>

<!--more-->


<h3>Rubyのインストール</h3>

<p>それではまず以下のコマンドを打ってみよう！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby --version</span></code></pre></td></tr></table></div></figure>


<p>「なんだRubyなんて初めから入っているじゃないか」と油断してはいけません。
確かにMacにはデフォルトでRubyがインストールされています。
しかし、Octopressを使うには1.9.3以上が必要になります。
恐らくデフォルトで入っているのは1.8.7だったのではないでしょうか？</p>

<p>ネットで調べたところ、1.9.3を利用している人が多かったので、ひとまず1.9.3のインストールを目指すことにしました。</p>

<h4>homebrewとFomulaを最新版にアップデート</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update</span></code></pre></td></tr></table></div></figure>


<p>ここでopensslやreadlineなど必要なものをbrewでインストールと書いてあるサイトがあったのですが、
rubyインストール時に必要なものをインストールしてくれるのでrvmのインストールに進みます。<br/>
※筆者は『brew install openssl』を実行してopensslのみ別でインストールしてしまったため後々path周りでハマってしまいました…。(詳細は後ほど)</p>

<h4>rvmをインストール</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>rvm -vでバージョンを確認できればrvmが無事インストールされたことになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -v
</span><span class='line'>rvm 1.22.3 (master) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]</span></code></pre></td></tr></table></div></figure>


<h3>Octopressをインストール</h3>

<p>さあ、いよいよOctopressをインストールしましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress</span></code></pre></td></tr></table></div></figure>


<p>問題なければ次の4行も余裕でパスできるはず！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>筆者はgem install bundlerがうまくいきませんでした。<br/>
エラーメッセージを見る限り、opensslが見つからないらしい…。なぜだ!?ちゃんとopensslをインストールしたはずなのに！<br/>
ちゃんとバージョンだって確認できる!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl version
</span><span class='line'>OpenSSL 0.9.8x 10 May 2012</span></code></pre></td></tr></table></div></figure>


<p>もしやインストールの仕方が違ったからか!?
たぶん見るpathを変えれば良いんだろうけど…<br/>
はい！アンインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew uninstall openssl</span></code></pre></td></tr></table></div></figure>


<p>そして、他のライブラリと同様にrvmでインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm pkg install openssl</span></code></pre></td></tr></table></div></figure>


<p>これで見事4行をパスしました。</p>

<h3>GitHubの設定</h3>

<p>さて、あともうひと踏ん張りです。<br/>
次はGitHubの設定をしましょう。今回は既にGitHubアカウントを作成していたため、アカウント作成周りは省略します。(恐らく思いつきで作ったのだろう…)<br/>
アカウント作成が終わったら、ホーム画面に移動するはずなので、右下から<em>New repository</em>を選択してGitHub page用のレポジトリを作りましょう！<br/>
下の画像のようにRepository nameに<em>username.github.io</em>を入力だ！(usernameにはGitHubアカウント作成時に作ったユーザ名を入れて下さい。)<br/>
<img src="http://grandbig.github.io/images/github_new_repository.png" alt="GitHubページでNew Repositoryを作成" /></p>

<h3>GitHub Pagesを設定</h3>

<p>GitHubの設定で作成したレポジトリをGitHub Pagesに設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>  (For example, 'git@github.com:your_username/your_username.github.io)
</span><span class='line'>  or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url:</span></code></pre></td></tr></table></div></figure>


<p>※末尾に<em>.git</em>はつけないように注意</p>

<h3>静的ページを作成して、デプロイ</h3>

<p>最後に下記2つのコマンドを叩けば、晴れてBlogのできあがり！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>いかがでしたでしょうか？<br/>
筆者もうまくいかずに何度か諦めそうになりましたが、なんとかBlogを書く領域まで辿りつけました。<br/>
情弱プログラマーは日々精進が大切ですね。
ではまた次回！</p>
]]></content>
  </entry>
  
</feed>
