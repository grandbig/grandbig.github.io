<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2018-11-25T01:58:49+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PromiseKitのフォーマット崩れに困ったらSwimatを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/11/25/swimat/"/>
    <updated>2018-11-25T01:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/11/25/swimat</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>基本的に、Xcode上でフォーマットをかける場合は<a href="https://github.com/realm/SwiftLint">SwiftLint</a>を利用することがほとんどかと思うのですが、<br/>
<a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>の書式のようにSwiftLintでは解決できないフォーマットも一部あったため、<br/>
筆者はお試しで<a href="https://github.com/Jintin/Swimat">Swimat</a>を使ってみていました。</p>

<p>必要な時だけ利用するという使い方でも十分使いやすかったため、今日はSwimatについて紹介したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>インストール＆初期設定方法</h3>

<p>インストール方法は<a href="https://github.com/Jintin/Swimat/blob/master/README.md">README.md</a>を読めば特に詰まることなく進めることができると思います。<br/>
一応、参考までに、手順を書いておきます。</p>

<p>① <code>Homebrew</code> でインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">$</span> <span class="n">brew</span> <span class="n">cask</span> <span class="n">install</span> <span class="n">swimat</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストールが完了すると、</p>

<p><img src="http://grandbig.github.io/images/swimat_1.png" alt="Homebrewでswimatをインストール" /></p>

<p>のようにターミナルにログが出ると思います。</p>

<p>② システム環境設定で <code>Xcode Source Editor</code> の拡張機能として <code>Swimat</code> を設定する</p>

<p>システム環境設定を開いて、 <strong>拡張機能</strong> を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/swimat_2.png" alt="システム環境設定で拡張機能を選択する" /></p>

<p><code>Xcode Source Editor</code> として <code>Swimat</code> を設定します。</p>

<p><img src="http://grandbig.github.io/images/swimat_3.png" alt="Xcode Source EditorとしてSwimatを設定する" /></p>

<p>以上で準備完了です。<br/>
では、実際にXcode上で <code>Swimat</code> を利用してみましょう。</p>

<h3>Swimatを利用する</h3>

<p>冒頭で <code>PromiseKit</code> の話を出しましたので、ここでも <code>PromiseKit</code> を例に紹介します。</p>

<p><code>PromiseKit</code> を利用して以下のようなソースコードを書いたとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ここでは正しくフォーマットされた状態で書いています。</span>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">worker</span><span class="p">.</span><span class="n">fetchHospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">type:</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="nl">places:</span> <span class="n">results</span><span class="p">))</span>
</span><span class='line'>    <span class="n">strongSelf</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearch</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Map</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">type:</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>    <span class="n">strongSelf</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearch</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを普通にXcode上で書くと次のようなネストの状態になってしまいます。</p>

<p><img src="http://grandbig.github.io/images/swimat_4.png" alt="Swimatでフォーマットをかける前の状態" /></p>

<p>これに <code>Swimat</code> でフォーマットをかけます。<br/>
フォーマットをかけたい行を選択してから、 <code>Editor</code> > <code>Swimat</code> > <code>Format</code> を選択します。</p>

<p><img src="http://grandbig.github.io/images/swimat_5.png" alt="Swimatでフォーマットをかける" /></p>

<p>その結果、</p>

<p><img src="http://grandbig.github.io/images/swimat_6.png" alt="Swimatでフォーマットをかけた後の状態" /></p>

<p>のようにネストが正しく修正されます。</p>

<h3>まとめ</h3>

<p>如何でしたでしょうか？<br/>
もう少しで <code>GitHub</code> 上のスター数も1,000突破しそうな勢いですし、知っておいて損はないかと思います。<br/>
<code>PromiseKit</code> だけでなく有用な場面も当然あると思いますし、気になった方はぜひ使ってみてください。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwiftを勉強してみよう！(4) ~ 成功処理と失敗処理の書き方 ~]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/20/rxswift-4/"/>
    <updated>2018-10-20T13:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/20/rxswift-4</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は <code>RxSwift</code> で、『ある条件のときのみ <code>Observer</code> に伝える』方法について見ていきたいと思います。<br/>
これは例えば、</p>

<ul>
<li>処理が成功した場合のみ、何か次のアクションを実行させる</li>
<li>処理の成功/失敗で次のアクション内容を変更する</li>
</ul>


<p>場合に必要な書き方です。<br/>
では具体的に見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>サンプルを元に書き方を学ぼう</h3>

<p>具体的なサンプルを見ながら書き方を学んでいきたいと思います。<br/>
今回のサンプルのアーキテクチャは <code>MVVM</code> を採用します。</p>

<p>各役割は</p>

<ul>
<li><code>Model</code> : ビジネスロジック</li>
<li><code>View</code> : ユーザ操作のキャッチと実描画処理</li>
<li><code>ViewModel</code> : プレゼンテーションロジック</li>
</ul>


<p>となります。<br/>
早速、サンプルを見ていきましょう。</p>

<h4>検索ボタンをタップした結果を表現する</h4>

<p>サンプルを例に考えます。</p>

<h5>サンプルの前提</h5>

<ul>
<li>検索ボタンをタップすると、レストラン検索APIを叩く</li>
<li>レストラン検索APIの取得が成功した場合、マップにレストランの場所を示すマーカを配置する</li>
<li>レストラン検索APIの取得が失敗した場合、エラーメッセージを表示する</li>
</ul>


<h5>Viewにユーザ操作のキャッチ部分を書く</h5>

<p>まずは、 <code>ViewController.swift</code> に「ユーザ操作のキャッチ」部分を書きます。<br/>
※必要のない処理は省略します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">searchButton:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">viewModel:</span> <span class="n">ViewModel</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">bind</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザの検索ボタンのタップ操作をキャッチ</span>
</span><span class='line'>      <span class="n">searchButton</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">tap</span>
</span><span class='line'>          <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">searchButtonDidTap</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ViewModelにViewからのインプットをハンドリング&amp;レストラン検索APIを叩く</h5>

<p>続いて、上記で書いた <code>viewModel.searchButtonDidTap</code> を <code>ViewModel</code> に定義します。<br/>
<code>View</code> からユーザのタップ操作が伝えられた時に、レストラン検索APIを叩く処理も書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="nl">ViewModel:</span> <span class="n">Injectable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Dependency</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">apiClient:</span> <span class="n">GooglePlacesAPIClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">locationManager:</span> <span class="n">LocationManagerClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: PublishSubjects</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">searchButtonDidTapStream</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: BehaviorSubjects</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">placesStream</span> <span class="o">=</span> <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="n">defaultPlaces</span><span class="p">)</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">errorStream</span> <span class="o">=</span> <span class="n">BehaviorSubject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">value:</span> <span class="n">String</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">with</span> <span class="nl">dependency:</span> <span class="n">Dependency</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">apiClient</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">apiClient</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">locationManager</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">dependency</span><span class="p">.</span><span class="n">coordinate</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 検索ボタンタップ時に、レストラン検索APIを叩く</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">state</span> <span class="o">=</span> <span class="n">searchButtonDidTapStream</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Input</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">searchButtonDidTap:</span> <span class="n">AnyObserver</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">searchButtonDidTapStream</span><span class="p">.</span><span class="n">asObserver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Output</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">places:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">placesStream</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">error:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">errorStream</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、 <code>View</code> からのインプットとして <code>searchButtonDidTap</code> プロパティを用意します。<br/>
インプットがあった場合に、 <code>searchButtonDidTapStream.asObserver()</code> することで、呼び出しを伝搬する仕組みになっています。<br/>
その中で <code>apiClient.fetchRestaurants(coordinate: coordinate)</code> を叩いています。</p>

<h5>ViewModelにレストラン検索APIの取得成功/失敗の処理を書く：パターン１</h5>

<p>この <code>apiClient.fetchRestaurants(coordinate: coordinate)</code> の結果次第で <code>View</code> に表示させる処理を変えたいと思います。<br/>
<code>GooglePlacesAPIClient</code> クラスの <code>fetchRestaurants</code> の戻り値の定義は以下とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の <code>Result</code> と <code>Places</code> の定義は以下とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Result.swift</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">success</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">failure</span><span class="p">(</span><span class="nl">error:</span> <span class="n">Error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Places.swift</span>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Places:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">results:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">status:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Place</code> の定義の紹介は省略します。</p>

<p>準備ができたので、レストラン検索APIの取得成功/失敗の処理を見ていきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="n">private</span> <span class="k">static</span> <span class="n">let</span> <span class="n">defaultPlaces</span> <span class="o">=</span> <span class="n">Places</span><span class="p">(</span><span class="nl">results:</span> <span class="p">[],</span> <span class="nl">status:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">ok</span><span class="p">(),</span> <span class="nl">htmlAttributions:</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 検索ボタンタップ時</span>
</span><span class='line'><span class="n">let</span> <span class="n">state</span> <span class="o">=</span> <span class="n">searchButtonDidTapStream</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 処理が成功した場合</span>
</span><span class='line'><span class="n">state</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">result</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">ViewModel</span><span class="p">.</span><span class="n">defaultPlaces</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">placesStream</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 処理が失敗した場合</span>
</span><span class='line'><span class="n">state</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">result</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">String</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">errorStream</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、処理が成功した場合と失敗した場合の処理を書いています。<br/>
処理が成功した場合はアウトプットである <code>placesStream</code> を経由して <code>View</code> に描画指示を出しています。<br/>
処理が失敗した場合はアウトプットである <code>errorStream</code> を経由して <code>View</code> に描画指示を出しています。</p>

<h5>Viewに描画処理を書く</h5>

<p><code>ViewModel</code> から指示の渡った後に <code>View</code> で実際に描画する処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">places</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">places</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">results</span> <span class="o">=</span> <span class="n">places</span><span class="p">.</span><span class="n">results</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">results</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">strongSelf</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>              <span class="n">results</span><span class="p">.</span><span class="n">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>                  <span class="c1">// マップにマーカを配置します</span>
</span><span class='line'>                  <span class="n">strongSelf</span><span class="p">.</span><span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">place</span><span class="p">)</span>
</span><span class='line'>              <span class="p">})</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">error</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">message</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">message</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="c1">// エラーメッセージをアラートに表示します</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ViewModelにレストラン検索APIの取得成功/失敗の処理を書く：パターン２</h5>

<p>パターン１で手法を一つ書きましたが、筆者的には</p>

<ul>
<li><code>View</code> に条件分岐などのロジックが必要になってしまう</li>
<li><code>ViewModel</code> で <code>bind</code> 先のオブジェクトの型は1つなので無駄な処理を書かざるを得ない

<ul>
<li>処理成功の場合の <code>return Observable.just(ViewModel.defaultPlaces)</code></li>
<li>処理失敗の場合の <code>return Observable.just(String())</code></li>
</ul>
</li>
</ul>


<p>というところが微妙だと感じています。</p>

<p>上記を踏まえて、もう１つ別の方法を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewModel.swift</span>
</span><span class='line'><span class="c1">// 検索ボタンタップ時</span>
</span><span class='line'><span class="n">searchButtonDidTapStream</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&lt;</span><span class="n">Places</span><span class="o">&gt;&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiClient</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">element</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">placesStream</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">errorStream</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これであれば、 <code>View</code> の方のロジックも下記のように多少減らすことができ、スッキリします。<br/>
( あっても困らない条件分岐ではありますけどね&hellip; )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">places</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">places</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">results</span> <span class="o">=</span> <span class="n">places</span><span class="p">.</span><span class="n">results</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>          <span class="n">results</span><span class="p">.</span><span class="n">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>              <span class="c1">// マップにマーカを配置します</span>
</span><span class='line'>              <span class="n">strongSelf</span><span class="p">.</span><span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">place</span><span class="p">)</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">viewModel</span><span class="p">.</span><span class="n">error</span>
</span><span class='line'>      <span class="p">.</span><span class="n">bind</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">message</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="c1">// エラーメッセージをアラートに表示します</span>
</span><span class='line'>          <span class="n">strongSelf</span><span class="p">.</span><span class="n">showAlert</span><span class="p">(</span><span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
筆者的には、まだまだ全然 <code>RxSwift</code> の修行が足りないので、もっと良い書き方を学んでいきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムDelegateのRx対応]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/14/popuppickerview-rx/"/>
    <updated>2018-10-14T22:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/14/popuppickerview-rx</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>先日、<a href="https://grandbig.github.io/blog/2018/10/06/rx-delegate/">GeolocationSampleから学ぶdelegateのRx対応</a>を紹介しました。<br/>
今回は<a href="https://grandbig.github.io/blog/2018/10/13/popuppickerview/">下からニュッと出るPickerを作ろう！</a>で作成した <code>PickerView</code> に実装されている <code>Delegate</code> を <code>Rx</code> 対応させたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>PickerViewクラスの確認</h3>

<p>まずは、元となる <code>PickerView</code> クラスを提示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// ピッカービュー</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">toolBar:</span> <span class="n">UIToolbar</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">picker:</span> <span class="n">UIPickerView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Static Properties</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenWidth</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenHeight</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="nl">defaultPickerHeight:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">260.0</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="mf">0.2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">PickerViewDelegate</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">selectItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">selectedRowIndex:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial Methods</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">screenWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">defaultPickerHeight</span><span class="p">),</span>
</span><span class='line'>                  <span class="nl">selectItems:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">safeAreaTopInsets</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">keyWindow</span><span class="o">?</span><span class="p">.</span><span class="n">safeAreaInsets</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">safeAreaTopInsets</span> <span class="o">&gt;</span> <span class="n">CGFloat</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// iPhoneX , XS, XS MAX, XRの場合はUIPickerViewの高さを調整する</span>
</span><span class='line'>            <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mf">100.0</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectItems</span> <span class="o">=</span> <span class="n">selectItems</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">nib</span><span class="p">.</span><span class="n">pickerView</span><span class="p">.</span><span class="n">firstView</span><span class="p">(</span><span class="nl">owner:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">showsSelectionIndicator</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Picker Move Function</span>
</span><span class='line'>    <span class="c1">// PickerViewを表示する</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">showPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewYPosition</span> <span class="o">=</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span> <span class="o">-</span> <span class="n">pickerViewHeight</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">pickerViewYPosition</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// PickerViewを非表示にする</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">hiddenPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">cancelSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">doneSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">selectedRowIndex</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">selectedRowIndex</span><span class="p">])</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRowIndex</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDataSource</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">numberOfComponents</span><span class="p">(</span><span class="k">in</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">numberOfRowsInComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - PickerViewDelegate</span>
</span><span class='line'><span class="err">@</span><span class="n">objc</span>
</span><span class='line'><span class="n">public</span> <span class="n">protocol</span> <span class="nl">PickerViewDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では早速 <code>Rx</code> 対応させていきましょう。</p>

<h3>DelegateProxyとDelegateProxyTypeへの対応</h3>

<p>基本的には、 <code>CLLocationManagerDelegate</code> と同じです。<br/>
<code>DelegateProxy</code> と <code>DelegateProxyType</code> を継承したクラスを実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">PickerViewDelegate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">RxPickerViewDelegateProxy:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">PickerView</span><span class="p">,</span> <span class="n">PickerViewDelegate</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DelegateProxyType</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="nl">pickerView:</span> <span class="n">PickerView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">parentObject:</span> <span class="n">pickerView</span><span class="p">,</span> <span class="nl">delegateProxy:</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">(</span><span class="nl">pickerView:</span> <span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">selectedItemSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">closePickerViewSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">((</span><span class="n">index</span><span class="p">,</span> <span class="n">title</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(5)</span>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>細かく見ていきましょう。</p>

<h4>説明(1)</h4>

<p><code>currentDelegate</code> および <code>setCurrentDelegate</code> に対応する代わりに、 <code>HasDelegate</code> を継承させましょう。</p>

<h4>説明(2)</h4>

<p>自身で定義した <code>DelegateProxy</code> の継承クラスを登録するために、 <code>registerKnownImplementations</code> 内で <code>DelegateProxySubclass.register()</code> を実行します。</p>

<h4>説明(3)</h4>

<p><code>delegate</code> メソッドが呼び出されて処理が実行されたことを <code>Subscriber</code> に伝えるために、 <code>PublishSubject</code> 型のプロパティを用意します。</p>

<h4>説明(4)</h4>

<p><code>PickerViewDelegate</code> の <code>selectedItem(index:title:)</code> と <code>closePickerView()</code> メソッドは必須メソッドです。<br/>
<code>RxPickerViewDelegateProxy</code> はもちろん <code>PickerViewDelegate</code> も継承しますので、上記2つのメソッドを定義する必要があります。</p>

<p>これが呼び出されたタイミングで <code>Subscriber</code> に伝えるために、 <code>PublishSubject.onNext(element:)</code> を実行します。</p>

<h4>説明(5)</h4>

<p><code>deinit</code> が呼ばれるタイミングで、初期化したオブジェクトが破棄されるので、<br/>
<code>PublishSubject</code> からイベント送信完了を知らせるように実装しましょう。</p>

<h3>ReactiveへのPickerViewの適応</h3>

<p>これも <code>CLLocationManager</code> と適応方法は同じです。<br/>
まずは、全体像から&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// PickerView+Rx.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">PickerView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">PickerView</span><span class="p">,</span> <span class="n">PickerViewDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">selectedItem:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">selectedItemSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">closePickerView:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxPickerViewDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">closePickerViewSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明します。</p>

<h4>説明(1)</h4>

<p><code>delegate</code> を <code>DelegateProxy</code> 型として定義します。<br/>
<code>DelegateProxy</code> の取得は <code>DelegateProxyType</code> プロトコルの <code>proxy</code> メソッドを利用します。</p>

<h4>説明(2)</h4>

<p>各 <code>delegate</code> メソッドが実行されたことを補足(監視)するために <code>Observable</code> 型の <code>selectedItem</code> と <code>closePickerView</code> を用意します。</p>

<h3>利用方法</h3>

<p>では、早速利用してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="n">let</span> <span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">bind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pickerView</span><span class="o">?</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">selectedItem</span>
</span><span class='line'>      <span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">subscribe</span><span class="p">({</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>          <span class="c1">// Subscriberとして補足した情報を取得</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span><span class="o">?</span><span class="mf">.0</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">let</span> <span class="n">title</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">element</span><span class="o">?</span><span class="mf">.1</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
</span><span class='line'>              <span class="c1">// ViewModelにsampleActionが定義されているとします</span>
</span><span class='line'>              <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="nl">to:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">viewModel</span><span class="p">.</span><span class="n">sampleAction</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">strongSelf</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>              <span class="p">})</span>
</span><span class='line'>              <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のような形で <code>ViewController</code> にて <code>Subscriber</code> としてアクションを補足し、 <code>ViewModel</code> に伝えることができるでしょう。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
1つ1つの意味を理解することはもちろん大切ですが、<br/>
何だか型にはまって書き方を覚えれば、自身で <code>Rx</code> 対応が簡単にできる気がしてきますね。</p>

<p><code>Rx</code> の癖が強いが故に、慣れれば利用しやすいということなのでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下からニュッと出るPickerを作ろう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/13/popuppickerview/"/>
    <updated>2018-10-13T12:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/13/popuppickerview</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日は様々記事で既に書かれている議題をあえて使おうと思います。<br/>
というのもほんのちょっとしたミスで非常にハマってしまった備忘録を残すためです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>作成手順</h3>

<p>① <code>New File...</code> > <code>User Interface</code> > <code>View</code> を選択し、 <code>xib</code> ファイルを作成しましょう</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_1.png" alt="xibファイルの作成" /></p>

<p>② <code>xib</code> 上で <code>UIPickerView</code> と <code>UIToolBar</code> を追加しましょう</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_2.png" alt="UIPickerViewとUIToolBarの追加" /></p>

<p>③ <code>xib</code> ファイルに対応する <code>swift</code> ファイルを作成しましょう<br/>
<code>New File...</code> > <code>Source</code> > <code>Swift File</code> を選択します。</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_3.png" alt="swiftファイルの作成" /></p>

<p>このタイミングで最低限、以下を定義しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>④ <code>xib</code> ファイルと <code>swift</code> ファイルの対応付け</p>

<p>下図のように、 <code>Placeholders</code> > <code>File's Owner</code> を選択して、<br/>
右メニューの <code>Show the Identity inspector</code> から <code>Custom Class</code> を設定します。</p>

<p><img src="http://grandbig.github.io/images/popuppickerview_4.png" alt="xibファイルとswiftファイルの対応付け" /></p>

<p>⑤ <code>swift</code> ファイルに具体的な実装を書きましょう</p>

<p>始めに結論を書いてしますと以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// ピッカービュー</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">PickerView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">toolBar:</span> <span class="n">UIToolbar</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">picker:</span> <span class="n">UIPickerView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Static Properties</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenWidth</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">screenHeight</span> <span class="o">=</span> <span class="n">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="nl">defaultPickerHeight:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">260.0</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">private</span> <span class="n">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="mf">0.2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">PickerViewDelegate</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="n">selectItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">selectedRow:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Initial Methods</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">screenWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">defaultPickerHeight</span><span class="p">),</span>
</span><span class='line'>                  <span class="nl">selectItems:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>        <span class="c1">// 説明(1)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">safeAreaTopInsets</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">keyWindow</span><span class="o">?</span><span class="p">.</span><span class="n">safeAreaInsets</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">safeAreaTopInsets</span> <span class="o">&gt;</span> <span class="n">CGFloat</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// iPhoneX , XS, XS MAX, XRの場合はUIPickerViewの高さを調整する</span>
</span><span class='line'>            <span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mf">100.0</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectItems</span> <span class="o">=</span> <span class="n">selectItems</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">nib</span><span class="p">.</span><span class="n">pickerView</span><span class="p">.</span><span class="n">firstView</span><span class="p">(</span><span class="nl">owner:</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>            <span class="n">picker</span><span class="p">.</span><span class="n">showsSelectionIndicator</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="c1">// MARK: - Picker Move Function</span>
</span><span class='line'>    <span class="c1">// PickerViewを表示する</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">showPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewYPosition</span> <span class="o">=</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span> <span class="o">-</span> <span class="n">pickerViewHeight</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">pickerViewYPosition</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// PickerViewを非表示にする</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">hiddenPickerView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewWidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">pickerViewHeight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">screenHeight</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">pickerViewWidth</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">pickerViewHeight</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">cancelSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">doneSelection</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">selectedRow</span><span class="p">)</span>
</span><span class='line'>        <span class="n">hiddenPickerView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// MARK: - UIPickerViewDataSource</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">numberOfComponents</span><span class="p">(</span><span class="k">in</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">numberOfRowsInComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(3)</span>
</span><span class='line'><span class="c1">/// MARK: - PickerViewDelegate</span>
</span><span class='line'><span class="n">public</span> <span class="n">protocol</span> <span class="nl">PickerViewDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">selectedItem</span><span class="p">(</span><span class="nl">index:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">closePickerView</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一部詳細を説明します。</p>

<h4>説明(1)</h4>

<p>昨年から <code>iPhoneX</code> が発売されましたので、 <code>UIPickerView</code> の高さを調整する必要があります。<br/>
今のところ、 <code>safeAreaInsets.top</code> が存在するのは、<br/>
<code>iPhoneX / XS / XS MAX / XR</code> といったホームボタンのない全面ディスプレイのみですので、<br/>
<code>safeAreaInsets.top &gt; CGFloat(0.0)</code> で判定できるでしょう。</p>

<h4>説明(2)</h4>

<p>下からニュッと出たり、下にニュッと引っ込んだりする動きは単に <code>UIView</code> の位置を <code>animate</code> メソッドで動かしているだけです。</p>

<h4>説明(3)</h4>

<p><code>UIToolBar</code> 上のボタンクリックで <code>UIPickerView</code> の挙動を操作したい場合があるでしょう。<br/>
そこで独自の <code>Delegate Methods</code> を用意しています。<br/>
この呼出は <code>IBAction</code> でハンドリングしている <code>cancelSelection</code> と <code>doneSelection</code> に紐づけています。</p>

<h3>筆者が躓いた点について備忘録</h3>

<p>筆者が本実装をしている際に、どうしても <code>UIPickerViewDelegate</code> のメソッドが呼び出されないという現象がありました。<br/>
原因は超絶基本的なことだったのですが、備忘録として残そうと思います。</p>

<p>まずは、誤っているソースコードから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、正しいソースコードは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// MARK: - UIPickerViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">PickerView:</span> <span class="n">UIPickerViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">titleForRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">forComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">selectItems</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">pickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">pickerView:</span> <span class="n">UIPickerView</span><span class="p">,</span> <span class="n">didSelectRow</span> <span class="nl">row:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">inComponent</span> <span class="nl">component:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedRow</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記2つの違いが何かと言うと、<br/>
メソッドを <code>private</code> で定義しているか <code>public</code> で定義しているかだけです。<br/>
<code>private</code> にしていたためスコープ外となってしまい呼び出せていなかったのでした&hellip;<br/>
何という凡ミス&hellip;これで3時間ほど持っていかれました笑</p>

<h3>まとめ</h3>

<p>さて今回は筆者の備忘録的な記事になりましたが、<br/>
<code>UIPickerView</code> は相変わらずニュッと下から出る挙動はデフォルトで提供してくれていないため、参考になることでしょう。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeolocationSampleから学ぶdelegateのRx対応]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/06/rx-delegate/"/>
    <updated>2018-10-06T11:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/06/rx-delegate</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><code>RxSwift</code> を利用して <code>MVVM</code> アーキテクチャでアプリを開発することがあるでしょう。<br/>
その際に、ボタンタップやネットワーク通信であれば、何もやらずとも <code>RxSwift</code> が対応してくれていたり、 <code>RxSwift</code> に対応しているライブラリがあったりします。</p>

<p>しかし、デフォルトでは <code>RxSwift</code> に対応していない場合も当然あります。<br/>
ではそんなとき、どのようにして対応すれば良いでしょうか。</p>

<p>今日は、 <code>delegate</code> の <code>Rx</code> 対応について公式サンプルの <code>GeolocationSample</code> を元に説明してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>delegateのRx対応方法</h3>

<p>早速具体的に方法を見ていきましょう。<br/>
今回は公式サンプルの <code>GeolocationSample</code> を元に、 <code>CLLocationManagerDelegate</code> を <code>Rx</code> に対応させる方法を説明します。</p>

<h4>DelegateProxyとDelegateProxyTypeへの対応</h4>

<p><code>delegate</code> の <code>Rx</code> 対応でまず必要なことは</p>

<ul>
<li><code>DelegateProxy</code> クラスを継承するクラスを作成すること</li>
<li><code>DelegateProxyType</code> プロトコルを継承するクラスを作成すること</li>
</ul>


<p>です。<br/>
ここでは上記2つの条件を満たした <code>RxCLLocationManagerDelegateProxy</code> クラスを作ることとします。</p>

<h5>DelegateProxyの説明</h5>

<p><code>DelegateProxy.swift</code> を見てみると、下記のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// DelegateProxy.swift</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Base class for `DelegateProxyType` protocol.</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// This implementation is not thread safe and can be used only from one thread (Main thread).</span>
</span><span class='line'><span class="n">open</span> <span class="n">class</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="nl">P:</span> <span class="n">AnyObject</span><span class="p">,</span> <span class="n">D</span><span class="o">&gt;:</span> <span class="n">_RXDelegateProxy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">ParentObject</span> <span class="o">=</span> <span class="n">P</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">D</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>DelegateProxy</code> は <code>DelegateProxyType</code> プロトコルのベースクラスと説明されています。<br/>
<code>DelegateProxy</code> はジェネリッククラスであり、2つのパラメータ <code>P</code> と <code>D</code> を持ちます。</p>

<p>ここで、 <code>P</code> と <code>D</code> について説明します。</p>

<ul>
<li><code>D</code> :<br/>
<code>Rx</code> に対応させたい <code>delegate</code> を指定します<br/>
<code>D</code> は <code>Delegate</code> の頭文字と思われます</li>
<li><code>P</code> :<br/>
<code>delegate</code> である <code>D</code> をプロパティとして持つオブジェクトを指定します<br/>
<code>P</code> は <code>ParentObject</code> の頭文字と思われます</li>
</ul>


<p>今回の場合は、<br/>
<code>DelegateProxy&lt;CLLocationManager, CLLocationManagerDelegate&gt;</code> になります。</p>

<h5>DelegateProxyTypeの説明</h5>

<p><code>DelegateProxyType.swift</code> の中身を見てみると、下記のように説明されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// DelegateProxyType.swift</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">`DelegateProxyType` protocol enables using both normal delegates and Rx observable sequences with</span>
</span><span class='line'><span class="cm">views that can have only one delegate/datasource registered.</span>
</span><span class='line'><span class="cm">...</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>意訳すると、<br/>
<code>DelegateProxyType</code> は <code>delegate</code> と <code>Rx</code> との紐付けを実現するプロトコル<br/>
であることを指しています。</p>

<p>方式は図示化されていますので、見てみると何となく理解できると思います。<br/>
図では <code>UIScrollViewDelegate</code> を例に説明されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="o">+-------------------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">UIView</span> <span class="n">subclass</span> <span class="p">(</span><span class="n">UIScrollView</span><span class="p">)</span>            <span class="o">|</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">+-----------+-------------------------------+</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">Delegate</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>
</span><span class='line'><span class="o">+-----------</span><span class="n">v</span><span class="o">-------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Delegate</span> <span class="n">proxy</span> <span class="o">:</span> <span class="n">DelegateProxyType</span>        <span class="o">+-----+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">|</span>                <span class="p">,</span> <span class="n">UIScrollViewDelegate</span>     <span class="o">|</span>     <span class="o">|</span>
</span><span class='line'><span class="o">+-----------+-------------------------------+</span>     <span class="o">+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T2</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">+----&gt;</span>  <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T3</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">forwards</span> <span class="n">events</span>                     <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">to</span> <span class="n">custom</span> <span class="n">delegate</span>                  <span class="o">|</span>
</span><span class='line'>            <span class="o">|</span>                                     <span class="n">v</span>
</span><span class='line'><span class="o">+-----------</span><span class="n">v</span><span class="o">-------------------------------+</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Custom</span> <span class="n">delegate</span> <span class="p">(</span><span class="n">UIScrollViewDelegate</span><span class="p">)</span>    <span class="o">|</span>
</span><span class='line'><span class="o">|</span>                                           <span class="o">|</span>
</span><span class='line'><span class="o">+-------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>また <code>DelegateProxyType</code> は以下3つの <code>static</code> メソッドを定義しているため、<br/>
<code>DelegateProxyType</code> を継承すると、必ずこの3つのメソッドを持つ必要があります。</p>

<ul>
<li><code>registerKnownImplementations</code><br/>
このメソッドの中で必ず <code>DelegateProxySubclass.register()</code> を実行します。<br/>
これをすることで自身で定義した <code>DelegateProxy</code> の継承クラスを登録することができます。</li>
<li><code>currentDelegate</code><br/>
<code>ParentObject</code> の持つ <code>delegate</code> を返却する処理を書きます。</li>
<li><code>setCurrentDelegate</code><br/>
<code>ParentObject</code> に持つべき <code>delegate</code> を設定する処理を書きます。</li>
</ul>


<p>特に特殊なことをしない場合は、<br/>
<code>delegate</code> をプロパティとして持つオブジェクトである <code>ParentObject</code>に<br/>
<code>HasDelegate</code> プロトコルを継承させます。 　</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">extension</span> <span class="nl">CLLocationManager:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">CLLocationManagerDelegate</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、 <code>currentDelegate</code> と <code>setCurrentDelegate</code> を省略することができます。</p>

<h5>対応したコードを書いてみる</h5>

<p>基本的な説明は以上として、実際にコードに起こしてみましょう。<br/>
まずは結果から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>      <span class="c1">// ここは必須</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>      <span class="c1">// ここは必須</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span> <span class="c1">//  CLLocationManagerDelegateはCoreLocation内に定義されています</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// currentDelegateとsetCurrentDelegateの役割を担います</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">CLLocationManager:</span> <span class="n">HasDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">typealias</span> <span class="n">Delegate</span> <span class="o">=</span> <span class="n">CLLocationManagerDelegate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DelegateProxy, DelegateProxyType, CLLocationManagerDelegateを継承</span>
</span><span class='line'><span class="c1">// DelegateをRxに対応させるために、元となるDelegateも継承が必須です</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="nl">RxCLLocationManagerDelegateProxy:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DelegateProxyType</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初期化処理</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">parentObject:</span> <span class="n">locationManager</span><span class="p">,</span> <span class="nl">delegateProxy:</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 必須のstaticメソッド</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 説明(1)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="p">(</span><span class="n">locationManager</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">RxCLLocationManagerDelegateProxy</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">locationManager</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(2)</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didUpdateLocationsSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didFailWithErrorSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(3)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didUpdateLocations:</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>        <span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didFailWithError</span> <span class="nl">error:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didFailWithError:</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 説明(4)</span>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ソースコードを一部補足説明します。</p>

<h6>説明(1)</h6>

<p><code>registerKnownImplementations</code> で説明した通り <code>register</code> メソッドを実行しています。<br/>
<code>register</code> メソッドは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">/// Store DelegateProxy subclass to factory.</span>
</span><span class='line'><span class="c1">/// When make &#39;Rx*DelegateProxy&#39; subclass, call &#39;Rx*DelegateProxySubclass.register(for:_)&#39; 1 time, or use it in DelegateProxyFactory</span>
</span><span class='line'><span class="c1">/// &#39;Rx*DelegateProxy&#39; can have one subclass implementation per concrete ParentObject type.</span>
</span><span class='line'><span class="c1">/// Should call it from concrete DelegateProxy type, not generic.</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="k">register</span><span class="o">&lt;</span><span class="n">Parent</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">make:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Parent</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">factory</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="nl">make:</span> <span class="n">make</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と定義されています。</p>

<p>クロージャの引数に <code>ParentObject</code> を必要とし、<br/>
そのクラス自身を戻り値を必要としているため、<br/>
<code>ParentObject</code> として <code>locationManager</code> を渡し、<br/>
それを元に初期化した <code>RxCLLocationManagerDelegateProxy</code> オブジェクトを戻り値として渡しています。</p>

<p>ここは説明のため省略書きしませんでしたが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="nf">registerKnownImplementations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="k">register</span> <span class="p">{</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とも当然書けます。</p>

<h6>説明(2)</h6>

<p><code>PublishSubject</code> 型のプロパティを2つ定義しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didUpdateLocationsSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'><span class="n">internal</span> <span class="n">lazy</span> <span class="n">var</span> <span class="n">didFailWithErrorSubject</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは説明(3)にも関わるのですが、<br/>
<code>delegate</code> メソッドが呼び出されて処理が実行されたことを <code>Subscriber</code> に伝えるために定義が必要となります。</p>

<h6>説明(3)</h6>

<p><code>delegate</code> メソッドを <code>Rx</code> で対応するための方法が、まさにココで直接的に書かれています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="nf">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_forwardToDelegate</span><span class="o">?</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="nl">didUpdateLocations:</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は、 <code>didUpdateLocations</code> で取得した <code>locations</code> の情報を <code>Rx</code> 連携させるために、上記のように記述しています。<br/>
先程説明した <code>PublishSubject</code> が <code>Subscriber</code> にメソッドの実行タイミングでデータを伝える方法ですが、<br/>
<code>didUpdateLocationsSubject.onNext(locations)</code> で実行しています。</p>

<p><code>_forwardToDelegate?.locationManager(manager, didUpdateLocations: locations)</code> はメモリ観点から<br/>
<code>delegate</code> を引き続き利用していることを伝えるために利用しているように見えます。</p>

<h6>説明(4)</h6>

<p>最後に <code>deinit</code> 内で実行している処理ですが、<br/>
<code>deinit</code> が呼ばれるということは初期化したオブジェクトが破棄される時なので、イベントが送られることはないはずです。<br/>
よって <code>PublishSubject</code> からイベント送信完了を知らせるように実装しましょう。</p>

<h4>ReactiveへのCLLocationManagerの適応</h4>

<p>事前準備が整ったため、実際に <code>CLLocationManager</code> を <code>Rx</code> 適応させてみます。</p>

<p><code>RxSwift</code> では下記のように書くことで拡張できる仕組みを用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CLLocationManager+Rx.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">CLLocationManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが可能な理由は <code>Reactive.swift</code> を見てみると良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="n">Reactive</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">/// Base object to extend.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">let</span> <span class="nl">base:</span> <span class="n">Base</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Creates extensions with base object.</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - parameter base: Base object.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">base:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、拡張した後にやることは下記です。</p>

<ul>
<li><code>delegate</code> のラッパーを生成する</li>
<li>各 <code>delegate</code> メソッドに対応したラッパープロパティを生成する</li>
<li>キャストメソッドを用意する</li>
</ul>


<p>1つずつ説明していきましょう。</p>

<h5>delegateのラッパーを生成する</h5>

<p>このラッパーは <code>delegate</code> を <code>DelegateProxy</code> 型として定義します。<br/>
この <code>delegate</code> はもちろん <code>readOnly</code> で値の取得のみできるものとします。<br/>
<code>DelegateProxy</code> の取得は <code>DelegateProxyType</code> プロトコルの <code>proxy</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">Reactive wrapper for `delegate`.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">For more information take a look at `DelegateProxyType` protocol documentation.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">DelegateProxy</span><span class="o">&lt;</span><span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>各delegateメソッドに対応したラッパープロパティを生成する</h5>

<p><code>RxCLLocationManagerDelegateProxy</code> で <code>didUpdateLocations</code> と <code>didFailWithError</code> の <code>delegate</code> メソッドに対応しました。<br/>
これらのメソッドに対応したラッパープロパティは以下のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: Responding to Location Events</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'> <span class="n">public</span> <span class="n">var</span> <span class="nl">didUpdateLocations:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">CLLocation</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">didUpdateLocationsSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">didFailWithError:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RxCLLocationManagerDelegateProxy</span><span class="p">.</span><span class="n">proxy</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">base</span><span class="p">).</span><span class="n">didFailWithErrorSubject</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらも <code>readOnly</code> で値のみを <code>Observable</code> 型で取得できるように定義しています。</p>

<h5>キャストメソッドを用意する</h5>

<p>キャストメソッドを用意する理由は、<br/>
あるメソッドの処理の完了タイミングで何らかの処理を実行させたい<br/>
<code>methodInvoked</code> を利用するときに必要になります。</p>

<p>処理は下記の通りです。<br/>
<code>Optional</code> 型の場合とそうでない場合が必要になる可能性がありますので、2種類用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">fileprivate</span> <span class="n">func</span> <span class="n">castOrThrow</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resultType:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="n">as</span><span class="o">?</span> <span class="n">T</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">RxCocoaError</span><span class="p">.</span><span class="n">castingError</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">targetType:</span> <span class="n">resultType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">returnValue</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fileprivate</span> <span class="n">func</span> <span class="n">castOptionalOrThrow</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resultType:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">NSNull</span><span class="p">().</span><span class="n">isEqual</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="n">as</span><span class="o">?</span> <span class="n">T</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">RxCocoaError</span><span class="p">.</span><span class="n">castingError</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">targetType:</span> <span class="n">resultType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">returnValue</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回の場合、端末の位置情報を利用するので、 <code>CLLocationManagerDelegate</code> の <code>didChangeAuthorization</code> のハンドリングが必須になります。<br/>
この <code>delegate</code> メソッドは定期的に繰り返し利用する必要はありません。<br/>
状態が変わって、その情報を必要となったタイミングでだけ利用できれば良いのです。<br/>
よって <code>methodInvoked</code> を利用してプロパティを定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: Responding to Authorization Changes</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> Reactive wrapper for `delegate` message.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">public</span> <span class="n">var</span> <span class="nl">didChangeAuthorizationStatus:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">CLAuthorizationStatus</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="p">.</span><span class="n">methodInvoked</span><span class="p">(</span><span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">CLLocationManagerDelegate</span><span class="p">.</span><span class="n">locationManager</span><span class="p">(</span><span class="nl">_:didChangeAuthorization:</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">a</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">number</span> <span class="o">=</span> <span class="n">try</span> <span class="n">castOrThrow</span><span class="p">(</span><span class="n">NSNumber</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CLAuthorizationStatus</span><span class="p">(</span><span class="nl">rawValue:</span> <span class="n">Int32</span><span class="p">(</span><span class="n">number</span><span class="p">.</span><span class="n">intValue</span><span class="p">))</span> <span class="o">??</span> <span class="p">.</span><span class="n">notDetermined</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上で必要な対応は全て完了です。</p>

<h3>Rxに対応したdelegateの使い方</h3>

<p>自作した <code>Rx</code> 対応後の <code>delegate</code> を利用する例も見ていきましょう。</p>

<h4>処理ロジックの実装</h4>

<p>公式サンプルでは処理ロジックに相当する <code>GeolocationService.swift</code> を下記のように実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GeolocationService.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">let</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// 説明(1)</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">distanceFilter</span> <span class="o">=</span> <span class="n">kCLDistanceFilterNone</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBestForNavigation</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(2)</span>
</span><span class='line'>        <span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">locationManager</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">locationManager</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didChangeAuthorizationStatus</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">notDetermined</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedAlways:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(3)</span>
</span><span class='line'>        <span class="n">location</span> <span class="o">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didUpdateLocations</span>
</span><span class='line'>            <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="p">[])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">last</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">Driver</span><span class="p">.</span><span class="n">just</span><span class="p">)</span> <span class="o">??</span> <span class="n">Driver</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明していきましょう。</p>

<h5>説明(1)</h5>

<p>今回のサンプルは、</p>

<ul>
<li>位置情報の利用を許可したら、画面が切り替わる</li>
<li>取得した最新の位置情報を画面に表示する</li>
</ul>


<p>という、データ結果を画面に直接反映させる処理が含まれています。<br/>
よって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">authorized:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">private</span> <span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように <code>Driver</code> として定義しています。</p>

<h5>説明(2)</h5>

<p><code>authorized</code> は <code>delegate</code> メソッドである <code>didChangeAuthorization</code> が呼び出されたタイミングで値が変更される必要があります。 <br/>
今回は、<br/>
<code>Subscribe</code> するまでは <code>Observable</code> を生成せずに、 <code>Subscribe</code> されたタイミングで <code>Observable</code> を返す <code>Observable</code> を生成する<br/>
<code>deferred</code> メソッドを利用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">authorized</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">deferred</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">locationManager</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">locationManager</span> <span class="o">=</span> <span class="n">locationManager</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// didChangeAuthorizationStatusからauthorizedの値を取得</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">locationManager</span>
</span><span class='line'>            <span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didChangeAuthorizationStatus</span>
</span><span class='line'>            <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// エラーが発生した場合は .notDetermined で返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">notDetermined</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// .authorizedAlwaysの場合のみauthorizedにtrueを格納する</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">$0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedAlways:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>説明(3)</h5>

<p>最新の位置情報を取得したタイミングで通知します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">location</span> <span class="o">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didUpdateLocations</span>
</span><span class='line'>    <span class="c1">// エラーが発生した場合は、空配列で返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="nl">onErrorJustReturn:</span> <span class="p">[])</span>
</span><span class='line'>    <span class="c1">// 位置情報が格納されている場合はその値を、位置情報がない場合は空を返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">$0</span><span class="p">.</span><span class="n">last</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">Driver</span><span class="p">.</span><span class="n">just</span><span class="p">)</span> <span class="o">??</span> <span class="n">Driver</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// CLLocationCoordinate2Dの値を返却する</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">$0</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Viewロジックの実装</h4>

<p>サンプルでは下記のように実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GeolocationViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">RxCocoa</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 説明(1)</span>
</span><span class='line'><span class="n">private</span> <span class="n">extension</span> <span class="n">Reactive</span> <span class="n">where</span> <span class="nl">Base:</span> <span class="n">UILabel</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">coordinates:</span> <span class="n">Binder</span><span class="o">&lt;</span><span class="n">CLLocationCoordinate2D</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Binder</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="p">{</span> <span class="n">label</span><span class="p">,</span> <span class="n">location</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Lat: \(location.latitude)</span><span class="se">\n</span><span class="s">Lon: \(location.longitude)&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">GeolocationViewController:</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">noGeolocationView:</span> <span class="n">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">private</span> <span class="n">var</span> <span class="nl">button2:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">label:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">noGeolocationView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">geolocationService</span> <span class="o">=</span> <span class="n">GeolocationService</span><span class="p">.</span><span class="n">instance</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(2)</span>
</span><span class='line'>        <span class="n">geolocationService</span><span class="p">.</span><span class="n">authorized</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">noGeolocationView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">isHidden</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 説明(3)</span>
</span><span class='line'>        <span class="n">geolocationService</span><span class="p">.</span><span class="n">location</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">coordinates</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="nl">by:</span> <span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1つずつ説明していきましょう。</p>

<h5>説明(1)</h5>

<p>画面に位置情報を表示するために <code>UILabel</code> を独自に <code>Rx</code> に対応させています。<br/>
これは <code>CLLocationManager</code> を拡張した方法と同じですね。</p>

<h5>説明(2)</h5>

<p><code>authorized</code> が <code>true</code> の場合に <code>noGeolocationView</code> を非表示にするよう実装しています。</p>

<h5>説明(3)</h5>

<p>取得できた最新の位置情報を説明(1)で拡張した機能を利用して <code>UILabel</code> に表示するようにしています。</p>

<p>以上で <code>Rx</code> に対応させた <code>delegate</code> を利用することができました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか。<br/>
形式に沿って実装をすることで簡単に拡張することはできますが、<br/>
実装1つ1つを理解することでより深く <code>RxSwift</code> を現場で活用できるかと思います。</p>

<p>まだまだ筆者も理解が乏しいところがあるので、もっと深く勉強を続けていきたいと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(3) ~ コーディングテストから用途を見る ~ ]]></title>
    <link href="http://grandbig.github.io/blog/2018/10/04/swift-base-3/"/>
    <updated>2018-10-04T17:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/10/04/swift-base-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて本日は久しぶりに <code>Swift</code> の基礎について書きたいと思います。<br/>
と言うのも、最近オンラインでのコーディングテストを日常的に解いてみているのですが、<br/>
ほとんどの場合、 <code>Swift</code> の基本的な書き方を求められるからです。<br/>
(それを如何に使って算数 or 数学を解くか的な問題が多いな〜と感じる今日このごろです。)</p>

<p><code>Swift</code> もとうとう <code>4.2</code> にまで上がってきていますし、<br/>
iOSアプリの新規開発はほぼ <code>Swift</code> を利用する世の中になっていると思いますので、<br/>
改めて見直して損はないでしょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>文字列分割</h3>

<p>まずは文字列分割について見ていきます。<br/>
コーディングテストでよくあるのが、</p>

<ul>
<li>入力値が半角スペースで区切られている文字列</li>
<li>その文字列を利用して、何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは下記のように配列化することが多いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 与えられる入力値が &quot;1 2 3 4 5&quot;の場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 3 4 5&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 半角スペースで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespace</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 出力すると下記のようになります</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>半角スペース以外で区切るパターンもあるので一例を載せておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 数字で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;a1b2c3d4e&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">decimalDigits</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 小文字アルファベットで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1a2B3う4日5キ6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 小文字アルファベットで分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1a2b3c4D5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">lowercaseLetters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4D5&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 記号で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1/2?3_4-5@6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">punctuationCharacters</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん <code>CharacterSet</code> 内の定義を利用せずとも下記のようにも書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ハイフン(-)で分割</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1-2-3-4-5-6&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ループ処理</h3>

<p>続いてループ処理です。</p>

<h4>for in</h4>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li>1つ目の入力値は、その後入力される入力値の数を表す</li>
<li>2つ目 〜 Xつ目の入力値を用いて何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは、下記のように <code>for in</code> 文を利用することが多いです。</p>

<p>入力値が</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 入力値</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように与えられたとすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">num</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="n">readLine</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように利用して、回答したりします。</p>

<h4>enumerated()</h4>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li>配列の偶数番目には○○をする</li>
<li>配列の奇数番目には▲▲をする</li>
<li>上記結果を用いて、何らかの出力値を出す</li>
</ul>


<p>というものです。<br/>
このケースでは、配列の <code>index</code> を利用したいので、 <code>enumerated()</code> を利用することが多いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">input</span><span class="p">.</span><span class="n">enumerated</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 偶数の場合</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 奇数の場合</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>forEach</h4>

<p>コーディングテストの問題を解いて、最後に配列の要素を出力したい場合に利用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;おはよう&quot;</span><span class="p">,</span> <span class="s">&quot;こんにちは&quot;</span><span class="p">,</span> <span class="s">&quot;こんばんは&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">result</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// おはよう</span>
</span><span class='line'><span class="c1">// こんにちは</span>
</span><span class='line'><span class="c1">// こんばんは</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の並び替え</h3>

<p>そして、並び替えの処理です。<br/>
コーディングテストで、</p>

<ul>
<li>スコア順に並べる</li>
<li>逆さから文字列を読む</li>
</ul>


<p>などが問題となることがあります。<br/>
その場合には <code>sorted()</code> や <code>sorted(by:)</code> を利用しています。<br/>
下記は、単純な配列の並び替えの場合です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 単純な配列の並び替えの場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">68</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">sortedArray</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span>  <span class="c1">// 昇順</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sortedArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">//  [35, 68, 80, 100]</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="nl">by:</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&lt;</span> <span class="n">$1</span> <span class="p">})</span>       <span class="c1">// 昇順</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="c1">//  [35, 68, 80, 100]</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="nl">by:</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&gt;</span> <span class="n">$1</span> <span class="p">})</span>       <span class="c1">// 降順</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [100, 80, 68, 35]</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、逆さから文字列を読む場合です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;swift&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">input</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">reversed</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="c1">// tfiws</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列要素の最大値/最小値</h3>

<p>コーディングテストで</p>

<ul>
<li>生徒の点数を計算する</li>
<li>最高得点と最低得点を半角スペース区切りで出力する</li>
</ul>


<p>必要があるとしましょう。<br/>
そのケースでは <code>max()</code> , <code>min()</code> を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;\(input.max()!) \(input.min()!))</span>
</span><span class='line'><span class="c1">// 100 20</span>
</span></code></pre></td></tr></table></div></figure>


<h3>文字列から文字を取得</h3>

<p>コーディングテストでよくあるのが、</p>

<ul>
<li><code>String</code> 型の数字の末尾を削除する</li>
<li>ある文字列の○番目の文字を出力する</li>
</ul>


<p>などのパターンでしょうか。</p>

<p><code>String</code> 型の数字の末尾を削除するには、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 算出方法１</span>
</span><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;123456789X&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">prefix</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num1</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 算出方法２</span>
</span><span class='line'><span class="n">let</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">before:</span> <span class="n">str</span><span class="p">.</span><span class="n">endIndex</span><span class="p">)]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift3までの算出方法 - deprecated なので利用しないようにしましょう</span>
</span><span class='line'><span class="n">let</span> <span class="n">num3</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">to:</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">before:</span> <span class="n">str</span><span class="p">.</span><span class="n">endIndex</span><span class="p">))</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num3</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 123456789</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いでしょう。</p>

<p>文字列から○番目の文字を出力するには、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;123456789&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3番目の文字列を取得する場合</span>
</span><span class='line'><span class="n">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;3&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;4&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift3までの算出方法 - deprecated なので利用しないようにしましょう</span>
</span><span class='line'><span class="n">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">with:</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy:</span> <span class="mi">2</span><span class="p">)..</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy:</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればOKです。<br/>
Swift3とSwift4の算出方法が異なり、○番目の数え方も1ズレているので注意しましょう。</p>

<p>逆に初めから抽出したい文字列があり、それが何番目かを知りたい場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;ABCDEFG&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;D&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">index</span><span class="o">?</span><span class="p">.</span><span class="n">encodedOffset</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればOKです。<br/>
気をつけておきたいのは、 <code>offset</code> には0番目から数えた場合の数字が入るため、+1しておくということです。</p>

<h3>文字列の置換</h3>

<p>特定の文字を見つけたら、別の特定の文字に置き換えるという問題が出た場合は下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;ABCDEFG&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">replacingOccurrences</span><span class="p">(</span><span class="nl">of:</span> <span class="s">&quot;ABC&quot;</span><span class="p">,</span> <span class="nl">with:</span> <span class="s">&quot;abc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="c1">// abcDEFG</span>
</span></code></pre></td></tr></table></div></figure>


<h3>合計値を求める</h3>

<p>英数国理社の5科目の合計点を出す必要があるとします。<br/>
どのように解決するかというと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">subjectScore</span> <span class="o">=</span> <span class="p">[</span><span class="mi">78</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">92</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">subjectScore</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">+</span> <span class="n">$1</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 365</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じで <code>reduce</code> メソッドを使いましょう。</p>

<h3>特定の条件を満たしたものを取得する</h3>

<p>例えば、合格ボーダの点数を超過している科目があるか確認する必要があるとします。<br/>
この場合は <code>filter</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 合格ボーダの点数が40点だとします。</span>
</span><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">$0</span> <span class="o">&gt;</span> <span class="mi">40</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [100, 60]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の要素全てに同じ処理を実行したい</h3>

<p>例えば、半角スペース区切りの数字で構成された文字列が入力値として与えられた場合に、<br/>
数字に変換して計算に利用するケースがあるでしょう。<br/>
この場合は <code>map</code> メソッドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 3 4 5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespaces</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">intArray</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">Int</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">intArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配列の要素全てに同じ処理を実行して、不要なものは切り捨てたい</h3>

<p>イメージとしては、 <code>map</code> と <code>filter</code> の良いとこ取りでしょうか。<br/>
以下のように <code>compactMap</code> を利用します。<br/>
もし、 <code>map</code> を利用したら <code>B</code> の部分でコケてしまうでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;1 2 B 4 5&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="nl">separatedBy:</span> <span class="p">.</span><span class="n">whitespaces</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">intArray</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="n">Int</span><span class="p">(</span><span class="n">$0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">intArray</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [1, 2, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、Swift4.0以前では <code>flatMap</code> というメソッド名でしたが、Swift4.1から <code>compactMap</code> に改名されました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか。<br/>
今回はコーディングテストの視点から各メソッドの用途を説明してみました。<br/>
と言っても超基本的な内容なので、今更ではあるんですけどね。</p>

<p>と言うことで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(5周年)]]></title>
    <link href="http://grandbig.github.io/blog/2018/09/15/blog-5-year-anniversary/"/>
    <updated>2018-09-15T20:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/09/15/blog-5-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて早くも5周年</h3>

<p>今年も書きます。早5周年記念投稿！</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>アクセス数の推移</h4>

<p><strong>Google Analytics</strong> からデータアクセスの推移を見ていきたいと思います。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/5anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
2018年はアクセス数が全体的に減少傾向にあるという結果となりました。</p>

<p>もう少し詳細化したものを記載します。<br/>
以下、1年間のアクセス数の推移を示しています。<br/>
<img src="http://grandbig.github.io/images/5anniversary2.png" alt="1年間でのアクセス数の推移" /></p>

<p>特に2018年の5月を境に、平日のページビュー数が 400 〜 530 程度にまで落ち込んでしまいました。<br/>
原因は正直わかっていません&hellip;<br/>
1つ昨年度と違うことと言えば、少々、月あたりの投稿数が減ってしまったといったことでしょうか。<br/>
1つ1つの記事の質にも課題があるかもしれません。</p>

<p>因みにですが&hellip;<br/>
ブログ開始当初からの各値の総計は下図の通りです。<br/>
<img src="http://grandbig.github.io/images/5anniversary3.png" alt="ブログ開始からの各数値" /></p>

<p>平均ページ滞在時間は昨年度に比べて <code>9秒</code> 程、長くなっていますが、<br/>
離脱率は <code>1%</code> 程、増加してしまいました。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>続いてアクセス数が多かった記事ランキングです！！</p>

<p><strong>1位: <a href="https://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot/">Spring Bootでリダイレクト先にパラメータを渡す方法</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary4.png" alt="第1位記事の詳細データ" /></p>

<p><strong>2位: <a href="https://grandbig.github.io/blog/2016/07/16/git-reset/">GitでリモートにPushした内容を取り消したい！！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary5.png" alt="第2位記事の詳細データ" /></p>

<p><strong>3位: <a href="https://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary6.png" alt="第3位記事の詳細データ" /></p>

<p><strong>4位: <a href="https://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/">Docker for Macをインストールしよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary7.png" alt="第5位記事の詳細データ" /></p>

<p><strong>5位: <a href="https://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/5anniversary8.png" alt="第4位記事の詳細データ" /></p>

<p>以上が上位5記事です。</p>

<p>昨年度とほとんど上位記事に違いはありませんでした。<br/>
強いて言うならば、4位の「Docker for Macをインストールしよう！」がトップ5に食い込んできたくらいでしょうか。<br/>
本ブログはiOSをメインに書いているものの、ギリギリ5位にiOS関連の記事が来るに留まるという結果となりました。</p>

<p>しかも、トップ5中の4つが2016年に書いた記事で、4位の記事も2017年ということで、なかなか新規記事が伸びていないことがわかります。<br/>
これもまた全体のアクセス数を減少させてしまった原因を表しているかもしれません&hellip;</p>

<h4>広告収入の推移</h4>

<p>広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
では、今年の推移(2017/09/01〜2018/09/14)を見ていきます。<br/>
<img src="http://grandbig.github.io/images/5anniversary9.png" alt="Google Adsenseの推移" /></p>

<p>上記期間のAdsense収益は <strong>10,424円</strong> でした。<br/>
昨年が8,600円だったことを考えると、収益は少々増えていることが確認できます。</p>

<h3>まとめ</h3>

<p>さて、今年は少々寂しい結果となってしまいましたが、如何でしたでしょうか？<br/>
筆者の反省点としては、何と言っても記事の数が少なくなってしまったことです。<br/>
やはり、誰かに少しでも役に立つ記事を数多く書くことを心がけてきた身としては、後悔の念が拭えません&hellip;</p>

<p>この反省を活かして、来年こそは良い結果をお届けできればと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftでif else VS switch]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/25/swift-if-else-switch-case/"/>
    <updated>2018-08-25T20:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/25/swift-if-else-switch-case</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>アプリ開発をしているとたまに <code>if xxx { ... } else if yyy { ... }</code> で書くか <code>switch</code>文を用いるか迷うことがあるかもしれません。<br/>
その際には処理速度や可読性を踏まえて選択することが一般的なのではないでしょうか。</p>

<p>今回は処理速度に振り切って、どちらが速いのか比較をしてみようと思います。<br/>
( <code>Java</code> で比較している例は見られたのですが、以外にも <code>Swift</code> で比較している例が見られなかったので。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>比較に用いるソースコードのサンプル</h3>

<p>まずは次のような <code>enum</code> を用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">dog</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cat</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">bird</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">mouse</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">lion</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この <code>enum</code> の各要素を10,000件ずつ格納されて、かつその順番をシャッフルした配列を作成します。<br/>
以下は配列内の要素をシャッフルための処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Array+Extension.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">shuffle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">self</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">UInt32</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">indices</span><span class="p">.</span><span class="n">last</span><span class="o">!</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">j</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">swapAt</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてサンプルデータを生成する処理です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">makeSampleData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Animal</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">Animal</span><span class="p">]()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">100000</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">dog</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">cat</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">bird</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">mouse</span><span class="p">)</span>
</span><span class='line'>        <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(.</span><span class="n">lion</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">shuffle</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">array</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを以下の <code>if xxx { ... } else if yyy { ... }</code> と <code>switch</code> の処理で比較します。</p>

<p><code>if xxx { ... } else if yyy { ... }</code> の場合は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// if xxx { ... } else if yyy { ... } の場合</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">calculateIfElse</span><span class="p">(</span><span class="nl">animals:</span> <span class="p">[</span><span class="n">Animal</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dog</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">bird</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">lion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">animals</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">animal</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">dog</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">dog</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">cat</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">bird</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">bird</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="p">.</span><span class="n">mouse</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mouse</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">lion</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;dog: \(dog), cat: \(cat), bird: \(bird), mouse: \(mouse), lion: \(lion)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;time diff: \(endTime.timeIntervalSince(startTime))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>switch</code> の場合は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// switch の場合</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">calculateSwitch</span><span class="p">(</span><span class="nl">animals:</span> <span class="p">[</span><span class="n">Animal</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">dog</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">bird</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">lion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">animals</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">animal</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">animal</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">dog:</span>
</span><span class='line'>            <span class="n">dog</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">cat:</span>
</span><span class='line'>            <span class="n">cat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">bird:</span>
</span><span class='line'>            <span class="n">bird</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">mouse:</span>
</span><span class='line'>            <span class="n">mouse</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">lion:</span>
</span><span class='line'>            <span class="n">lion</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;dog: \(dog), cat: \(cat), bird: \(bird), mouse: \(mouse), lion: \(lion)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">Date</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;time diff: \(endTime.timeIntervalSince(startTime))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>比較結果</h3>

<p>5回ずつ計測した結果を比較してみます。</p>

<p><code>if xxx { ... } else if yyy { ... }</code> の計測結果</p>

<p>1回目： 0.119907975196838 [sec]<br/>
2回目： 0.112887978553772 [sec]<br/>
3回目： 0.114282965660095 [sec]<br/>
4回目： 0.114437937736511 [sec]<br/>
5回目： 0.114798069000244 [sec]</p>

<p>平均： 0.11526292 [sec]</p>

<p><code>switch</code> の計測結果</p>

<p>1回目： 0.105566024780273[sec]<br/>
2回目： 0.106294989585876[sec]<br/>
3回目： 0.104817032814026[sec]<br/>
4回目： 0.105982065200806[sec]<br/>
5回目： 0.107689023017883[sec]</p>

<p>平均： 0.10606978 [sec]</p>

<p>以上より <code>switch</code> を利用した方が <code>0.00919314 [sec]</code> 速いことがわかりました。</p>

<h3>まとめ</h3>

<p>結論、処理速度を見ると複数ケースの比較が必要な場面では <code>switch</code> の方が有効なようです。<br/>
しかし、微々たる差ではあるので、可読性も考えながら最適な方法を選択すべきかと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayoutの実例（２）]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/18/autolayout-2/"/>
    <updated>2018-08-18T13:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/18/autolayout-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="https://grandbig.github.io/blog/2018/08/11/autolayout-1/">AutoLayoutの実例（１）</a>にて、<br/>
『 <code>UITableViewCell</code> 内に長さの異なる <code>UILabel</code> を持った <code>UIStackView</code> がある場合』の <code>AutoLayout</code> について説明しました。</p>

<p>今回は『 <code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合』<br/>
の <code>AutoLayout</code> について説明したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3><code>UITableViewCell</code> 内に条件次第で <code>isHidden</code> が <code>true</code> になるパーツを持つ <code>UIStackView</code> がある場合</h3>

<p>下図のようなレイアウトを実現する場合</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_1.png" alt="UITableViewCell内に条件次第でisHiddenがtrueになるパーツを持つUIStackViewがある" /></p>

<p>これは前回のサンプルの、</p>

<ul>
<li><code>subTitleLabel</code> は文字列 <code>GOOD</code> 固定</li>
<li><code>titleLabel</code> には可変長の文字列を表示する</li>
<li><code>titleLabel</code> のすぐ右隣に <code>subTitleLabel</code> を表示する(要素は全て左詰め)</li>
<li>画像は固定サイズで表示する</li>
</ul>


<p>に加えて、以下仕様をプラスしました。</p>

<ul>
<li><code>hiddenLabel1</code> (条件次第で非表示になるオレンジ色のラベル)が <code>titleLabel</code> 等の下に配置</li>
<li><code>hiddenLabel2</code> (条件次第で非表示になる茶色のラベル)が更にその下に配置</li>
<li><code>button</code> が更にその下に配置</li>
<li>条件次第で <code>hiddenLabel2</code> と <code>button</code> がセットで非表示になる</li>
<li>条件次第で <code>hiddenLabel1</code> と <code>hiddenLabel2</code> , <code>button</code> が非表示になる</li>
</ul>


<h4>レイアウトの構成</h4>

<p><code>xib</code> 上のUIパーツは下図の通りです。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_2.png" alt="xib上の構成" /></p>

<p>構成について説明します。</p>

<ul>
<li>画像、 <code>titleLabel</code> , <code>subTitleLabel</code> は前回に引き続き1つの <code>UIStackView</code> 内に要素を配置しています

<ul>
<li>これは3つの要素の横の関係性が場合によって変化する仕様に対応するためです。</li>
</ul>
</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_7.png" alt="画像, titleLabel, subTitleLabelを囲むUIStackView" /></p>

<ul>
<li><code>hiddenLabel2</code> と <code>button</code> は条件次第で同時に非表示になるため、<code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_4.png" alt="hiddenLabel2とbuttonを囲むUIStackView" /></p>

<ul>
<li>条件次第で <code>hiddenLabel1</code> , <code>hiddenLabel2</code> , <code>button</code> が一気に非表示になるため、さらに <code>UIStackView</code> で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_5.png" alt="hiddenLabel1, hiddenLabel2, buttonを囲むUIStackView" /></p>

<ul>
<li>非表示になったときに、Cellの高さが動的に変わるように、全要素を <code>UIStackView</code>で囲みます</li>
</ul>


<p><img src="http://grandbig.github.io/images/autolayout_sample_2_6.png" alt="全要素を囲むUIStackView" /></p>

<h4>Cellの高さを要素の表示/非表示状態次第で可変にする</h4>

<p><code>ContentView</code> と全要素を囲む <code>UIStackView</code>の間に <code>Constraint</code> を付与するだけです。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2_3.png" alt="ContentViewと全要素を囲むUIStackViewの間にConstraintを付与する" /></p>

<p>以前、<a href="http://grandbig.github.io/blog/2017/12/10/ios11-stackview-hidden/">iOS10とiOS11で比較するUIStackViewのhiddenとConstraintエラー</a>で説明しましたが、
iOS11からは <code>UIStackView</code> を <code>isHidden = true</code> にしても、<code>Constraint</code> エラーは出なくなったので、  かなり扱いやすくなっています。</p>

<h3>まとめ</h3>

<p>さて、今回の実例は前回の実例の追加版といった位置づけで書いてみました。<br/>
<code>UITableViewCell</code> で、条件により表示/非表示を切り替えて、動的に高さを変更する場面は多いと思います。<br/>
今は <code>AutoLayout</code> さえ正しく使えば簡単に対応できる内容となっていますので、必ず覚えておきましょう。</p>

<p>次回はもう少し複雑な <code>AutoLayout</code> の実例を紹介できればと思います。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS11から使える非常に便利な『setCustomSpacing』]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/12/set-custom-spacing/"/>
    <updated>2018-08-12T23:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/12/set-custom-spacing</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><code>UIStackView</code> は様々なシーンで、 <code>AutoLayout</code> を飛躍的に使いやすくしてくれました。<br/>
一方で、まだまだ改善の余地ありと感じさせられるところも多く、部分的に困るiOSエンジニアもいたのではないかと思います。</p>

<p>例えば、<br/>
『同一スペースを持つ複数Viewをレイアウトする』のには、<br/>
 <code>UIStackView</code> が非常に有効であるものの、<br/>
『一部異なるスペースを持った複数Viewをレイアウトする』には、<br/>
あまり向いているとは言えない<br/>
といったことなどです。</p>

<p>今回はiOS11から上記例が解消されたことを紹介したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>題材の説明</h3>

<p>まずは題材の説明です。</p>

<ul>
<li><code>UILabel</code> 3つを表示

<ul>
<li>上から <code>labelA</code> , <code>labelB</code> , <code>labelC</code> とする</li>
</ul>
</li>
<li>各 <code>UILabel</code> のスペースが異なる

<ul>
<li><code>labelA</code> と <code>labelB</code> 間のスペースは <code>50.0pt</code></li>
<li><code>labelB</code> と <code>labelC</code> 間のスペースは <code>8.0pt</code></li>
</ul>
</li>
</ul>


<h3>iOS10まで</h3>

<p>iOS10までは、多重に <code>UIStackView</code> を利用する必要がありました。<br/>
それぞれに <code>spacing</code> を指定するしか方法がなかったからです。</p>

<p><img src="http://grandbig.github.io/images/set_custom_spacing_1.png" alt="多重にUIStackViewを生成" /></p>

<p>複雑な画面であればあるほど、 <code>UIStackView</code> が多重化し、 <code>xib</code> や <code>storyboard</code> の編集が重くなります&hellip;</p>

<h3>iOS11以降</h3>

<p>iOS11では1つの <code>UIStackView</code> でこの状況を打破することができます。</p>

<p>構成はたったのこれだけで&hellip;</p>

<p><img src="http://grandbig.github.io/images/set_custom_spacing_2.png" alt="1つのUIStackView" /></p>

<p>あとはソースコードで <code>spacing</code> をカスタム化することで実現できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleViewController.swift</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">stackView:</span> <span class="n">UIStackView</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">labelA:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">labelB:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">labelC:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="err">#</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">11.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">stackView</span><span class="p">.</span><span class="n">setCustomSpacing</span><span class="p">(</span><span class="mf">50.0</span><span class="p">,</span> <span class="nl">after:</span> <span class="n">labelA</span><span class="p">)</span> <span class="c1">// ここが重要！！！</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// iOS10.x以下は利用不能</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
昨年までは、iOS10.xカスタマーも健在で、なかなか <code>setCustomSpacing</code> を利用するメリットが少なかったように思われます。<br/>
しかし、今年はiOS12が登場しますし、自然とiOS11以上をサポート対象とするアプリも増えてくることでしょう。<br/>
今年だからこそ <code>setCustomSpacing</code> は重要な改善の1つなのだと筆者は思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayoutの実例（１）]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/11/autolayout-1/"/>
    <updated>2018-08-11T14:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/11/autolayout-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>幾つか現場で経験してきた <code>AutoLayout</code> の実例を少しずつ書き留めておこうと思います。<br/>
<code>AutoLayout</code> がこれだけ当たり前にiOSに使われる世の中になったものの、実例交えて書かれている記事が少ないなと感じたためです。<br/>
(もちろん筆者の記憶に留めておきたい気持ちもあるからですが笑)</p>

<p>では、早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある場合</h3>

<p>下図のようなレイアウトを実現する場合</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_1.png" alt="UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある" /></p>

<p>これは、</p>

<ul>
<li><code>subTitleLabel</code> は文字列 <code>GOOD</code> 固定</li>
<li><code>titleLabel</code> には可変長の文字列を表示する</li>
<li><code>titleLabel</code> のすぐ右隣に <code>subTitleLabel</code> を表示する(要素は全て左詰め)</li>
<li>画像は固定サイズで表示する</li>
</ul>


<p>というサンプルです。</p>

<p><code>xib</code> 上のUIパーツは下図の通りです。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_2.png" alt="xib上の構成" /></p>

<h4>固定化</h4>

<p>これは説明するまでもありませんが、 <code>width</code> や <code>height</code> に固定で <code>Constraint</code> を付与するだけです。</p>

<p>まずは画像の固定化です。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_3.png" alt="画像の固定化" /></p>

<p>続いて、 <code>subTitleLabel</code> の固定化です。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_4.png" alt="subTitleLabelの固定化" /></p>

<h4>可変長のラベル</h4>

<p><code>UIStackView</code> 内に画像, <code>titleLabel</code> , <code>subTitleLabel</code> があります。<br/>
画像と <code>subTitleLabel</code> は長さ指定があり、 <code>titleLabel</code> は内部の文字列が固定でないため、可変長になる必要があります。</p>

<p>その場合は、 <code>Content Hugging Priority</code> と <code>Content Compression Resistance Priority</code> を利用します。</p>

<ul>
<li>画像について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>251</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>750</code></li>
</ul>
</li>
<li><code>titleLabel</code> について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>250</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>751</code></li>
</ul>
</li>
<li><code>subTitleLabel</code> について

<ul>
<li><code>Content Hugging Priority</code> の <code>Horizontal</code> を <code>251</code></li>
<li><code>Content Compression Resistance Priority</code> の <code>Horizontal</code> を <code>750</code></li>
</ul>
</li>
</ul>


<p>このように <code>titleLabel</code> は『そのもののサイズにこだわらず』、『小さくなりにくさ』を優先させています。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_5.png" alt="titleLabelへのContent Hugging PriorityとContent Compression Resistance Priorityの設定" /></p>

<h4>要素の左詰め</h4>

<p><code>UIStackView</code> 内の画像, <code>titleLabel</code> , <code>subTitleLabel</code> を左詰めで表示します。<br/>
( <code>titleLabel</code> の文字列は可変長ですが、文字数が少なければ左に詰めたいという指示があると過程しています。 )</p>

<p>その場合は <code>UIStackView</code> に <code>Constraint</code> を付与します。<br/>
「左詰め = 右端からの <code>Constraint</code> は最低数値『以上』」と読み替えます。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_6.png" alt="UIStackViewの右端に以上制約を付与" /></p>

<p>以上の3つの対応をすることで、以下のようなレイアウトを実現することができます。</p>

<p><img src="http://grandbig.github.io/images/autolayout_sample_1.png" alt="UITableViewCell内に長さの異なるUILabelを持ったUIStackViewがある" /></p>

<h3>まとめ</h3>

<p>さて、本記事は実例の初回ということで、シンプル＆簡単なものを採用してみました。<br/>
ですが、 <code>AutoLayout</code> は <code>View</code> を構造的に捉え、デフォルト値を持った優先度 ( <code>Priority</code> )の意味を深く理解する必要があります。<br/>
深く理解した上で意図的に <code>Priority</code> を決めないと作りたい <code>View</code> を作ることはできません。</p>

<p><code>xib</code> で <code>GUI</code> 形式でペタペタ貼るからこその難しさは存在するのです。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更だけど正しく身につけよう『Content Hugging Priority』と『Content Compression Resistance Priority』]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/04/content-hugging-priority/"/>
    <updated>2018-08-04T16:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/04/content-hugging-priority</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は <code>AutoLayout</code> の中でもしっかりと知っておきたい以下2つを紹介します。</p>

<ul>
<li><code>Content Hugging Priority</code></li>
<li><code>Content Compression Resistance Priority</code></li>
</ul>


<p>上記2つを利用することで、各サイズでの想定されたデザインを再現することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>題材の紹介</h3>

<p>今回説明に利用する題材は以下とします。</p>

<ul>
<li><code>UILabel</code> 2つが配置されたカスタム <code>UITableViewCell</code> を持つ <code>UITableView</code> の表示</li>
<li><code>UITableViewCell</code> 内に2つの <code>UILabel</code> を配置するために <code>UIStackView</code> を利用</li>
</ul>


<p><img src="http://grandbig.github.io/images/content_hugging_priority_1.png" alt="説明用の題材" /></p>

<p>上記に表示した <code>UITableViewCell</code> に付与された制約は次の通りです。</p>

<ul>
<li><code>UIStackView</code> の左右に <code>SuperView</code> に対して <code>8pt</code> の制約を付与</li>
<li><code>UIStackView</code> のY位置を <code>SuperView</code> の <code>CenterY</code> と一致させる制約を付与</li>
<li><code>subTitleLabel</code> の <code>width</code> を <code>100pt</code> に指定</li>
</ul>


<p><img src="http://grandbig.github.io/images/content_hugging_priority_2.png" alt="付与している制約" /></p>

<h3>Content Hugging Priority</h3>

<p>先程の紹介では <code>subTitleLabel</code> に <code>width: 100pt</code> の制約を付与していました。<br/>
もし、この制約が不要で、以下のようなデザイン指定がある場合、どのように対処すれば良いでしょうか。</p>

<ul>
<li><code>titleLabel</code> の <code>width</code> を <code>subTitleLabel</code> よりも広く取りたい</li>
<li>(逆を言えば、) <code>subTitleLabel</code> の <code>width</code> はコンテンツサイズ以上に広くしたくない</li>
</ul>


<p>その場合は、<br/>
<code>titleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> よりも低く設定します。<br/>
※デフォルト値は <code>251</code> です。</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_3.png" alt="Content Hugging Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_4.png" alt="Content Hugging Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>subTitleLabel</code> のテキストである <code>GOOD</code> が全文表示される最低サイズを優先して設定していることを指しています。<br/>
逆に、 <code>titleLabel</code> は中身のテキストに寄らず、横幅が広くなっているのも同じ理由です。</p>

<p>つまり、<br/>
<code>Content Hugging Priority</code> が高いと、<strong>コンテンツのサイズを優先する</strong> ことがわかります。</p>

<h3>Content Compression Resistance Priority</h3>

<p>上記で説明した際には <code>subTitleLabel</code> のテキストが <code>GOOD</code> でした。<br/>
もしも、 <code>subTitleLabel</code> のテキストが長文だった場合、どうなるでしょうか。</p>

<p>答えは、</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_5.png" alt="subTitleLabelが長文の場合" /></p>

<p>です。</p>

<p><code>subTitleLabel</code> が長くなり <code>titleLabel</code> の文字が1文字しか表示されなくなってしまいました。</p>

<p>ここで、テキストの表示重要度が <code>titleLabel</code> の方が <code>subTitleLabel</code> よりも高いとしましょう。<br/>
それを実現するために <code>Content Compression Resistance Priority</code> を利用します。</p>

<p><code>titleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> よりも高く設定します。<br/>
※デフォルト値は <code>750</code> です。</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_6.png" alt="Content Compression Resistance Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_7.png" alt="Content Compression Resistance Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>titleLabel</code> のテキストを極力表示するように優先して設定されていることを指しています。</p>

<p>つまり、 <code>Content Compression Resistance Priority</code> が高いと、<br/>
文字通り、 <strong>小さくなりにくさの優先度を高くしている</strong> ということです。</p>

<h3>おまけ</h3>

<p>因みに、 <code>subTitleLabel</code> を完全に非表示にしたくないと言った要望がある場合には、<br/>
<code>subTitleLabel</code> の <code>width</code> に最低サイズを指定すれば良いでしょう。</p>

<p><img src="http://grandbig.github.io/images/content_hugging_priority_8.png" alt="subTitleLabelにwidthを設定" /></p>

<p>これは以下理由により実現されます。</p>

<ul>
<li><code>Content Compression Resistance Priority</code> の <code>Priority</code> は <code>751</code></li>
<li><code>width</code> に付与した <code>Priority</code> は <code>1000</code></li>
</ul>


<p><img src="http://grandbig.github.io/images/content_hugging_priority_9.png" alt="subTitleLabelにwidthを指定した結果" /></p>

<h3>まとめ</h3>

<p>上記をまとめます。</p>

<ul>
<li><code>Content Hugging Priority</code> が高い = コンテンツサイズを優先する</li>
<li><code>Content Compression Resistance Priority</code> が高い = 小さくなりにくさを優先する</li>
<li>どの制約が優先して適用されるかは <code>Priority</code> の値に従って決まる</li>
</ul>


<p>さて如何でしたでしょうか？<br/>
今更ながら実例を交えてきちんと整理しておきたい気持ちが強くなり、今回のブログ記事となりました。<br/>
iOSアプリを開発する際に、 <code>AutoLayout</code> スキルをないがしろにすることはできません。</p>

<p>ぜひぜひ今後とも強めていきたいところですね。<br/>
ということで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackerRankで問題を解いてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/07/22/hacker-rank/"/>
    <updated>2018-07-22T23:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/07/22/hacker-rank</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回は<a href="https://www.hackerrank.com/dashboard?h_r=logo">HackerRank</a>について紹介したいと思います。<br/>
HackerRankとは求人サイトの一種で、問題を解くことで得点を稼ぐことができ、そのスコアでランキングを競うことのできるサイトです。<br/>
同様のサービスでは<a href="https://paiza.jp/">paiza</a>も有名かと思います。<br/>
( 少し前はCodeIQといったサービスもありましたね。 )</p>

<p>HackerRankの特徴は、</p>

<ul>
<li>全世界のエンジニア対象(=ランキングは世界ランキングになる)</li>
<li>問題文は全て英語で書かれている</li>
<li>問題種別は <code>Algorithms</code>, <code>Data Structures</code>, <code>Mathematics</code> が用意されている</li>
</ul>


<p>といったところでしょうか。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>どんな問題なのか</h3>

<p>オンラインでのプログラミングテストでありがちなのが、その独特な <code>Input</code> の扱い方かと思います。<br/>
例えば、複数 <code>Input</code> がある場合、<br/>
1回目の <code>readLine()</code> の呼び出しが1つ目の <code>Input</code> に当たり、<br/>
2回目の <code>readLine()</code> の呼び出しが2つ目の <code>Input</code> に当たるといった感じですね。</p>

<p>HackerRankでも、初級の問題ではそういった部分を書かせることがあるのですが、<br/>
ほとんどの問題が『肝心のロジックをどのように書いているのかに終始できる問題の出し方になっています。</p>

<p>では、実際に一例を見てみましょう。<br/>
こちらの<a href="https://www.hackerrank.com/challenges/apple-and-orange/problem">Apple and Orange</a>は <code>Algorithms</code> に区分けされた <code>Easy</code> 問題です。</p>

<p>問題を見てみると、「何やら既にたくさんのコードが書かれているな」ということに気づくでしょう。</p>

<p><img src="http://grandbig.github.io/images/hacker_rank.png" alt="HackerRankの問題例" /></p>

<p>上図のように中身のないメソッドが用意されており、その中のロジックを書くことが『問題に回答する』ということになります。<br/>
<code>Easy</code> 問題であっても、割と長々と英語で問題が解説されているため、身構えてしまう人もいるかもしれませんが、<br/>
最後まで読み切ってしまえば、問題の難易度と英文の長さが比例しているわけではないということがわかるでしょう。</p>

<p>参考までに上記の問題を筆者が解いたときの回答を記載しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">func</span> <span class="n">countApplesAndOranges</span><span class="p">(</span><span class="nl">s:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">t:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">a:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">apples:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">oranges:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// まずは林檎の計算から開始する</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sumAppleCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">apple</span> <span class="k">in</span> <span class="n">apples</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">position</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">apple</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">position</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="p">,</span> <span class="n">position</span> <span class="o">&lt;=</span> <span class="n">t</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sumAppleCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 次にオレンジの計算</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sumOrangeCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">orange</span> <span class="k">in</span> <span class="n">oranges</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">position</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="n">orange</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">position</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="p">,</span> <span class="n">position</span> <span class="o">&lt;=</span> <span class="n">t</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sumOrangeCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(sumAppleCount)</span><span class="se">\n</span><span class="s">\(sumOrangeCount)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、コメント文を日本語で書いても問題はありません。<br/>
因みに、一度解いて提出した回答内容はいつでも <code>Submissions</code> タブから確認することができます。</p>

<p><img src="http://grandbig.github.io/images/hacker_rank_2.png" alt="提出した回答の確認方法" /></p>

<h3>まとめ</h3>

<p>さて、今回はHackerRankについて簡単に紹介しました。<br/>
初めは『プロダクトの開発の方がよっぽど面白いんじゃないか』と思っていたのですが、<br/>
案外、解き始めて見ると楽しいし、勉強になるしで良い遊び場を見つけたような気持ちになりました。</p>

<p>少しずつではありますが、筆者も <code>Easy</code> 問題から解き始めています。<br/>
そして <a href="https://github.com/grandbig/HackerRankAnswer">GitHub</a>に、その軌跡を残し始めることにしました。</p>

<p>「プロダクト開発で、『○○なロジックをキレイに書くためには&hellip;』なんて考えた時に思い出すかもしれないな」なんて思ったり笑</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReSwiftを勉強してみよう！(3) ~ 非同期通信処理の場合 ~]]></title>
    <link href="http://grandbig.github.io/blog/2018/06/30/reswift-3/"/>
    <updated>2018-06-30T11:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/06/30/reswift-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は久しぶりに<a href="https://github.com/ReSwift/ReSwift">ReSwift</a>について書きたいと思います。<br/>
これまで以下のように <code>ReSwift</code> について勉強してきました。</p>

<ul>
<li><a href="https://grandbig.github.io/blog/2016/09/03/reswift-1/">ReSwiftを勉強してみよう！(1)</a><br/>
<code>CounterSample</code> を見ながら <code>ReSwift</code> の基本的な考え方</li>
<li><a href="https://grandbig.github.io/blog/2016/12/06/reswift-2/">ReSwiftを勉強してみよう！(2)</a><br/>
<code>ReSwiftRouter</code> を用いた画面切り替えの場合の書き方</li>
</ul>


<p>3回目の今回は非同期通信処理がある場合の <code>ReSwift</code> の利用方法について見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>サンプルの説明</h3>

<p>まずはサンプルアプリの要件を説明します。</p>

<ul>
<li>Googleマップ上でユーザの現在地を表示</li>
<li>ユーザの現在地周辺のレストランを検索</li>
<li>その検索結果をGoogleマップにプロット</li>
</ul>


<p>今回、ユーザの現在地周辺のレストラン検索には、<a href="https://developers.google.com/places/?hl=ja">Google Places API</a>を利用します。<br/>
実際のイメージは以下の通りです。</p>

<p><img src="http://grandbig.github.io/images/reswift_3_1.png" alt="今回のサンプルアプリ" /></p>

<h3>実装の説明</h3>

<p>続いて、具体的な実装について説明したいと思います。<br/>
1つ1つ見ていきましょう。</p>

<h4>API処理周り</h4>

<p><code>ReSwift</code> とは直接関係ありませんが、今回の非同期通信処理の根源となるAPI処理周りについて先に書いておきます。<br/>
<a href="https://github.com/Moya/Moya">Moya</a>を利用して<a href="https://developers.google.com/places/?hl=ja">Google Places API</a>を叩けるようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GooglePlacesAPI</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Moya</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GooglePlaces</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="n">GooglePlacesAPITarget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">hospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">restaurants</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">APIError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">GooglePlacesError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">notFoundError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">GooglePlacesAPIProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchHospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchPhoto</span><span class="p">(</span><span class="nl">placeId:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">UIImage</span><span class="o">?&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">GooglePlacesAPITarget:</span> <span class="n">TargetType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">(),</span>
</span><span class='line'>                                          <span class="nl">ofType:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">plistExtension</span><span class="p">())</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                                            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistが見つかりません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistの中身が想定通りではありません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">googleApiKeyName</span><span class="p">()]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Google APIのKeyが設定されていません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiKey</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ベースURLを文字列で定義</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">_baseURL:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">,</span> <span class="p">.</span><span class="nl">restaurants:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">googlePlacesApiPlaceUrl</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">baseURL:</span> <span class="n">URL</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">_baseURL</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したパスを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">path:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">,</span> <span class="p">.</span><span class="nl">restaurants:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したHTTPメソッドを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">method:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">,</span> <span class="p">.</span><span class="nl">restaurants:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">get</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// スタブデータの設定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">sampleData:</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">,</span> <span class="p">.</span><span class="nl">restaurants:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Stub data&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">using:</span> <span class="n">String</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// パラメータの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">task:</span> <span class="n">Task</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">requestParameters</span><span class="p">(</span><span class="nl">parameters:</span> <span class="p">[</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">()</span><span class="o">:</span> <span class="n">apiKey</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">locationKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;\(lat),\(lng)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">radiusKeyName</span><span class="p">()</span><span class="o">:</span> <span class="mi">1500</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">typeKeyName</span><span class="p">()</span><span class="o">:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">hospitalTypeValueName</span><span class="p">()</span>
</span><span class='line'>                <span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">restaurants</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">requestParameters</span><span class="p">(</span><span class="nl">parameters:</span> <span class="p">[</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">()</span><span class="o">:</span> <span class="n">apiKey</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">locationKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;\(lat),\(lng)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">radiusKeyName</span><span class="p">()</span><span class="o">:</span> <span class="mi">1500</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">typeKeyName</span><span class="p">()</span><span class="o">:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">restaurantTypeValueName</span><span class="p">()</span>
</span><span class='line'>                <span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ヘッダーの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">headers:</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">String</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">,</span> <span class="p">.</span><span class="nl">restaurants:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">GooglePlacesAPI:</span> <span class="n">GooglePlacesAPIProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">GooglePlacesAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">GooglePlacesAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: CRUD operations</span>
</span><span class='line'>    <span class="c1">/// 指定の緯度、経度から一定範囲内のレストランを検索する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Returns: レストランのプレイス情報</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">restaurants</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">))</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Places</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">places</span><span class="p">.</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>例によって取得したデータを利用しやすくするために <code>Codable</code> を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Places.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Location:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lat:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lng:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Viewport:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">northeast:</span> <span class="n">Location</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">southwest:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Geometry:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">viewport:</span> <span class="n">Viewport</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">OpeningHours:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">weekdayText:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openNow:</span> <span class="n">Bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Photos:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photoReference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">width:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">height:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Place:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">placeId:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">icon:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">rating:</span> <span class="n">Double</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">scope:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">vicinity:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">reference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">priceLevel:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">types:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">geometry:</span> <span class="n">Geometry</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openingHours:</span> <span class="n">OpeningHours</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photos:</span> <span class="p">[</span><span class="n">Photos</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Places:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">results:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">status:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>State</h4>

<p>さて、 <code>ReSwift</code> の <code>State</code> から見ていきましょう。<br/>
<code>State</code> はアプリの状態を表現する役割を担います。<br/>
状態はパラメータの値で正常かどうかを判断できる作りにします。</p>

<p>具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppState.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">AppState:</span> <span class="n">StateType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mapState</span> <span class="o">=</span> <span class="n">MapState</span><span class="p">(</span><span class="nl">places:</span> <span class="p">[],</span> <span class="nl">error:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">MapState:</span> <span class="n">StateType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">places:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">error:</span> <span class="n">Error</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった感じです。</p>

<ul>
<li>アプリに複数状態が存在する場合を考慮して <code>AppState</code> 内に各状態を持たせます。</li>
<li>それぞれの状態内に成功パターン/失敗パターンを識別できるようにパラメータを持たせます。</li>
</ul>


<h4>Action</h4>

<p><code>Action</code> はまさにアプリにどういった状況を起こさせたいか (つまり、アクション)を意味する役割を担います。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppAction.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">MapState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">RequestRestaurantsAction:</span> <span class="n">Action</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">SuccessRestaurantsAction:</span> <span class="n">Action</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">response:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">APIErrorAction:</span> <span class="n">Action</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="nl">error:</span> <span class="n">Error</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">func</span> <span class="n">fetchRestaurantsAction</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Store</span><span class="o">&lt;</span><span class="n">AppState</span><span class="o">&gt;</span><span class="p">.</span><span class="n">AsyncActionCreator</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">store</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">GooglePlacesAPI</span><span class="p">().</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">callback</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span> <span class="n">SuccessRestaurantsAction</span><span class="p">(</span><span class="nl">response:</span> <span class="n">results</span><span class="p">)}</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">callback</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span> <span class="n">APIErrorAction</span><span class="p">(</span><span class="nl">error:</span> <span class="n">error</span><span class="p">)}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じです。<br/>
今回の肝となる非同期通信処理ですが、 <code>ReSwift</code> の <code>AsyncActionCreator</code> を利用しています。<br/>
これを使うことで、非同期通信処理後に適切な <code>Action</code> を返却できるようになっています。</p>

<h4>Reducer</h4>

<p>渡されてきた <code>Action</code> と<code>State</code> から新規 <code>State</code> を作成し、返却する役割を担います。<br/>
状態変化のロジックを担っているとも言えますね。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppReducer.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">appReducer</span><span class="p">(</span><span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">AppState</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AppState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">state</span> <span class="o">=</span> <span class="n">state</span> <span class="o">??</span> <span class="n">AppState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">mapState</span> <span class="o">=</span> <span class="n">MapState</span><span class="p">.</span><span class="n">fetchRestaurantsReducer</span><span class="p">(</span><span class="nl">action:</span> <span class="n">action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">state</span><span class="p">.</span><span class="n">mapState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">state</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">MapState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">func</span> <span class="n">fetchRestaurantsReducer</span><span class="p">(</span><span class="nl">action:</span> <span class="n">Action</span><span class="p">,</span> <span class="nl">state:</span> <span class="n">MapState</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">MapState</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">state</span> <span class="o">=</span> <span class="n">state</span> <span class="o">??</span> <span class="n">MapState</span><span class="p">(</span><span class="nl">places:</span> <span class="p">[],</span> <span class="nl">error:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="n">action</span> <span class="n">as</span> <span class="nl">SuccessRestaurantsAction:</span>
</span><span class='line'>            <span class="n">state</span><span class="p">.</span><span class="n">places</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">response</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="n">action</span> <span class="n">as</span> <span class="nl">APIErrorAction:</span>
</span><span class='line'>            <span class="n">state</span><span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">error</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようになります。</p>

<ul>
<li>複数状態が必要なアプリに対応できるように <code>appReducer</code> を用意します。</li>
<li>特定の状態でしか利用しない <code>Action</code> が当然出てきますが、そこは <code>switch</code> 文で判断します。</li>
</ul>


<h4>Store</h4>

<p><code>Store</code> は</p>

<ul>
<li>アプリ内で必ず1つの存在 (つまりシングルトン)</li>
<li>アプリの状態を管理する</li>
<li>Stateを更新するためのdispatchを提供する

<ul>
<li>言い換えればdispatch(action)をすることでStoreにStateの変更を知らせられる</li>
</ul>
</li>
<li>Stateの状態を追えるようにsubscribeを提供する

<ul>
<li>言い換えればsubscribe(listener)をすることでlistenerはgetStateを通してStateの状態を取得できる</li>
</ul>
</li>
</ul>


<p>というものです。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Storeの定義</span>
</span><span class='line'><span class="n">let</span> <span class="n">mainStore</span> <span class="o">=</span> <span class="n">Store</span><span class="o">&lt;</span><span class="n">AppState</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>    <span class="nl">reducer:</span> <span class="n">appReducer</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">state:</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ここでGoogleマップの設定</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">GMSServices</span><span class="p">.</span><span class="n">provideAPIKey</span><span class="p">(</span><span class="n">apiKey</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。<br/>
ここはお決まりの書き方になります。</p>

<h4>ユーザアクション〜結果反映まで</h4>

<p>最後にユーザがアクションしてから、結果を <code>View</code> として反映する部分の処理を見ていきます。<br/>
基本的には <code>ViewController.swift</code> に書いていきます。</p>

<p>全文を載せると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBOutlets</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - Properties</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">currentLocation:</span> <span class="n">CLLocationCoordinate2D</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">initView:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// GoogleMapの初期化</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">isMyLocationEnabled</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">mapType</span> <span class="o">=</span> <span class="n">GMSMapViewType</span><span class="p">.</span><span class="n">normal</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">myLocationButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 位置情報関連の初期化</span>
</span><span class='line'>        <span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBest</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">requestWhenInUseAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>        <span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// subscribe to state changes</span>
</span><span class='line'>        <span class="n">mainStore</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - IBActions</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tappedSearchButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mainStore</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">MapState</span><span class="p">.</span><span class="n">fetchRestaurantsAction</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span> <span class="o">??</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="nl">lng:</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span> <span class="o">??</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Other</span>
</span><span class='line'><span class="n">extension</span> <span class="n">ViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// GoogleMapにマーカをプロットする</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Parameter place: プロットする場所情報</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">Place</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">GMSMarker</span><span class="p">()</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">place</span><span class="p">.</span><span class="n">geometry</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">lat</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">place</span><span class="p">.</span><span class="n">geometry</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">lng</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">icon</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;RestaurantIcon&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">appearAnimation</span> <span class="o">=</span> <span class="n">GMSMarkerAnimation</span><span class="p">.</span><span class="n">pop</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="n">mapView</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - StoreSubscriber</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">ViewController:</span> <span class="n">StoreSubscriber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">typealias</span> <span class="n">StoreSubscriberStateType</span> <span class="o">=</span> <span class="n">AppState</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">newState</span><span class="p">(</span><span class="nl">state:</span> <span class="n">AppState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// when the state changes, the UI is updated to reflect the current state</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">state</span><span class="p">.</span><span class="n">mapState</span><span class="p">.</span><span class="n">error</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">state</span><span class="p">.</span><span class="n">mapState</span><span class="p">.</span><span class="n">places</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">places</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">mapView</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">places</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">putMarker</span><span class="p">(</span><span class="nl">place:</span> <span class="n">place</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - GMSMapViewDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">ViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - CLLocationManagerDelegate</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">ViewController:</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didChangeAuthorization</span> <span class="nl">status:</span> <span class="n">CLAuthorizationStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">status</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">notDetermined:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="k">restricted</span><span class="p">,</span> <span class="p">.</span><span class="nl">denied:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">authorizedWhenInUse:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 現在地の更新</span>
</span><span class='line'>        <span class="n">currentLocation</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">initView</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 初期描画時のマップ中心位置の移動</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">camera</span> <span class="o">=</span> <span class="n">GMSCameraPosition</span><span class="p">.</span><span class="n">camera</span><span class="p">(</span><span class="nl">withTarget:</span> <span class="n">currentLocation</span><span class="o">!</span><span class="p">,</span> <span class="nl">zoom:</span> <span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mapView</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="n">camera</span>
</span><span class='line'>            <span class="n">initView</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didFailWithError</span> <span class="nl">error:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">CLLocationManager</span><span class="p">.</span><span class="n">locationServicesEnabled</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 端末の位置情報がOFFになっている場合</span>
</span><span class='line'>            <span class="c1">// アラートはデフォルトで表示されるので内部で用意はしない</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">currentLocation</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">CLLocationManager</span><span class="p">.</span><span class="n">authorizationStatus</span><span class="p">()</span> <span class="o">!=</span> <span class="n">CLAuthorizationStatus</span><span class="p">.</span><span class="n">authorizedWhenInUse</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// アプリの位置情報許可をOFFにしている場合</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>になります。<br/>
ポイントは、</p>

<ul>
<li>ユーザアクション時に <code>mainStore.dispatch</code> メソッドを実行すること

<ul>
<li>これにより、どんなアクションが発生したのかを <code>Reducer</code> に伝え、 <code>State</code> を再生成することができるようになります。</li>
</ul>
</li>
<li><code>StoreSubscriber</code> プロトコルに対応すること

<ul>
<li>これにより状態が変化した際に、 <code>newState</code> が呼び出されるため、変化後の状態を<code>View</code>に反映させることができるようになります。</li>
</ul>
</li>
</ul>


<p>の2点になります。</p>

<p>今回は、<code>newState</code> 内で<a href="https://developers.google.com/places/?hl=ja">Google Places API</a>で取得した結果をGoogleマップに反映させる処理を書いています。<br/>
( エラーは <code>print</code> 文にしているだけですが&hellip; )</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
<code>ReSwift</code> も役割の明確化および細分化をすることで、チーム開発でのアーキテクチャの属人化を防ぐことができるように思います。<br/>
もちろん学習時間が必要になるなどのハードルは存在しますが、人の入れ替わりが激しい業界では、特に必要となるのではないでしょうか。</p>

<p>筆者も引き続き、いろいろなパターンで <code>ReSwift</code> を試していきたいと思います。
今回利用したサンプルは<a href="https://github.com/grandbig/ReSwiftSample">ReSwiftSample</a>としてアップしていますので、ぜひご覧ください。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FacebookのGraph API v3から分離されたuser_genderについて見てみる]]></title>
    <link href="http://grandbig.github.io/blog/2018/06/23/facebook-graph-api-v3/"/>
    <updated>2018-06-23T11:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/06/23/facebook-graph-api-v3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、いろいろと個人情報の話が取り沙汰されていますが、Facebookが <code>Graph API v3</code> を発表しましたね！<br/>
Facebookログインを利用して会員登録の簡略化をするなんて、今や当たり前の時代に、個人情報の保護強化のために情報取得のハードルが少々引き上げられました。</p>

<p>また、これまでFacebookログインを利用していたサービスはFacebookの再審査を受けることが義務化されました。<br/>
今回新たに審査が必要となる項目も追加され、Facebook社のより一層の個人情報強化の意志を感じさせますね。<br/>
因みに、新規にパーミションが必要となった項目は、</p>

<ul>
<li><code>user_link</code></li>
<li><code>user_age_range</code></li>
<li><code>user_gender</code></li>
</ul>


<p>の3つになります。<br/>
本記事では、中でも <code>user_gender</code> に焦点を当てて見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>user_genderとは</h3>

<p>フィールド名から分かる通り、値としては、ユーザの <code>性別</code> を取得するものになります。<br/>
これは、新たにパーミッションが必要になった項目ということですが、<br/>
もちろんこれまでも取得できる項目でした。</p>

<p>どうやって取得していたかと言うと、Facebook上でユーザの基本情報としてまとめられていた <code>public_profile</code> に <code>gender</code> として含まれていました。<br/>
v3.0での変更でこれが独立したということになります。</p>

<h3>パーミッション画面での変更</h3>

<p>続いて、<code>public_profile</code> と <code>user_gender</code> を利用した場合でそれぞれユーザに表示するパーミッション画面はどのように変わるのでしょうか？<br/>
実際に見ていきましょう。</p>

<p>まずは、これまでの <code>public_profile</code> を利用した場合の画面は<br/>
<img src="http://grandbig.github.io/images/facebook_graph_api_v3_1.png" alt="public_profileのみ指定した場合のパーミッション画面" /></p>

<p>続いて、 <code>user_gender</code> を指定した場合の画面は<br/>
<img src="http://grandbig.github.io/images/facebook_graph_api_v3_2.png" alt="user_genderも指定した場合のパーミッション画面" /></p>

<p>となります。<br/>
今後どうなるかはわからないものの、今のところは <code>public_profile</code> の中に <code>gender</code> が含まれており、プラスで <code>user_gender</code> も指定できるという状況になっています。</p>

<h3>パーミッション指定の処理</h3>

<p>参考までに今回試したソースコードを記載しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FacebookManager.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookCore</span>
</span><span class='line'><span class="n">import</span> <span class="n">FacebookLogin</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">Gender:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">male</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">female</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">FacebookUserProfile:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">email:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">gender:</span> <span class="n">Gender</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">enum</span> <span class="nl">CodingKeys:</span> <span class="n">String</span><span class="p">,</span> <span class="n">CodingKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kt">id</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">gender</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">from</span> <span class="nl">decoder:</span> <span class="n">Decoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">values</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decodeIfPresent</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">genderString</span> <span class="o">=</span> <span class="n">try</span> <span class="n">values</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">genderString</span> <span class="o">==</span> <span class="s">&quot;male&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">male</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">gender</span> <span class="o">=</span> <span class="p">.</span><span class="n">female</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">encode</span><span class="p">(</span><span class="n">to</span> <span class="nl">encoder:</span> <span class="n">Encoder</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">container</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">container</span><span class="p">(</span><span class="nl">keyedBy:</span> <span class="n">CodingKeys</span><span class="p">.</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="kt">id</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="kt">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encodeIfPresent</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">gender</span> <span class="o">==</span> <span class="p">.</span><span class="n">male</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;male&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">try</span> <span class="n">container</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;female&quot;</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="p">.</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">final</span> <span class="n">class</span> <span class="n">FacebookManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">let</span> <span class="n">shared</span> <span class="o">=</span> <span class="n">FacebookManager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="nl">FacebookError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">apiError</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">enum</span> <span class="nl">FacebookPermission:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">email</span> <span class="o">=</span> <span class="s">&quot;email&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">publicProfile</span> <span class="o">=</span> <span class="s">&quot;public_profile&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">userGender</span> <span class="o">=</span> <span class="s">&quot;user_gender&quot;</span>       <span class="c1">// 新規パーミッションを指定</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="nl">didFinishLaunchingWithOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SDKApplicationDelegate</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="nl">didFinishLaunchingWithOptions:</span> <span class="n">didFinishLaunchingWithOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">app:</span> <span class="n">UIApplication</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">open</span> <span class="nl">url:</span> <span class="n">URL</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">options:</span> <span class="p">[</span><span class="nl">UIApplicationOpenURLOptionsKey:</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">SDKApplicationDelegate</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">application</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="nl">open:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">isLoggedIn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">AccessToken</span><span class="p">.</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">login</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">UIViewController</span><span class="p">,</span>
</span><span class='line'>                      <span class="nl">permissions:</span> <span class="p">[</span><span class="n">FacebookPermission</span><span class="p">]</span> <span class="o">=</span> <span class="p">[.</span><span class="n">email</span><span class="p">,</span> <span class="p">.</span><span class="n">publicProfile</span><span class="p">,</span> <span class="p">.</span><span class="n">userGender</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">isLoggedIn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">logout</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">fulfill</span><span class="p">,</span> <span class="n">reject</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">readPermissions</span> <span class="o">=</span> <span class="p">[</span><span class="n">ReadPermission</span><span class="p">]()</span>
</span><span class='line'>            <span class="n">permissions</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">readPermissions</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ReadPermission</span><span class="p">.</span><span class="n">custom</span><span class="p">(</span><span class="n">$0</span><span class="p">.</span><span class="n">rawValue</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">LoginManager</span><span class="p">().</span><span class="n">logIn</span><span class="p">(</span><span class="nl">readPermissions:</span> <span class="n">readPermissions</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nl">viewController:</span> <span class="n">viewController</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nl">completion:</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">let</span> <span class="n">accessToken</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">fulfill</span><span class="p">(</span><span class="n">accessToken</span><span class="p">.</span><span class="n">authenticationToken</span><span class="p">)</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="nl">cancelled:</span>
</span><span class='line'>                                        <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">FacebookError</span><span class="p">.</span><span class="n">cancel</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                                    <span class="k">case</span> <span class="p">.</span><span class="n">failed</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                                        <span class="n">_</span> <span class="o">=</span> <span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">}</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LoginManager</span><span class="p">().</span><span class="n">logOut</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">JSONDecoder</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Any型をdecode可能なメソッドを追加</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">func</span> <span class="n">decode</span><span class="o">&lt;</span><span class="nl">T:</span> <span class="n">Decodable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">type:</span> <span class="n">T</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">withJSONObject</span> <span class="nl">object:</span> <span class="n">Any</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">options</span> <span class="nl">opt:</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">WritingOptions</span> <span class="o">=</span> <span class="p">[])</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">withJSONObject:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">opt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">decode</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今後移行期間がどうなるのか、イマイチ見えない状況ではありますが、取り急ぎ8/1までにFacebookの再審査を受けて大事に備えておくべきでしょう。<br/>
といったところで本日はここまで。</p>

<h4>参考</h4>

<ul>
<li><a href="https://developers.facebook.com/docs/graph-api/changelog/version3.0">Facebook Graph API v3.0</a></li>
<li><a href="https://damelog.com/sns/facebook/facebook-graph-api-v3_0-released-and-app-review-restored/">FACEBOOK GRAPH API V3.0 リリースと同時にログイン審査がリニューアルされた件</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSで気をつけるGoogle Places APIの使い分け]]></title>
    <link href="http://grandbig.github.io/blog/2018/05/27/google-places-api/"/>
    <updated>2018-05-27T18:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/05/27/google-places-api</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://developers.google.com/places/ios-api/?hl=ja">Places API for iOS</a>と<a href="https://developers.google.com/places/?hl=ja">Google Places API</a>を使い分けた話です。</p>

<p><code>Google Places API</code> はデバイスやOSに依らず用意されたAPIですが、 <code>Places API for iOS</code> はネーミングからも分かる通り <code>iOS</code> のために用意された <code>API</code> という位置づけになります。<br/>
通常であれば、「 <code>Places API for iOS</code> を使えば良いのでは？」と思われるかもしれませんが、<br/>
筆者がプロダクト開発時に実現したかった内容がたまたまそぐわなかったので <code>Google Places API</code> を利用するに至ったわけです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>周辺の場所情報を取得する</h3>

<p>現在の場所を取得するのであれば、Googleが<a href="https://developers.google.com/places/ios-api/start?hl=ja">スタートガイド</a>で説明しているように、<br/>
<code>GMSPlacesClient</code> の <code>currentPlaceWithCallback</code> メソッドを利用すれば可能です。</p>

<p>しかし、特定の場所を起点に周辺の場所情報を取得する場合は、<code>Google Places API</code> を利用する方が汎用性があります。<br/>
<code>Places API for iOS</code> にも <code>Place Picker</code> が用意されていますが、以下理由より用途が限定的に感じられました。</p>

<ul>
<li>UI/UXが限定されている</li>
<li>特定の属性のものだけ検索することに向いていない</li>
</ul>


<p>そこで筆者は、「周辺の病院を検索する」ケースでは <code>Google Places API</code> を利用することにしました。<br/>
以下に具体的な実装を記載します。<br/>
通信ライブラリとして <code>Moya</code> を非同期処理のために <code>PromiseKit</code> を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HospitalAPI.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Moya</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GooglePlaces</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="n">HospitalAPITarget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">hospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">APIError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">GooglePlacesError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">notFoundError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">HospitalAPITarget:</span> <span class="n">TargetType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistが見つかりません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistの中身が想定通りではありません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Google APIのKeyが設定されていません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiKey</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ベースURLを文字列で定義</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">_baseURL:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">hospitals:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">googlePlacesApiPlaceUrl</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">baseURL:</span> <span class="n">URL</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">_baseURL</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したパスを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">path:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">hospitals:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したHTTPメソッドを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">method:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">hospitals:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">get</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// スタブデータの設定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">sampleData:</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">hospitals:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Stub data&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">using:</span> <span class="n">String</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// パラメータの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">task:</span> <span class="n">Task</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">hospitals</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">requestParameters</span><span class="p">(</span><span class="nl">parameters:</span> <span class="p">[</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">()</span><span class="o">:</span> <span class="n">apiKey</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">locationKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;\(lat),\(lng)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">radiusKeyName</span><span class="p">()</span><span class="o">:</span> <span class="mi">1500</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">typeKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;hospital&quot;</span>
</span><span class='line'>                <span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ヘッダーの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">headers:</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">String</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">hospitals:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">HospitalAPI:</span> <span class="n">HospitalProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">HospitalAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">HospitalAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: CRUD operations</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 指定の緯度、経度から一定範囲内の病院を検索する処理</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// - Returns: 病院のプレイス情報</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchHospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">hospitals</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">))</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Places</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">places</span><span class="p">.</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、上記 <code>fetchHospitals</code> メソッド内で利用している <code>Place</code> の定義は以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Place.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Location:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lat:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">lng:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Viewport:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">northeast:</span> <span class="n">Location</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">southwest:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Geometry:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">viewport:</span> <span class="n">Viewport</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">location:</span> <span class="n">Location</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">OpeningHours:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">weekdayText:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openNow:</span> <span class="n">Bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Photos:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photoReference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">width:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">height:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Place:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">placeId:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">icon:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">rating:</span> <span class="n">Double</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">scope:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">vicinity:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">reference:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">priceLevel:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">types:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">geometry:</span> <span class="n">Geometry</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">openingHours:</span> <span class="n">OpeningHours</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">photos:</span> <span class="p">[</span><span class="n">Photos</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Places:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">results:</span> <span class="p">[</span><span class="n">Place</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">status:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">htmlAttributions:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>場所の画像を取得する</h3>

<p>Webクライアントから場所の画像を取得する場合は先程APIを叩いて取得した結果の <code>photos</code> からAPIを叩く流れになります。<br/>
しかしながら、iOSでは画像取得用のメソッドが用意されています。<br/>
このメソッドは <code>プレイスID</code> さえ指定すれば簡単に取得できるため、<br/>
ここは適材適所で <code>Places API for iOS</code> の <code>lookUpPhoto</code> および <code>loadPlacePhoto</code> を利用した方が良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HospitalAPI.swift</span>
</span><span class='line'><span class="n">func</span> <span class="nf">fetchPhoto</span><span class="p">(</span><span class="nl">placeId:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">UIImage</span><span class="o">?&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">UIImage</span><span class="o">?&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GMSPlacesClient</span><span class="p">.</span><span class="n">shared</span><span class="p">().</span><span class="n">lookUpPhotos</span><span class="p">(</span><span class="nl">forPlaceID:</span> <span class="n">placeId</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">photos</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">firstPhoto</span> <span class="o">=</span> <span class="n">photos</span><span class="o">?</span><span class="p">.</span><span class="n">results</span><span class="p">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">GooglePlacesError</span><span class="p">.</span><span class="n">notFoundError</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">GMSPlacesClient</span><span class="p">.</span><span class="n">shared</span><span class="p">().</span><span class="n">loadPlacePhoto</span><span class="p">(</span><span class="n">firstPhoto</span><span class="p">,</span> <span class="nl">callback:</span> <span class="p">{</span> <span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>今回筆者が改めて学んだのは、iOSアプリを開発するからといって、<code>Places API for iOS</code> だけに焦点を絞るのではなく、<br/>
『結局、何がしたくて、そのためにどういった情報を取得したいのか』
をきちんど整理した上で適切な手段を用いるということです。</p>

<p>Googleが提供しているAPIは勉強になりますね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ぐるなびレストラン検索APIで困ったCodable]]></title>
    <link href="http://grandbig.github.io/blog/2018/05/03/gurunavi-api-codable/"/>
    <updated>2018-05-03T00:37:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/05/03/gurunavi-api-codable</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回は <code>Codable</code> で困った話です。<br/>
<a href="http://api.gnavi.co.jp/api/manual/restsearch/">ぐるなびレストラン検索API</a>を利用する機会がありまして、<br/>
どうせなら <code>Codable</code> を使ってキレイに書こうと思ったが&hellip;という話になります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>ぐるなびレストラン検索APIのレスポンスについて</h3>

<p>ほとんどの場合は何も考えずに <code>Codable</code> が適用できたのですが、<code>image_url</code>だけ困りました。<br/>
と言うのも返却されるレスポンスに以下の違いがあったためです。</p>

<p>実際にAPIを叩いて頂くと&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 値がある場合</span>
</span><span class='line'><span class="n">image_url</span> <span class="p">{</span>
</span><span class='line'>    <span class="nl">shop_image1:</span> <span class="n">http</span><span class="err">\</span><span class="o">:</span><span class="err">\</span><span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="n">xxxxxxx</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">shop_image2:</span> <span class="n">http</span><span class="err">\</span><span class="o">:</span><span class="err">\</span><span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="n">xxxxxxx</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">qrcode:</span> <span class="n">http</span><span class="err">\</span><span class="o">:</span><span class="err">\</span><span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="n">xxxxxxx</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 値がない場合</span>
</span><span class='line'><span class="n">image_url</span> <span class="p">{</span>
</span><span class='line'>    <span class="nl">shop_image1:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nl">shop_image2:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nl">qrcode:</span> <span class="n">http</span><span class="err">\</span><span class="o">:</span><span class="err">\</span><span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="n">xxxxxxx</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった感じになっていることがわかると思います。</p>

<h3>Codableをどこまで利用するべきか</h3>

<p>筆者が下した結論としては、全てを <code>Codable</code> だけで賄うのは難しいということです。<br/>
なぜなら <code>Codable</code> は <code>Any</code> 型を扱えないからです。<br/>
ではどうすれば良いかと言うと&hellip;</p>

<ul>
<li><code>SwiftyJSON</code>を使う</li>
<li><code>Codable</code> と <code>SwiftyJSON</code> を使う</li>
</ul>


<p>ことが考えられるかと思います。</p>

<p>せっかくなので、<code>Codable</code> と <code>SwiftyJSON</code> を両方使ってみた場合を見ていきましょう。</p>

<p>まず<code>Codable</code>の定義です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Restaurant:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">nameKana:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">address:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">url:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">tel:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">urlMobile:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">shopImage1:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">shopImage2:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">Restaurants:</span> <span class="n">Codable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">rest:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">totalHitCount:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">hitPerPage:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">pageOffset:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、<code>SwiftyJSON</code>をどのように使ったかというと&hellip;<br/>
(以下、処理の抜粋です。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">requestURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">response</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Restaurants</span><span class="p">(</span><span class="nl">rest:</span> <span class="p">[],</span> <span class="nl">totalHitCount:</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nl">hitPerPage:</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nl">pageOffset:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">rest</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">data</span><span class="p">)[</span><span class="s">&quot;rest&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>            <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">restaurants</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Restaurants</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">rest</span><span class="p">.</span><span class="n">array</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">completion</span><span class="p">(</span><span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">elem</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">restaurant</span> <span class="k">in</span> <span class="n">restaurants</span><span class="p">.</span><span class="n">rest</span> <span class="n">where</span> <span class="n">restaurant</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="n">elem</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">].</span><span class="n">string</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">var</span> <span class="n">convertedRestaurant</span> <span class="o">=</span> <span class="n">restaurant</span>
</span><span class='line'>                    <span class="n">convertedRestaurant</span><span class="p">.</span><span class="n">shopImage1</span> <span class="o">=</span> <span class="n">elem</span><span class="p">[</span><span class="s">&quot;image_url&quot;</span><span class="p">][</span><span class="s">&quot;shop_image1&quot;</span><span class="p">].</span><span class="n">string</span>
</span><span class='line'>                    <span class="n">convertedRestaurant</span><span class="p">.</span><span class="n">shopImage2</span> <span class="o">=</span> <span class="n">elem</span><span class="p">[</span><span class="s">&quot;image_url&quot;</span><span class="p">][</span><span class="s">&quot;shop_image2&quot;</span><span class="p">].</span><span class="n">string</span>
</span><span class='line'>                    <span class="n">result</span><span class="p">.</span><span class="n">rest</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">convertedRestaurant</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">completion</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;error&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、これは<code>for</code>文をぶん回して照らし合わせて<code>Codable</code>の形に充てがいたいがために書いているので、処理効率が良いかは別の話ですね&hellip;<br/>
APIで取得できた件数が少なければ大した話ではありませんが&hellip;。<br/>
(大量件数が取得されるケースでは、むしろ少数に減らすことができないか検討すべきでしょう。)</p>

<h3>まとめ</h3>

<p>さて、今回は<code>Codable</code>を利用しようと思って困った話を書いてみました。<br/>
今回のAPIの返却値は特殊な感じもするので、今後Swiftが対応していくようになるとは思えないのですが、<br/>
もしかしたらもう少し書きやすくなることもあるかもしれません。</p>

<p>逆に、iOSアプリ向けにAPIを新規開発するときは、上記のような事情も踏まえて開発すると困ることが少ないのではと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crashlyticsが作成するエラーファイルを見てみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/29/crashlytics/"/>
    <updated>2018-04-29T17:44:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/29/crashlytics</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://fabric.io/home">Fabric</a>のメイン機能である <code>Crashlytics</code> について紹介したいと思います。<br/>
筆者が初めて <code>Crashlytics</code> を利用したのは、もう数年前になるでしょうか。<br/>
それこそ、当時は <code>Fabric</code> という名称ではなく、本当にただの <code>Crashlytics</code> というサービス名だったんですよね。</p>

<p>あの頃は、クラッシュレポートを溜める独自サービスが大量生産されていたのではないでしょうか？<br/>
そんな市場に風穴を開けたのが、 <code>Crashlytics</code> でした。<br/>
なんてったって、無料なんですから、使わない手はなかったわけです。<br/>
更に今や <code>Firebase</code> だったり、<code>fastlane</code> だったりと連携しちゃうわけですからね。</p>

<p>前置きはこのくらいにして、<br/>
今回は <code>Crashlytics</code> の <code>crash()</code> や <code>recordError()</code> について少々調べたことを書き留めておきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Crashlyticsの導入</h3>

<p>まずは、<code>Crashlytics</code>の導入ですね。<br/>
<a href="https://fabric.io/kits/ios/crashlytics/install">公式ページ</a>に従って進めれば簡単に準備ができることでしょう。<br/>
注意点としては、<code>Fabric</code> のダッシュボードでクラッシュレポート数や内容を見るために、<code>dSYM</code>ファイルをアップロードする必要があるということくらいです。</p>

<p>その手順を見ていきましょう。</p>

<p>① Xcode > PROJECT or TARGET > Build Settings > Build Options > Debug Information Formatの設定を変更する</p>

<p>開発版では<code>Debug</code>モードで<code>Run</code>していることもあると思うので、<br/>
その場合は下図のように <code>DWARF with dSYM File</code> に変更しましょう。</p>

<p><img src="http://grandbig.github.io/images/crashlytics_5.png" alt="Debug Information FormatをDWARF with dSYM Fileに変更する" /></p>

<p>② Xcode > Product > Archive を実行する</p>

<p>③ dSYMをDownloadする</p>

<p>Organizer Windowが自動で表示されるため、dSYMファイルをダウンロードしましょう。<br/>
Archive Informationの『Download dSYMs&hellip;』を選択するか、<br/>
もしくは下図のように該当アプリを右クリックして『Show in Finder』を選択して直接Downloadしましょう。</p>

<p><img src="http://grandbig.github.io/images/crashlytics_6.png" alt="Show in Finderを選択する" /></p>

<p>④ Show in Findeで開いたフォルダのdSYMsフォルダをzip化しましょう。</p>

<p><img src="http://grandbig.github.io/images/crashlytics_7.png" alt="dSYMsフォルダをzip化する" /></p>

<p>⑤ dSYMs.zipをFabric管理画面からUploadしましょう。</p>

<p>Settings > APPs > 該当アプリ > Missing DSYMs からDrag&amp;Dropでアップロードできます。</p>

<p><img src="http://grandbig.github.io/images/crashlytics_8.png" alt="dSYMs.zipのアップロード" /></p>

<p>これでクラッシュ後に、アプリを再起動して送信されたレポートを<code>Fabric</code>管理画面から確認することができます。</p>

<h3>crash()で生成されるファイル</h3>

<p><code>Crashlytics</code>で最も利用されているであろうクラッシュ時のレポート送信ですが、<br/>
一体、何を送っているのでしょうか？</p>

<p>今回は調査のために、わざとクラッシュさせて、アプリ内の『どこに』『何が』保存されているのか見てみました。</p>

<h4>crash()メソッドの呼び出し</h4>

<p>以下のようにボタンタップしたら、クラッシュするようにしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tappedCrashButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Crashlytics</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">().</span><span class="n">crash</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>クラッシュで生成されるファイルの確認方法</h4>

<p>クラッシュ後の生成ファイルの確認方法は以下です。</p>

<p>① アプリを起動してボタンタップでクラッシュさせます。<br/>
このとき重要なのが、『デバッグ状態にはせずにクラッシュさせる』ということです。<br/>
(どうもXcodeに接続したデバッグ状態だと、うまく記録されないようです。)</p>

<p>② 端末をMacに繋ぐ</p>

<p>③ Xcode > Window > Devices and Simulators を選択する<br/>
これにより以下のようなWindowが表示されます。<br/>
<img src="http://grandbig.github.io/images/crashlytics_1.png" alt="Devices and Simulators Window" /></p>

<p>④ Downloadしたいアプリ内ファイルを選択して「Download Container&hellip;」を選択する<br/>
<img src="http://grandbig.github.io/images/crashlytics_2.png" alt="Download Container...を選択する" /></p>

<p>⑤ 自動でDownload先フォルダが表示されるので、該当ファイルを右クリックして、「パッケージの内容を表示」を選択する<br/>
<img src="http://grandbig.github.io/images/crashlytics_3.png" alt="Downloadファイルの内容を表示する" /></p>

<p>⑥ クラッシュログを確認する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">xxxxxx</span><span class="p">.</span><span class="n">xcappdata</span><span class="o">/</span><span class="n">AppData</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">crashlytics</span><span class="p">.</span><span class="n">data</span><span class="o">/&lt;</span><span class="n">BundleID</span><span class="o">&gt;/</span><span class="n">v3</span><span class="o">/</span><span class="n">active</span><span class="o">/</span><span class="n">xxxxxxxxxxx</span><span class="o">/</span><span class="n">match_exception</span><span class="p">.</span><span class="n">clsrecord</span>
</span></code></pre></td></tr></table></div></figure>


<p>がそれに該当します。</p>

<p><img src="http://grandbig.github.io/images/crashlytics_4.png" alt="クラッシュログの格納場所" /></p>

<h4>クラッシュログの中身</h4>

<p>中身を見てみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;mach_exception&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;exception&quot;</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;codes&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4332784292</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&quot;name&quot;</span><span class="o">:</span><span class="s">&quot;EXC_BREAKPOINT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;code_name&quot;</span><span class="o">:</span><span class="n">null</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;original_ports&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;time&quot;</span><span class="o">:</span><span class="mi">1525070032</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;threads&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;registers&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;x0&quot;</span><span class="o">:</span><span class="mi">7851893440</span><span class="p">,</span><span class="s">&quot;x1&quot;</span><span class="o">:</span><span class="mi">4337440564</span><span class="p">,</span><span class="s">&quot;x2&quot;</span><span class="o">:</span><span class="mi">4431287584</span><span class="p">,</span><span class="s">&quot;x3&quot;</span><span class="o">:</span><span class="mi">7651498240</span><span class="p">,</span><span class="s">&quot;x4&quot;</span><span class="o">:</span><span class="mi">7651498240</span><span class="p">,</span><span class="s">&quot;x5&quot;</span><span class="o">:</span><span class="mi">7651498240</span><span class="p">,</span><span class="s">&quot;x6&quot;</span><span class="o">:</span><span class="mi">7516198016</span><span class="p">,</span><span class="s">&quot;x7&quot;</span><span class="o">:</span><span class="mi">5305</span><span class="p">,</span><span class="s">&quot;x8&quot;</span><span class="o">:</span><span class="mi">7851893440</span><span class="p">,</span><span class="s">&quot;x9&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x10&quot;</span><span class="o">:</span><span class="mi">80378702350618752</span><span class="p">,</span><span class="s">&quot;x11&quot;</span><span class="o">:</span><span class="mi">18714625</span><span class="p">,</span><span class="s">&quot;x12&quot;</span><span class="o">:</span><span class="mi">18714368</span><span class="p">,</span><span class="s">&quot;x13&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x14&quot;</span><span class="o">:</span><span class="mi">18714625</span><span class="p">,</span><span class="s">&quot;x15&quot;</span><span class="o">:</span><span class="mi">18714816</span><span class="p">,</span><span class="s">&quot;x16&quot;</span><span class="o">:</span><span class="mi">6457744324</span><span class="p">,</span><span class="s">&quot;x17&quot;</span><span class="o">:</span><span class="mi">4332784292</span><span class="p">,</span><span class="s">&quot;x18&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x19&quot;</span><span class="o">:</span><span class="mi">7651498240</span><span class="p">,</span><span class="s">&quot;x20&quot;</span><span class="o">:</span><span class="mi">4431355264</span><span class="p">,</span><span class="s">&quot;x21&quot;</span><span class="o">:</span><span class="mi">4337440648</span><span class="p">,</span><span class="s">&quot;x22&quot;</span><span class="o">:</span><span class="mi">4431355264</span><span class="p">,</span><span class="s">&quot;x23&quot;</span><span class="o">:</span><span class="mi">4431355264</span><span class="p">,</span><span class="s">&quot;x24&quot;</span><span class="o">:</span><span class="mi">7516197984</span><span class="p">,</span><span class="s">&quot;x25&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x26&quot;</span><span class="o">:</span><span class="mi">6639092750</span><span class="p">,</span><span class="s">&quot;x27&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;x28&quot;</span><span class="o">:</span><span class="mi">7854100944</span><span class="p">,</span><span class="s">&quot;fp&quot;</span><span class="o">:</span><span class="mi">6134339024</span><span class="p">,</span><span class="s">&quot;sp&quot;</span><span class="o">:</span><span class="mi">6134338992</span><span class="p">,</span><span class="s">&quot;lr&quot;</span><span class="o">:</span><span class="mi">4332705516</span><span class="p">,</span><span class="s">&quot;pc&quot;</span><span class="o">:</span><span class="mi">4332784292</span><span class="p">,</span><span class="s">&quot;cpsr&quot;</span><span class="o">:</span><span class="mi">1610612736</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">4332784292</span><span class="p">,</span><span class="mi">4332705516</span><span class="p">,</span><span class="mi">4332705636</span><span class="p">,</span><span class="mi">6626567880</span><span class="p">,</span><span class="mi">6627752100</span><span class="p">,</span><span class="mi">6626592636</span><span class="p">,</span><span class="mi">6627860956</span><span class="p">,</span><span class="mi">6627105352</span><span class="p">,</span><span class="mi">6627059960</span><span class="p">,</span><span class="mi">6627054136</span><span class="p">,</span><span class="mi">6635318284</span><span class="p">,</span><span class="mi">6635327928</span><span class="p">,</span><span class="mi">6635328792</span><span class="p">,</span><span class="mi">6635299416</span><span class="p">,</span><span class="mi">6461387780</span><span class="p">,</span><span class="mi">6461385772</span><span class="p">,</span><span class="mi">6461376412</span><span class="p">,</span><span class="mi">6460460456</span><span class="p">,</span><span class="mi">6493892640</span><span class="p">,</span><span class="mi">6628104076</span><span class="p">,</span><span class="mi">4332687252</span><span class="p">,</span><span class="mi">6454763456</span><span class="p">],</span>
</span><span class='line'>  <span class="s">&quot;crashed&quot;</span><span class="o">:</span><span class="n">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;registers&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;x0&quot;</span><span class="o">:</span><span class="mi">256</span><span class="p">,</span><span class="s">&quot;x1&quot;</span><span class="o">:</span><span class="mi">6136048512</span><span class="p">,</span><span class="s">&quot;x2&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;x3&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x4&quot;</span><span class="o">:</span><span class="mi">9991</span><span class="p">,</span><span class="s">&quot;x5&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x6&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x7&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x8&quot;</span><span class="o">:</span><span class="mi">7852716416</span><span class="p">,</span><span class="s">&quot;x9&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;x10&quot;</span><span class="o">:</span><span class="mi">7852716472</span><span class="p">,</span><span class="s">&quot;x11&quot;</span><span class="o">:</span><span class="mi">236223201281</span><span class="p">,</span><span class="s">&quot;x12&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x13&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x14&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;x15&quot;</span><span class="o">:</span><span class="mi">7</span><span class="p">,</span><span class="s">&quot;x16&quot;</span><span class="o">:</span><span class="mi">368</span><span class="p">,</span><span class="s">&quot;x17&quot;</span><span class="o">:</span><span class="mi">48</span><span class="p">,</span><span class="s">&quot;x18&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x19&quot;</span><span class="o">:</span><span class="mi">6136049664</span><span class="p">,</span><span class="s">&quot;x20&quot;</span><span class="o">:</span><span class="mi">7852716416</span><span class="p">,</span><span class="s">&quot;x21&quot;</span><span class="o">:</span><span class="mi">33</span><span class="p">,</span><span class="s">&quot;x22&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;x23&quot;</span><span class="o">:</span><span class="mi">7303651328</span><span class="p">,</span><span class="s">&quot;x24&quot;</span><span class="o">:</span><span class="mi">7303651328</span><span class="p">,</span><span class="s">&quot;x25&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;x26&quot;</span><span class="o">:</span><span class="mi">7</span><span class="p">,</span><span class="s">&quot;x27&quot;</span><span class="o">:</span><span class="mi">2164260864</span><span class="p">,</span><span class="s">&quot;x28&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;fp&quot;</span><span class="o">:</span><span class="mi">6136048352</span><span class="p">,</span><span class="s">&quot;sp&quot;</span><span class="o">:</span><span class="mi">6136048192</span><span class="p">,</span><span class="s">&quot;lr&quot;</span><span class="o">:</span><span class="mi">6457704116</span><span class="p">,</span><span class="s">&quot;pc&quot;</span><span class="o">:</span><span class="mi">6456008068</span><span class="p">,</span><span class="s">&quot;cpsr&quot;</span><span class="o">:</span><span class="mi">1073741824</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">6456008068</span><span class="p">,</span><span class="mi">6457704116</span><span class="p">,</span><span class="mi">6457703176</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;runtime&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;objc_selector&quot;</span><span class="o">:</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;crash_info_entries&quot;</span><span class="o">:</span><span class="p">[]}}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;dispatch_queue_names&quot;</span><span class="o">:</span><span class="p">[</span><span class="s">&quot;com.apple.main-thread&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">]}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;thread_names&quot;</span><span class="o">:</span><span class="p">[</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;com.apple.uikit.eventfetch-thread&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;com.twitter.crashlytics.ios.MachExceptionServer&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;com.google.Maps.LabelingBehavior&quot;</span><span class="p">,</span><span class="s">&quot;com.apple.NSURLConnectionLoader&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">]}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;process_stats&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;active&quot;</span><span class="o">:</span><span class="mi">1085800448</span><span class="p">,</span><span class="s">&quot;inactive&quot;</span><span class="o">:</span><span class="mi">460079104</span><span class="p">,</span><span class="s">&quot;wired&quot;</span><span class="o">:</span><span class="mi">669319168</span><span class="p">,</span><span class="s">&quot;freeMem&quot;</span><span class="o">:</span><span class="mi">116162560</span><span class="p">,</span><span class="s">&quot;free_mem&quot;</span><span class="o">:</span><span class="mi">116162560</span><span class="p">,</span><span class="s">&quot;virtual&quot;</span><span class="o">:</span><span class="mi">2060877824</span><span class="p">,</span><span class="s">&quot;resident&quot;</span><span class="o">:</span><span class="mi">1085800448</span><span class="p">,</span><span class="s">&quot;user_time&quot;</span><span class="o">:</span><span class="mi">337647</span><span class="p">,</span><span class="s">&quot;sys_time&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">}}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;storage&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;free&quot;</span><span class="o">:</span><span class="mi">206087524352</span><span class="p">,</span><span class="s">&quot;total&quot;</span><span class="o">:</span><span class="mi">255937040384</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようになっています。<br/>
これがいい具合に <code>Fabric</code> 管理画面に表示されるわけですね。</p>

<h3>recordError()で生成されるファイル</h3>

<p>クラッシュではないけども、原因調査のためにレポート送信したい時があると思います。<br/>
そんなときは <code>recordError()</code> メソッドを利用します。</p>

<h4>recordError()メソッドの呼び出し</h4>

<p>以下のようにボタンをタップしたら、レポートを送信するようにしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tappedCrashButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">NSError</span><span class="p">(</span><span class="nl">domain:</span> <span class="s">&quot;takahiro test&quot;</span><span class="p">,</span> <span class="nl">code:</span> <span class="mi">1001</span><span class="p">,</span> <span class="nl">userInfo:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Crashlytics</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">().</span><span class="n">recordError</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>recordError()で生成されるファイルの確認方法</h4>

<p><code>recordError()</code> 実行後の生成ファイル確認方法は、基本的にはクラッシュ時と同じです。<br/>
ただし、クラッシュ時に生成されるファイルとファイル名が異なります。<br/>
<code>recordError()</code> では <code>error_a.clsrecord</code> といったファイルが生成されます。</p>

<h4>recordError()で記録したファイルの中身</h4>

<p>記録内容は以下の通りです。<br/>
何を格納するかで中身はもう少し変わりそうですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">{</span><span class="s">&quot;error&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;domain&quot;</span><span class="o">:</span><span class="s">&quot;74616b616869726f2074657374&quot;</span><span class="p">,</span><span class="s">&quot;code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="p">,</span><span class="s">&quot;time&quot;</span><span class="o">:</span><span class="mi">1524979041</span><span class="p">,</span><span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">4299168744</span><span class="p">,</span><span class="mi">4299051336</span><span class="p">,</span><span class="mi">4298970328</span><span class="p">,</span><span class="mi">4298970672</span><span class="p">,</span><span class="mi">6639789768</span><span class="p">,</span><span class="mi">6640973988</span><span class="p">,</span><span class="mi">6639814524</span><span class="p">,</span><span class="mi">6641082844</span><span class="p">,</span><span class="mi">6640327240</span><span class="p">,</span><span class="mi">6640281848</span><span class="p">,</span><span class="mi">6640276024</span><span class="p">,</span><span class="mi">6648540172</span><span class="p">,</span><span class="mi">6648549816</span><span class="p">,</span><span class="mi">6648550680</span><span class="p">,</span><span class="mi">6648521304</span><span class="p">,</span><span class="mi">6474609668</span><span class="p">,</span><span class="mi">6474607660</span><span class="p">,</span><span class="mi">6474598300</span><span class="p">,</span><span class="mi">6473682344</span><span class="p">,</span><span class="mi">6507114528</span><span class="p">,</span><span class="mi">6641325964</span><span class="p">,</span><span class="mi">4298951872</span><span class="p">,</span><span class="mi">6467985344</span><span class="p">]}}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;error&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;domain&quot;</span><span class="o">:</span><span class="s">&quot;74616b616869726f2074657374&quot;</span><span class="p">,</span><span class="s">&quot;code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="p">,</span><span class="s">&quot;time&quot;</span><span class="o">:</span><span class="mi">1524979043</span><span class="p">,</span><span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">4299168744</span><span class="p">,</span><span class="mi">4299051336</span><span class="p">,</span><span class="mi">4298970328</span><span class="p">,</span><span class="mi">4298970672</span><span class="p">,</span><span class="mi">6639789768</span><span class="p">,</span><span class="mi">6640973988</span><span class="p">,</span><span class="mi">6639814524</span><span class="p">,</span><span class="mi">6641082844</span><span class="p">,</span><span class="mi">6640327240</span><span class="p">,</span><span class="mi">6640281848</span><span class="p">,</span><span class="mi">6640276024</span><span class="p">,</span><span class="mi">6648540172</span><span class="p">,</span><span class="mi">6648549816</span><span class="p">,</span><span class="mi">6648521304</span><span class="p">,</span><span class="mi">6474609668</span><span class="p">,</span><span class="mi">6474607660</span><span class="p">,</span><span class="mi">6474598300</span><span class="p">,</span><span class="mi">6473682344</span><span class="p">,</span><span class="mi">6507114528</span><span class="p">,</span><span class="mi">6641325964</span><span class="p">,</span><span class="mi">4298951872</span><span class="p">,</span><span class="mi">6467985344</span><span class="p">]}}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;error&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;domain&quot;</span><span class="o">:</span><span class="s">&quot;74616b616869726f2074657374&quot;</span><span class="p">,</span><span class="s">&quot;code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="p">,</span><span class="s">&quot;time&quot;</span><span class="o">:</span><span class="mi">1524979046</span><span class="p">,</span><span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">4299168744</span><span class="p">,</span><span class="mi">4299051336</span><span class="p">,</span><span class="mi">4298970328</span><span class="p">,</span><span class="mi">4298970672</span><span class="p">,</span><span class="mi">6639789768</span><span class="p">,</span><span class="mi">6640973988</span><span class="p">,</span><span class="mi">6639814524</span><span class="p">,</span><span class="mi">6641082844</span><span class="p">,</span><span class="mi">6640327240</span><span class="p">,</span><span class="mi">6640281848</span><span class="p">,</span><span class="mi">6640276024</span><span class="p">,</span><span class="mi">6648540172</span><span class="p">,</span><span class="mi">6648549816</span><span class="p">,</span><span class="mi">6648521304</span><span class="p">,</span><span class="mi">6474609668</span><span class="p">,</span><span class="mi">6474607660</span><span class="p">,</span><span class="mi">6474598300</span><span class="p">,</span><span class="mi">6473682344</span><span class="p">,</span><span class="mi">6507114528</span><span class="p">,</span><span class="mi">6641325964</span><span class="p">,</span><span class="mi">4298951872</span><span class="p">,</span><span class="mi">6467985344</span><span class="p">]}}</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;error&quot;</span><span class="o">:</span><span class="p">{</span><span class="s">&quot;domain&quot;</span><span class="o">:</span><span class="s">&quot;74616b616869726f2074657374&quot;</span><span class="p">,</span><span class="s">&quot;code&quot;</span><span class="o">:</span><span class="mi">1001</span><span class="p">,</span><span class="s">&quot;time&quot;</span><span class="o">:</span><span class="mi">1524979048</span><span class="p">,</span><span class="s">&quot;stacktrace&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">4299168744</span><span class="p">,</span><span class="mi">4299051336</span><span class="p">,</span><span class="mi">4298970328</span><span class="p">,</span><span class="mi">4298970672</span><span class="p">,</span><span class="mi">6639789768</span><span class="p">,</span><span class="mi">6640973988</span><span class="p">,</span><span class="mi">6639814524</span><span class="p">,</span><span class="mi">6641082844</span><span class="p">,</span><span class="mi">6640327240</span><span class="p">,</span><span class="mi">6640281848</span><span class="p">,</span><span class="mi">6640276024</span><span class="p">,</span><span class="mi">6648540172</span><span class="p">,</span><span class="mi">6648549816</span><span class="p">,</span><span class="mi">6648521304</span><span class="p">,</span><span class="mi">6474609668</span><span class="p">,</span><span class="mi">6474607660</span><span class="p">,</span><span class="mi">6474598300</span><span class="p">,</span><span class="mi">6473682344</span><span class="p">,</span><span class="mi">6507114528</span><span class="p">,</span><span class="mi">6641325964</span><span class="p">,</span><span class="mi">4298951872</span><span class="p">,</span><span class="mi">6467985344</span><span class="p">]}}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>recordError()の注意点</h4>

<p>今回、<code>recordError()</code>を利用していて気づいた点が以下の通りです。</p>

<ul>
<li>短時間に複数回タップしてもアプリ内のファイルにエラーログとして記録されない</li>
<li>アプリ内に記録されたエラーログが全て<code>Fabric</code>管理画面に記録されるわけではない</li>
</ul>


<p>どういったフィルタがかかっているのかまではわからないのですが、なんでもかんでも記録されるわけではないようです&hellip;</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回たまたま中身を探ってみる機会があったので見てみましたが、きっと普段は気にしなくて良い内容なのだと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKitを使ってみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/24/swift-promisekit-2/"/>
    <updated>2018-04-24T23:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/24/swift-promisekit-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は久しぶりに<a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>について書きたいと思います。<br/>
今から約2年前に<a href="http://grandbig.github.io/blog/2016/04/09/c/">PromiseKitを使ってみよう！</a>で少し触れていたのですが、<br/>
最近業務で扱うことも増えてきたので改めて書き留めておこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Promiseとは</h3>

<p><code>PromiseKit</code> に記載されている内容を訳すと(若干、意訳してますが&hellip;)、</p>

<ul>
<li>シンプルな非同期プログラミングを実現できる</li>
<li>上記によって、開発者がより重要な課題に集中することができる</li>
<li>学習ハードルが低いため、マスターすることが簡単である</li>
<li>可読性の高いコードが実現できるため、チーム開発にも向いている</li>
</ul>


<p>といった感じです。<br/>
これを見る限り、非常に期待できますよね。<br/>
では、具体的な使い方を見ていきましょう。</p>

<h3>アラートでの利用例</h3>

<p><code>UIAlertViewController</code> を利用した時に、通常は以下のように <code>completion</code> を引数に持って実装するかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">internal</span> <span class="n">func</span> <span class="nf">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                          <span class="nl">message:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                          <span class="nl">okCompletion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">),</span>
</span><span class='line'>                          <span class="nl">cancelCompletion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">title</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">alert</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">okAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">okCompletion</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cancelAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;キャンセル&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">cancelCompletion</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと引数が多くなってしまいますし、呼び出し側でも下記のように書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;OKとキャンセルどちらをタップしますか&quot;</span><span class="p">,</span> <span class="nl">okCompletion:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// OKボタンをクリックした場合に呼び出される</span>
</span><span class='line'><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// キャンセルボタンをクリックした場合に呼び出される</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを <code>PromiseKit</code> を使って書くとどうなるでしょうか？<br/>
まずは、アラートのメソッドは下記のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">AlertError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="n">func</span> <span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">title</span><span class="p">,</span> <span class="nl">message:</span> <span class="n">message</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="n">UIAlertControllerStyle</span><span class="p">.</span><span class="n">alert</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">okAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">ok</span><span class="p">(),</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">Void</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cancelAction</span> <span class="o">=</span> <span class="n">UIAlertAction</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">cancel</span><span class="p">(),</span> <span class="nl">style:</span> <span class="n">UIAlertActionStyle</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">AlertError</span><span class="p">.</span><span class="n">cancel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>呼び出し側では、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">showConfirm</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;OKとキャンセルどちらをタップしますか&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// OKをタップした場合に呼び出される処理</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// キャンセルをタップした場合に呼び出される処理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くことができ、非常にわかりやすく後続の処理を書くことができます。</p>

<h3>API呼び出しの利用例</h3>

<p>続いて、API呼び出しの場合の利用例を見ていきましょう。<br/>
今回API通信処理では <a href="https://github.com/Moya/Moya">Moya</a> を利用します。<br/>
また、叩くAPIは <a href="https://developers.google.com/places/?hl=ja">Google Places API</a> を利用します。</p>

<p>まずは <code>Moya</code> の書き方ですが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Moya</span>
</span><span class='line'><span class="n">import</span> <span class="n">PromiseKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// APIエラーの定義</span>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="nl">APIError:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">cancel</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">decodeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="k">enum</span> <span class="n">SampleAPITarget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">places</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">SampleAPITarget:</span> <span class="n">TargetType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 以下はGoogleのAPIキーをkey.plistで保持していると仮定した処理です。</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistが見つかりません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;key.plistの中身が想定通りではありません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Google APIのKeyが設定されていません&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">apiKey</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ベースURLを文字列で定義</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">_baseURL:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;https://maps.googleapis.com/maps/api/place/nearbysearch/json&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">baseURL:</span> <span class="n">URL</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">_baseURL</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したパスを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">path:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enumの値に対応したHTTPメソッドを指定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">method:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">get</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// スタブデータの設定</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">sampleData:</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Stub data&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="nl">using:</span> <span class="n">String</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// パラメータの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">task:</span> <span class="n">Task</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">places</span><span class="p">(</span><span class="n">let</span> <span class="n">lat</span><span class="p">,</span> <span class="n">let</span> <span class="n">lng</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">.</span><span class="n">requestParameters</span><span class="p">(</span><span class="nl">parameters:</span> <span class="p">[</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">keyFileName</span><span class="p">()</span><span class="o">:</span> <span class="n">apiKey</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">locationKeyName</span><span class="p">()</span><span class="o">:</span> <span class="s">&quot;\(lat),\(lng)&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">radiusKeyName</span><span class="p">()</span><span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>                <span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ヘッダーの設定</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">headers:</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">String</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">places:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SampleAPI</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように書きます。<br/>
( <code>Moya</code> はUnitテストが書きやすいので良いんですよね〜という話はまた後日&hellip; )</p>

<p>では、本題の <code>PromiseKit</code> を用いたAPI通信処理です。<br/>
先程の <code>SampleAPI</code> クラスにメソッドを追加してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="n">SampleAPI</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">provider:</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// イニシャライザ</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">provider</span> <span class="o">=</span> <span class="n">MoyaProvider</span><span class="o">&lt;</span><span class="n">SampleAPITarget</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Placeの定義は</span>
</span><span class='line'>    <span class="c1">// https://grandbig.github.io/blog/2018/04/23/codable-swift4-1/</span>
</span><span class='line'>    <span class="c1">// の『オマケ：Google Places APIでCodableを利用する』を参照のこと</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchPlaces</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="p">(</span><span class="n">promise</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)</span> <span class="o">=</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="p">[</span><span class="n">Place</span><span class="p">]</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pending</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">places</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">lat</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">lng</span><span class="p">))</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">let</span> <span class="n">response</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">decoder</span> <span class="o">=</span> <span class="n">JSONDecoder</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">decoder</span><span class="p">.</span><span class="n">keyDecodingStrategy</span> <span class="o">=</span> <span class="p">.</span><span class="n">convertFromSnakeCase</span>
</span><span class='line'>                    <span class="n">let</span> <span class="n">places</span> <span class="o">=</span> <span class="n">try</span> <span class="n">decoder</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">Places</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">from:</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">fulfill</span><span class="p">(</span><span class="n">places</span><span class="p">.</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">decodeError</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="n">resolver</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">APIError</span><span class="p">.</span><span class="n">apiError</span><span class="p">(</span><span class="nl">description:</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">promise</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように定義できます。<br/>
これを呼び出すときは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">SampleAPI</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">firstly</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">worker</span><span class="p">.</span><span class="n">fetchPlaces</span><span class="p">(</span><span class="nl">lat:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">lng:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">done</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">results</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="n">catch</span> <span class="p">{</span> <span class="p">[</span><span class="n">weak</span> <span class="n">self</span><span class="p">]</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように書くことができます。<br/>
こちらも縦に浅いネストで読むことができるため、可読性が高いと言えますね。</p>

<h3>PromiseKitの公式Readme</h3>

<p><code>PromiseKit</code> のドキュメントは非常に丁寧なので、これを読むだけでも理解を相当深められると思います。</p>

<ul>
<li><a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/GettingStarted.md">GettingStarted</a></li>
<li><a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/CommonPatterns.md">CommonPatterns</a></li>
</ul>


<p>を読んでおけばOKかと。<br/>
(上記の話も別機会でかければと思います。)</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
筆者は割りと <code>completion</code> で書くのが好きだったのですが、 <code>PromiseKit</code> に慣れていくと、その良さにどんどん気づいていくことができました。<br/>
リトライ処理は遅延実行も簡単に対応できたりするので、ぜひ使ってみることをオススメします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レバテック キャリアにて本ブログが紹介されました！]]></title>
    <link href="http://grandbig.github.io/blog/2018/04/23/levtech-blog/"/>
    <updated>2018-04-23T02:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/04/23/levtech-blog</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>先日、<a href="http://leverages.jp/">レバレジーズ株式会社</a> 様より『レバテックキャリア』の『Swift』に関する記事にて、本ブログを紹介したいとご連絡頂きました。<br/>
ブログを始めて4年半、こういったお誘いを頂くことは初めてで、正直全く想定していませんでした。</p>

<p>今回は、紹介記事を逆に紹介すると共に、当時のことを深掘りしながら振り返ってみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>紹介記事について</h3>

<p>今回掲載された紹介記事は<a href="https://career.levtech.jp/guide/knowhow/article/406/">プログラミング学習の参考に！パワフルかつ直感的な言語&#8221;Swift&#8221;に関する記事特集</a>です。<br/>
この記事のテーマは『これからSwiftを用いたiOSアプリ開発を志す人達へのお役立ち情報を提供すること』と筆者は捉えました。<br/>
その中で本ブログは <strong>『(5) Swiftを使ってアプリを作ろう！！』</strong> で紹介されています。</p>

<p>記事の内容としては、<a href="https://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/">Swiftを使って、iBeaconのCentralアプリを作ろう！！</a>で、<br/>
当時、筆者がObjective-CをメインにiOSアプリを開発していた頃にSwiftを勉強しようと思い立った時のものです。</p>

<h3>当時の状況</h3>

<p>あの頃はSwiftも登場したばかりで、iOSアプリ開発の現場ではObjective-Cが主流でした。<br/>
( 会社の業務ではSwiftを扱うことはありませんでした。 )<br/>
と同時に、筆者は正直なところ、</p>

<ul>
<li>これからはSwiftがiOSアプリのメイン言語として受け入れられていくかもしれない&hellip;</li>
<li>Objective-Cと全然違う言語っぽいので、パット見、書き方がよくわからない&hellip;</li>
<li>これまでの知識を全て捨てて0からiOSエンジニアを目指さなくてはならないのだろうか&hellip;</li>
</ul>


<p>と戦々恐々としていました。</p>

<p>そんな気持ちがあるからこそ、早めにキャッチアップした方が良いだろうということでSwiftの勉強を始めたのだと思います。<br/>
勉強の題材としては、当時、業務で触れる機会の多かったiBeaconを選択しました。<br/>
勉強の目的を達成するための最良な選択は、現場に近い題材を扱うことだと思ったためです。</p>

<h3>Swift思考へシフトしてわかったこと</h3>

<p>続いて、Objective-CからSwiftに脳をシフトして苦労したこと、良かったことなどについて振り返りたいと思います。</p>

<h4>苦労したこと</h4>

<p>筆者がSwiftの勉強を開始して特に苦労した点は以下でした。</p>

<ul>
<li><strong>Optional型</strong> と <strong>Optional型のアンラップ</strong> の理解</li>
<li>様々な文法の省略記法 (クロージャなど) の理解</li>
</ul>


<p>今思えば、その魅力には絶賛せざるを得ないのですが、なにせ当初はObjective-C脳だったので、苦労しました。<br/>
打開策はただひたすら、その魅力や意味を理解するためにサンプルを書き続けたことだと思います。</p>

<h4>良かったこと</h4>

<p>Swiftを勉強して特に良かったと感じることは以下でしょうか。</p>

<ul>
<li>Java8やKotlinでのOptionalの理解が早い</li>
<li>様々な現場でSwiftの書けるiOSエンジニアが求められているが、そこにも入っていける</li>
</ul>


<p>SpringBootでのサーバサイド開発でJava8を利用することがあったり、<br/>
アプリ開発時は往々にしてiOSとAndroidを並行して進めることが多いので、Androidでどんな感じに書いているのか見に行くのが楽だったりしました。</p>

<p>もちろんiOS開発単体での素晴らしさはあると思いますが、派生して行けるのが強みなのかなと思ったりします。</p>

<h4>現在のiOSアプリ開発の現場</h4>

<p>今、私が所属している現場ではバリバリSwiftを書いています。<br/>
Objective-Cも当然ありますが、私の業務で言うと、ソースコードをたまに見るくらいですかね。</p>

<p>因みに、Swiftを利用していると一言で言っても、以下のように状況が分かれている場合もあるようです。</p>

<ul>
<li>Swift2.xを継続利用している</li>
<li>Swift3.xを継続利用している</li>
<li>Swift4を継続利用している</li>
<li>Swift4.1に対応できている</li>
</ul>


<p>この辺りもObjective-C時代には気にしなくても良かったところですね。<br/>
特にSwift2.xからSwift3.xへの移行はコストもかかるため、どっぷりSwift化してしまったプロダクトは困っていることでしょう&hellip;<br/>
圧倒的にSwift3およびSwift4以降の方がコーディングが楽なので、Swift2.xは辛そう&hellip;</p>

<h3>まとめ</h3>

<p>さて、今回は思わぬ本ブログの紹介依頼を起点に、当時を振り返ってみました。<br/>
1つ改めて思い出したことは、時代の流れに乗って、常に新しいことを勉強することは大切だということです。<br/>
忙しくてなかなかブログを更新できないこともありましたが、やっぱり『継続は力なり』ですね。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
