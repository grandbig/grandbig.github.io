<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-04-30T00:14:33+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iBeacon完全攻略！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/29/ibeacon-review/"/>
    <updated>2015-04-29T21:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/29/ibeacon-review</id>
    <content type="html"><![CDATA[<h4>iBeaconを復習しよう！</h4>

<p>本日はこれまでも何度か取り上げてきたiBeaconについて改めて復習してみたいと思います。<br/>
今回はiOS端末でのiBeaconの発信/受信に特化して書きます。</p>

<p>これまでの関連記事は以下です。</p>

<ul>
<li><a href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/">噂のiOS7.1でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon/">iOS8でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/">Swiftを使って、iBeaconのCentralアプリを作ろう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/">複数のiBeacon信号を利用してみよう！</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>では、早速、まとめていきましょう。</p>

<h4>iBeaconが利用可能な端末</h4>

<ul>
<li>OS: iOS7.0以上</li>
<li>端末: iPhone4S以降, iPad(第３世代)以降, iPad mini以降, iPod touch(第５世代以降)
※もちろんiPad Airでも利用可能</li>
</ul>


<h4>iOSごとのiBeacon機能の差異</h4>

<p>まずは動作面での差異について</p>

<ul>
<li>iOS7.0.xの場合<br/>
アプリをFG起動もしくはBG起動していないとiBeaconを検知することはできない</li>
<li>iOS7.1.x以降の場合<br/>
アプリを起動していない(停止状態の)場合でもiBeaconを検知可能</li>
</ul>


<p>次にプログラミング面での差異について</p>

<p>プログラミング面ではCentral側にのみ多少の差異があります。<br/>
iBeaconの検知には <strong>CoreLocation.framework</strong> を利用します。
<strong>CoreLocation.framework</strong> は位置情報サービスを利用するためのフレームワークですが、iBeaconの領域監視メソッドが組み込まれています。<br/>
もともと、ジオフェンスの領域監視メソッドが組み込まれていますので、それと同等に扱いたいというApple側の意図が見えます。</p>

<p>具体的な差異について説明します。<br/>
位置情報サービスの利用許可メソッドをiOS8から組み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLBeacon</span> <span class="o">*</span><span class="n">nearestBeacon</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">CLLocationManager</span> <span class="nl">isMonitoringAvailableForClass:</span><span class="p">[</span><span class="n">CLCircularRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS7.x以降の端末</span>
</span><span class='line'>      <span class="c1">// CLLocationManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// UUIDの設定</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;8D4DB809-032F-4771-96F3-99BD5C25F924&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// Bundle Identifierの取得</span>
</span><span class='line'>      <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">bid</span> <span class="o">=</span> <span class="p">[</span><span class="n">bundle</span> <span class="n">bundleIdentifier</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="nl">identifier:</span> <span class="n">bid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// iOS8以上の場合</span>
</span><span class='line'>          <span class="c1">// 位置情報サービスを常に許可させて良いかどうかを尋ねるためのメソッド</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// iOS8未満の場合</span>
</span><span class='line'>          <span class="c1">// iBeacon領域の監視を開始</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS6.x以前の端末</span>
</span><span class='line'>      <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;確認&quot;</span> <span class="nl">message:</span><span class="s">@&quot;iBeacon機能を利用できない端末です。&quot;</span> <span class="nl">delegate:</span> <span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span> <span class="nb">nil</span> <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// アラートを表示</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ユーザの位置情報の許可状態を確認するメソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を常に許可している場合</span>
</span><span class='line'>      <span class="c1">// iBeacon領域の監視を開始</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// その他の場合</span>
</span><span class='line'>      <span class="c1">// 設定画面に遷移</span>
</span><span class='line'>      <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">UIApplicationOpenSettingsURLString</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>iOS7.xでは<code>startMonitoringForRegion</code>メソッドを実行した段階で<code>didChangeAuthorizationStatus</code>メソッドが呼ばれます。<br/>
iOS8では、<code>requestAlwaysAuthorization</code>メソッドを実行(位置情報サービスを常に許可する場合のメソッド)しなければ、<code>didChangeAuthorizationStatus</code>メソッドが呼ばれないため、<code>startMonitoringForRegion</code>メソッドの実行タイミングを変える必要が出てきました。</p>

<h4>iBeacon関連メソッドの実行順について(Centralの場合)</h4>

<p>先ほどiBeaconの検知は <strong>CoreLocation.framework</strong> 内のメソッドとして組み込まれていると説明しました。では、他にどんなメソッドがあるのでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域監視が開始された後に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didStartMonitoringForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域監視に失敗した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">monitoringDidFailForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="nf">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域に入った場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域から出た場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域に対する状態が変化した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didDetermineState:</span><span class="p">(</span><span class="n">CLRegionState</span><span class="p">)</span><span class="nv">state</span> <span class="nf">forRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// iBeacon信号をレンジング検知した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のメソッドを使えば十分なアプリが開発できるはずです。<br/>
さて、ここで注意しておくべきなのは、<code>startRangingBeaconsInRegion</code>メソッドをどのタイミングで実行するかということです。</p>

<p>基本的には、 <strong>監視領域に入ったタイミング</strong> で<code>startRangingBeaconsInRegion</code>メソッドを実行するのが普通かもしれません。<br/>
しかし、この場合は注意が必要です。<br/>
なぜなら、監視領域内でアプリを落として、再度起動した場合、<code>didEnterRegion</code>メソッドが実行されないからです。つまり、既に監視領域に入っている場合は <strong>監視領域に侵入したと見なされない</strong> ということです。<br/>
よって、こういったケースがアプリの利用に打撃を与えるのであれば、 <strong>監視領域に入ったタイミング</strong> のみに<code>startRangingBeaconsInRegion</code>メソッドを置くわけにはいかないことになります。<br/>
その場合は、<code>didDetermineState</code>メソッドで既に監視領域内にいる場合(<code>state</code>が<code>CLRegionStateInside</code>の場合)に<code>startRangingBeaconsInRegion</code>メソッドを実行するようにしましょう。</p>

<h4>Peripheralの注意点</h4>

<p>続いて、PeripheralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末ではアプリをFG起動している間のみiBeacon信号の発信が可能です。<br/>
アプリがBG起動になった場合、iBeacon信号の発信が止まってしまうため、数秒後にCentral側のiOS端末で<code>didExitRegion</code>メソッドが実行されます。<br/>
なので、iOS端末でPeripheralの役割を担いたいのであれば、FG起動を続けることに問題がない使い方である場合に限ります。</p>

<p>因みに、XcodeのBackground Modesで <strong>Act as a Bluetooth LE accessory</strong> を有効にしたとしても、BG起動中はiBeaconを発信することはできません。</p>

<p>また、 <strong>CoreBluetooth.framework</strong> にはiOS端末がiBeacon発信状態(アドバタイジング状態)かを判別する<code>isAdvertising</code> プロパティが存在します。<br/>
iBeaconを発信している状態でアプリをBG起動にした場合は<code>isAdvertising</code>は <strong>YES</strong> として返却されます。つまり、実際の状態と必ずしも一致するわけではないということです。</p>

<h4>Centralの注意点</h4>

<p>最後にCentralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末でiBeaconのレンジング処理を行う場合、FG起動時にしかレンジング処理を実行できません。<br/>
そのため、アプリの状態によらずレンジング処理が必要な仕様を実現することは不可能ということになります。</p>

<p>一応、<code>didEnterRegion</code>メソッドや<code>didExitRegion</code>メソッドなどのデリゲートメソッドが実行された場合、約10秒間はアプリの状態によらずあらゆる処理が実行可能であるため、この間のみレンジング処理を実行して<code>major</code>, <code>minor</code>などの値を取得することは可能です。</p>

<p>正しい動作検証を実施した上でiBeaconを扱うようにしましょう。</p>

<h4>各種設定がOFFの場合のアラート表示について</h4>

<p>さて、直接iBeaconとは関係がありませんが、iOS端末をPeripheralとして扱う場合は <strong>Bluetoothの設定</strong> をONにしておく必要があります。iOS端末をCentralとして扱う場合は <strong>Bluetoothの設定</strong> と <strong>位置情報サービスの設定</strong> をONにしておく必要があります。</p>

<p>これらがOFFになっている場合、iBeaconの機能を利用することができないため、アプリ開発時にアラートを表示してユーザに知らせることを考えるかと思います。<br/>
さらに、できれば設定画面に飛ばしたいと思いますよね？</p>

<p><strong>位置情報サービス</strong> の場合は、iOS8であれば設定画面へのURLスキームが復活したため、問題ありません。(iOS7.xでは設定画面への遷移は諦めましょう。)<br/>
<strong>Bluetooth</strong> の場合は <strong>CoreBluetooth.framework</strong> を利用していれば、難しくありません。(処理に <strong>CoreBluetooth.framework</strong> が不要なCentral側であっても設定画面に飛ばしたいのであれば、<code>import</code>する必要があります。)<br/>
※ 具体的には<code>CBPeripheralManager</code>もしくは<code>CBCentralManager</code>の初期化時に<code>option</code>に<code>CBPeripheralManagerOptionShowPowerAlertKey</code>もしくは<code>CBCentralManagerOptionShowPowerAlertKey</code>を設定すれば良いです。</p>

<p>以上がまとめとなります。<br/>
ぜひぜひ参考にして頂ければと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple Watch Sportを購入しました]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/apple-watch/"/>
    <updated>2015-04-25T12:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/apple-watch</id>
    <content type="html"><![CDATA[<h4>Apple Watch Sport</h4>

<p>先日とうとう発売されたApple Watch Sportについて書きたいと思います。<br/>
本記事ではApple Watch Sportの開封および初期設定の手順について説明するに留め、プログラミングは今後に回したいと思います。</p>

<p>まず、Apple Watch Sportは他のApple製品と同じで真っ白な箱に入ってきました。<br/>
写真だと見づらいですが、箱に『Apple Watch』と書かれています。</p>

<p><img src="http://grandbig.github.io/images/apple_watch1.png" alt="Apple Watch Sportの箱" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>箱を明けてみると、真っ白なケースが入っています。<br/>
<img src="http://grandbig.github.io/images/apple_watch2.png" alt="Apple Watch Sportの箱を開けると..." /></p>

<p>真っ白なケースを開けてみましょう。<br/>
出ました！Apple Watch Sportの初お目見えです！<br/>
<img src="http://grandbig.github.io/images/apple_watch3.png" alt="Apple Watch Sport" /></p>

<p>付属品は他にサイズ違いのバンド, 充電ケーブル, 電源コネクタ, 説明書が入っていました。<br/>
<img src="http://grandbig.github.io/images/apple_watch4.png" alt="Apple Watch Sportの付属品" /></p>

<p>※ 因みに、初めからつけられていたバンドはLサイズのものでした。付属品として入っていたものがS/M兼用サイズのようです。</p>

<p>次にApple Watch Sportの初期設定に移ります。<br/>
Apple Watch Sportの右側面にはハードボタンが2つついています。<br/>
下のボタンを長押しして起動してみましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch5.png" alt="Apple Watch Sportの側面" /></p>

<p>初めに使用言語を聞かれるため、もちろん日本語を選択します。<br/>
すると、iPhoneでApple Watchのアプリを起動するように求められます。<br/>
<img src="http://grandbig.github.io/images/apple_watch6.png" alt="Apple Watch Sportとペアリング1" /></p>

<p>では、iPhoneでApple Watchアプリを起動してみましょう。<br/>
ペアリングを開始をタップしましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch7.png" alt="Apple Watch Sportとペアリング2" /></p>

<p>どうやらカメラを向ける必要があるようなので、Apple Watch Sportに向けてみます。<br/>
<img src="http://grandbig.github.io/images/apple_watch8.png" alt="Apple Watch Sportとペアリング3" /></p>

<p>ペアリングが完了すると下記のようになります。<br/>
<img src="http://grandbig.github.io/images/apple_watch9.png" alt="Apple Watch Sportとペアリング4" /></p>

<p>続いて、iPhoneからApple Watch Sportの設定を続ける必要があります。<br/>
Apple Watchを設定をタップすると、装着する腕を選択する画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch10.png" alt="Apple Watch Sportの設定1" /></p>

<p>次に利用規約に同意する画面が表示されるので、同意しましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch11.png" alt="Apple Watch Sportの設定2" /></p>

<p>そして、Apple IDを入力します。<br/>
<img src="http://grandbig.github.io/images/apple_watch12.png" alt="Apple Watch Sportの設定3" /></p>

<p>このあと、各種機能の利用の確認画面が表示されます。
<img src="http://grandbig.github.io/images/apple_watch13.png" alt="位置情報サービス利用の確認" /><br/>
<img src="http://grandbig.github.io/images/apple_watch14.png" alt="Siri利用の確認" /><br/>
<img src="http://grandbig.github.io/images/apple_watch15.png" alt="診断情報の送信の確認" /></p>

<p>Apple Watch Sportのパスコードを設定します。<br/>
<img src="http://grandbig.github.io/images/apple_watch16.png" alt="Apple Watch Sportのパスコード" /></p>

<p>Apple Watch Sportで動作可能なアプリをインストールします。<br/>
<img src="http://grandbig.github.io/images/apple_watch17.png" alt="アプリのインストール" /></p>

<p>同期中は下記画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch18.png" alt="Apple Watch Sportと同期中" /></p>

<p>Apple Watch Sportの利用準備が整うと下記の画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch19.png" alt="Apple Watch Sportの利用準備完了" /></p>

<p>さて、設定が完了したところでApple Watch Sportを見てみましょう。<br/>
側面のゲージボタンを押せば、iPhoneで言うところのホーム画面が開けるはずです。<br/>
<img src="http://grandbig.github.io/images/apple_watch20.png" alt="Apple Watch Sport ホーム画面" /></p>

<p>まだまだApple Watch Sportを触りきれていない状態なので、今後どんどん慣れていって、何が開発できるのか追求していきたいと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p>※現在、アップデート申請中のため、公開されていません。<br/>
(公開され次第、合わせてブログを更新する予定です。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="http://grandbig.github.io/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のiBeacon信号を利用してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/"/>
    <updated>2015-04-13T00:28:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/13/multi-ibeacon</id>
    <content type="html"><![CDATA[<h4>複数のiBeaconを検知する方法</h4>

<p>さて、本日はさらっと複数のiBeacon信号の検知について考えてみたいと思います。<br/>
(これまでできるだろうという考えではあったものの、実際に試してみたことがなかったのでメモ書きです。)<br/>
Central側ではiBeacon信号をキャッチしたときに、そのオブジェクトを配列の形で取得することができます。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Beacon信号を検出した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">beacons</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように <strong>beacons</strong> が <strong>NSArray</strong> の型で返ってきていますよね。<br/>
単純にこれを使ってやればよいのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>実際にログを見てみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span> <span class="mo">00</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mf">23.974</span> <span class="n">iBeaconSampleCentral</span><span class="p">[</span><span class="mi">312</span><span class="o">:</span><span class="mi">15030</span><span class="p">]</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;CLBeacon (uuid:&lt;__NSConcreteUUID 0x17403a6e0&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.07m, rssi:-35)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;CLBeacon (uuid:&lt;__NSConcreteUUID 0x174037520&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.20m, rssi:-45)&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっています。<br/>
最寄りのiBeaconのみを使う方法ではできなかった何か新しいサービスを実現できるかもしれませんね。<br/>
今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CROSSWALKの性能を確かめよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/12/crosswalk-test/"/>
    <updated>2015-04-12T16:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/12/crosswalk-test</id>
    <content type="html"><![CDATA[<h4>CROSSWALKは果たして優秀なのか！？</h4>

<p>以前、CROSSWALKについて紹介させて頂きました。<br/>
メリット/デメリットはいろいろなサイトで紹介されていますが、実際に性能はどうなのか気になりますよね？<br/>
そこで今回は幾つかの端末を用いて試験をしてみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Sunspiderでベンチマーク</h5>

<p>試験に利用した端末は下記3つです。</p>

<ul>
<li>Android4.4.2 / AQOUS 305SH</li>
<li>Android4.2.2 / AQOUS 303SH</li>
</ul>


<p>これら端末で下記4つのWebの性能を確かめました。</p>

<ul>
<li>CROSSWALK</li>
<li>標準のWebView</li>
<li>標準のブラウザ</li>
<li>Chrome</li>
</ul>


<p>早速ですが、結果を載せます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_sunspider_305sh.png" alt="Android4.4.2, AQOUS 305SH, Sunspider結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_sunspider_303sh.png" alt="Android4.2.2, AQOUS 303SH, Sunspider結果" /></p>

<p>結果を見ると、処理速度だけで言えば、必ずしもCROSSWALKが優秀とは言えないことがわかります。<br/>
しかし、CROSSWALKの良さは処理速度に限ったことではありません。<br/>
何と言っても最新のChromiumと同じHTML, CSSの対応度合いが肝です。<br/>
では続けて、HTMLとCSSに関して試験してみましょう。</p>

<h5>HTML5のテスト</h5>

<p>まずは、HTML5の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="https://html5test.com/">HTML5test</a>です。<br/>
HTML5testは550点満点なので、数値が550に近いほど優秀と言えます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_html5test_305sh.png" alt="Android4.4.2, AQOUS 305SH, HTML5Test結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_html5test_303sh.png" alt="Android4.2.2, AQOUS 303SH, HTML5Test結果" /></p>

<p>これはさすがの結果と言えるでしょう。<br/>
Chromeの方が高かったりしますが、標準のWebViewや標準のブラウザに比べれば遥かに優秀であると言えます。</p>

<h5>CSS3のテスト</h5>

<p>次に、CSS3の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="http://css3test.com/">The CSS3 Test</a>です。<br/>
The CSS3 Testは100%満点の%で表現されます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_css3test_305sh.png" alt="Android4.4.2 AQOUS 305SH, CSS3Test結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_css3test_303sh.png" alt="Android4.2.2 AQOUS 303SH, CSS3Test結果" /></p>

<p>こちらもCROSSWALKがメリットとなる結果と言えるでしょう。<br/>
Chromeと同じ対応度合いであったので、全く問題がないと言えると思います。</p>

<h5>まとめ</h5>

<p>以上の結果を見ると、処理速度が気になるものの、WebSocketやWebGL, WebRTCなどに対応した上で、ターゲットにAndroid4.0〜4.3を含めたいのであれば、CROSSWALKは入れるべきと言えるでしょう。<br/>
Android5.0以上がほとんどを占める世の中になったとしたら、何も考えずに標準のWebViewを使えば良いのかもしれないですが、まだまだ先の話でしょう。<br/>
と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6.2で使ってみようDoxygen]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/doxygen/"/>
    <updated>2015-04-05T14:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/doxygen</id>
    <content type="html"><![CDATA[<h4>Doxygen</h4>

<p>さて、本日はDoxygenについて書こうと思います。<br/>
筆者はAppleライクなリファレンスを生成できる<a href="https://github.com/tomaz/appledoc">appledoc</a>を利用していましたが、なぜかXcode6.2でうまく生成できないことやAppleの公式リファレンスのデザインが以前より大幅に変更されたことから<a href="http://www.doxygen.jp/">Doxygen</a>を使うことにしました。</p>

<p>DoxygenはC++, C, Java, Objective-C, Python, IDL, Fortran, VHDL, PHP, C#のためのドキュメントジェネレータツールです。<br/>
独特のリファレンススタイルであるものの、下記3点のメリットがあると公式サイトに書かれています。</p>

<ul>
<li>ドキュメントとソースコードの一貫性を保つことが容易</li>
<li>文書化されていないソースファイルから、 コードの構造を抽出するように設定可能</li>
<li>Doxygen を「乱用 (abuse)」して、 通常のドキュメントを作成可能</li>
</ul>


<p>では、早速使ってみることにしましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Doxygenの使い方</h5>

<p>まず、<a href="http://www.stack.nl/~dimitri/doxygen/download.html#srcbin">Doxygen公式サイト</a>からダウンロードしましょう。<br/>
PCへのインストールが完了すると、下記のウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/doxygen_1.png" alt="Doxygen.app" /></p>

<p>ドラッグ＆ドロップでApplicationに追加しましょう。</p>

<p>Doxygenを起動します。<br/>
すると下記のようなウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/doxygen_4.png" alt="Doxygenウィンドウ" /></p>

<p>各項目を下記のように指定しましょう。<br/>
<img src="http://grandbig.github.io/images/doxygen_3.png" alt="Doxygenウィンドウに各項目を指定" /></p>

<p>そして、Runをクリックしてタブを切り替えます。そして、Run doxygenをクリックします。<br/>
すると、Output produced by doxygenにログが出力されます。</p>

<p><img src="http://grandbig.github.io/images/doxygen_2.png" alt="ログを出力" /></p>

<p>完了したら、 <strong>Show HTML output</strong> をクリックしましょう。<br/>
ブラウザが起動して、リファレンスが表示されるはずです。</p>

<p><img src="http://grandbig.github.io/images/doxygen_5.png" alt="リファレンス" /></p>

<p>クラス間の関係性もわかるため、なかなか良い気がします。<br/>
appledocとほとんど書式も同じっぽいですし。<br/>
少しずつ慣れていこうと思います。<br/>
といったところで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-Cにおける継承とカテゴリ]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/inheritance-and-expansion/"/>
    <updated>2015-04-05T01:10:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/inheritance-and-expansion</id>
    <content type="html"><![CDATA[<h4>Objective-Cの継承とカテゴリについて</h4>

<p>さて、本日は今更ですが、Objective-Cの継承とカテゴリについて書きたいと思います。<br/>
理由は、最近、自分だけではなく、 <strong>『第三者が見てもわかりやすいクラス』</strong> を作ることを意識し始めたからです。<br/>
本当に今更ですね笑。</p>

<p>アジェンダは下記です。</p>

<ul>
<li>Objective-Cの継承</li>
<li>Objective-Cのカテゴリ</li>
<li>シングルトンパターンでの継承</li>
<li>シングルトンパターンのクラスを継承したクラスのカテゴリ</li>
</ul>


<p>では、早速見て行きましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Objective-Cの継承</h4>

<p>まずは、継承です。<br/>
初めに元となるクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sampleProperty</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleProperty</span> <span class="o">=</span> <span class="s">@&quot;これはsamplePropertyです&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sampleMethodを実行しました&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このSampleClassを継承したクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span> : <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample2Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにSampleClass2はSampleClassを継承しているので、sampleMethodを利用することができます。<br/>
このクラスをViewControllerで使う場合は下記のようにできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClass2の初期化</span>
</span><span class='line'>  <span class="n">SampleClass2</span> <span class="o">*</span><span class="n">sample2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample2</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// スーパークラスであるSampleClassのsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample2</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>元々あったクラスに新たなプロパティやメソッドを追加したクラスを作成した場合はこのようにやれば良いわけです。</p>

<h4>Objective-Cのカテゴリ</h4>

<p>続いて、カテゴリです。</p>

<p>SampleClassのカテゴリクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass3.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を見ると、継承と何が違うの？と思われるかもしれません。<br/>
実はカテゴリでは継承のようにプロパティの定義ができません。<br/>
基本的に元のクラスに新しいメソッドを追加したいときに使うもののようです。<br/>
<a href="http://ja.wikipedia.org/wiki/Objective-C">Wikipedia</a>にも書いてある通り、『ひとつのクラスの実装を関連するメソッド群毎に別々の場所に分割して記述することを可能とする目的で作られた』だそうです。</p>

<p>しかしながら、厳密にはプロパティも追加できます。<br/>
追加したい場合は下記のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample3Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass3.h&quot;</span>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">sample3Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValue:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">sample3Property</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">sample3Property</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、このカテゴリクラスをViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassの初期化</span>
</span><span class='line'>  <span class="n">SampleClass</span> <span class="o">*</span><span class="n">sample</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass3のsample3Methodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample</span> <span class="n">sample3Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>カテゴリは <strong>元のクラスに定義を追加した</strong> ものなので、上記ソースのように初期化するオブジェクトはあくまでも <strong>SampleClass</strong> であることに注意しましょう。</p>

<h4>シングルトンパターンでの継承</h4>

<p>シングルトンパターンでは、少し注意が必要です。<br/>
元のクラスをシングルトンパターンにしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sampleProperty</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SampleClass</span><span class="o">*</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleProperty</span> <span class="o">=</span> <span class="s">@&quot;これはsamplePropertyです&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sampleMethodを実行しました&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>SampleClassをシングルトンパターンにした上で、継承したSample2ClassをViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>実はこれだとうまくいきません。<br/>
どこがうまくいかないかというと、 <strong>SampleClass2で定義されたsample2Methodの実行</strong> の部分です。<br/>
これは <strong>SampleClassにsample2Methodは定義されていません</strong> といったエラーが表示されます。<br/>
そう、初期化されたのはあくまでもSampleClassであって、SampleClass2ではないため、上記のようなエラーが出るのです。</p>

<p>このエラーを防ぐためには、SampleClass2を下記のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span> : <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample2Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">SampleClass2</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass2</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SampleClass2</span><span class="o">*</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい。当たり前ですね。<br/>
正しく理解していないと悩むことになるのでご注意を！</p>

<h4>シングルトンパターンのクラスを継承したクラスのカテゴリ</h4>

<p>最後にややこしいことをしてみましょう笑。<br/>
先ほどのシングルトンパターンのクラスであるSampleClassを継承したSampleClass2のカテゴリであるSampleClass4を作成してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass4.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span><span class="nl">(SampleClass4)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample4Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;SampleClass4.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span><span class="nl">(SampleClass4)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample4Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">sample2Property</span> <span class="o">=</span> <span class="s">@&quot;SampleClass4オブジェクトのsample2Propertyプロパティ&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、ViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass4.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass4で定義されたsample4Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample4Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なかなかに頭を混乱させられましたが、なんとかできました笑。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでCROSSWALKを使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/crosswalk/"/>
    <updated>2015-03-28T13:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/crosswalk</id>
    <content type="html"><![CDATA[<h4>Androidでハイブリッドアプリを作ろう</h4>

<p>以前、iOSではiOS8からWKWebViewという新しいWebViewが追加されたことを説明しました。<br/>
では、Androidはどうなのでしょうか？</p>

<p>Androidは4.3までWebKitベースのWebViewをアプリに組み込んでいました。<br/>
しかし、Android4.4より、ChromiumベースのWebViewとなりました。ここで、大きく異なるのはレンダリングエンジンが <strong>Blink</strong> になったというところです。<br/>
また、Android4.4まではChromiumがバージョンアップされたとしても、各メーカーがAndroidのOSバージョンアップを提供しなければ、最新のWebViewを利用することができませんでした。</p>

<p>この現状を見たのかGoogleはAndroid5.0以降、WebViewをOSから切り離し、Google Play経由でバージョンアップ可能としました。<br/>
よって、メーカーがOSのバージョンアップをする/しないに関わらず、Google側の意志で最新のWebViewをユーザに提供可能となったのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>近年はAndroid2.xを使っているユーザもだいぶ減少してきました。<br/>
が、未だ、Android4.0〜4.3の端末を利用しているユーザは相当数、存在しています。<br/>
では、4.x〜5.0.xまでの端末全てに対応するハイブリットアプリを作成するためには、各バージョンに気をつけつつ、開発するしかないのでしょうか？</p>

<p>本記事では、 <strong>CROSSWALK</strong> に注目し、上記の問題に対応することとしました。</p>

<h4>CROSSWALKを組み込もう</h4>

<p>まずは、CROSSWALKのレポジトリを追加できるようにしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// build.gradle(Module: app)</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//download.01.org/crosswalk/releases/crosswalk/android/maven2&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">xwalk</span><span class="o">:</span><span class="nl">xwalk_core_library:</span><span class="mf">10.39</span><span class="o">.</span><span class="mf">235.15</span><span class="err">&#39;</span>        <span class="c1">// ここも追加</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、CROSSWALKのWebViewである <strong>XWalkView</strong> を画面に組み込みましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>// activity_main.xml
</span><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>  <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span> <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>  <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="na">android:paddingLeft=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingRight=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingTop=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingBottom=</span><span class="s">&quot;0dp&quot;</span> <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- XWalkViewを追加 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;org.xwalk.core.XWalkView</span>
</span><span class='line'>      <span class="na">android:id=</span><span class="s">&quot;@+id/xwalkWebView&quot;</span>
</span><span class='line'>      <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>      <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>      <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>      <span class="na">android:background=</span><span class="s">&quot;#000000&quot;</span>
</span><span class='line'>      <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、AndroidManifest.xmlにWebViewを使うための設定を書きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>// AndroidManifest.xml
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.example.takahiro.crosswalksample&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- 追加 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  ....
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、メイン画面にWebViewの設定を書き込みましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">crosswalksample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.ActionBarActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.xwalk.core.XWalkView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">XWalkView</span> <span class="n">mXWalkView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mXWalkView</span> <span class="o">=</span> <span class="o">(</span><span class="n">XWalkView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mXWalkView</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="s">&quot;https://www.google.co.jp&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">pauseTimers</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onHide</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">resumeTimers</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onShow</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでAndroid4.x 〜 5.xで同じChromiumベースのWebViewを利用することができるはずです。<br/>
といったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://diego.org/2015/01/07/embedding-crosswalk-in-android-studio/">Embedding Crosswalk in Android Studio</a></li>
<li><a href="https://crosswalk-project.org/documentation/embedding_crosswalk.html">Embedding the Crosswalk Project</a></li>
<li><a href="https://crosswalk-project.org/apis/embeddingapidocs_v3/org/xwalk/core/XWalkView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String">XWalkView Reference</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioを始めてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/start-android-studio/"/>
    <updated>2015-03-28T13:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/start-android-studio</id>
    <content type="html"><![CDATA[<h2>Android Studioとは</h2>

<p>Googleが2013年のGoogle I/Oで発表したAndroidアプリ開発に最適化した開発統合環境です。<br/>
iOSアプリ開発者であると、Macを使っている方がほとんどだと思うのですが、<br/>
もちろんMacにもインストール可能です。<br/>
Android Studioのインストールは<a href="http://developer.android.com/sdk/index.html">こちら</a>からできます。</p>

<p>この記事時点での最新版は1.2です。<br/>
では、早速、Android Studioを使ってみましょう。</p>

<h3>プログラミングまでの準備</h3>

<p>Android Studioを起動すると次のウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/android_studio_1.png" alt="Android Studioを起動" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>プロジェクトを新規作成する場合は、『Start a new Android Studio project』を選択します。<br/>
すると、Application Name, Company Nameを設定するウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_2.png" alt="プロジェクトの設定ウィンドウ" /></p>

<p>Nextを選択して、次に進むとAndroidアプリの対応バージョンを設定するウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_3.png" alt="Androidアプリのバージョンを設定するウィンドウ" /></p>

<p>Androidアプリのバージョンと一言で言っても、どのバージョンから対応させるべきか迷うこともあるでしょう。<br/>
そんなときは <strong>Help me choose</strong> を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/android_studio_4.png" alt="Androidアプリのバージョン確認ウィンドウ" /></p>

<p>今回は9割をカバーするために <strong>API 15</strong> で設定しました。<br/>
続いてNextを選択すると、初期GUI設定ウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_5.png" alt="GUI設定ウィンドウ" /></p>

<p>ここまで選択できたところで、プロジェクト作成ウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_6.png" alt="プロジェクト作成ウィンドウ" /></p>

<p>初めはヘルプウィンドウが表示されるので、Closeで閉じちゃいましょう。</p>

<p>Android Studioで各ソースを編集するために、左サイドバーにある <strong>1: Project</strong> を選択しましょう。<br/>
最終的に下記の画面が表示できれば準備完了です。</p>

<p><img src="http://grandbig.github.io/images/android_studio_7.png" alt="プロジェクト作成ウィンドウ" /></p>

<p>本記事はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Serverを使ったらMacがシステム終了しなくなった]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/15/login-error/"/>
    <updated>2015-03-15T23:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/15/login-error</id>
    <content type="html"><![CDATA[<h4>OS X ServerでXcodeの設定をしたら&hellip;</h4>

<p>さて、本日は、急遽、Macbook Proがシステム終了しなくなった件についてのメモです。<br/>
先日、OS X ServerのXcode周りの設定をいじっていました。<br/>
すると、下記の現象が発生するようになってしまいました。</p>

<ul>
<li>システム終了しようとすると、終了していないユーザがいるため、ユーザの切替を要求される</li>
<li>システム終了しようとしても、Macbook Proがうんともすんとも言わない</li>
</ul>


<!-- more -->


<p>これには困りました&hellip;。<br/>
が、下記のコマンドを実行してOS X ServerでのXcodeの設定をリセットしたところ、これまで通り、システム終了できるようになりました。</p>

<p><code>sudo xcrun xcscontrol --reset</code></p>

<p>OS X ServerでXcodeを設定する必要がないのであれば、上記コマンドでリセットしてしまって問題ないでしょう。<br/>
あ〜良かった。</p>

<p>参考:</p>

<ul>
<li><a href="http://blog.stuart.shelton.me/archives/2563">_xcsbuildd user preventing logout after running OS X Server</a></li>
<li><a href="https://devforums.apple.com/message/1053273#1053273">Apple Developper Forums</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでGoogle OAuth2認証をしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift/"/>
    <updated>2015-03-15T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift</id>
    <content type="html"><![CDATA[<h4>Swift版 OAuth2認証</h4>

<p>本日は<a href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/">iOSでGoogle OAuth認証がしたい</a>のSwift版を紹介したいと思います。<br/>
Google Play Consoleでの設定やGoogleから配布されているOAuth2認証に必要なソースのダウンロード方法については上記の記事に任せるとして、具体的なソース部分を紹介します。</p>

<p>では早速、Objective-CのソースをSwiftで書きなおしたものを下記に載せます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">auth:</span><span class="n">GTMOAuth2Authentication</span><span class="o">!</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">kKeychainItemName:</span><span class="n">NSString</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;GOAuthTest&quot;</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">scope:</span><span class="n">NSString</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/calendar&quot;</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">clientId:</span><span class="n">NSString</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;Googleから発行されたクライアントID&quot;</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">clientSecret:</span><span class="n">NSString</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;Googleから発行されたクライアントシークレット&quot;</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">hasLoggedIn:</span><span class="n">NSString</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;hasLoggedInKey&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidAppear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">startLogIn</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">startLogIn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">defaults:</span><span class="n">NSUserDefaults</span><span class="o">?</span> <span class="o">=</span> <span class="n">NSUserDefaults</span><span class="p">.</span><span class="n">standardUserDefaults</span><span class="p">()</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">hasLoggedInFlag:</span><span class="n">Bool</span><span class="o">!</span> <span class="o">=</span> <span class="n">defaults</span><span class="o">?</span><span class="p">.</span><span class="n">boolForKey</span><span class="p">(</span><span class="n">hasLoggedIn</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">hasLoggedInFlag</span> <span class="o">==</span> <span class="n">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 認証したことがある場合</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">auth</span> <span class="o">=</span> <span class="n">GTMOAuth2ViewControllerTouch</span><span class="p">.</span><span class="n">authForGoogleFromKeychainForName</span><span class="p">(</span><span class="s">&quot;Google&quot;</span><span class="p">,</span> <span class="nl">clientID:</span> <span class="n">clientId</span><span class="p">,</span> <span class="nl">clientSecret:</span> <span class="n">clientSecret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// アクセストークンの取得</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">authorizeRequest</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 認証したことがない場合</span>
</span><span class='line'>          <span class="n">var</span> <span class="nl">gvc:</span><span class="n">GTMOAuth2ViewControllerTouch</span><span class="o">!</span> <span class="o">=</span> <span class="n">GTMOAuth2ViewControllerTouch</span><span class="p">(</span><span class="nl">scope:</span> <span class="n">scope</span><span class="p">,</span> <span class="nl">clientID:</span> <span class="n">clientId</span><span class="p">,</span> <span class="nl">clientSecret:</span> <span class="n">clientSecret</span><span class="p">,</span> <span class="nl">keychainItemName:</span> <span class="s">&quot;Google&quot;</span><span class="p">,</span> <span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">finishedSelector:</span> <span class="s">&quot;viewController:finishedWithAuth:error:&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">gvc</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">viewController</span><span class="p">(</span><span class="nl">viewController:</span><span class="n">GTMOAuth2ViewControllerTouch</span><span class="o">!</span><span class="p">,</span> <span class="nl">finishedWithAuth:</span><span class="n">GTMOAuth2Authentication</span><span class="o">!</span><span class="p">,</span> <span class="nl">error:</span><span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 認証失敗</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 認証成功</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">auth</span> <span class="o">=</span> <span class="n">finishedWithAuth</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">defaults</span> <span class="o">=</span> <span class="n">NSUserDefaults</span><span class="p">.</span><span class="n">standardUserDefaults</span><span class="p">()</span>
</span><span class='line'>          <span class="n">defaults</span><span class="p">.</span><span class="n">setBool</span><span class="p">(</span><span class="n">true</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="n">hasLoggedIn</span><span class="p">)</span>
</span><span class='line'>          <span class="n">defaults</span><span class="p">.</span><span class="n">synchronize</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// アクセストークンの取得</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">authorizeRequest</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 認証画面を閉じる</span>
</span><span class='line'>      <span class="n">viewController</span><span class="p">.</span><span class="n">dismissViewControllerAnimated</span><span class="p">(</span><span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">authorizeRequest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">req:</span><span class="n">NSMutableURLRequest</span><span class="o">!</span> <span class="o">=</span> <span class="n">NSMutableURLRequest</span><span class="p">(</span><span class="nl">URL:</span> <span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">tokenURL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">authorizeRequest</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回のソースは<a href="https://github.com/grandbig/gtm-oauth2-swift">GitHub</a>にアップしています。<br/>
興味があればどしどし使ってみてください。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのモバイルチューニングの極意を読んで...]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/11/facebook-tuning/"/>
    <updated>2015-03-11T15:33:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/11/facebook-tuning</id>
    <content type="html"><![CDATA[<h4>発展途上国への提供を見据えたモバイルチューニング技術について</h4>

<p>さて、今回は少し趣向を変えた内容を書いてみようと思います。<br/>
以前の記事、<a href="http://grandbig.github.io/blog/2015/02/14/ios-allstars-study/">iOS オールスターズ勉強会に参加しました！</a>で通信のパフォーマンス改善の話を聞いたと書きました。<br/>
その話の中で紹介されていた、<a href="http://urx.nu/ijSD">Facebook が語るモバイル･チューニングの極意：これで途上国のインターネットも OK！</a>を読んでみて、それを自分なりにまとめてみましたので、載せたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まず、アメリカと発展途上国を比較して、3Gの普及率とレイテンシは下図のようになっているそうです。<br/>
<img src="http://grandbig.github.io/images/facebook_mobile_tuning_1.png" alt="3Gの普及率とレイテンシ" /></p>

<p>この世の中の現状に対して、Facebookアプリにダウンロードされるバイト数の大半の割合を <strong>画像</strong> が占めています。<br/>
Androidアプリで言うと、実にFacebookアプリが85%, メッセンジャーが65%の割合になるようです。</p>

<p>ということは、 <strong>イメージサイズを削減すれば</strong> 、高レイテンシなネットワークであったとしても、高品質なユーザ体験を提供することができると言えます。</p>

<p>では、イメージサイズを削減するにはどんな方法があるのでしょうか？</p>

<ul>
<li>クライアント側での画像のリサイズはNG(クライアント側で必要なサイズにサーバ側で事前に変換しておくこと)</li>
<li>ユーザに提供する画像はサムネイルと小さいプレビュー用のもので十分(ほとんどの欲求をカバーできる)</li>
<li>デバイスサイズよりも大きな画像を提供する必要はない</li>
</ul>


<p>これは当然と言えば、当然の話ですよね。</p>

<p>Facebookは特に工夫していることとして、 <strong>webp</strong> の活用を上げています。<br/>
<img src="http://grandbig.github.io/images/facebook_mobile_tuning_3.png" alt="webpのメリット" /></p>

<p>※詳しい、画像圧縮の方式については<a href="https://html5experts.jp/jxck/2550/">WebP – Webを速くするためにGoogleがやっていること </a>を参照してください。</p>

<p>また、Facebookはサーバから <strong>レスポンス時のHTTPヘッダー内でRTT(Round-Trip Time)</strong> を提供しています。<br/>
その中で、Facebookは通信品質を下記の4段階に区分けしています。</p>

<p><img src="http://grandbig.github.io/images/facebook_mobile_tuning_4.png" alt="通信品質の表" /></p>

<p>上記を見極めた上で、</p>

<ul>
<li>画像の圧縮比を増減</li>
<li>並列ネットワークリクエストの増減</li>
<li>ビデオ自動再生のON / OFF</li>
<li>コンテンツのプリフェッチ量の増減</li>
</ul>


<p>といった対応を取っているとのことです。</p>

<p>今回の件は、日本だけでなく、発展途上国へのサービスの提供を考えたときの参考になると感じました。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでWebSocket!]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/11/socketio-in-swift/"/>
    <updated>2015-03-11T14:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/11/socketio-in-swift</id>
    <content type="html"><![CDATA[<h4>socket.io公式クライアントソースを使ったサンプルの作成</h4>

<p>先日、公開された<a href="https://github.com/socketio/socket.io-client-swift">socket.io公式のクライアントソース</a>を使って、サンプルを作成したいと思います。<br/>
公式にも<a href="https://github.com/nuclearace/socket.io-client-swift-example">サンプルコード</a>は公開されているのですが、練習がてら試してみたいと思います。</p>

<p>因みに本件にはサーバ側の説明は特に書いていません。<br/>
下記、内容を試したい場合は<a href="https://github.com/grandbig/socket.io.web">GitHub: socket.io.web</a>からソースをダウンロードしてお使いください。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>プログラミング前の準備</h5>

<p>まずは、<a href="https://github.com/square/SocketRocket">SocketRocket</a>をダウンロードしてきましょう。<br/>
READMEに書かれている通り、SocketRocketフォルダごと、自身のフォルダにコピーします。</p>

<p>続いて、下記４つのFrameworkを追加しましょう。</p>

<ul>
<li>libicucore.dylib</li>
<li>CFNetwork.framework</li>
<li>Security.framework</li>
<li>Foundation.framework</li>
</ul>


<p>本プロジェクトはSwiftがベースであるため、このままだと、Objective-Cのクラスを読み込めません。<br/>
そこで、 <strong>Bridge-Header</strong> ファイルを作成する必要があります。</p>

<p>作成手順は下記です。</p>

<ol>
<li>プロジェクトを右クリックでAdd files to &ldquo;プロジェクト名&#8221;を選択</li>
<li>TARGETS > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Header に作成したBridge-Headerファイルを指定</li>
<li>作成したBridge-Headerファイルに利用したいObjective-Cファイルをimportする</li>
</ol>


<p>そして、socket.io公式のクライアントソースである <strong>SwiftIO</strong> を追加しましょう。</p>

<p>ここまでで準備完了です。<br/>
下記のようなプロジェクト構成になっていることを確認してください。</p>

<p><img src="http://grandbig.github.io/images/ws_swift_1.png" alt="プロジェクト構成" /></p>

<h5>プログラミング</h5>

<p>さて、ここからは本格的にプログラミングを書いていきます。<br/>
と言っても、今回作成するサンプルは<a href="http://socket.io/get-started/chat/">socket.io 公式HP > Get Started > Write a chat application</a>を途中まで作成する程度なので、少ししか書きません。</p>

<p>まずは、Storyboardにテキストフィールドとボタンを設置します。</p>

<p><img src="http://grandbig.github.io/images/ws_swift_2.png" alt="Storyboardの様子" /></p>

<p>続いて、StoryboardからViewController.swiftにリンク付けします。<br/>
その結果、下記の通りになります。<br/>
(ついでに後々必要となる部分も実装しています。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">UITextFieldDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Storyboardからのリンクづけ</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">msgField:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Delegateの設定</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">msgField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">textFieldShouldReturn</span><span class="p">(</span><span class="nl">textField:</span> <span class="n">UITextField</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// キーボードのreturnを押下するとキーボードが閉じる処理</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">msgField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">sendMessage</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Storyboardからのリンクづけ</span>
</span><span class='line'>      <span class="c1">// 後ほど記載</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、これでほぼ大詰めです。<br/>
WebSocket処理を書いてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">UITextFieldDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Storyboardからのリンクづけ</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">msgField:</span> <span class="n">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// クライアント側のSocketコネクションの準備</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">SocketIOClient</span><span class="p">(</span><span class="nl">socketURL:</span> <span class="s">&quot;localhost:3000&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Delegateの設定</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">msgField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// コネクションの接続</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">socket</span><span class="p">.</span><span class="n">connection</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">textFieldShouldReturn</span><span class="p">(</span><span class="nl">textField:</span> <span class="n">UITextField</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// キーボードのreturnを押下するとキーボードが閉じる処理</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">msgField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">sendMessage</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Storyboardからのリンクづけ</span>
</span><span class='line'>      <span class="c1">// テキストフィールド内の文字列をWebSocketで送る処理</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">msgField</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">socket</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="s">&quot;chat message&quot;</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい。これでクライアント側の実装終了です！<br/>
上記のソースは全て<a href="https://github.com/grandbig/socket.io.ios-swift">GitHub: socket.io.ios-swift</a>にアップしていますので、ご自由にご利用ください。</p>

<p>ということで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://socket.io/get-started/chat/">socket.io</a></li>
<li><a href="https://github.com/socketio/socket.io-client-swift">socketio/socket.io-client-swift</a></li>
<li><a href="http://qiita.com/n0bisuke/items/6dc990579b343475a635">SocketRocketでWebSocketを実装してみる</a></li>
<li><a href="http://mk.hatenablog.com/entry/2014/10/16/075841">SwiftからObjective-Cのライブラリ使う</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS オールスターズ勉強会に参加しました！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/14/ios-allstars-study/"/>
    <updated>2015-02-14T13:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/14/ios-allstars-study</id>
    <content type="html"><![CDATA[<h4>iOS オールスターズ勉強会</h4>

<p>本日、<a href="http://eventdots.jp/event/311301">iOSオールスターズ勉強会</a>に参加してきました。<br/>
iOSに特化した勉強会やイベントに参加するのは初めてでしたが、かなりいろいろと勉強になりました。<br/>
そして、まだまだ自分はヒヨッコだと痛感させられました。<br/>
まだまだ-1レベルの情弱プログラマーであることを再認識したところで、いつの日かこのブログを<strong>0から始める情弱プログラミング</strong>に変えてみせたいと思いつつ、勉強会で学んだことを報告したいと思います。</p>

<p>勉強会のテーマは下記の通りです。</p>

<ul>
<li>Adaptive Collection View</li>
<li>Swift製ライブラリの良い書き方を考える</li>
<li>let UIWebView as WKWebView</li>
<li>通信のパフォーマンス改善</li>
<li>効率的なアプリ開発のベストプラクティス</li>
<li>WatchKit を実際にさわってみてわかったこと</li>
<li>長生きするために心臓に悪いリリースはもうやめよう</li>
<li>エンジニア戦記 ~ 小さなチーム 大きな未来 ~</li>
<li>まだiOSでリッチな演出に疲弊してるの？</li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Adaptiva Collection View</h4>

<p><a href="https://speakerdeck.com/ishkawa/adaptive-collection-view">本日の資料</a><br/>
<a href="https://github.com/ishkawa">石川さんのGitHub</a>(近々、大きめのライブラリを公開予定とのこと)</p>

<p>下記はメモ</p>

<ul>
<li>iOS8でViewControllerが進化した</li>
<li>セルを並べてアイテムを表示する系のアプリではiPhone, iPadで実装を分けていた。

<ul>
<li>iPhoneはUITableViewを利用</li>
<li>UICollectionViewを利用</li>
</ul>
</li>
<li>UICollectionViewを使えば、iPhone, iPadで実装を分ける必要がなくなる

<ul>
<li>実装はUICollectionViewFlowLayoutを使えば、割りと簡単にできる</li>
<li>UICollectionViewLayoutAttributeをUITableViewに似せる</li>
<li><a href="https://github.com/ishkawa/sandbox">サンプルコード</a></li>
</ul>
</li>
<li>UICollectionViewを使うと、セルの計算がたいへんなのでは？

<ul>
<li>estimatedItemSizeを設定することで、Self Sizing Cellを利用できる(iOS8から)</li>
<li>NSLayoutConstraintを適切に配置するとセルの大きさを自動的に計算してくれる</li>
<li>iOS7はsystemLayoutSizeFittingSize:をitemSizeForIndexPath:で呼べばOK</li>
</ul>
</li>
</ul>


<p>因みに、この手法の優位性に気づいたのは、<br/>
営業: 『急ぎでiPhoneだけで良いので、この機能を実装してください』<br/>
↓<br/>
UICollectionViewを使って開発<br/>
↓<br/>
営業: 『iPad版も実装してくれてありがとうございます！』
↓<br/>
気づいたらiPad版もできていた</p>

<p>まとめ</p>

<ul>
<li>UITableViewはUICollectionViewである</li>
<li>iPhoneはiPadである</li>
<li>同じコードは２度書かない</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Cellの並び替え<br/>
A: UITableViewは元々実装されている。UICollectionViewは自分で頑張って実装することになる。<br/>
もしくは諦めてUITableViewを使う</p>

<h4>Swiftで使いやすいAPIを考える</h4>

<p><a href="https://speakerdeck.com/kishikawakatsumi/swiftderaiburariwoshu-kuji-falsepurakuteisu">本日の資料</a><br/>
<a href="https://github.com/kishikawakatsumi">岸川さんGitHub</a></p>

<p>下記はメモ</p>

<ul>
<li><p>Swift製ライブラリの良い書き方を考える</p>

<ul>
<li>人に使われるコードを書くときに、どうすれば良いか</li>
<li>enumが良いという話をすると長くなるので10分でできる話をする</li>
</ul>
</li>
<li><p>Objective-Cとの違い</p>

<ul>
<li>データ型, Optional, オーバーロード, デフォルト引数, メソッドチェーン, エラー処理などの違いがある</li>
</ul>
</li>
<li><p>データ型</p>

<ul>
<li>Class, Struct, Enum, Tuple, Function, Array, Dictionary, Set, Optionalなどがある</li>
<li>Optional型を指定すると、nilを許さない。コンパイル時にわかる(Objective-Cではnilは無視してできていた)</li>
<li>Optionalか否かは明確に設計した方が良い(Swiftは型に厳格な言語なので、明確にして使い方を固めた方が良い)</li>
<li>外に公開しているメソッドは引数にOptionalはつけない(プライベートメソッドはつけても良い)</li>
</ul>
</li>
<li><p>オーバーロード</p>

<ul>
<li>オーバーロードとは引数を変えた同じ名前のメソッドをたくさん用意すること</li>
<li>デフォルト引数は補完がイマイチ</li>
<li>ユーザがメソッドを書いたときに、先に引数の多いメソッドが補完で上がってくると良くない</li>
</ul>
</li>
<li><p>戻り値のオーバーロード</p>

<ul>
<li>戻り値のオーバーロード(NSString, NSData型でそれぞれ返却する場合)はコンパイルエラーが出るので、<code>var let:NSData? = ....</code>と型指定をする</li>
<li>これはリズムが悪いので、メソッド名を分けることにした</li>
</ul>
</li>
<li><p>エラー処理</p>

<ul>
<li>Objective-CならNSErrorのダブルポインタが一般的だけど、Swiftだと実装しにくい</li>
<li>SwiftではEither型を使う(Eitherをユーザが知らないと使えないけど)</li>
<li>自分で定義した型でエラーを返すより、NSErrorを返したほうが良い</li>
</ul>
</li>
<li><p>playground</p>

<ul>
<li>ドキュメントを書くのと一緒にplaygroundをつけてあげると、わかりやすくなって良い</li>
</ul>
</li>
<li><p>Functional style API</p>

<ul>
<li>アドバンストモードで用意すると良い</li>
<li>標準的な書き方と分けて示すと良いと思う</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Tupleで返すのは？<br/>
A: EitherでなくてTupleで返すのもあり。<br/>
Tupleで受けると、受けては使いづらい。<br/>
検討した結果、やめた。</p>

<h4>let UIWebView as WKWebView</h4>

<p><a href="http://www.slideshare.net/taketo1024/let-ui-webviewaswkwebview">本日の資料</a></p>

<ul>
<li><p>Swiftについて</p>

<ul>
<li>Swiftは数学と相性が良い</li>
</ul>
</li>
<li><p>UIWebVIewとWKWebViewについて</p>

<ul>
<li>UIWebViewはJavaScriptがSafariよりも遅い</li>
<li>WKWebViewはSafari並に速い</li>
<li>iOS7を切る訳にはいかない&hellip;</li>
<li>毎回、バージョンで条件分岐を書いて、処理を分けるのは美しくない&hellip;</li>
<li>複雑な処理は見えないところに置く方が良い(UIWebViewとWKWebViewのぶん機処理を隠蔽せよ)</li>
<li>iOS7と気持よく別れられるように対応しておくと良い</li>
<li><a href="http://techblog.yahoo.co.jp/ios/let-uiwebview-as-wkwebview/">去年のAdvent Calendar</a>にも載っている</li>
</ul>
</li>
</ul>


<p>個人的には参加前から最も注目していた内容でした。<br/>
WKWebViewは実装で使いたいと思っていたものの、現状、条件分岐が多くなりそうで使っていなかったのですが、これを機会に真似て実装したいと思いました。</p>

<p>【Q&amp;A】</p>

<p>Q: UIWebViewとWKWebViewにおけるDelegateメソッドはどうする？<br/>
A: Delegateはそのまま書いている。<br/>
iOS7をサポートしなくなったときにUIWebViewのDelegateの部分だけ消すことを考えている</p>

<p>Q: UIWebViewと揃えるのであればUIWebViewだけ使えば良いのでは？<br/>
A: WKWebViewの良い所は積極的に使っていきたい(処理が速いところとか)<br/>
iOS8ユーザには体験できる部分は体験してほしいと思っている。</p>

<h4>通信のパフォーマンス改善</h4>

<p><a href="http://www.slideshare.net/susieyy/ios-ios-44665266?ref=http://eventdots.jp/event/311301">本日の資料</a><br/>
<a href="https://github.com/wantedly">wantedlyさんのGItHub</a></p>

<p>下記メモ</p>

<ul>
<li><p>そもそも通信のパフォーマンス改善に取り組んだ理由</p>

<ul>
<li>海外進出する上で通信品質の違いに耐えうるか調べる必要があった</li>
<li>海外の通信品質が悪いので、それに耐えうるパフォーマンス改善に取り組んだ</li>
</ul>
</li>
<li><p>ボトルネックを調べた</p>

<ul>
<li>New Relic Mobileでボトルネックを分析した。(大雑把なボトルネック解析には十分)</li>
<li>Pony Debuggerでもっと細かく分析できるものがあった</li>
</ul>
</li>
<li><p><a href="https://github.com/square/PonyDebugger">Pony Debugger</a>の使い方</p>

<ul>
<li>CocoaPodsでiOSアプリ側にいれる。</li>
<li>サーバ側にもモジュールのインストールが必要。中身はPythonでできている</li>
</ul>
</li>
<li><p>ボトルネック調査の結果</p>

<ul>
<li>画像にボトルネックがあった</li>
<li>画像の処理に関して<a href="https://github.com/rs/SDWebImage">SDWebImage</a>を使っていた</li>
<li>まずは、SDWebImageの仕組みから知る必要がある</li>
<li>SDWebImageのバグを発見して、PullRequestを出したらマージされた</li>
<li><a href="http://agilecatcloud.com/2014/12/02/facebook-%E3%81%8C%E8%AA%9E%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%EF%BD%A5%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E6%A5%B5%E6%84%8F%EF%BC%9A%E3%81%93%E3%82%8C%E3%81%A7/">Facebookの発展途上国向けの改善施策</a>がネット上に載っていた</li>
</ul>
</li>
<li><p>WebP</p>

<ul>
<li>WebPとはGoogle製のフォーマット(1/3程度のサイズに抑えられる)</li>
<li>SDWebImageはWebPに対応している</li>
<li>wantedlyではサーバはAWSを使っている</li>
<li>WebPに変換する画像サーバを構成するのがたいへんだった</li>
<li><a href="https://github.com/wantedly/nginx-image-server">NginxでWebPに変換するものをGitHubにあげている</a></li>
</ul>
</li>
<li><p>具体的な施策</p>

<ul>
<li>通信帯域により取得する画像サイズを変更する</li>
<li>通信品質は『通信開始・終了の経過時間と受領画像サイズ』から推測</li>
<li>キャッシュ時は計測しない</li>
<li>独自にキャッシュ上に取りに行こうとする画像のサイズよりも大きい物がないか確認するようにしている</li>
<li>実装の可否はデベロッパの通信帯域制限機能で改善結果を確認した</li>
</ul>
</li>
<li><p>他に考えられる対策</p>

<ul>
<li>MessagePackでJSONを圧縮する</li>
<li>SPDYで通信コネクションをまとめる</li>
<li>通信帯域で同時接続数を調整する</li>
</ul>
</li>
</ul>


<h4>効率的なアプリ開発のベストプラクティス</h4>

<p><a href="http://www.slideshare.net/yayugu/ss-44667286">本日の資料</a></p>

<ul>
<li><p>iOSの一大イベントがここ2年連続で実施されている</p>

<ul>
<li>Conference with Developers</li>
</ul>
</li>
<li><p>効率的な開発の必要性</p>

<ul>
<li>メインでない機能を創るときはできる限り効率的に開発したい</li>
</ul>
</li>
<li><p>どうすれば速く開発できるのか</p>

<ul>
<li>やることを減らす</li>
<li>UI, 通信の実装コストを減らす</li>
</ul>
</li>
<li><p>UIの実装コスト</p>

<ul>
<li>端末の性能向上, Auto Layout, Storyboard, Self Sizing Cell</li>
<li>Self Sizing Cellが便利なので、ユーザはiOS8を使って欲しいのが本音</li>
<li>改善の余地としては、React.jsみたいなアプローチ(Viewのdiff &amp; patch)があると良さそう</li>
</ul>
</li>
<li><p>通信の実装コスト</p>

<ul>
<li>仕様に依存。サーバ側が決める。</li>
<li>どちらでも行える処理であれば、サーバ側に処理を任せる。</li>
</ul>
</li>
<li><p>API</p>

<ul>
<li>共通化、RESTにとらわれない</li>
<li>Mantle, JSONModelライブラリの都合に合わせた形で返して欲しい</li>
</ul>
</li>
<li><p>State</p>

<ul>
<li>クライアント側でCacheを持たない</li>
<li>ローカルストアを利用してサーバ側とのdiffがあれば取得しにいく処理はしない</li>
</ul>
</li>
<li><p>サーバ側仕様変更による弊害</p>

<ul>
<li>キレイなRESTful API

<ul>
<li>特化したAPIの作成は断られる。</li>
</ul>
</li>
<li>レガシーサーバ

<ul>
<li>触るのが怖い</li>
<li>リファクタリングするとデグレそう</li>
</ul>
</li>
</ul>
</li>
<li><p>サーバ側担当者の説得の仕方</p>

<ul>
<li>パフォーマンスの向上などメリットを説明</li>
<li>クライアント側の実装の大変さをうったえかける</li>
<li>サーバ側も自分で書く</li>
</ul>
</li>
<li><p>間を取る方法として、中継サーバをたてることも考えられる</p>

<ul>
<li>効率的でないので、やりたくない</li>
<li>中継サーバの処理はClient開発者が書く</li>
<li>ドワンゴはスカラーでProxy Serverを作っていたらしい</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: サーバ側にどこまで処理を任せているかの線引はあるか<br/>
A: ユーザ体験があがるか、重要な機能かの２つによる<br/>
twitterのツイートはオフラインで見れる ⇒ 意味がある<br/>
設定画面がオンラインでないと見れない ⇒ それで良いのでは？</p>

<h4>WatchKitを実際にさわってみてわかったこと</h4>

<p><a href="http://www.slideshare.net/t26v0748/watch-kit-20150214?ref=http://eventdots.jp/event/311301">本日の資料</a><br/>
<a href="https://github.com/shu223">堤さんのGitHub</a></p>

<ul>
<li><p>自己紹介</p>

<ul>
<li>Over&amp;Out その後: ブログを書いている</li>
<li>iOS7-Sampler, iOS8-Samplerを作っている</li>
<li>iOS9-Samplerのアイコンは作成済み</li>
</ul>
</li>
<li><p>WatchKitについて</p>

<ul>
<li>WatchKitはクラスはたったの15個</li>
<li>Watch ExtensionはiPhone側で実行</li>
<li>Watch Appは基本的に表示だけ</li>
</ul>
</li>
<li><p>動的なイメージの表示</p>

<ul>
<li>タイマーを利用する

<ul>
<li>転送か描画が遅い？ ⇒ 非推奨</li>
</ul>
</li>
<li>キャッシュを使う

<ul>
<li>フレームごとの画像はキャッシュしないようにプログラミングガイドに書いてある</li>
</ul>
</li>
<li>Animated Imageを利用する

<ul>
<li>iOS5から追加されているメソッドが役に立つ</li>
</ul>
</li>
</ul>
</li>
<li><p>テキスト入力</p>

<ul>
<li>presentTextInputControllerWith~を使えば良い

<ul>
<li>テキスト入力のインターフェースを表示するメソッド</li>
</ul>
</li>
</ul>
</li>
<li><p>Smart Replies + 音声入力</p>

<ul>
<li>第一引数にフレーズの履いてる, 第二引数に.Plainを渡す</li>
</ul>
</li>
<li><p>絵文字入力</p>

<ul>
<li>第二引数: .allowEmojiを渡せば良い</li>
<li>シミュレータでは提供されていない</li>
</ul>
</li>
<li><p>カスタムUI</p>

<ul>
<li>WatchKit AppではCore Graphics使えない</li>
<li>Appleの公式を見ると、連番アニメーションだった。</li>
</ul>
</li>
<li><p>カスタムフォント</p>

<ul>
<li>iOSと同様の手順で可能</li>
</ul>
</li>
<li><p>インターフェースのオーバレイ</p>

<ul>
<li>WKInterfaceObjectはUIViewのsubview的にインターフェース同士を重ねられない</li>
<li>WKInterfaceGroupのsetBackgroundImage:を活用すればできる</li>
</ul>
</li>
<li><p>originの調整</p>

<ul>
<li>WKInterfaceGroupを活用(ダミーオブジェクト入れて、グループ化)</li>
</ul>
</li>
<li><p>角丸、Watchの画面サイズ分け対応などなど</p></li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: 手軽にアニメーションするには？<br/>
A: <a href="https://github.com/frosty/Flipbook">Flipbook</a>というOSSがある<br/>
デザイナーが作成したものをアプリに入れるなら、動画としてもらう。<br/>
Flashを使っていた人と仕事をしていたときは連番画像を吐き出してもらっていた</p>

<p>Q: Apple Watchで画像の表示について<br/>
A: AnimatedImageのオブジェクトの生成はiOS側でやるので問題ない<br/>
AnimatedImageをWatch側でレンダリングするのは重い？⇒シミュレータでは問題なかった</p>

<h4>長生きするための心臓に悪いリリースはもうやめよう</h4>

<p><a href="https://speakerdeck.com/tokorom/chang-sheng-kisurutamenixin-zang-nie-iririsuhamouyameyou">本日の資料</a></p>

<ul>
<li><p>アプリの申請について</p>

<ul>
<li>バグが見つかって、月々の課金処理に失敗したとしたら&hellip;.非常に怖い</li>
<li>Internal Testersでの最終チェックすると良い</li>
</ul>
</li>
<li><p>テストの質</p>

<ul>
<li>AppStoreに公開されるものと同じ / 違うアプリのテストなのかどうか</li>
<li>Appleの審査の前後のテストなのかどうか</li>
</ul>
</li>
<li><p>Internal Testers</p>

<ul>
<li>iTunes Connectの新機能</li>
<li>iTunes Connectにサブミットしたアプリをテスト可能</li>
<li>iOS8以降でしか使えない</li>
<li>25人までしか使えない</li>
</ul>
</li>
<li><p>Internal Testers vs CI</p>

<ul>
<li>両方使いましょう(比べるものではない)</li>
</ul>
</li>
<li><p>CIの自動化</p>

<ul>
<li><a href="http://kishikawakatsumi.hatenablog.com/entry/20141022/1413963656">Travis CIでiOSアプリのリリース作業を自動化する</a>という記事が良い</li>
</ul>
</li>
<li><p>万が一の事故に対して&hellip;</p>

<ul>
<li>後から見返せない情報をバックアップしておく

<ul>
<li>Build Details: バージョンが進むと過去のバージョンの情報が見れなくなる。スクショをとっておくと良い。</li>
</ul>
</li>
<li>過去のバージョンのアプリをとっておく

<ul>
<li>iTunesで実際に公開されたアプリをipaで持っておく</li>
<li>それをバージョン毎に保管しておくと良い</li>
<li>コードを見たいのであれば、Gitで良いが、そうでないときもある。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Internal Testers使うと課金できるのか？<br/>
A:実際に購入ができるわけではない。たぶんsandboxに繋がっていると思う。<br/>
厳密に言うと、課金テストはプロモーションコードでテストするしかない。</p>

<p>Q: 自分でリジェクトしてサブミットし直すと速い気がする<br/>
A: 体感的に速く感じることがある。</p>

<h4>エンジニア戦記 ~小さなチーム 大きな未来 ~</h4>

<p><a href="http://www.slideshare.net/yukihirai52/ss-44668339?ref=http://eventdots.jp/event/311301">本日の資料</a></p>

<ul>
<li><p>クラスメソッド</p>

<ul>
<li>Developers.IOを書いている。</li>
<li>月間平均80万PV</li>
<li>ブログを書いている会社だと思われがち</li>
</ul>
</li>
<li><p>iOSエンジニアとWeb-API担当者間で発生した問題</p>

<ul>
<li>APIの返却データにステータスコードが入っている(HTTPステータスコードとは別に)

<ul>
<li>HTTPステータスコードで返すべき</li>
<li>Web APIのレスポンスに独自ステータスコードを持つべきではない</li>
<li>アプリ側でsuccessなのに、エラーハンドリングをしなくてはならない。</li>
</ul>
</li>
<li>1画面で叩くAPIが多い

<ul>
<li>RESTful APIをしたいがために上記のようなことが生じる</li>
<li>複数回APIを実行することで、エラーが発生しやすくなる</li>
</ul>
</li>
</ul>
</li>
<li><p>iOSエンジニアに求められるもの</p>

<ul>
<li>Web APIの知識は必須</li>
<li>改善案を提案できる力が必要</li>
<li><a href="http://www.oreilly.co.jp/books/9784873116860/">Web API The Good Parts</a>を読もう</li>
</ul>
</li>
</ul>


<p>身に染みる話ばかりで考えさせられるテーマでした。<br/>
筆者はクライアント担当としてネイティブとWebの経験があり、サーバ担当としてAPサーバ開発の経験があるので、どっちが良いとは言い難く&hellip;。</p>

<h4>まだiOSでリッチな演出に疲弊しているの？</h4>

<p><a href="https://speakerdeck.com/ryusukefuda/madaiosderitutinayan-chu-nipi-bi-siterufalse">本日の資料</a></p>

<ul>
<li><p>カヤック自社開発アプリ</p>

<ul>
<li>FILTERS</li>
<li>ダンボッコキッチン</li>
</ul>
</li>
<li><p>リッチな演出で何を使う？</p>

<ul>
<li>Core Animation: コードが大量になる。大量オブジェクトを動かすとたいへん</li>
<li>Unity: ネイティブの機能を使うのにプラグインを書くのでたいへん</li>
<li>Cocos2d: Unityと同じ</li>
<li>OSS: いいものが見つからない</li>
</ul>
</li>
<li><p>SpriteKitが良いのでは？</p>

<ul>
<li>iOS7から追加された2Dゲーム用のフレームワーク</li>
<li>パーティクルがXcodeでプレビューしながら編集可能</li>
<li>UIKitと同様に記述できる</li>
<li>SpriteKitがゲーム以外で使えるのか? ⇒ 使える</li>
<li>SKNode, SKScene, SKViewを使う</li>
<li>GUIでパラメータを簡単にいじることで演出を変えられる(コードを書く必要がない)</li>
<li>パーティクル自体にアニメーションをつけることもできる</li>
<li>UIViewのタッチイベントが効くようにするために、SKViewを透明かつタッチイベントを無効化する</li>
<li><a href="https://github.com/ryusukefuda/SpriteKit-Demo">サンプルコード</a></li>
</ul>
</li>
<li><p>SpriteKitを使うメリット</p>

<ul>
<li>Appleが提供している安心感</li>
<li>既存のコードを邪魔することなく導入可能</li>
<li>デザイナーも利用可能</li>
</ul>
</li>
</ul>


<p>SpriteKitとUIKitを組合せた演出はありであるという結論に至っていました。</p>

<p>【Q&amp;A】</p>

<p>Q: SpriteKitを使った理由<br/>
A: マップとかカメラとの組合せを考えると、SpriteKitを選択した。<br/>
3Dの演出をする場合はUnity一択になる。</p>

<p>Q: パーティクルは重くないか？<br/>
A: 重い。シミュレータだとカクついたりする。<br/>
表示する場所を絞る。(SKViewの大きさを小さくするなど)</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking2.xでWeb-APIを叩いてみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/12/afnetworking/"/>
    <updated>2015-02-12T00:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/12/afnetworking</id>
    <content type="html"><![CDATA[<h3>AFNetworking2.x</h3>

<p>さて、本日は今更ながら超有名ライブラリである <strong>AFNetworking</strong> を使ってみたいと思います。<br/>
ただ、単に使い方を説明するのであれば、他のサイトにお任せすれば良いので、Web-APIを使ってみる形で書きたいと思います。</p>

<p>今回は、<br/>
GETリクエスト: <strong>OpenWeatherMap API</strong><br/>
POSTリクエスト: <strong>VoiceText Web API</strong><br/>
を試してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>　</p>

<p><strong>AFNetworking</strong> を使うためにはCocoaPodsでライブラリをインストールして、<br/>
ViewController.mで<code>#import "AFNetworking.h"</code>を書きましょう。</p>

<p>まずは、OpenWeatherMap APIを使って、GETリクエストを投げてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;AFNetworking.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'>  <span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// OpenWeatherMap APIを利用</span>
</span><span class='line'>  <span class="p">[</span><span class="n">manager</span> <span class="nl">GET:</span><span class="s">@&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span>
</span><span class='line'>    <span class="nl">parameters:</span><span class="nb">nil</span>
</span><span class='line'>       <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;response: %@&quot;</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>きちんと値が返ってきました。</p>

<p>続いて、<a href="https://cloud.voicetext.jp/webapi">VoiceText Web API</a>を使って、POSTリクエストを投げてみました。<br/>
VoiceText Web APIは無料利用に登録が必要なので、さくっと登録しましょう。<br/>
すぐに登録したメールにAPIキーが来ます。<br/>
これを使って、POSTリクエストを投げてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;AFNetworking.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'>  <span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// APIキーをセット</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">apiKey</span> <span class="o">=</span> <span class="s">@&quot;&lt;メールで届いたAPIキー&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">manager</span><span class="p">.</span><span class="n">requestSerializer</span> <span class="nl">setAuthorizationHeaderFieldWithUsername:</span><span class="n">apiKey</span> <span class="nl">password:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// リクエストパラメータをセット</span>
</span><span class='line'>  <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;おはようございます。&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">params</span> <span class="nl">setObject:</span><span class="n">text</span> <span class="nl">forKey:</span><span class="s">@&quot;text&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">params</span> <span class="nl">setObject:</span><span class="s">@&quot;show&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;speaker&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">params</span> <span class="nl">setObject:</span><span class="s">@&quot;ogg&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;format&quot;</span><span class="p">];]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Content-Typeをセット</span>
</span><span class='line'>  <span class="p">[</span><span class="n">manager</span> <span class="nl">setResponseSerializer:</span><span class="p">[</span><span class="n">AFHTTPResponseSerializer</span> <span class="n">serializer</span><span class="p">]];</span>
</span><span class='line'>  <span class="n">manager</span><span class="p">.</span><span class="n">responseSerializer</span><span class="p">.</span><span class="n">acceptableContentTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObject:</span><span class="s">@&quot;audio/ogg&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// OpenWeatherMap APIを利用</span>
</span><span class='line'>  <span class="p">[</span><span class="n">manager</span> <span class="nl">POST:</span><span class="s">@&quot;https://api.voicetext.jp/v1/tts&quot;</span>
</span><span class='line'>     <span class="nl">parameters:</span><span class="n">params</span>
</span><span class='line'>        <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;response: %@&quot;</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意点は下記です。</p>

<ul>
<li>APIキーの設定
VoiceText Web APIではAPIキーを利用する必要があるので、<code>requestSerializer</code>の<code>authorization</code>にユーザネームとしてAPIキーを設定しましょう。</li>
<li><code>Content-Type</code>の設定
<code>audio/ogg</code>でレスポンスを受け取る必要があるので、<code>responseSerializer</code>を設定しましょう。</li>
</ul>


<p>あとは通常の<code>NSURLSession</code>や<code>NSURLConnection</code>のPOSTリクエストと同様にリクエストパラメータをセットすれば良いのです。
正しく値が返ってきますね。</p>

<p>AFNetworkingの良いところはエラーでも値が返ってくるところでしょうか。<br/>
<code>Content-Type</code>が対応していないので<code>success</code>を通らないということが一目瞭然でした。</p>

<p>今後は、この便利なライブラリを積極的に使っていこうかと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRの発信パラメータをiOSアプリで変更してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/11/bl600sample3/"/>
    <updated>2015-02-11T14:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/11/bl600sample3</id>
    <content type="html"><![CDATA[<h4>REBL600FRのパラメータ値を変更</h4>

<p><a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>はREBL600FRの検知＆パラメータ値の読込みまでやってみました。<br/>
今日はREBL600FRが発信するパラメータ値をiOSアプリから変更してみます。</p>

<p>まず、UIButtonをタップしたときにmajorの値を固定値に変更するメソッドを作成してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="c1">// 書き込みテスト用のメソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">writeDataTestMethod:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ① majorの値を4661に設定</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">writeInt</span> <span class="o">=</span> <span class="mi">4661</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// ② 10進数を16進数に変換して文字列にする</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">witeString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%lX&quot;</span><span class="p">,(</span><span class="kt">long</span><span class="p">)</span><span class="n">writeInt</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// ③ 16進数のNSString型をNSData型に変換する処理</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">writeData</span> <span class="o">=</span> <span class="p">[</span><span class="n">witeString</span> <span class="n">dataFromHexString</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;writeData: %@&quot;</span><span class="p">,</span> <span class="n">writeData</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// ④ データの書込み処理</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">connectedPeripheral</span> <span class="nl">writeValue:</span><span class="n">writeData</span> <span class="nl">forCharacteristic:</span><span class="n">self</span><span class="p">.</span><span class="n">majorChar</span> <span class="nl">type:</span><span class="n">CBCharacteristicWriteWithResponse</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>上記メソッドの説明をします。<br/>
まず、majorの値を4661に変更したいとします。</p>

<p>【処理の順番】<br/>
① ユーザが入力する際には当然、10進数の値で考えると思うので、初めの入力値は <strong>10進数</strong> の4661とします。<br/>
② 次にREBL600FRが理解できるように16進数に変換する必要があります。<br/>
『NSInteger型かつ10進数』で表された4661を『NSString型かつ16進数』の値に変換します。<br/>
③ 書換えたい値をREBL600FRに送るためにNSData型に変換します。<br/>
④ 書込みたいデータが用意できたので、書込み処理を実行します。<br/>
<code>self.majorChar</code>には予め、major値のキャラクタリスティックを保持しています。</p>

<p>さて、③と④の処理について説明が不十分なので、説明します。<br/>
③ですが、NSString型のクラスを拡張し、 <strong>16進数のNSString型をNSData型に変換する</strong> メソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// NSString+Conversion.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">NSString</span> <span class="nl">(NSString_Conversion)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Data Conversion</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">dataFromHexString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// NSString+Conversion.m</span>
</span><span class='line'><span class="cp">#import &quot;NSString+Conversion.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="nl">(NSString_Conversion)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Data Conversion</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">dataFromHexString</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">chars</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableData</span> <span class="nl">dataWithCapacity:</span><span class="n">len</span> <span class="o">/</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">byteChars</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;\0&#39;</span><span class="p">,</span><span class="sc">&#39;\0&#39;</span><span class="p">,</span><span class="sc">&#39;\0&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">wholeByte</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">byteChars</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>      <span class="n">byteChars</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>      <span class="n">wholeByte</span> <span class="o">=</span> <span class="n">strtoul</span><span class="p">(</span><span class="n">byteChars</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>      <span class="p">[</span><span class="n">data</span> <span class="nl">appendBytes:</span><span class="o">&amp;</span><span class="n">wholeByte</span> <span class="nl">length:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、④について説明します。<br/>
<code>self.majorChar</code>にmajor値のキャラクタリステックを保持するために、<a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>の記事で説明した処理を少し書換えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="c1">// Characteristicesが見つかったときに呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didDiscoverCharacteristicsForService:</span><span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="p">)</span><span class="nv">service</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="n">characteristic</span> <span class="k">in</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// キャラクタリステックのUUID値を取得</span>
</span><span class='line'>      <span class="n">CBUUID</span> <span class="o">*</span><span class="n">uuid</span> <span class="o">=</span> <span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">uuid</span><span class="p">];]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">([</span><span class="n">uuidString</span> <span class="nl">isEqual:</span><span class="s">@&quot;569A2013-B87F-490C-92CB-11BA5EA5167C&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// major値の場合はCharacteristicをメモリに保持</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">majorChar</span> <span class="o">=</span> <span class="n">characteristic</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 値が変わったときに通知を受けたい場合に実行</span>
</span><span class='line'>      <span class="p">[</span><span class="n">peripheral</span> <span class="nl">setNotifyValue:</span><span class="n">YES</span> <span class="nl">forCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// キャラクタリステックのvalueを知りたい場合に実行</span>
</span><span class='line'>      <span class="p">[</span><span class="n">peripheral</span> <span class="nl">readValueForCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記処理のタイミングで<code>self.majorChar</code>をメモリに保持できるので、<code>writeValue</code>メソッドの引数として指定できます。<br/>
さて、<code>writeValue</code>メソッドを実行したときにエラーが発生する可能性があるので、下記メソッドを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Characteristicの書き込み処理が完了した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didWriteValueForCharacteristic:</span><span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="p">)</span><span class="nv">characteristic</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上の処理を実装した上でUIButtonを押して、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使って確認してみると、確かに値が変更されていることがわかります。</p>

<p>これまでのソースは<a href="https://github.com/grandbig/REBL600FR-Central">GitHub</a>にアップしてありますので、興味がある方はご自由にお使いください。</p>

<p>参考:<br/>
<a href="http://tyashushi.blogspot.jp/2012/09/1016.html">10進数と16進数の変換</a><br/>
<a href="http://stackoverflow.com/questions/2501033/nsstring-hex-to-bytes">NSString hex to bytes</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRを検知するiOSアプリを開発してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/"/>
    <updated>2015-02-08T21:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/08/bl600sample2</id>
    <content type="html"><![CDATA[<h4>REBL600FRを検知</h4>

<p>引き続き、REBL600FRを用いて遊んでみたいと思います。<br/>
前回の<a href="http://grandbig.github.io/blog/2015/02/07/bl600sample/">REBL600FRをiBeaconとして検知してみた！</a>では既存のアプリを拝借してREBL600FRを検知していました。<br/>
今回はそこを自作してみたいと思います。</p>

<p>そのためにCoreBluetooth.frameworkを使います。<br/>
まずは、REBL600FRの発信するBLEを検知してみましょう。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.mファイル</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="n">CBCentralManagerDelegate</span><span class="p">,</span> <span class="n">CBPeripheralDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CBCentralManager</span> <span class="o">*</span><span class="n">cm</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CBPeripheral</span> <span class="o">*</span><span class="n">connectedPeripheral</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1: CBCentralManagerの初期化</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="o">=</span> <span class="p">[</span><span class="n">CBCentralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span> <span class="nl">queue:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - CBCentralManagerDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManagerDidUpdateState:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">CBCentralManagerStatePoweredOn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Centralとして機能可能な場合</span>
</span><span class='line'>      <span class="c1">// 2: Peripheralのスキャンを開始</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="nl">scanForPeripheralsWithServices:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ソースの説明をします。<br/>
1でCBCentralManagerを初期化すると、centralManagerDidUpdateStateメソッドが呼び出されます。<br/>
そこで、Centralとして機能する(BluetoothがONで正常である)場合に限り、scanForPeripheralsWithServicesメソッドを実行することでPeripheralのスキャンを開始します。</p>

<p>今回は、<code>scanForPeripheralsWithServices</code>の<code>serviceUUIDs</code>と<code>options</code>をnilにしています。<br/>
もし、あらかじめスキャンしたいBLEのUUIDが決まっているのであれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">services</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="s">@&quot;C6D0F826-CCBA-4738-97CE-81491F748039&quot;</span><span class="p">],</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>といったように指定してあげましょう。<br/>
※ nilの指定は非推奨とされています。</p>

<p>また、optionsには<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>と<code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>を指定可能となっています。<br/>
<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>を明示的指定しない場合はデフォルトNOと判断されます。<br/>
YESにした場合、Peripheralからアドバタイズパケットを受信する度にペリフェラル発見通知が実行されます。</p>

<p><code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>にはスキャンしたいUUIDの配列を指定できます。<br/>
servicesで既に指定しているので、実際のところ何が違うのでしょうか&hellip;。</p>

<p>続いての実装です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManagerDidUpdateState:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didDiscoverPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">advertisementData:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertisementData</span> <span class="nf">RSSI:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">RSSI</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">RSSI</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">advertisementData</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>scanForPeripheralsWithServices</code>実行後にPeripheralを発見した場合、<code>didDiscoverPeripheral</code>メソッドが呼び出されます。<br/>
このメソッドでは、<code>advertisementData</code>と<code>RSSI</code>の値を取得できます。</p>

<p>では、実際に取得できる値を見てみましょう。<br/>
<code>scanForPeripheralsWithServices</code>が実行された後に、REBL600FRのスイッチをONにします。</p>

<p><img src="http://grandbig.github.io/images/REBL600FR_3.jpg" alt="REBL600FRのスイッチをONにしましょう。" /></p>

<p>すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">RSSI</span> <span class="o">=</span> <span class="o">-</span><span class="mi">94</span>
</span><span class='line'>
</span><span class='line'><span class="n">advertisementData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">kCBAdvDataChannel</span> <span class="o">=</span> <span class="mi">37</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCBAdvDataIsConnectable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCBAdvDataLocalName</span> <span class="o">=</span> <span class="s">&quot;Laird iBeacon&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と値を取得できました。<br/>
<code>kCBAdvDataChannel</code>はBLEデバイスの発見と接続に利用するアドバタイズメントチャネルのことで、<code>kCBAdvDataIsConnectable</code>は接続可能なPeripheralかどうか判別する値(1であれば接続可)で、<code>kCBAdvDataLocalName</code>はPeripheralの名前のことです。</p>

<p>Appleの<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys">CBCentralManagerDelegate Protocol Reference</a>を見ると、advertisementDataには他にも取得可能な値が入っていることがあるようです。</p>

<h4>REBL600FRに接続</h4>

<p>次に、先ほど発見することができたREBL600FRに接続してみたいと思います。<br/>
<code>didDiscoverPeripheral</code>が実行されたときに検知したperipheralに接続するようにしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didDiscoverPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">advertisementData:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertisementData</span> <span class="nf">RSSI:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">RSSI</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">RSSI</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">advertisementData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">connectedPeripheral</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">connectedPeripheral</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Peripheralへの接続処理</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="nl">connectPeripheral:</span><span class="n">self</span><span class="p">.</span><span class="n">connectedPeripheral</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>connectPeripheral</code>メソッドで接続したいPeripheralに接続することができます。<br/>
このとき<code>options</code>には<code>CBConnectPeripheralOptionNotifyOnConnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnDisconnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnNotificationKey</code>の3種類のいずれかを指定可能です。<br/>
それぞれ、Peripheralと接続, Peripherlと切断, PeripheralからNotificationを受信した場合にアラートを表示したい場合に指定します。</p>

<p>接続が確立された場合に<code>centralManager:didConnectPeripheral:</code>メソッドが呼び出されます。<br/>
この中で、Peripheralが提供するサービスを検索する処理を書いてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Peripheralと接続できた場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didConnectPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// スキャンの停止</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="n">stopScan</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Peripheralのサービスを検索</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">connectedPeripheral</span> <span class="nl">discoverServices:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>電池の消耗を防ぐために、接続が確立された後はPeripheralのスキャンを停止します。<br/>
<code>discoverServices</code>メソッドでPeripheralのサービスを検索します。<br/>
引数には検索したいサービスのUUIDの配列を指定可能です。<br/>
nilにした場合は全てのサービスを検索します。こちらもnilの指定は非推奨とされています。</p>

<p>サービスが見つかると、<code>didDiscoverServices:</code>メソッドが呼び出されます。<br/>
そこでさらに、サービスが持っているキャラクタリスティックを検索します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#pragma mark - CBPeripheralDelegate</span>
</span><span class='line'><span class="c1">// Servicesが見つかったときに呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didDiscoverServices:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span><span class="n">services</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">.</span><span class="n">services</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="n">service</span> <span class="k">in</span> <span class="n">services</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Service UUID: %@&quot;</span><span class="p">,</span> <span class="n">service</span><span class="p">.</span><span class="n">UUID</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Characteristicsの検索</span>
</span><span class='line'>      <span class="p">[</span><span class="n">peripheral</span> <span class="nl">discoverCharacteristics:</span><span class="nb">nil</span> <span class="nl">forService:</span><span class="n">service</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>キャラクタリスティックの検索は<code>discoverCharacteristics:</code>メソッドを使います。<br/>
例によって、引数の<code>characteristicUUIDs</code>はnilを指定することで、全てのキャラクタリスティックを検索しています。<br/>
もちろんnilは非推奨とされています。</p>

<p>今回は取得できた全てのサービスに対して、全てのキャラクタリスティックを検索するため、上記のようにfor文を使っています。</p>

<p>キャラクタリスティックが見つかると、<code>didDiscoverCharacteristicsForService:</code>メソッドが呼び出されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didDiscoverCharacteristicsForService:</span><span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="p">)</span><span class="nv">service</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="n">characteristic</span> <span class="k">in</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 値が変わったときに通知を受けたい場合に実行</span>
</span><span class='line'>      <span class="p">[</span><span class="n">peripheral</span> <span class="nl">setNotifyValue:</span><span class="n">YES</span> <span class="nl">forCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// キャラクタリステックのvalueを知りたい場合に実行</span>
</span><span class='line'>      <span class="p">[</span><span class="n">peripheral</span> <span class="nl">readValueForCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>setNotifyValue</code>はキャラクタリステックの値が変わったときに<code>didUpdateNotificationStateForCharacteristic:error:</code>を呼び出すために<code>YES</code>で設定しています。<br/>
<code>readValueForCharacteristic:</code>メソッドは検索して見つかったキャラクタリステックの値を読むために実行しています。</p>

<p>因みに、<code>CBCharacteristic</code>クラスはプロパティに<code>properties</code>を持っています。<br/>
これは、そのデータが <strong>Read Only</strong> なのか <strong>Read and Write</strong> なのかを判別するために利用します。<br/>
REBL600FRの場合、characteristicsをNSLogでログ出力してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Read Onlyの例</span>
</span><span class='line'><span class="nl">characteristic:</span> <span class="o">&lt;</span><span class="nl">CBCharacteristic:</span> <span class="mh">0x175744d0</span> <span class="n">UUID</span> <span class="o">=</span> <span class="n">Manufacturer</span> <span class="n">Name</span> <span class="n">String</span><span class="p">,</span> <span class="n">Value</span> <span class="o">=</span> <span class="p">(</span><span class="n">null</span><span class="p">),</span> <span class="n">Properties</span> <span class="o">=</span> <span class="mh">0x2</span><span class="p">,</span> <span class="n">Notifying</span> <span class="o">=</span> <span class="n">NO</span><span class="p">,</span> <span class="n">Broadcasting</span> <span class="o">=</span> <span class="n">NO</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Read and Writeの例</span>
</span><span class='line'><span class="nl">characteristic:</span> <span class="o">&lt;</span><span class="nl">CBCharacteristic:</span> <span class="mh">0x17572690</span> <span class="n">UUID</span> <span class="o">=</span> <span class="mi">569</span><span class="n">A2010</span><span class="o">-</span><span class="n">B87F</span><span class="o">-</span><span class="mi">490</span><span class="n">C</span><span class="o">-</span><span class="mi">92</span><span class="n">CB</span><span class="o">-</span><span class="mi">11</span><span class="n">BA5EA5167C</span><span class="p">,</span> <span class="n">Value</span> <span class="o">=</span> <span class="p">(</span><span class="n">null</span><span class="p">),</span> <span class="n">Properties</span> <span class="o">=</span> <span class="mh">0xA</span><span class="p">,</span> <span class="n">Notifying</span> <span class="o">=</span> <span class="n">NO</span><span class="p">,</span> <span class="n">Broadcasting</span> <span class="o">=</span> <span class="n">NO</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>となりました。<br/>
<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCharacteristic_Class/index.html#//apple_ref/occ/instp/CBCharacteristic/properties">CBCharacteristic Class Reference</a>を見ると、<code>0x2</code>は<code>CBCharacteristicPropertyRead</code>とされていますが、<code>0xA</code>は該当するものが記載されていませんでした。</p>

<p>キャラクタリステックの値の取得が完了すると、<code>didUpdateValueForCharacteristic:error:</code>メソッドが呼ばれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didUpdateValueForCharacteristic:</span><span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="p">)</span><span class="nv">characteristic</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">characteristic</span><span class="p">.</span><span class="n">value</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;value: %@&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで各パラメータの値が確認できました。<br/>
気をつけたいのは、major, minor, Tx PowerなどはUTF8でエンコードをかけると文字化けしたログを吐くので、どんな値か見たい場合はエンコードせずにNSDataの値のまま見てみましょう。</p>

<p>う〜ん。今回は時間切れですね&hellip;。<br/>
次回はREBL600FRのパラメータをiPhoneから書き換えることにチャレンジしたいと思います。</p>

<p>といったところで本日はここまで。<br/>
ソースはパラメータの書き換えが完了したタイミングでGitHubにアップしたいと思います。</p>

<p>参考:<br/>
<a href="http://qiita.com/rnamiki/items/ea912393c4fb58e7a9b9">CoreBluetoothで出来る事</a><br/>
<a href="http://qiita.com/miyatay/items/4d4ce4ccd7905ddc0144">Bluetooth Low Energy（BLE）/ iBeaconとは</a><br/>
<a href="http://reinforce-lab.github.io/blog/2013/01/25/CBCentralManagerClassReference_jp/">Reinforce-Lab&rsquo;s Blog</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRをiBeaconとして検知してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/07/bl600sample/"/>
    <updated>2015-02-07T23:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/07/bl600sample</id>
    <content type="html"><![CDATA[<h4>REBL600FRとFRISK</h4>

<p>今日は<a href="http://www.runele.com/ca1/24/">ランニングエレクトロニクス</a>さんから購入したREBL600FRを使って遊んでみたいと思います。<br/>
早速、REBL600FRを1個注文して、先日、家に届きました。</p>

<p><img src="http://grandbig.github.io/images/REBL600FR_1.jpg" alt="REBL600FRが届いた！" /></p>

<!-- more -->


<p>REBL600FRの売りがFRISKのケースに入るサイズとのことなので、FRISKを購入しました。</p>

<p><img src="http://grandbig.github.io/images/FRISK_1.jpg" alt="FRISK2つ購入しました" /></p>

<p>なぜ2つ購入したかって？<br/>
FRISKを購入しても、すぐにはREBL600FRをケースに入れられませんよね？<br/>
FRISKが入っているのだから。</p>

<p>なので、FRISKのケースを空けました。</p>

<p><img src="http://grandbig.github.io/images/FRISK_2.jpg" alt="FRISKケースを空にします" /></p>

<p>おぉ、空になった&hellip;かと思いきや、この状態ではFRISKで満帆となったケースが閉まらない&hellip;。<br/>
閉まるように余分な分を除けてみたところ、</p>

<p><img src="http://grandbig.github.io/images/FRISK_3.jpg" alt="FRISKケースが閉まるように少し除けます" /></p>

<p>11粒を戻すこととなりました。良かった。11粒くらいなら一気に食べられます笑。<br/>
また、何とか閉めたFRISKケースがこちら。</p>

<p><img src="http://grandbig.github.io/images/FRISK_4.jpg" alt="FRISKケースが閉められた" /></p>

<p>ちょっと浮いてますね&hellip;。</p>

<p>ま、何はともあれこれでREBL600FRをFRISKケースに入れれば準備完了です！</p>

<p><img src="http://grandbig.github.io/images/REBL600FR_2.jpg" alt="REBL600FRの準備完了" /></p>

<h4>REBL600FRのiBeaconを検知してみる</h4>

<p>さて、早速、iBeaconとしての動作を見ていくことにしましょう。<br/>
iBeaconの信号をキャッチするCentral側のアプリとして、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使うことにしました。<br/>
理由は、UUIDに何が設定されているのかわからないためです。</p>

<p>では、REBL600FRのスイッチをONにして、LightBlueで見てみましょう。<br/>
すると、このように <strong>Laird iBeacon</strong> というものを発見します。</p>

<p><img src="http://grandbig.github.io/images/lightblue_1.png" alt="LightBlueの画面" /></p>

<p>これを選択してみると、iBeaconとの接続を試みる処理が走ります。</p>

<p><img src="http://grandbig.github.io/images/lightblue_2.png" alt="LightBlueが接続試みる" /></p>

<p>接続後は詳細画面に遷移します。</p>

<p><img src="http://grandbig.github.io/images/lightblue_3.png" alt="LightBlueでLaird iBeaconの詳細を見る" /></p>

<p>その中で表示される画面の一部を紹介します。</p>

<p><img src="http://grandbig.github.io/images/lightblue_4.png" alt="LightBlueでLaird iBeaconの詳細を見る2" /></p>

<p>ここでぜひお知らせしたいのが、REBL600FRは送信出力をアプリから設定できるんです。<br/>
それが先ほどの写真でお見せした <strong>Tx Power Level</strong> という項目です。<br/>
これをタップすると、下記の画面に進みます。</p>

<p><img src="http://grandbig.github.io/images/lightblue_5.png" alt="Tx Power Levelの画面" /></p>

<p>初期状態では <strong>0x04</strong> となっており、4 [dBm] であることを示しています。<br/>
MAXの送信出力が4 [dBm] のようなので、それ以下(負の値も含む)の値を16進数で設定します。<br/>
10進数と16進数の相互変換は<a href="http://hogehoge.tk/tool/number.html">こちらのツール</a>からできます。</p>

<p><strong>Write new Value</strong> をタップ ⇒ 数値を設定 ⇒ Doneをタップ<br/>
これでスイッチのON / OFFを切り替えなくとも送信出力を変更することができます。<br/>
※ REBL600FRのスイッチをONにしてから約1分の間に接続しないといけないようです。<br/>
(少し時間が経ってしまうと接続できませんでした。)</p>

<p>実際に、iBeacon検知用のアプリ<a href="https://itunes.apple.com/jp/app/locate-beacon/id738709014?mt=8">Locate Beacon</a>で確認してみると、初期状態に比べて <strong>unknown</strong> と表示される距離が変わるはずです。</p>

<p>時間があるときに各種パラメータの値を変更可能なiOSアプリを作成したいと思います。</p>

<p>ということで、今日はここまで。</p>

<p>参考:<br/>
<a href="http://eguchi.jp/blog/?p=461">Kazuyuki Eguchi Factory スマホでiBeaconのパラメータを変更できるアプリを作りました！（REBL600FR向け）</a><br/>
<a href="http://todotani.cocolog-nifty.com/blog/2014/05/rbbl600fribeaco.html">Todotaniのはやり物Log</a><br/>
<a href="http://support.tetrastyle.net/bl600-ibeacon/">TETRASTYLE: Support (BL600) iBeacon サンプルを使ってみる</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自作ライブラリをCocoaPodsで管理しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/31/cocoapods/"/>
    <updated>2015-01-31T22:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/31/cocoapods</id>
    <content type="html"><![CDATA[<h4>自作ライブラリをCocoaPodsでインストールしたい</h4>

<p>さて、本日はCocoaPodsについて書いてみます。<br/>
最近、GitHubなどで公開されているiOS向けOSSのほとんどはCocoaPodsで管理されていることと思います。<br/>
そんな中、『自分で開発したライブラリも皆に使ってもらうなら、カッコよくCocoaPodsでインストールしてほしい』といった思いも出てきますよね。<br/>
よし！やってみよう！というのが本日の記事です。</p>

<p>では、早速、その手順です。<br/>
まずは、CocoaPodsで管理する対象の構造を下記に示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Classes</span> <span class="err">━┳━━</span> <span class="n">jsonUtil</span>
</span><span class='line'>         <span class="err">┃</span>     <span class="err">┣━━</span> <span class="n">jsonUtil</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>         <span class="err">┃</span>     <span class="err">┗━━</span> <span class="n">jsonUtil</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'>         <span class="err">┃</span>
</span><span class='line'>         <span class="err">┗━━</span> <span class="n">Validation</span>
</span><span class='line'>               <span class="err">┣━━</span> <span class="n">Validation</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'>               <span class="err">┗━━</span> <span class="n">Validation</span><span class="p">.</span><span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>１．GitHubにファイルをアップロード<br/>
OSSとして公開するのですから、<a href="https://github.com/">GitHub</a>にアップしましょう。<br/>
アカウントを作成して、新レポジトリを作成しましょう。<br/>
詳しくは<a href="http://www.atmarkit.co.jp/ait/articles/1407/22/news019.html">GitHub（ギットハブ）の使い方：登録編</a>を参考にしましょう。</p>

<p>２．podspecファイルを作成<br/>
ターミナルから公開したいファイルの階層に入り、podspecファイルを作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">cd</span> <span class="o">&lt;</span><span class="err">指定ファイルのディレクトリ</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">pod</span> <span class="n">spec</span> <span class="n">create</span> <span class="o">&lt;</span><span class="err">公開ライブラリの名称</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>３．podspecファイルを編集<br/>
podspecファイルを編集して、GitHubとの連携などを設定しましょう。<br/>
とにかく今回書いたpodspecファイルは下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Pod</span><span class="o">::</span><span class="n">Spec</span><span class="p">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">name</span>         <span class="o">=</span> <span class="s">&quot;CocoaPodsSampleLibrary&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">version</span>      <span class="o">=</span> <span class="s">&quot;0.0.1&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">summary</span>      <span class="o">=</span> <span class="s">&quot;Library for CocoaPods Test&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">description</span>  <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="n">DESC</span>
</span><span class='line'>                   <span class="n">A</span> <span class="n">longer</span> <span class="n">description</span> <span class="n">of</span> <span class="n">CocoaPodsSampleLibrary</span> <span class="k">in</span> <span class="n">Markdown</span> <span class="n">format</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>                   <span class="o">*</span> <span class="nl">Think:</span> <span class="n">Why</span> <span class="n">did</span> <span class="n">you</span> <span class="n">write</span> <span class="n">this</span><span class="o">?</span> <span class="n">What</span> <span class="n">is</span> <span class="n">the</span> <span class="n">focus</span><span class="o">?</span> <span class="n">What</span> <span class="n">does</span> <span class="n">it</span> <span class="k">do</span><span class="o">?</span>
</span><span class='line'>                   <span class="o">*</span> <span class="n">CocoaPods</span> <span class="n">will</span> <span class="n">be</span> <span class="n">using</span> <span class="n">this</span> <span class="n">to</span> <span class="n">generate</span> <span class="n">tags</span><span class="p">,</span> <span class="n">and</span> <span class="n">improve</span> <span class="n">search</span> <span class="n">results</span><span class="p">.</span>
</span><span class='line'>                   <span class="o">*</span> <span class="n">Try</span> <span class="n">to</span> <span class="n">keep</span> <span class="n">it</span> <span class="kt">short</span><span class="p">,</span> <span class="n">snappy</span> <span class="n">and</span> <span class="n">to</span> <span class="n">the</span> <span class="n">point</span><span class="p">.</span>
</span><span class='line'>                   <span class="o">*</span> <span class="n">Finally</span><span class="p">,</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">worry</span> <span class="n">about</span> <span class="n">the</span> <span class="n">indent</span><span class="p">,</span> <span class="n">CocoaPods</span> <span class="n">strips</span> <span class="n">it</span><span class="o">!</span>
</span><span class='line'>                   <span class="n">DESC</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">homepage</span>     <span class="o">=</span> <span class="s">&quot;https://github.com/grandbig/CocoaPodsSampleLibrary&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">source</span>       <span class="o">=</span> <span class="p">{</span> <span class="o">:</span><span class="n">git</span> <span class="o">=&gt;</span> <span class="s">&quot;https://github.com/grandbig/CocoaPodsSampleLibrary.git&quot;</span><span class="p">,</span> <span class="o">:</span><span class="n">tag</span> <span class="o">=&gt;</span> <span class="s">&quot;#{s.version}&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">subspec</span> <span class="err">&#39;</span><span class="n">jsonUtil</span><span class="err">&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ss</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ss</span><span class="p">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">Classes</span><span class="o">/</span><span class="n">jsonUtil</span><span class="o">/*</span><span class="p">.{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="p">.</span><span class="n">subspec</span> <span class="err">&#39;</span><span class="n">Validation</span><span class="err">&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ss</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ss</span><span class="p">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">Classes</span><span class="o">/</span><span class="n">Validation</span><span class="o">/*</span><span class="p">.{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>s.source</code>にはCocoaPodsでのインストールをするために<code>:git =&gt; "..."</code>の部分にGitHubからCloneするたときに指定するURLを書きましょう。</p>

<p>そして、CocoaPodsでインストールした後もフォルダ構成を保ちたいのであれば、単純に<code>s.source_files  = "Classes", "Classes/**/*.{h,m}"</code>と指定するのではなく、
<code>s.subspec 'jsonUtil' do |ss| 〜 end</code>と指定しましょう。</p>

<p>さて、これで全ての対応が完了しました。<br/>
実際に、CocoaPodsでインストールしてみましょう！<br/>
思い描いた通りに自作ライブラリが追加されているはずです。<br/>
といったところで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8で端末の向きに合わせて画像を回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/29/uiimagerotate-ios8/"/>
    <updated>2015-01-29T00:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/29/uiimagerotate-ios8</id>
    <content type="html"><![CDATA[<h4>端末の向きに合わせて画像を回転させよう！</h4>

<p>iOS7.xまでは<strong>willRotateToInterfaceOrientation</strong>や<strong>didRotateFromInterfaceOrientation</strong>を用いて端末の向きが変わるときに、UIImageViewを回転させるといったことをやっていました。<br/>
しかし、iOS8ではこれら2つのメソッドがdeprecatedになってしまいました。<br/>
では、iOS8ではどうやって端末の向きに合わせてUIImageViewを回転させれば良いのでしょうか？</p>

<p>ここではAutoLayoutを利用した方法を説明します。</p>

<!-- more -->


<p>まず、前提として<strong>『アプリの中央に配置した正方形の画像を端末の向きに合わせて回転させる』</strong>とします。<br/>
では早速手順を説明します。</p>

<p>1: StoryboardにUIImageViewを配置しましょう。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_1.png" alt="UIImageViewを配置" /></p>

<p>2: UIImageViewに画像をセットしましょう。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_2.png" alt="UIImageViewに画像をセット" /></p>

<p>3: AutoLayoutを設定しましょう。<br/>
設定するAutoLayoutは、下記5点です。</p>

<ul>
<li>Aspect Ratio</li>
<li>Center X Alignment</li>
<li>Center Y Alignment</li>
<li>Horizontal Space</li>
<li>Vertical Space</li>
</ul>


<p>Horizontal Space, Vertical Space, Aspect Ratioの設定は下記のようにできます。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_3.png" alt="AutoLayoutの設定" /></p>

<p>ここで、Horizontal Space, Vertical Spaceは<strong>Equal</strong>ではなく<strong>Greater</strong>設定をします。<br/>
設定は下図のようにHorizontal SpaceまたはVertical Spaceを選択して、右メニューのRelationを変更します。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_5.png" alt="AutoLayoutの設定" /></p>

<p>Center X Alignment, Center Y Alignmentの設定は下記のようにできます。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_4.png" alt="AutoLayoutの設定" /></p>

<p>全ての設定が終われば、下図のようになるでしょう。<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_6.png" alt="AutoLayoutの設定" /></p>

<p>実際にアプリを起動して端末を回転させてみると、<br/>
端末がPortraitの場合は、<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_7.png" alt="端末がPortraitの場合" /></p>

<p>端末がLandscapeの場合は、<br/>
<img src="http://grandbig.github.io/images/rotate_image_ios8_8.png" alt="端末がLandscapeの場合" /><br/>
となりました。</p>

<p>う〜ん、だいぶ楽になりましたね。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
