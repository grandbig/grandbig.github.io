<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-06-01T01:55:58+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OAuth2.0認証の処理を自作しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/01/custom-oauth/"/>
    <updated>2015-06-01T00:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/01/custom-oauth</id>
    <content type="html"><![CDATA[<h4>OAuth2.0認証処理を自分で作ろう！ Objective-C編</h4>

<p>本日は、<a href="https://code.google.com/p/gtm-oauth2/">gtm-oauth</a>や<a href="https://github.com/nxtbgthng/OAuth2Client">OAuth2Client</a>を使わずにOAuth2.0認証処理を自作してみます。</p>

<p>OAuth2.0認証を通すためのGoogle設定は<a href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/">iOSでGoogle OAuth認証がしたい</a>を参照ください。<br/>
筆者が開発したライブラリは単純な下記処理のみ含んでいます。</p>

<ul>
<li>OAuth2.0認証に必要な各種パラメータをKeychain Servicesに保存</li>
<li>アクセストークンを取得する処理</li>
<li>リフレッシュトークンから新規アクセストークンを取得する処理</li>
</ul>


<p>ここで、Keychain Servicesを使うにあたって、<a href="https://github.com/TheLevelUp/LUKeychainAccess">LUKeychainAccess</a>を利用しています。<br/>
これにより、複雑なKeychain ServicesをNSUserDefaultsの感覚で利用することができます。<br/>
また、Googleへの問い合わせなどのHTTP/HTTPSリクエストに<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>を利用しています。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>OAuth2.0認証ライブラリの作成</h4>

<p>下記にソースをそのまま載せておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// OAuth2Client.m</span>
</span><span class='line'><span class="cp">#import &quot;OAuth2Client.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;LUKeychainAccess.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;AFNetworking.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">callback</span> <span class="o">=</span>  <span class="s">@&quot;http://localhost&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">visibleactions</span> <span class="o">=</span> <span class="s">@&quot;http://schemas.google.com/AddActivity&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">OAuth2Client</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">OAuth2Client</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">OAuth2Client</span><span class="o">*</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[</span><span class="n">OAuth2Client</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];]</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OAuth2.0認証に必要なパラメータを設定する処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setUpOAuth2AccountClientId:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">clientId</span> <span class="nf">clientSecret:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">clientSecret</span> <span class="nf">scope:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">scope</span> <span class="nf">authorizationURL:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">authorizationURL</span> <span class="nf">tokenURL:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tokenURL</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">clientId</span> <span class="nl">forKey:</span><span class="s">@&quot;clientId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">clientSecret</span> <span class="nl">forKey:</span><span class="s">@&quot;clientSecret&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">scope</span> <span class="nl">forKey:</span><span class="s">@&quot;scope&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">authorizationURL</span> <span class="nl">forKey:</span><span class="s">@&quot;authorizationURL&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">tokenURL</span> <span class="nl">forKey:</span><span class="s">@&quot;tokenURL&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OAuth2.0認証に必要なリクエストを生成する処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">requestAccessToAccount:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">preparedURL</span><span class="p">))</span><span class="nv">withPreparedAuthorizationURLHandler</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">clientId</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;clientId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">scope</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;scope&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">authorizationURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;authorizationURL&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@?response_type=code&amp;client_id=%@&amp;redirect_uri=%@&amp;scope=%@&amp;data-requestvisibleactions=%@&quot;</span><span class="p">,</span> <span class="n">authorizationURL</span><span class="p">,</span> <span class="n">clientId</span><span class="p">,</span> <span class="n">callback</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">visibleactions</span><span class="p">];</span>
</span><span class='line'>  <span class="n">withPreparedAuthorizationURLHandler</span><span class="p">([</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">url</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OAuth2.0認証のリダイレクトURIの一致の有無を確認する処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">checkRedirectURI:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// HOSTの取得</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">host</span> <span class="o">=</span> <span class="p">[[</span><span class="n">request</span> <span class="n">URL</span><span class="p">]</span> <span class="n">host</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">host</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;localhost&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アクセストークンを取得する処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getAccessToken:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">))</span><span class="nv">completionHandler</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">host</span> <span class="o">=</span> <span class="p">[[</span><span class="n">request</span> <span class="n">URL</span><span class="p">]</span> <span class="n">host</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">host</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;localhost&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span><span class="o">*</span> <span class="n">verifier</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="n">NSArray</span><span class="o">*</span> <span class="n">urlParams</span> <span class="o">=</span> <span class="p">[[</span><span class="n">request</span> <span class="n">URL</span><span class="p">]</span> <span class="n">query</span><span class="p">]</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;&amp;&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span> <span class="n">param</span> <span class="k">in</span> <span class="n">urlParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSArray</span><span class="o">*</span> <span class="n">keyValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">param</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;=&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSString</span><span class="o">*</span> <span class="n">key</span> <span class="o">=</span> <span class="p">[</span><span class="n">keyValue</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;code&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">verifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">keyValue</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">verifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">NSString</span> <span class="o">*</span><span class="n">clientId</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;clientId&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSString</span> <span class="o">*</span><span class="n">clientSecret</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;clientSecret&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSString</span> <span class="o">*</span><span class="n">tokenURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;tokenURL&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'>          <span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>          <span class="c1">// サーバエラー時のContent-Typeにtext/plainを許可(成功時にapplication/jsonが必要なので共に追加)</span>
</span><span class='line'>          <span class="n">manager</span><span class="p">.</span><span class="n">responseSerializer</span><span class="p">.</span><span class="n">acceptableContentTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="s">@&quot;text/plain&quot;</span><span class="p">,</span> <span class="s">@&quot;application/json&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>          <span class="c1">// パラメータの設定</span>
</span><span class='line'>          <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;code&quot;</span><span class="o">:</span> <span class="n">verifier</span><span class="p">,</span> <span class="s">@&quot;client_id&quot;</span><span class="o">:</span> <span class="n">clientId</span><span class="p">,</span> <span class="s">@&quot;client_secret&quot;</span><span class="o">:</span> <span class="n">clientSecret</span><span class="p">,</span> <span class="s">@&quot;redirect_uri&quot;</span><span class="o">:</span> <span class="n">callback</span><span class="p">,</span> <span class="s">@&quot;grant_type&quot;</span><span class="o">:</span> <span class="s">@&quot;authorization_code&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">[</span><span class="n">manager</span> <span class="nl">POST:</span><span class="n">tokenURL</span> <span class="nl">parameters:</span><span class="n">data</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 成功した場合</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">responseObject</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">responseObject</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span> <span class="o">=</span> <span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;access_token&quot;</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">NSString</span> <span class="o">*</span><span class="n">refreshToken</span> <span class="o">=</span> <span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;refresh_token&quot;</span><span class="p">];</span>
</span><span class='line'>                  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">accessToken</span> <span class="nl">forKey:</span><span class="s">@&quot;accessToken&quot;</span><span class="p">];</span>
</span><span class='line'>                  <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">refreshToken</span> <span class="nl">forKey:</span><span class="s">@&quot;refreshToken&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                  <span class="c1">// 処理が終了したときに実行(アクセストークンを返す)</span>
</span><span class='line'>                  <span class="n">completionHandler</span><span class="p">(</span><span class="n">accessToken</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 失敗した場合</span>
</span><span class='line'>              <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">;</span>
</span><span class='line'>              <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;com.alamofire.serialization.response.error.data&quot;</span><span class="p">];</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// エラーの中身がある場合</span>
</span><span class='line'>                  <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">data</span> <span class="nl">options:</span><span class="n">NSJSONReadingAllowFragments</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="c1">// 失敗を返す</span>
</span><span class='line'>              <span class="n">failure</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// HOST名が一致しない場合</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// リフレッシュトークンから新しいアクセストークンを取得する処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getRefreshAccessToken:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">))</span><span class="nv">success</span> <span class="nf">failure:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">))</span><span class="nv">failure</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">clientId</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;clientId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">tokenURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;tokenURL&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">refreshToken</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;refreshToken&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">clientId</span> <span class="o">&amp;&amp;</span> <span class="n">tokenURL</span> <span class="o">&amp;&amp;</span> <span class="n">refreshToken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 必須パラメータがある場合</span>
</span><span class='line'>      <span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'>      <span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// サーバエラー時のContent-Typeにtext/plainを許可(成功時にapplication/jsonが必要なので共に追加)</span>
</span><span class='line'>      <span class="n">manager</span><span class="p">.</span><span class="n">responseSerializer</span><span class="p">.</span><span class="n">acceptableContentTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="s">@&quot;text/plain&quot;</span><span class="p">,</span> <span class="s">@&quot;application/json&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// パラメータの設定</span>
</span><span class='line'>      <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;client_id&quot;</span><span class="o">:</span> <span class="n">clientId</span><span class="p">,</span> <span class="s">@&quot;refresh_token&quot;</span><span class="o">:</span> <span class="n">refreshToken</span><span class="p">,</span> <span class="s">@&quot;grant_type&quot;</span><span class="o">:</span> <span class="s">@&quot;refresh_token&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">[</span><span class="n">manager</span> <span class="nl">POST:</span><span class="n">tokenURL</span> <span class="nl">parameters:</span><span class="n">data</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 成功した場合</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">responseObject</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">responseObject</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span> <span class="o">=</span> <span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;access_token&quot;</span><span class="p">];</span>
</span><span class='line'>              <span class="n">NSString</span> <span class="o">*</span><span class="n">refreshToken</span> <span class="o">=</span> <span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;refresh_token&quot;</span><span class="p">];</span>
</span><span class='line'>              <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">accessToken</span> <span class="nl">forKey:</span><span class="s">@&quot;accessToken&quot;</span><span class="p">];</span>
</span><span class='line'>              <span class="p">[[</span><span class="n">LUKeychainAccess</span> <span class="n">standardKeychainAccess</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">refreshToken</span> <span class="nl">forKey:</span><span class="s">@&quot;refreshToken&quot;</span><span class="p">];</span>
</span><span class='line'>              
</span><span class='line'>              <span class="c1">// 処理が終了したときに実行(アクセストークンを返す)</span>
</span><span class='line'>              <span class="n">success</span><span class="p">(</span><span class="n">accessToken</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span> <span class="n">failure</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 失敗した場合</span>
</span><span class='line'>          <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">;</span>
</span><span class='line'>          <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;com.alamofire.serialization.response.error.data&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// エラーの中身がある場合</span>
</span><span class='line'>              <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">data</span> <span class="nl">options:</span><span class="n">NSJSONReadingAllowFragments</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="c1">// 失敗を返す</span>
</span><span class='line'>          <span class="n">failure</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 必須パラメータがない場合</span>
</span><span class='line'>      <span class="c1">// TODO: エラーオブジェクトを生成して返す</span>
</span><span class='line'>      <span class="n">failure</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// OAuth2Client.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">OAuth2Client</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">OAuth2Client</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> OAuth2.0認証に必要なパラメータを設定する処理</span>
</span><span class='line'><span class="cm"> @param clientId クライアントID</span>
</span><span class='line'><span class="cm"> @param clientSecret クライアントシークレット</span>
</span><span class='line'><span class="cm"> @param scope アクセス範囲</span>
</span><span class='line'><span class="cm"> @param authorizationURL OAuth2.0 認証先URL</span>
</span><span class='line'><span class="cm"> @param tokenURL OAuth2.0 トークン取得先URL</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setUpOAuth2AccountClientId:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">clientId</span> <span class="nf">clientSecret:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">clientSecret</span> <span class="nf">scope:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">scope</span> <span class="nf">authorizationURL:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">authorizationURL</span> <span class="nf">tokenURL:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tokenURL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> OAuth2.0認証に必要なリクエストを生成する処理</span>
</span><span class='line'><span class="cm"> @param withPreparedAuthorizationURLHandler OAuth2.0認証に必要なリクエストを返すBlock構文</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">requestAccessToAccount:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">preparedURL</span><span class="p">))</span><span class="nv">withPreparedAuthorizationURLHandler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> OAuth2.0認証のリダイレクトURIの一致の有無を確認する処理</span>
</span><span class='line'><span class="cm"> @param request リクエスト</span>
</span><span class='line'><span class="cm"> @return リダイレクトURIの一致の有無</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">checkRedirectURI:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> アクセストークンを取得する処理</span>
</span><span class='line'><span class="cm"> @param request アクセストークンの取得に必要なリクエスト</span>
</span><span class='line'><span class="cm"> @param completionHandler アクセストークンの取得処理が完了したら実行される処理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getAccessToken:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">))</span><span class="nv">completionHandler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> リフレッシュトークンから新しいアクセストークンを取得する処理</span>
</span><span class='line'><span class="cm"> @param success 処理が成功した場合に実行(返却データはアクセストークン)</span>
</span><span class='line'><span class="cm"> @param failure 処理が失敗した場合に実行(返却データはエラーオブジェクト)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getRefreshAccessToken:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">))</span><span class="nv">success</span> <span class="nf">failure:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">))</span><span class="nv">failure</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>呼び出し側のソース</h4>

<p>呼び出し側のソースを記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;OAuth2Client.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">clientId</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">clientSecret</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">authorizationURL</span> <span class="o">=</span> <span class="s">@&quot;https://accounts.google.com/o/oauth2/auth&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">tokenURL</span> <span class="o">=</span> <span class="s">@&quot;https://accounts.google.com/o/oauth2/token&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">scope</span> <span class="o">=</span> <span class="s">@&quot;https://www.googleapis.com/auth/plus.login+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/calendar&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="n">UIWebViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIWebView</span> <span class="o">*</span><span class="n">webView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">receivedData</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">isLogin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_webView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="s">@&quot;isLogin&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 既にOAuth2.0認証実行済みの場合</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">OAuth2Client</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">getRefreshAccessToken:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 成功した場合</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">accessToken</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 失敗した場合</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 初めてOAuth2.0認証を実行する場合</span>
</span><span class='line'>      <span class="c1">// OAuth2.0認証に必要な各種パラメータの設定</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">OAuth2Client</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">setUpOAuth2AccountClientId:</span><span class="n">clientId</span> <span class="nl">clientSecret:</span><span class="n">clientSecret</span> <span class="nl">scope:</span><span class="n">scope</span> <span class="nl">authorizationURL:</span><span class="n">authorizationURL</span> <span class="nl">tokenURL:</span><span class="n">tokenURL</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// OAuth2.0認証リクエスト</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">OAuth2Client</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">requestAccessToAccount:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">preparedURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// リクエスト</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_webView</span> <span class="nl">loadRequest:</span><span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span> <span class="n">preparedURL</span><span class="p">]];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">webView:</span><span class="p">(</span><span class="n">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span> <span class="nf">shouldStartLoadWithRequest:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">navigationType:</span><span class="p">(</span><span class="n">UIWebViewNavigationType</span><span class="p">)</span><span class="nv">navigationType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">OAuth2Client</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">checkRedirectURI:</span><span class="n">request</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">OAuth2Client</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">getAccessToken:</span><span class="n">request</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">accessToken</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// 処理が終了したら呼び出される</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">accessToken</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>              <span class="p">[</span><span class="n">defaults</span> <span class="nl">setBool:</span><span class="n">YES</span> <span class="nl">forKey:</span><span class="s">@&quot;isLogin&quot;</span><span class="p">];</span>
</span><span class='line'>              <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="p">[</span><span class="n">webView</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで簡単ですが、OAuth2.0認証の自作ライブラリの開発が完了です。<br/>
必要最低限の機能ですが、十分だと思います。<br/>
(もう少し時間をかけてより良いものを作りたいと思います笑。)</p>

<p>参考:</p>

<ul>
<li><a href="http://technogerms.com/login-with-google-using-oauth-2-0-for-ios-xcode-objective-c/">Login with Google using OAuth 2.0 for iOS Xcode Objective-C</a></li>
<li><a href="http://www.ari-hiro.com/blog/2012/12/30/oauth2-summary">OAuth2.0の備忘録的まとめ</a></li>
<li><a href="http://qiita.com/asakahara/items/06abbc0209262d0051ef">iOSでアプリを削除してもデータを保持する方法</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioでvolley frameworkを利用するまで]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/android-volley/"/>
    <updated>2015-05-24T20:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/android-volley</id>
    <content type="html"><![CDATA[<h4>volley frameworkを使ったプロジェクトをGitHubにアップする</h4>

<p>本日はAndroidについて書きます。<br/>
Androidアプリを開発する上で、通信系のframeworkを使うなら、<a href="https://android.googlesource.com/platform/frameworks/volley">volley framework</a>を選択すると思います。<br/>
非常に便利なframworkである反面、導入が面倒だったりします。<br/>
筆者はiOSエンジニアなので、<a href="https://cocoapods.org/">CocoaPods</a>をよく使うのですが、如何に便利なツールなのかがよくわかりました笑</p>

<h5>プロジェクトの作成</h5>

<p>まずは、Android Studioでプロジェクトを作成して、GitHubにアップしましょう。</p>

<ol>
<li>Android Studioでプロジェクトを作成(VolleySampleを作成)</li>
<li>GitHubで新規repogitoryを作成</li>
<li>Android Studioのプロジェクトのルート(VolleySample/)配下に移動して、下記コマンドを実行しましょう。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">echo</span> <span class="s">&quot;# VolleySample&quot;</span> <span class="o">&gt;&gt;</span> <span class="n">README</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">init</span>
</span><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s">&quot;first commit&quot;</span>
</span><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="nl">https:</span><span class="c1">//github.com/grandbig/VolleySample.git</span>
</span><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のようになればOKです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p><img src="http://grandbig.github.io/images/android-volley-1.png" alt="プロジェクトをGitHubにアップ" /></p>

<h5>volleyの導入</h5>

<p>次にvolley frameworkを自身のプロジェクトに導入します。<br/>
導入にはgit submoduleを使います。</p>

<p>先ほど作成したAndroid Studioプロジェクトのルート(VolleySample/)配下で下記コマンドを実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">git</span> <span class="n">submodule</span> <span class="n">add</span> <span class="nl">https:</span><span class="c1">//android.googlesource.com/platform/frameworks/volley modules/volley</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、VolleySample/.gitmodulesが作成されます。<br/>
中身はというと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">submodule</span> <span class="s">&quot;modules/volley&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="n">modules</span><span class="o">/</span><span class="n">volley</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="nl">https:</span><span class="c1">//android.googlesource.com/platform/frameworks/volley</span>
</span></code></pre></td></tr></table></div></figure>


<p>になっているはずです。
続いて、<code>settings.gradle(Project Settings)</code>に下記1行を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">include</span> <span class="err">&#39;</span><span class="o">:</span><span class="nl">modules:</span><span class="n">volley</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/android-volley-2.png" alt="settings.gradleの設定" /></p>

<p>そして、<code>build.gradle(Module: app)</code>の<code>dependencies</code>に1行追加しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">modules:</span><span class="n">volley</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">....</span> <span class="err">ここを追加しましょう</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://grandbig.github.io/images/android-volley-3.png" alt="build.gradleの設定" /></p>

<p>ここまできたら、一旦、GradleをSyncさせましょう。<br/>
足りないものがあればインストールを求められるはずなので、その場合はインストールしておきましょう。</p>

<p>では、GitHubにこれまでの作業分を更新させましょう。</p>

<p><img src="http://grandbig.github.io/images/android-volley-4.png" alt="volleyを追加した状態でGitHubにアップ" /></p>

<h5>volleyの利用</h5>

<p>実際にvolleyを使ってみましょう。<br/>
<a href="http://grandbig.github.io/blog/2015/05/24/swift-alamofire1/">Swift Alamofireライブラリを使ってみよう！</a>と<a href="http://grandbig.github.io/blog/2015/05/24/swift-afnetworking/">Swift AFNetworkingライブラリを使ってみよう！</a>で例として使ったOpen Weather Map APIをここでも利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">volleysample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.ActionBarActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.RequestQueue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.VolleyError</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.Response</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.toolbox.JsonObjectRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.toolbox.Volley</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">RequestQueue</span> <span class="n">mRequestQueue</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mRequestQueue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mRequestQueue</span> <span class="o">=</span> <span class="n">Volley</span><span class="o">.</span><span class="na">newRequestQueue</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// URLの指定</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mRequestQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonObjectRequest</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">new</span> <span class="n">Response</span><span class="o">.</span><span class="na">Listener</span><span class="o">&lt;</span><span class="n">JSONObject</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="n">JSONObject</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 通信に成功した場合</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;VolleySample&quot;</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">},</span> <span class="k">new</span> <span class="n">Response</span><span class="o">.</span><span class="na">ErrorListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onErrorResponse</span><span class="o">(</span><span class="n">VolleyError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// エラーが発生した場合</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;VolleySample&quot;</span><span class="o">,</span> <span class="n">error</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>AndroidManifest.xml</code>にインターネットの通信許可を与えることを忘れずに。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// AndroidManifest.xml</span>
</span><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">manifest</span> <span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="n">package</span><span class="o">=</span><span class="s">&quot;com.example.takahiro.volleysample&quot;</span> <span class="o">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">application</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">application</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">manifest</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>無事、通信が成功しましたね！<br/>
ってところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift AFNetworkingライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-afnetworking/"/>
    <updated>2015-05-24T10:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-afnetworking</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAFNetworkingの使い方を覚えよう！</h4>

<p>さて、本日はObjective-Cの超有名通信系ライブラリの<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>をSwiftで使ってみようと思います。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方を見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">7.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="s">&quot;AFNetworking&quot;</span><span class="p">,</span> <span class="s">&quot;~&gt; 2.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>pod install</code>すればプロジェクトに <strong>AFNetworking</strong> が追加されるはずです。<br/>
ここで注意したいのが、あくまでもObjective-Cで書かれたライブラリなので、Swiftで使うためにはBridgeファイルを用意する必要があります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<ol>
<li>プロジェクトにヘッダーファイルを追加します。
ProjectName-Bridging-Header.hという形式が推奨されている模様<br/>
今回はSwiftSample-Bridging-Header.hという名前で追加しました。</li>
<li>TARGETS > SwiftSample > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Headerにパスを指定
SwiftSample/SwiftSample-Bridging-Header.hを指定しました。</li>
<li>Bridgeファイルにライブラリを<code>import</code>する</li>
<li>ライブラリを利用するファイルにも<code>import</code>を書きましょう(Swiftの書き方で。)</li>
</ol>


<p>下記の画像を参照ください。
<img src="http://grandbig.github.io/images/swift-afnetworking.png" alt="Bridgeファイルの用意" /></p>

<p>また、Bridgeファイルへの具体的な内容を書いておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#ifndef SwiftSample_SwiftSample_Bridging_Header_h</span>
</span><span class='line'><span class="cp">#define SwiftSample_SwiftSample_Bridging_Header_h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;AFNetworking/AFNetworking.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>GETリクエスト</h5>

<p>では、早速、GETリクエストを書いてみましょう。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nl">base:</span>  <span class="s">&quot;stations&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">clouds:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">all:</span> <span class="mi">32</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">cod:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">coord:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">lat:</span> <span class="mf">35.69</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">lon:</span> <span class="mf">139.65</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">dt:</span> <span class="mi">1432394992</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">id</span><span class="o">:</span> <span class="mi">1850147</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">main:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">grnd_level:</span> <span class="mf">1019.97</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">humidity:</span> <span class="mi">88</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">pressure:</span> <span class="mf">1019.97</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sea_level:</span> <span class="mf">1024.92</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp:</span> <span class="mf">290.99</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp_max:</span> <span class="mf">290.99</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp_min:</span> <span class="mf">290.99</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">name:</span> <span class="n">Tokyo</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">sys:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">country:</span> <span class="s">&quot;JP&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">message:</span> <span class="mf">0.0386</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sunrise:</span> <span class="mi">1432323041</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sunset:</span> <span class="mi">1432374314</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">weather:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nl">description:</span> <span class="s">&quot;scattered clouds&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">icon:</span> <span class="s">&quot;03n&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="kt">id</span><span class="o">:</span> <span class="mi">802</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">main:</span> <span class="s">&quot;Clouds&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nl">wind:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">deg:</span> <span class="mf">198.001</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">speed:</span> <span class="mf">5.11</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="n">let</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">AFHTTPSessionManager</span><span class="p">()</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">GET</span><span class="p">(</span><span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">success:</span> <span class="p">{</span> <span class="p">(</span><span class="n">operation</span><span class="p">,</span> <span class="n">json</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="c1">// 処理が成功した場合</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">dict</span> <span class="o">=</span> <span class="n">json</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">weatherArray</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nl">failure:</span> <span class="p">{</span> <span class="p">(</span><span class="n">operation</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="c1">// エラーが発生した場合</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objective-Cでは下記のように書いていたので、対応づけて見るとわかりやすいかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">manager</span><span class="p">.</span><span class="nl">GET:</span><span class="s">@&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSArray</span> <span class="o">*</span><span class="n">weatherArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">responseObject</span> <span class="nl">objectForKey:</span><span class="s">@&quot;weather&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">weather</span> <span class="o">=</span> <span class="p">[</span><span class="n">weatherArray</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">description</span> <span class="o">=</span> <span class="p">[</span><span class="n">weather</span> <span class="nl">objectForKey:</span><span class="s">@&quot;description&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="n">description</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// エラーが発生した場合</span>
</span><span class='line'>  <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>success</code>と<code>failure</code>は戻り値が<code>void</code>なので、Swiftでも<code>-&gt; Void</code>と指定しています。<br/>
<code>[String: AnyObject]</code>は <strong>keyがString型</strong> で <strong>valueがAnyObject(何でもあり)型</strong> のDictionary型への変換で、<br/>
<code>[AnyObject]</code>は <strong>要素がAnyObject(何でもあり)型</strong> のArray型への変換です。</p>

<p>Alamofireとはやはり違った書き方となるので、iOSのターゲットなど要件に従って使い分けていくのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Alamofireライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-alamofire1/"/>
    <updated>2015-05-24T00:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-alamofire1</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAlamofireの使い方を覚えよう！</h4>

<p>さて、本日は <strong>Alamofire</strong> ライブラリの使い方を勉強します。<br/>
<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>はObjective-Cの超有名通信系ライブラリである<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>のSwift版と思えばよいでしょう。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方から見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">source</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">8.0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">Alamofire</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">1.2</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>pod install</code>すればプロジェクトにAlamofireが追加されるはずです！<br/>
後は利用したいswiftファイルで<code>import Alamofire</code>しましょう。<br/>
SwiftライブラリをCocoaPodsでインストールすると対象iOSが8.0以上である必要が出てくるので、そこだけ注意しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>GETリクエスト(パターン１)</h5>

<p>続いて、GETリクエストのメソッドを書いてみます。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nl">base:</span>  <span class="s">&quot;stations&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">clouds:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">all:</span> <span class="mi">32</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">cod:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">coord:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">lat:</span> <span class="mf">35.69</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">lon:</span> <span class="mf">139.65</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">dt:</span> <span class="mi">1432394992</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">id</span><span class="o">:</span> <span class="mi">1850147</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">main:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">grnd_level:</span> <span class="mf">1019.97</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">humidity:</span> <span class="mi">88</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">pressure:</span> <span class="mf">1019.97</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sea_level:</span> <span class="mf">1024.92</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp:</span> <span class="mf">290.99</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp_max:</span> <span class="mf">290.99</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">temp_min:</span> <span class="mf">290.99</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">name:</span> <span class="n">Tokyo</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">sys:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">country:</span> <span class="s">&quot;JP&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">message:</span> <span class="mf">0.0386</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sunrise:</span> <span class="mi">1432323041</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">sunset:</span> <span class="mi">1432374314</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nl">weather:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nl">description:</span> <span class="s">&quot;scattered clouds&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">icon:</span> <span class="s">&quot;03n&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="kt">id</span><span class="o">:</span> <span class="mi">802</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">main:</span> <span class="s">&quot;Clouds&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nl">wind:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nl">deg:</span> <span class="mf">198.001</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">speed:</span> <span class="mf">5.11</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。<br/>
幾つか書き方があるのですが、まずは１つ目の書き方です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather&quot;</span><span class="p">,</span> <span class="nl">parameters:</span><span class="p">[</span><span class="s">&quot;q&quot;</span><span class="o">:</span><span class="s">&quot;Tokyo,jp&quot;</span><span class="p">]).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span> <span class="n">as</span><span class="o">?</span> <span class="n">NSData</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// AnyObject型をNSData型に変換できた場合に通過</span>
</span><span class='line'>      <span class="c1">// NSData型をJSONの形に変換して、AnyObject?型の変数に格納</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">obj:</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="o">=</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">AllowFragments</span><span class="p">,</span> <span class="nl">error:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">weatherArray</span> <span class="o">=</span> <span class="n">obj</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// objからweatherフィールドを取得。その際、Array型に変換できた場合に通過</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">let</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過</span>
</span><span class='line'>                  <span class="n">println</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// NSDictionary型のweatherからdescriptionを指定して取得</span>
</span><span class='line'>              <span class="n">var</span> <span class="nl">description2:</span><span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>              <span class="n">println</span><span class="p">(</span><span class="n">description2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意したいのは、responseで返却される<code>data</code>は <strong>NSData型</strong> ではなく、 <strong>AnyObject?型</strong> だということです。<br/>
そのため、直接<code>NSJSONSerialization.JSONObjectWithData</code>の１つ目の引数に<code>data</code>を指定するとNSData型ではないことを示唆するエラーが出ます。<br/>
なので、 <strong>NSData型</strong> に変換する必要があります。</p>

<p>そして、NSData型のままでは各要素を取り出せないので、 <strong>(JSONの形をした)AnyObject?型</strong> に変換させましょう。<br/>
(Dictionary型に変換しても良いのですが、既にJSONの形に変換されているので十分でしょう。)<br/>
後は各フィールドの型に従って変換して取り出していくイメージで書きましょう。</p>

<p>覚えておきたいのは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="err">定数名</span> <span class="o">=</span> <span class="err">要素</span> <span class="n">as</span><span class="o">?</span> <span class="err">定数の型</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 指定した定数の型に変換できた場合に、この中を通過する(変換できなかった場合はnilを入れようとするので、この中を通過しない)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という変換の書き方です。<br/>
Swiftの場合、JSONの取り扱いで思った以上にコードが長くなり、ネスト化してしまいます。<br/>
それを防ぐため&amp;JavaScriptのような書き方を意識したライブラリがたくさん出ています。<br/>
近いうち使ってみようと思います。</p>

<p>また、変換時に<code>[AnyObject]</code>や<code>[String: AnyObject]</code>と書いているのは、<br/>
前者が<code>Array型</code>に変換していて、後者は<code>Dictionary型</code>に変換しています。<br/>
Swiftではどんな要素を含むArray型なのかを示し、どんなkeyでどんなvalueなのかをDictionary型として明示的に示す必要があります。</p>

<p>もし、Objective-Cの<code>NSArray型</code>や<code>NSDictionary型</code>に変換する場合は中身の形式を考えずに<code>as</code>の後ろに続けて書けばOKです。</p>

<h5>GETリクエスト(パターン２)</h5>

<p>とは言え、少しネストが深いので、別のresoponse形式のパターンで試してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">JSON</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">let</span> <span class="n">weatherArray</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// JSONからweatherフィールドを取得。その際、Array型に変換できた場合に通過</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過</span>
</span><span class='line'>              <span class="n">println</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// NSDictionary型のweatherからdescriptionを指定して取得</span>
</span><span class='line'>          <span class="n">var</span> <span class="nl">description2:</span><span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="n">description2</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、レスポンスメソッドに<code>responseJSON</code>を指定することで、<br/>
1つ目に上げた<code>AnyObject?型 ⇒ NSData型</code>への変換と<code>NSData型 ⇒ JSONの形をしたAnyObject?型</code>への変換は不要となります。<br/>
既に<code>responseJSON</code>の中でやってくれています。<br/>
少しネストが浅くなりましたね！</p>

<h5>GETリクエスト(パターン３)</h5>

<p>まだ、ネストが深いって？<br/>
よし！思い切ってネストをなくしましょう！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GETリクエスト</span>
</span><span class='line'><span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">GET</span><span class="p">,</span> <span class="s">&quot;http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&quot;</span><span class="p">).</span><span class="n">response</span> <span class="p">{</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// AnyObject?型をNSData型に変換。さらにJSONの形をしたNSDictionary型に変換。</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span> <span class="n">as</span><span class="o">!</span> <span class="n">NSData</span><span class="p">,</span> <span class="nl">options:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">MutableContainers</span><span class="p">,</span> <span class="nl">error:</span> <span class="nb">nil</span><span class="p">)</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">weatherArray</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;weather&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">weather</span> <span class="o">=</span> <span class="n">weatherArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="n">weather</span><span class="p">[</span><span class="s">&quot;description&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>う〜ん。ネストは確かになくなったのですが、Unwrapの手法を <strong>Implicitly Unwrapped Optional</strong> にしたため、nilが発生した段階でエラーが発生して落ちます&hellip;。<br/>
値がない場合には空オブジェクトを返すAPIである場合には問題ないと思います。</p>

<p>だんだんとSwiftの基礎含めて理解が進んできた気がします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/17/swift-base-2/"/>
    <updated>2015-05-17T17:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/17/swift-base-2</id>
    <content type="html"><![CDATA[<h4>Swiftの型</h4>

<p>続いて、基本的な内容を見ていきます。<br/>
SwiftはObjective-Cと型の表現が変わりました。<br/>
よく使う型を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">intValue:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">var</span> <span class="nl">doubleValue:</span><span class="n">Double</span> <span class="o">=</span> <span class="mf">1.234</span>
</span><span class='line'><span class="n">var</span> <span class="nl">floatValue:</span><span class="n">Float</span> <span class="o">=</span> <span class="mf">5.678</span>
</span><span class='line'><span class="n">var</span> <span class="nl">boolValue:</span><span class="n">Bool</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="n">var</span> <span class="nl">stringValue:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;abcdefg&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="nl">charValue:</span><span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">intArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">stringArray</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="s">&quot;123&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">testDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;job&quot;</span><span class="o">:</span> <span class="s">&quot;programmer&quot;</span><span class="p">,</span> <span class="s">&quot;skillNum&quot;</span><span class="o">:</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>因みにこれをObjective-Cで書くと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSInteger</span> <span class="n">intValue</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">doubleValue</span> <span class="o">=</span> <span class="mf">1.234</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">floatValue</span> <span class="o">=</span> <span class="mf">5.678</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">boolValue</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">stringValue</span> <span class="o">=</span> <span class="s">@&quot;abcdefg&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">charValue</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">intArray</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">stringArray</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;abc&quot;</span><span class="p">,</span> <span class="s">@&quot;123&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">testDictionary</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;job&quot;</span><span class="o">:</span> <span class="s">@&quot;programmer&quot;</span><span class="p">,</span> <span class="s">@&quot;skillNum&quot;</span><span class="o">:</span> <span class="err">@</span><span class="mi">5</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>CGFloatで定義された<code>doubleValue</code>と<code>floatValue</code>は<code>double</code>, <code>float</code>をそれぞれ書くこともできます。<br/>
(ここは32bit, 64bit問題のため、安全側に倒すために<code>CGFloat</code>に統一して書いています。)</p>

<h4>Swiftでクラスを作成</h4>

<p>さて、新たにSwiftファイルを追加して、カスタムクラスを実装してみましょう。<br/>
まずは、Objective-Cと同様で、左メニューのフォルダを右クリックして、『New File』を選択します。</p>

<p><img src="http://grandbig.github.io/images/swift_add_new_class.png" alt="New File" /></p>

<p>そして、iOS > Source > Swift Fileを選択します。</p>

<p><img src="http://grandbig.github.io/images/choose_swift_file.png" alt="Add Swift File" /></p>

<p>Objective-Cと違って、どのクラスを継承するか否かを決めるフェーズはありません。<br/>
ファイル名と保存場所を決めるのみです。</p>

<p><img src="http://grandbig.github.io/images/create_swift_file.png" alt="Save Swift File" /></p>

<p>作成されるファイルの内容は下記になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここにカスタムクラスを実装していきましょう。<br/>
例えば下記のようなクラスを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">Engineer:</span><span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// プロパティの定義</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">level:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">businessTitle:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;新米エンジニア&quot;</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">skill:</span><span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Swift&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// メソッドの定義</span>
</span><span class='line'>  <span class="c1">// レベルアップ処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">levelUp</span><span class="p">()</span> <span class="o">-&gt;</span><span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">level</span><span class="o">++</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 新規スキルをセットする処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">addNewSkills</span><span class="p">(</span><span class="nl">newSkill:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">skill</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">newSkill</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 新たな肩書をセットする処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">updateBusinessTitle</span><span class="p">(</span><span class="nl">title:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">businessTitle</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のクラスでは <strong>NSObject</strong> クラスを継承しています。逆に言えばEngineerクラスのスーパークラスは <strong>NSObject</strong> クラスということです。<br/>
Engineerクラスには<code>level</code>, <code>businessTitle</code>, <code>skill</code>という3つのプロパティを定義しています。(全てに初期値を与えています。)<br/>
また、<code>levelUp()</code>, <code>addNewSkills(newSkill:String)</code>, <code>updateBusinessTitle(title:String)</code>の3つのクラス・メソッドを定義しています。</p>

<p>では、実際にカスタムクラスを使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 呼び出す側のswiftファイル(ViewController.swift)</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// カスタムクラスの初期化</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">engineer:</span><span class="n">Engineer</span> <span class="o">=</span> <span class="n">Engineer</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// プロパティの初期値をログ出力</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 各メソッドを実行</span>
</span><span class='line'>      <span class="n">engineer</span><span class="p">.</span><span class="n">levelUp</span><span class="p">()</span>
</span><span class='line'>      <span class="n">engineer</span><span class="p">.</span><span class="n">addNewSkills</span><span class="p">(</span><span class="s">&quot;Objective-C&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">engineer</span><span class="p">.</span><span class="n">updateBusinessTitle</span><span class="p">(</span><span class="s">&quot;iOSアプリエンジニア&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">// プロパティをログに再出力</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで気になるのが、自作したクラスを使うときに<code>import</code>をしていないという点です。<br/>
同プロジェクト内のクラスは<code>import</code>の必要がないということらしいです。<br/>
なので、自作したクラスをCocoaPodでインストールした場合は<code>import</code>の必要があると思われます。</p>

<p>基本的なところで微妙にObjective-Cと異なる部分があるので注意が必要ですね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/16/swift-base/"/>
    <updated>2015-05-16T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/16/swift-base</id>
    <content type="html"><![CDATA[<h4>Swiftを基本から覚えよう</h4>

<p>さて、本日はSwiftについて基本から覚えていきたいと思います。<br/>
筆者はこれまでObjective-Cを中心に開発を続けてきました。<br/>
が、昨年Swiftが初めて発表されて以来、少しずつSwiftに関わることが増えてきました。<br/>
正直なところ、Xcodeのバージョンアップごとに『 <strong>割りと大きな変更が生じるSwift</strong> を商用アプリに使うかどうか』は迷います。deprecatedになるメソッドはあるにしても『 <strong>大幅な変更の生じないObjective-C</strong> 』の方が安全ですし、何より多彩なライブラリが存在しています。</p>

<p>とは言え、今後、Swiftしか使えないiOSアプリエンジニアが当たり前に存在していくことでしょう。<br/>
そんなときにObjective-CもSwiftも当然のように使えるエンジニアとなっていたいので勉強しておこうと思う次第です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Swiftでプロジェクトを生成</h4>

<p>言語でSwiftを選択してXcodeのプロジェクトを新規作成すると、ViewController.swiftは下記のように生成されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これまでのObjective-Cでは下記のように生成されていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>少し違和感があるかもしれませんが、ぱっと見た感じ、あまり変わらないようにも見えます。<br/>
因みに、Objective-Cの場合はViewController.m, ViewController.hの2つのファイルが作成されますが、Swiftの場合は <strong>swift</strong> という拡張子のファイルのみです。</p>

<h4>変数/定数の定義</h4>

<p>Swiftでの変数/定数の定義の仕方を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="nl">variableString:</span><span class="n">String</span>     <span class="c1">// String型の変数を定義</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">invariableString:</span><span class="n">String</span>       <span class="c1">// String型の定数を定義</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>【ポイント】</p>

<ul>
<li><strong>var 変数名:変数の型</strong></li>
<li><strong>let 定数名:定数の型</strong></li>
<li>1行の終わりは <strong>改行</strong> or <strong>;(セミコロン)</strong></li>
</ul>


<p>letは <strong>定数</strong> なので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="nl">invariableString:</span><span class="n">String</span>     <span class="c1">// String型の定数を定義</span>
</span><span class='line'>
</span><span class='line'><span class="n">invariableString</span> <span class="o">=</span> <span class="s">&quot;これは定数です。&quot;</span>
</span><span class='line'><span class="n">invariableString</span> <span class="o">=</span> <span class="s">&quot;定数なので、2回目以降の値設定はエラーが発生します。&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようなことを書くと、<code>invariableString</code>に対する2回目の値設定行で、<br/>
<code>immutable value 'invariableString' may only be initialized once</code>エラーが発生します。<br/>
(<code>var</code>は定数なので問題ありません。)</p>

<h4>グローバル変数/定数の定義</h4>

<p>Swiftのグローバル変数/定数の仕方を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="nl">globalVariableInt:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="nl">globalInvariableInt:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>【ポイント】</p>

<ul>
<li>クラス外に定義した変数/定数はグローバル変数/定数</li>
<li>グローバル変数/定数は共に初期値が必要</li>
</ul>


<p>2つ目のポイントに書いた通り、初期値を与えないと<code>Global 'var' declaration requires an initializer expression or getter/setter specifier</code>, <code>Global 'let' declaration requires an initializer expression</code>といったエラーが発生します。</p>

<h4>オプショナル型と非オプショナル型</h4>

<p>オプショナル型とは、Swiftで唯一『 <strong>nilの代入が許可された</strong> 』型です。逆に『 <strong>nilの代入を許可されていない</strong> 』型を非オプショナル型と言います。<br/>
では、Swiftのオプショナル型/非オプショナル型の仕方を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="nl">variableString:</span><span class="n">String</span><span class="o">?</span>     <span class="c1">// String型&amp;オプショナル型の変数を定義</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">invariableString:</span><span class="n">String</span><span class="o">?</span>   <span class="c1">// String型&amp;オプショナル型の定数を定義</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>【ポイント】</p>

<ul>
<li>var 変数名:変数型 <strong>?</strong> でオプショナル型</li>
<li>let 定数名:定数型 <strong>?</strong> でオプショナル型</li>
<li>オプショナル型の初期値は <strong>nil</strong></li>
<li>非オプショナル型の初期値は何も初期値が入っていない(nilが入っているわけではない)</li>
</ul>


<p>これまで特に意識せずに変数/定数を定義してきたと思いますが、『 <strong>?</strong> 』をつけていない変数/定数は自動的に非オプショナル型となります。<br/>
よって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">variableString:</span><span class="n">String</span>
</span><span class='line'><span class="n">let</span> <span class="nl">inVariableString:</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'><span class="n">variableString</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">inVariableString</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすると<code>Cannnot assign a value of type 'nil' to a value of type 'String'</code>とエラーが発生します。</p>

<p>因みに、 <strong>?</strong> をつけた書き方は省略した書き方です。<br/>
<code>var variableString:String?</code>は<code>var variableString:Optional&lt;String&gt;</code>と同じです。</p>

<h4>オプショナル型の使い方(アンラップの仕方)</h4>

<p>オプショナル型はそのままでは使えません。<br/>
例えば、<code>var variableString:String?</code>は<code>String</code>型の変数を<code>Optional</code>(オプショナル)型の箱に入れているイメージです。<br/>
なので、<code>String</code>型として値を扱うためには『 <strong>Unwrap</strong> (アンラップ)』する必要があるのです。<br/>
(箱から<code>String</code>型を取り出すイメージです。)</p>

<p>アンラップには幾つか方法があります。</p>

<ul>
<li>Forced Unwrapping<br/>
強制的にアンラップする方法。変数/定数名の末尾に <strong>!</strong> をつける</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">fuga:</span><span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;FugaFuga&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">fuga</span><span class="o">!</span><span class="p">.</span><span class="n">lowercaseString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記例で<code>fuga.lowercaseString</code>とすると<code>Value of optional type 'String' not unwrapped; did you mean to use '!' or '?'?</code>という静的解析でエラーが発生します。<br/>
因みに、『 <strong>!</strong> 』をつけた場合、中身がnilだと実行時にエラーが発生するので注意。</p>

<ul>
<li>Optional Chaining<br/>
Optionalのメソッドやプロパティ参照時にnilチェックする方法です。<br/>
nilでなければUnwrapしてnilであった場合はnilを返す方法です。<br/>
実はUnwrapして返されるものもOptional型であったりします。<br/>
ただし、そのメソッドやプロパティを使うことができるのです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span><span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="n">var</span> <span class="nl">fuga:</span><span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="n">hoge</span><span class="o">?</span><span class="p">.</span><span class="n">lowercaseString</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">fuga</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hoge</span> <span class="o">=</span> <span class="s">&quot;HogeHoge&quot;</span>
</span><span class='line'><span class="n">fuga</span> <span class="o">=</span> <span class="n">hoge</span><span class="o">?</span><span class="n">lowercaseString</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">fuga</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を実行してみると、1回目のprintlnで<code>nil</code>が出力され、2回目のprintlnで<code>Optional("hogehoge")</code>と出力されます。</p>

<ul>
<li>Optional Binding<br/>
nilチェックをして、nilでない場合に限り、Unwrapして元の方を返す方法です。<br/>
別名の変数/定数に値を入れ直して、以後、それを使っていく場合に使います。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span><span class="n">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">var</span> <span class="nl">fuga:</span><span class="n">String</span> <span class="o">=</span> <span class="n">hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;値が格納されていました。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;nilでした。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hoge</span> <span class="o">=</span> <span class="s">&quot;HogeHoge&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">var</span> <span class="nl">fuga:</span><span class="n">String</span> <span class="o">=</span> <span class="n">hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;値が格納されていました。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;nilでした。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の例文を実行すると、1回目は<code>true</code>, 2回目は<code>false</code>の条件分岐を通過するはずです。</p>

<ul>
<li>Implicitly Unwrapped Optional<br/>
使用時に自動的にUnwrapされて元の型が返される方法です。<br/>
<code>nil</code>が入っているものに対して実行した場合はエラーが発生します。(静的解析時には判別されないことに注意)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">vat</span> <span class="nl">hoge:</span><span class="n">String</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;HogeHoge&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">hoge</span><span class="p">.</span><span class="n">lowercaseString</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="nl">fuga:</span><span class="n">String</span><span class="o">!</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">fuga</span><span class="p">.</span><span class="n">lowercaseString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の例文を実行すると、1回目のログは出力されますが、2回目のログ出力時にエラーが発生します。<br/>
因みに、『 <strong>型!</strong> 』は『 <strong>ImplicitlyUnwrappedOptional&lt;型名></strong> 』の省略形です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">var</span> <span class="nl">hoge:</span><span class="n">String</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;HogeHoge&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="nl">fuga:</span><span class="n">ImplicitlyUnwrappedOptional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="s">&quot;FugaFuga&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じですね。</p>

<h4>オプショナル型の意義</h4>

<p>前章でオプショナル型と非オプショナル型が存在することがわかりました。<br/>
では、このオプショナル型/非オプショナル型は何のために使うのでしょうか？</p>

<p>【オプショナル型/非オプショナル型を使う理由】</p>

<ul>
<li>静的解析でエラーを発見するため</li>
<li>実行時の想定外のエラーを防ぐため</li>
<li>オープンソースとしてライブラリを作成した際に、ライブラリ利用者が想定外のエラーに合わないようにするため</li>
</ul>


<h4>クラスプロパティ</h4>

<p>クラスプロパティの定義の仕方を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">var</span> <span class="nl">variableNumber:</span><span class="n">Int</span><span class="o">?</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">unVariableNumber:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="nl">variableString:</span><span class="n">String</span>     <span class="c1">// String型の変数を定義</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">invariableString:</span><span class="n">String</span>       <span class="c1">// String型の定数を定義</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>【ポイント】</p>

<ul>
<li>クラスプロパティ定義時は初期値が必要</li>
<li>varは初期値がnilなので具体的な値を書く必要はない</li>
<li>letは初期値にnilが入らないので、具体的な値を設定する必要がある</li>
</ul>


<h4>クラスメソッド</h4>

<p>クラスメソッドの定義の仕方を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">var</span> <span class="nl">variableNumber:</span><span class="n">Int</span><span class="o">?</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">unVariableNumber:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="n">setTestString</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="nl">b:</span><span class="s">&quot;def&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">setTestString</span><span class="p">(</span><span class="nl">a:</span><span class="n">String</span><span class="p">,</span> <span class="nl">b:</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>【ポイント】</p>

<ul>
<li>func メソッド名(第一引数名:第一引数の型, 第二引数名:第二引数の型, &hellip;) &ndash;> 戻り値の型 { &hellip;. }</li>
<li>呼び出し側では、メソッド名(第一引数に渡す値, 第二引数名:第二引数に渡す値)</li>
</ul>


<p>まだまだSwiftについて調べていきますが、記事が長くなってきたので本日はここまで。</p>

<p>参考サイト:</p>

<ul>
<li><a href="http://qiita.com/koher/items/c6f446bad54442a28bf4">SwiftのOptional型を極める</a></li>
<li><a href="http://www.slideshare.net/hasegawatomoki/ss-40424010">オプショナル型。 〜 なんとなく付ける ! ? 撲滅 &ndash; SlideShare</a></li>
<li><a href="http://qiita.com/cotrpepe/items/518c4476ca957a42f5f1">[Swift] Optional 型についてのまとめ Ver2</a></li>
<li><a href="http://qiita.com/nori0620/items/afa94cc42f3233f54bdc">[Swift] Swiftのoptional valueの便利さ /「?」と「!」でより堅牢なコードへ</a></li>
<li><a href="http://qiita.com/mokumoku/items/5fef496f4e97a053e53e">【Swift】Optional型を安全にunwrapしよう</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AltBeaconを使ってAndroidでiBeaconを検知しよう]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/16/altbeacon/"/>
    <updated>2015-05-16T19:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/16/altbeacon</id>
    <content type="html"><![CDATA[<h4>AltBeaconを使って手軽にAndroidでiBeaconを検知しよう</h4>

<p>本日はAndroidでのiBeacon検知をやってみようと思います。<br/>
自作することも簡単だと聞きますが、Radius Networks社が出している<a href="https://github.com/AltBeacon/android-beacon-library">AltBeacon</a>が非常に便利なようです。</p>

<p>何と言ってもiOSのCoreLocation.frameworkと同じ感覚で扱えるというのが強みでしょう。<br/>
(iOSアプリエンジニアにとっては非常に助かります笑)</p>

<p>さて、実際に実装方法を見て行きましょう。</p>

<p>実装方法や設定に関しては、<a href="http://dev.classmethod.jp/series/android-x-ibeacon/">Developers.IO Android x iBeacon – シリーズ –</a>を踏襲させて頂きました。<br/>
めちゃくちゃわかりやすいサイトなので、他のページも参考にすると良いです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>本記事のAndroid Studioのバージョンは1.2となります。</p>

<p><img src="http://grandbig.github.io/images/altbeacon_1.png" alt="Android Studioバージョン" /></p>

<h5>AltBeaconのライブラリを使うための準備</h5>

<p>AltBeaconライブラリを導入します。</p>

<p>１. Gradle Scripts > build.gradle(Module: app)の編集
<code>compile 'org.altbeacon:android-beacon-library:2+'</code>を<code>dependencies</code>に追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">altbeacon</span><span class="o">:</span><span class="n">android</span><span class="o">-</span><span class="n">beacon</span><span class="o">-</span><span class="nl">library:</span><span class="mi">2</span><span class="o">+</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>２. app > manifests > AndroidManifest.xmlの編集
Bluetooth関連のpermissionを追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.example.takahiro.altbeaconsample&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- ここを追加 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.BLUETOOTH&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.BLUETOOTH_ADMIN&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-feature</span> <span class="na">android:name=</span><span class="s">&quot;android.hardware.bluetooth_le&quot;</span> <span class="na">android:required=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;application</span>
</span><span class='line'>      
</span><span class='line'>      <span class="err">&lt;省略</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/application&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span> 
</span></code></pre></td></tr></table></div></figure>


<h5>iBeaconの検知を実装</h5>

<p>早速、iBeaconの検知(モニタリング)を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">altbeaconsample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.RemoteException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.ActionBarActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AltBeacon関連のライブラリをimport</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconConsumer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconParser</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.Identifier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.MonitorNotifier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.Region</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="kd">implements</span> <span class="n">BeaconConsumer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// BeaconConsumerインターフェースを実装</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;AltBeacon Sample&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// BeaconManagerクラスの変数を定義</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BeaconManager</span> <span class="n">beaconManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iBeaconのデータを認識するためのParserフォーマット</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">IBEACON_FORMAT</span> <span class="o">=</span> <span class="s">&quot;m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// staticメソッドでBeaconManagerクラスのインスタンスを取得</span>
</span><span class='line'>      <span class="n">beaconManager</span> <span class="o">=</span> <span class="n">BeaconManager</span><span class="o">.</span><span class="na">getInstanceForApplication</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// BeaconParseをBeaconManagerに設定</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">.</span><span class="na">getBeaconParsers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">BeaconParser</span><span class="o">().</span><span class="na">setBeaconLayout</span><span class="o">(</span><span class="n">IBEACON_FORMAT</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Inflate the menu; this adds items to the action bar if it is present.</span>
</span><span class='line'>      <span class="n">getMenuInflater</span><span class="o">().</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">menu</span><span class="o">.</span><span class="na">menu_main</span><span class="o">,</span> <span class="n">menu</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="n">MenuItem</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Handle action bar item clicks here. The action bar will</span>
</span><span class='line'>      <span class="c1">// automatically handle clicks on the Home/Up button, so long</span>
</span><span class='line'>      <span class="c1">// as you specify a parent activity in AndroidManifest.xml.</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getItemId</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_settings</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onOptionsItemSelected</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBeaconServiceConnect</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// BeaconManagerクラスのモニタリング通知受取り処理</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">.</span><span class="na">setMonitorNotifier</span><span class="o">(</span><span class="k">new</span> <span class="n">MonitorNotifier</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didEnterRegion</span><span class="o">(</span><span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域進入時に実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didEnterRegion&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didExitRegion</span><span class="o">(</span><span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域退出時に実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didExitRegion&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didDetermineStateForRegion</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域への侵入/退出のステータスが変化したときに実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didDetermineStateForRegion&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// UUIDの作成</span>
</span><span class='line'>          <span class="n">Identifier</span> <span class="n">identifier</span> <span class="o">=</span> <span class="n">Identifier</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;434B4666-E4B2-4B78-8C13-901AFEE3DBB6&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// モニタリングの開始</span>
</span><span class='line'>          <span class="n">beaconManager</span><span class="o">.</span><span class="na">startMonitoringBeaconsInRegion</span><span class="o">(</span><span class="k">new</span> <span class="n">Region</span><span class="o">(</span><span class="s">&quot;unique-id-001&quot;</span><span class="o">,</span> <span class="n">identifier</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 例外が発生した場合の処理</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">.</span><span class="na">unbind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは下記です。</p>

<ul>
<li>iBeacon検知のためにBeaconParserを定義して、BeaconLayoutに設定</li>
<li><code>startMonitoringBeaconsInRegion</code>する際の引数であるRegionへの定義
各引数は<code>Region("監視対象ID", "UUID", "major", "minor")</code>のようになっています。<br/>
<strong>監視対象ID</strong> さえ設定すれば、iBeaconを検知可能です。UUID, major, minorを設定すると、該当するiBeaconのみ検知するようになります。</li>
</ul>


<h5>iBeaconで距離計測</h5>

<p>次にiBeaconの距離計測をしてみましょう。<br/>
今回は領域観測をして、領域に入ったタイミングで距離計測を開始し、領域を出たタイミングで距離計測を停止します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBeaconServiceConnect</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// BeaconManagerクラスのモニタリング設定</span>
</span><span class='line'>  <span class="n">beaconManager</span><span class="o">.</span><span class="na">setMonitorNotifier</span><span class="o">(</span><span class="k">new</span> <span class="n">MonitorNotifier</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didEnterRegion</span><span class="o">(</span><span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 領域侵入時に実行</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didEnterRegion&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// レンジングの開始</span>
</span><span class='line'>              <span class="n">beaconManager</span><span class="o">.</span><span class="na">startRangingBeaconsInRegion</span><span class="o">(</span><span class="k">new</span> <span class="n">Region</span><span class="o">(</span><span class="s">&quot;unique-id-001&quot;</span><span class="o">,</span> <span class="n">identifier</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 例外が発生した場合</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didExitRegion</span><span class="o">(</span><span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 領域退出時に実行</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didExitRegion&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// レンジングの停止</span>
</span><span class='line'>              <span class="n">beaconManager</span><span class="o">.</span><span class="na">stopRangingBeaconsInRegion</span><span class="o">(</span><span class="k">new</span> <span class="n">Region</span><span class="o">(</span><span class="s">&quot;unique-id-001&quot;</span><span class="o">,</span> <span class="n">identifier</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 例外が発生した場合</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// BeaconManagerクラスのレンジング設定</span>
</span><span class='line'>  <span class="n">beaconManager</span><span class="o">.</span><span class="na">setRangeNotifier</span><span class="o">(</span><span class="k">new</span> <span class="n">RangeNotifier</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">didRangeBeaconsInRegion</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Beacon</span><span class="o">&gt;</span> <span class="n">beacons</span><span class="o">,</span> <span class="n">Region</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 検出したビーコンの情報を全部Logに書き出す</span>
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="n">Beacon</span> <span class="n">beacon</span> <span class="o">:</span> <span class="n">beacons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;UUID:&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getId1</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, major:&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getId2</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, minor:&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getId3</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, Distance:&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getDistance</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,RSSI&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getRssi</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, TxPower&quot;</span> <span class="o">+</span> <span class="n">beacon</span><span class="o">.</span><span class="na">getTxPower</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// モニタリングの開始</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">.</span><span class="na">startMonitoringBeaconsInRegion</span><span class="o">(</span><span class="k">new</span> <span class="n">Region</span><span class="o">(</span><span class="s">&quot;unique-id-001&quot;</span><span class="o">,</span> <span class="n">identifier</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>AltBeaconライブラリはだいぶ使いやすいですね！<br/>
iBeaconはiOS先行でサービスを始めることが多いと思うので、iOSの仕様に合わせてプログラミングを組めるのはエンジニアとしてありがたいですね。<br/>
(Androidユーザが多いとは言えない日本にとっては、Android特有の機能を設けることは工数的に優先すべきではなかったりしますしね。趣味として取り入れたい気持ちはありますが&hellip;。)</p>

<p>と言ったところで本日はここまで。</p>

<p><a href="https://github.com/grandbig/altBeaconSample">本記事のレポジトリはこちら</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StoryboardでNavigationBarを表示する]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar/"/>
    <updated>2015-05-10T22:04:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar</id>
    <content type="html"><![CDATA[<h4>StoryboardでNavigationBarを表示する方法</h4>

<p>さて、今日も忘れやすい内容なのでメモメモ&hellip;。<br/>
最近はXIBファイルよりもStoryboardを利用するシーンが多くなっているかと思います。<br/>
そこで、本日はStoryboardでNavigationBarを表示する方法について説明したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>方法は実に簡単です。<br/>
Main.storyboardを開いて、 <strong>メニューのEditor > Embed In > Navigation Controller</strong> を選択してください。
すると、これまでViewControllerが1つだけだった状態からNavigation Controllerが追加されます。<br/>
また、初めからあったViewControllerにもNavigationBarが表示されたことがわかると思います。<br/>
これは正確には <strong>Navigation Item</strong> が追加された状態です。このNavigation Itemを編集すれば、任意のタイトルを付与することができますし、Backボタンの名称も決められます。さらに、 <strong>prompt</strong> (説明文)を表示することもできます。</p>

<p>Backボタンではなく、好きなアクションを起こさせるためのボタンを追加する場合には、右メニューバーからButtonを追加すればOKです。自動的にBar Button Itemが追加されます。<br/>
すると、下図のような構成になるはずです。</p>

<p><img src="http://grandbig.github.io/images/storyboard-navigationbar.png" alt="ViewControllerの構成" /></p>

<p>Storyboardの画面的には下図になります。</p>

<p><img src="http://grandbig.github.io/images/storyboard-navigationbar2.png" alt="Storyboard" /></p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一定時間内は画面タップをさせない！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/09/timer-progresshud/"/>
    <updated>2015-05-09T23:37:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/09/timer-progresshud</id>
    <content type="html"><![CDATA[<h4>SVProgressHUDとNSTimerを使う</h4>

<p>さて、本日はさくっとメモしておきます。<br/>
できると思っていて当然できた話なので、本当にメモです笑。</p>

<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>などでどこかしらのサーバに通信している間、画面をユーザに触らせたくないことがあるかもしれません。<br/>
そんなときはローディングウィンドウを<a href="https://github.com/TransitApp/SVProgressHUD">SVProgressHUD</a>で表示し、 <strong>NSTimer</strong> を使って時間で操ります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;SVProgressHUD.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">showLoadWindow:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ローディングウィンドウの表示</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showWithStatus:</span><span class="s">@&quot;Loading...&quot;</span> <span class="nl">maskType:</span><span class="n">SVProgressHUDMaskTypeGradient</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// タイマーの設定</span>
</span><span class='line'>  <span class="n">_timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="mf">5.0</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">hiddenWindow:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> タイマー対象メソッド(ローディングウィンドウを非表示にする処理)</span>
</span><span class='line'><span class="cm"> @param timer タイマー</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hiddenWindow:</span><span class="p">(</span><span class="n">NSTimer</span> <span class="o">*</span><span class="p">)</span><span class="nv">timer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="n">dismiss</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>よし、できた！ってところでメモ書き終了。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDBを使ってSQLiteに画像を保存しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/07/sqlite-img/"/>
    <updated>2015-05-07T00:37:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/07/sqlite-img</id>
    <content type="html"><![CDATA[<h4>FMDBを使ってSQLiteに画像を保存してみる</h4>

<p>さて、当たり前なようでやったことがなかったのでやってみました。<br/>
たぶんもっとキレイな方法があると思うのですが、なぜかできず&hellip;。できた方法を説明します。</p>

<h5>SQLiteにデータを保存</h5>

<p>まず下記のメソッドを実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// DBに接続</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">dbConnect:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dbName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">dir</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath:</span><span class="p">[</span><span class="n">dir</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">dbName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">db</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// テーブルの作成</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createTable:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dbName</span> <span class="nf">tableName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="n">dbName</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;create table if not exists %@ (id INTEGER PRIMARY KEY, title TEXT, imgData TEXT)&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>さて、上記のメソッドは基本的なDB接続とテーブル作成をするためのものです。<br/>
続いて画像のデータをinsertします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertImgData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dbName</span> <span class="nf">tableName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;apple.png&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">imgData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">img</span><span class="p">)];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">imgString</span> <span class="o">=</span> <span class="p">[</span><span class="n">imgData</span> <span class="nl">base64EncodedStringWithOptions:</span><span class="n">NSDataBase64Encoding76CharacterLineLength</span><span class="p">];</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="n">dbName</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">insert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;insert into %@ (title, imgData) values (&#39;%@&#39;, &#39;%@&#39;)&quot;</span><span class="p">,</span> <span class="n">tableName</span><span class="p">,</span> <span class="s">@&quot;test&quot;</span><span class="p">,</span> <span class="n">imgString</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">insert</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はテストのために固定の画像を内部DBにinsertするようにしています。<br/>
そして、画像データを取得するメソッドを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span><span class="p">)</span><span class="nf">getImgData:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dbName</span> <span class="nf">tableName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">imgData</span><span class="p">;</span>
</span><span class='line'>  <span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">dbConnect:</span><span class="n">dbName</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">select</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;select * from %@ order by id desc limit 1&quot;</span><span class="p">,</span> <span class="n">table_name</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'>  <span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="n">select</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">imgString</span> <span class="o">=</span> <span class="p">[</span><span class="n">rs</span> <span class="nl">stringForColumn:</span><span class="s">@&quot;imgData&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="n">imgData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSData</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBase64EncodedString:</span><span class="n">imgString</span> <span class="nl">options:</span><span class="n">NSDataBase64DecodingIgnoreUnknownCharacters</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">imgData</span><span class="p">];]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重要なのはエンコード/デコードです。<br/>
いろいろなサイトを見ると、NSData型の値をSQLiteのBLOB型で保存すれば良いと書かれているのですが、デフォで画像用でないエンコードされているからなのか、想定した値が取れないんですよね〜。<br/>
う〜ん。もう少し考えてみますが、一先ず、これでもできるってことでメモ書きとしておきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のMacでiOS端末の実機検証を可能にするためには！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/30/multi-mac-develop/"/>
    <updated>2015-04-30T18:55:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/30/multi-mac-develop</id>
    <content type="html"><![CDATA[<h4>証明書と鍵を書きだそう！</h4>

<p>本日は複数のMacでiOS端末の実機検証をするための手順について説明します。</p>

<p>まず、開発者用の証明書を書き出しましょう。<br/>
証明書はキーチェーンアクセスから確認できます。<br/>
キーチェーンアクセスアプリを起動すると、下記画面が表示されます。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_1.png" alt="キーチェーンアクセスの画面" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まずは証明書を書き出しましょう。<br/>
書き出したい証明書を右クリックで『iPhone Developer: ☓☓☓☓を書き出す』を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_2.png" alt="証明書の書き出し" /></p>

<p>名前をつけて保存する際に、パスワードの入力を求められます。<br/>
これは他のMacで証明書を読み込むときに必要となるので、きっちり決めておきましょう。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_3.png" alt="パスワードを設定" /></p>

<p>次に鍵を書き出しましょう。<br/>
先ほど書き出した証明書をプルダウンして、鍵を表示しましょう。<br/>
書き出したい鍵を右クリックで『&#8221;☓☓☓☓&#8221;を書き出す』を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_4.png" alt="鍵の書き出し" /></p>

<p>こちらも同様にパスワードを設定します。<br/>
<img src="http://grandbig.github.io/images/multi_mac_5.png" alt="パスワードを設定" /></p>

<p>以上で書き出しが終了しました。<br/>
続いて、他のMacで証明書と鍵を読み込んでみましょう。</p>

<h4>証明書と鍵を読み込もう</h4>

<p>先ほど書き出した証明書と鍵を他のMacに持ってきます。<br/>
証明書から先にダブルクリックで読み込みましょう。</p>

<p>すると下図のようにパスワード入力画面が要求されるので、先ほど自身で設定したパスワードを入力しましょう。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_6.png" alt="パスワード要求画面" /></p>

<p>続いて、鍵をダブルクリックして読み込みましょう。<br/>
同様に下図のようなパスワード入力画面が要求されます。自身で設定したパスワードを入力しましょう。</p>

<p><img src="http://grandbig.github.io/images/multi_mac_7.png" alt="パスワード要求画面" /></p>

<p>これで証明書と鍵の読込みは完了です。<br/>
キーチェーンアクセスを開いて、書き出した方のMacと同じ証明書と鍵があることを確認しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBeacon完全攻略！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/29/ibeacon-review/"/>
    <updated>2015-04-29T21:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/29/ibeacon-review</id>
    <content type="html"><![CDATA[<h4>iBeaconを復習しよう！</h4>

<p>本日はこれまでも何度か取り上げてきたiBeaconについて改めて復習してみたいと思います。<br/>
今回はiOS端末でのiBeaconの発信/受信に特化して書きます。</p>

<p>これまでの関連記事は以下です。</p>

<ul>
<li><a href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/">噂のiOS7.1でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon/">iOS8でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/">Swiftを使って、iBeaconのCentralアプリを作ろう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/">複数のiBeacon信号を利用してみよう！</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>では、早速、まとめていきましょう。</p>

<h4>iBeaconが利用可能な端末</h4>

<ul>
<li>OS: iOS7.0以上</li>
<li>端末: iPhone4S以降, iPad(第３世代)以降, iPad mini以降, iPod touch(第５世代以降)
※もちろんiPad Airでも利用可能</li>
</ul>


<h4>iOSごとのiBeacon機能の差異</h4>

<p>まずは動作面での差異について</p>

<ul>
<li>iOS7.0.xの場合<br/>
アプリをFG起動もしくはBG起動していないとiBeaconを検知することはできない</li>
<li>iOS7.1.x以降の場合<br/>
アプリを起動していない(停止状態の)場合でもiBeaconを検知可能</li>
</ul>


<p>次にプログラミング面での差異について</p>

<p>プログラミング面ではCentral側にのみ多少の差異があります。<br/>
iBeaconの検知には <strong>CoreLocation.framework</strong> を利用します。
<strong>CoreLocation.framework</strong> は位置情報サービスを利用するためのフレームワークですが、iBeaconの領域監視メソッドが組み込まれています。<br/>
もともと、ジオフェンスの領域監視メソッドが組み込まれていますので、それと同等に扱いたいというApple側の意図が見えます。</p>

<p>具体的な差異について説明します。<br/>
位置情報サービスの利用許可メソッドをiOS8から組み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLBeacon</span> <span class="o">*</span><span class="n">nearestBeacon</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">CLLocationManager</span> <span class="nl">isMonitoringAvailableForClass:</span><span class="p">[</span><span class="n">CLCircularRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS7.x以降の端末</span>
</span><span class='line'>      <span class="c1">// CLLocationManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// UUIDの設定</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="s">@&quot;8D4DB809-032F-4771-96F3-99BD5C25F924&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// Bundle Identifierの取得</span>
</span><span class='line'>      <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">bid</span> <span class="o">=</span> <span class="p">[</span><span class="n">bundle</span> <span class="n">bundleIdentifier</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span> <span class="n">self</span><span class="p">.</span><span class="n">proximityUUID</span> <span class="nl">identifier:</span> <span class="n">bid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// iOS8以上の場合</span>
</span><span class='line'>          <span class="c1">// 位置情報サービスを常に許可させて良いかどうかを尋ねるためのメソッド</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// iOS8未満の場合</span>
</span><span class='line'>          <span class="c1">// iBeacon領域の監視を開始</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS6.x以前の端末</span>
</span><span class='line'>      <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;確認&quot;</span> <span class="nl">message:</span><span class="s">@&quot;iBeacon機能を利用できない端末です。&quot;</span> <span class="nl">delegate:</span> <span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span> <span class="nb">nil</span> <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// アラートを表示</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ユーザの位置情報の許可状態を確認するメソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を常に許可している場合</span>
</span><span class='line'>      <span class="c1">// iBeacon領域の監視を開始</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">startMonitoringForRegion:</span> <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// その他の場合</span>
</span><span class='line'>      <span class="c1">// 設定画面に遷移</span>
</span><span class='line'>      <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">UIApplicationOpenSettingsURLString</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>iOS7.xでは<code>startMonitoringForRegion</code>メソッドを実行した段階で<code>didChangeAuthorizationStatus</code>メソッドが呼ばれます。<br/>
iOS8では、<code>requestAlwaysAuthorization</code>メソッドを実行(位置情報サービスを常に許可する場合のメソッド)しなければ、<code>didChangeAuthorizationStatus</code>メソッドが呼ばれないため、<code>startMonitoringForRegion</code>メソッドの実行タイミングを変える必要が出てきました。</p>

<h4>iBeacon関連メソッドの実行順について(Centralの場合)</h4>

<p>先ほどiBeaconの検知は <strong>CoreLocation.framework</strong> 内のメソッドとして組み込まれていると説明しました。では、他にどんなメソッドがあるのでしょうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域監視が開始された後に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didStartMonitoringForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 領域監視に失敗した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">monitoringDidFailForRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="nf">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域に入った場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域から出た場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 監視領域に対する状態が変化した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didDetermineState:</span><span class="p">(</span><span class="n">CLRegionState</span><span class="p">)</span><span class="nv">state</span> <span class="nf">forRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// iBeacon信号をレンジング検知した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のメソッドを使えば十分なアプリが開発できるはずです。<br/>
さて、ここで注意しておくべきなのは、<code>startRangingBeaconsInRegion</code>メソッドをどのタイミングで実行するかということです。</p>

<p>基本的には、 <strong>監視領域に入ったタイミング</strong> で<code>startRangingBeaconsInRegion</code>メソッドを実行するのが普通かもしれません。<br/>
しかし、この場合は注意が必要です。<br/>
なぜなら、監視領域内でアプリを落として、再度起動した場合、<code>didEnterRegion</code>メソッドが実行されないからです。つまり、既に監視領域に入っている場合は <strong>監視領域に侵入したと見なされない</strong> ということです。<br/>
よって、こういったケースがアプリの利用に打撃を与えるのであれば、 <strong>監視領域に入ったタイミング</strong> のみに<code>startRangingBeaconsInRegion</code>メソッドを置くわけにはいかないことになります。<br/>
その場合は、<code>didDetermineState</code>メソッドで既に監視領域内にいる場合(<code>state</code>が<code>CLRegionStateInside</code>の場合)に<code>startRangingBeaconsInRegion</code>メソッドを実行するようにしましょう。</p>

<h4>Peripheralの注意点</h4>

<p>続いて、PeripheralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末ではアプリをFG起動している間のみiBeacon信号の発信が可能です。<br/>
アプリがBG起動になった場合、iBeacon信号の発信が止まってしまうため、数秒後にCentral側のiOS端末で<code>didExitRegion</code>メソッドが実行されます。<br/>
なので、iOS端末でPeripheralの役割を担いたいのであれば、FG起動を続けることに問題がない使い方である場合に限ります。</p>

<p>因みに、XcodeのBackground Modesで <strong>Act as a Bluetooth LE accessory</strong> を有効にしたとしても、BG起動中はiBeaconを発信することはできません。</p>

<p>また、 <strong>CoreBluetooth.framework</strong> にはiOS端末がiBeacon発信状態(アドバタイジング状態)かを判別する<code>isAdvertising</code> プロパティが存在します。<br/>
iBeaconを発信している状態でアプリをBG起動にした場合は<code>isAdvertising</code>は <strong>YES</strong> として返却されます。つまり、実際の状態と必ずしも一致するわけではないということです。</p>

<h4>Centralの注意点</h4>

<p>最後にCentralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末でiBeaconのレンジング処理を行う場合、FG起動時にしかレンジング処理を実行できません。<br/>
そのため、アプリの状態によらずレンジング処理が必要な仕様を実現することは不可能ということになります。</p>

<p>一応、<code>didEnterRegion</code>メソッドや<code>didExitRegion</code>メソッドなどのデリゲートメソッドが実行された場合、約10秒間はアプリの状態によらずあらゆる処理が実行可能であるため、この間のみレンジング処理を実行して<code>major</code>, <code>minor</code>などの値を取得することは可能です。</p>

<p>正しい動作検証を実施した上でiBeaconを扱うようにしましょう。</p>

<h4>各種設定がOFFの場合のアラート表示について</h4>

<p>さて、直接iBeaconとは関係がありませんが、iOS端末をPeripheralとして扱う場合は <strong>Bluetoothの設定</strong> をONにしておく必要があります。iOS端末をCentralとして扱う場合は <strong>Bluetoothの設定</strong> と <strong>位置情報サービスの設定</strong> をONにしておく必要があります。</p>

<p>これらがOFFになっている場合、iBeaconの機能を利用することができないため、アプリ開発時にアラートを表示してユーザに知らせることを考えるかと思います。<br/>
さらに、できれば設定画面に飛ばしたいと思いますよね？</p>

<p><strong>位置情報サービス</strong> の場合は、iOS8であれば設定画面へのURLスキームが復活したため、問題ありません。(iOS7.xでは設定画面への遷移は諦めましょう。)<br/>
<strong>Bluetooth</strong> の場合は <strong>CoreBluetooth.framework</strong> を利用していれば、難しくありません。(処理に <strong>CoreBluetooth.framework</strong> が不要なCentral側であっても設定画面に飛ばしたいのであれば、<code>import</code>する必要があります。)<br/>
※ 具体的には<code>CBPeripheralManager</code>もしくは<code>CBCentralManager</code>の初期化時に<code>option</code>に<code>CBPeripheralManagerOptionShowPowerAlertKey</code>もしくは<code>CBCentralManagerOptionShowPowerAlertKey</code>を設定すれば良いです。</p>

<p>以上がまとめとなります。<br/>
ぜひぜひ参考にして頂ければと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple Watch Sportを購入しました]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/apple-watch/"/>
    <updated>2015-04-25T12:58:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/apple-watch</id>
    <content type="html"><![CDATA[<h4>Apple Watch Sport</h4>

<p>先日とうとう発売されたApple Watch Sportについて書きたいと思います。<br/>
本記事ではApple Watch Sportの開封および初期設定の手順について説明するに留め、プログラミングは今後に回したいと思います。</p>

<p>まず、Apple Watch Sportは他のApple製品と同じで真っ白な箱に入ってきました。<br/>
写真だと見づらいですが、箱に『Apple Watch』と書かれています。</p>

<p><img src="http://grandbig.github.io/images/apple_watch1.png" alt="Apple Watch Sportの箱" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>箱を明けてみると、真っ白なケースが入っています。<br/>
<img src="http://grandbig.github.io/images/apple_watch2.png" alt="Apple Watch Sportの箱を開けると..." /></p>

<p>真っ白なケースを開けてみましょう。<br/>
出ました！Apple Watch Sportの初お目見えです！<br/>
<img src="http://grandbig.github.io/images/apple_watch3.png" alt="Apple Watch Sport" /></p>

<p>付属品は他にサイズ違いのバンド, 充電ケーブル, 電源コネクタ, 説明書が入っていました。<br/>
<img src="http://grandbig.github.io/images/apple_watch4.png" alt="Apple Watch Sportの付属品" /></p>

<p>※ 因みに、初めからつけられていたバンドはLサイズのものでした。付属品として入っていたものがS/M兼用サイズのようです。</p>

<p>次にApple Watch Sportの初期設定に移ります。<br/>
Apple Watch Sportの右側面にはハードボタンが2つついています。<br/>
下のボタンを長押しして起動してみましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch5.png" alt="Apple Watch Sportの側面" /></p>

<p>初めに使用言語を聞かれるため、もちろん日本語を選択します。<br/>
すると、iPhoneでApple Watchのアプリを起動するように求められます。<br/>
<img src="http://grandbig.github.io/images/apple_watch6.png" alt="Apple Watch Sportとペアリング1" /></p>

<p>では、iPhoneでApple Watchアプリを起動してみましょう。<br/>
ペアリングを開始をタップしましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch7.png" alt="Apple Watch Sportとペアリング2" /></p>

<p>どうやらカメラを向ける必要があるようなので、Apple Watch Sportに向けてみます。<br/>
<img src="http://grandbig.github.io/images/apple_watch8.png" alt="Apple Watch Sportとペアリング3" /></p>

<p>ペアリングが完了すると下記のようになります。<br/>
<img src="http://grandbig.github.io/images/apple_watch9.png" alt="Apple Watch Sportとペアリング4" /></p>

<p>続いて、iPhoneからApple Watch Sportの設定を続ける必要があります。<br/>
Apple Watchを設定をタップすると、装着する腕を選択する画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch10.png" alt="Apple Watch Sportの設定1" /></p>

<p>次に利用規約に同意する画面が表示されるので、同意しましょう。<br/>
<img src="http://grandbig.github.io/images/apple_watch11.png" alt="Apple Watch Sportの設定2" /></p>

<p>そして、Apple IDを入力します。<br/>
<img src="http://grandbig.github.io/images/apple_watch12.png" alt="Apple Watch Sportの設定3" /></p>

<p>このあと、各種機能の利用の確認画面が表示されます。
<img src="http://grandbig.github.io/images/apple_watch13.png" alt="位置情報サービス利用の確認" /><br/>
<img src="http://grandbig.github.io/images/apple_watch14.png" alt="Siri利用の確認" /><br/>
<img src="http://grandbig.github.io/images/apple_watch15.png" alt="診断情報の送信の確認" /></p>

<p>Apple Watch Sportのパスコードを設定します。<br/>
<img src="http://grandbig.github.io/images/apple_watch16.png" alt="Apple Watch Sportのパスコード" /></p>

<p>Apple Watch Sportで動作可能なアプリをインストールします。<br/>
<img src="http://grandbig.github.io/images/apple_watch17.png" alt="アプリのインストール" /></p>

<p>同期中は下記画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch18.png" alt="Apple Watch Sportと同期中" /></p>

<p>Apple Watch Sportの利用準備が整うと下記の画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/apple_watch19.png" alt="Apple Watch Sportの利用準備完了" /></p>

<p>さて、設定が完了したところでApple Watch Sportを見てみましょう。<br/>
側面のゲージボタンを押せば、iPhoneで言うところのホーム画面が開けるはずです。<br/>
<img src="http://grandbig.github.io/images/apple_watch20.png" alt="Apple Watch Sport ホーム画面" /></p>

<p>まだまだApple Watch Sportを触りきれていない状態なので、今後どんどん慣れていって、何が開発できるのか追求していきたいと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p>※現在、アップデート申請中のため、公開されていません。<br/>
(公開され次第、合わせてブログを更新する予定です。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="http://grandbig.github.io/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="http://grandbig.github.io/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のiBeacon信号を利用してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/"/>
    <updated>2015-04-13T00:28:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/13/multi-ibeacon</id>
    <content type="html"><![CDATA[<h4>複数のiBeaconを検知する方法</h4>

<p>さて、本日はさらっと複数のiBeacon信号の検知について考えてみたいと思います。<br/>
(これまでできるだろうという考えではあったものの、実際に試してみたことがなかったのでメモ書きです。)<br/>
Central側ではiBeacon信号をキャッチしたときに、そのオブジェクトを配列の形で取得することができます。<br/>
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Beacon信号を検出した場合</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">beacons</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">beacons</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように <strong>beacons</strong> が <strong>NSArray</strong> の型で返ってきていますよね。<br/>
単純にこれを使ってやればよいのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>実際にログを見てみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span> <span class="mo">00</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mf">23.974</span> <span class="n">iBeaconSampleCentral</span><span class="p">[</span><span class="mi">312</span><span class="o">:</span><span class="mi">15030</span><span class="p">]</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;CLBeacon (uuid:&lt;__NSConcreteUUID 0x17403a6e0&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.07m, rssi:-35)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;CLBeacon (uuid:&lt;__NSConcreteUUID 0x174037520&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.20m, rssi:-45)&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっています。<br/>
最寄りのiBeaconのみを使う方法ではできなかった何か新しいサービスを実現できるかもしれませんね。<br/>
今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CROSSWALKの性能を確かめよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/12/crosswalk-test/"/>
    <updated>2015-04-12T16:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/12/crosswalk-test</id>
    <content type="html"><![CDATA[<h4>CROSSWALKは果たして優秀なのか！？</h4>

<p>以前、CROSSWALKについて紹介させて頂きました。<br/>
メリット/デメリットはいろいろなサイトで紹介されていますが、実際に性能はどうなのか気になりますよね？<br/>
そこで今回は幾つかの端末を用いて試験をしてみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Sunspiderでベンチマーク</h5>

<p>試験に利用した端末は下記3つです。</p>

<ul>
<li>Android4.4.2 / AQOUS 305SH</li>
<li>Android4.2.2 / AQOUS 303SH</li>
</ul>


<p>これら端末で下記4つのWebの性能を確かめました。</p>

<ul>
<li>CROSSWALK</li>
<li>標準のWebView</li>
<li>標準のブラウザ</li>
<li>Chrome</li>
</ul>


<p>早速ですが、結果を載せます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_sunspider_305sh.png" alt="Android4.4.2, AQOUS 305SH, Sunspider結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_sunspider_303sh.png" alt="Android4.2.2, AQOUS 303SH, Sunspider結果" /></p>

<p>結果を見ると、処理速度だけで言えば、必ずしもCROSSWALKが優秀とは言えないことがわかります。<br/>
しかし、CROSSWALKの良さは処理速度に限ったことではありません。<br/>
何と言っても最新のChromiumと同じHTML, CSSの対応度合いが肝です。<br/>
では続けて、HTMLとCSSに関して試験してみましょう。</p>

<h5>HTML5のテスト</h5>

<p>まずは、HTML5の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="https://html5test.com/">HTML5test</a>です。<br/>
HTML5testは550点満点なので、数値が550に近いほど優秀と言えます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_html5test_305sh.png" alt="Android4.4.2, AQOUS 305SH, HTML5Test結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_html5test_303sh.png" alt="Android4.2.2, AQOUS 303SH, HTML5Test結果" /></p>

<p>これはさすがの結果と言えるでしょう。<br/>
Chromeの方が高かったりしますが、標準のWebViewや標準のブラウザに比べれば遥かに優秀であると言えます。</p>

<h5>CSS3のテスト</h5>

<p>次に、CSS3の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="http://css3test.com/">The CSS3 Test</a>です。<br/>
The CSS3 Testは100%満点の%で表現されます。</p>

<p><img src="http://grandbig.github.io/images/crosswalk_css3test_305sh.png" alt="Android4.4.2 AQOUS 305SH, CSS3Test結果" /><br/>
<img src="http://grandbig.github.io/images/crosswalk_css3test_303sh.png" alt="Android4.2.2 AQOUS 303SH, CSS3Test結果" /></p>

<p>こちらもCROSSWALKがメリットとなる結果と言えるでしょう。<br/>
Chromeと同じ対応度合いであったので、全く問題がないと言えると思います。</p>

<h5>まとめ</h5>

<p>以上の結果を見ると、処理速度が気になるものの、WebSocketやWebGL, WebRTCなどに対応した上で、ターゲットにAndroid4.0〜4.3を含めたいのであれば、CROSSWALKは入れるべきと言えるでしょう。<br/>
Android5.0以上がほとんどを占める世の中になったとしたら、何も考えずに標準のWebViewを使えば良いのかもしれないですが、まだまだ先の話でしょう。<br/>
と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6.2で使ってみようDoxygen]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/doxygen/"/>
    <updated>2015-04-05T14:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/doxygen</id>
    <content type="html"><![CDATA[<h4>Doxygen</h4>

<p>さて、本日はDoxygenについて書こうと思います。<br/>
筆者はAppleライクなリファレンスを生成できる<a href="https://github.com/tomaz/appledoc">appledoc</a>を利用していましたが、なぜかXcode6.2でうまく生成できないことやAppleの公式リファレンスのデザインが以前より大幅に変更されたことから<a href="http://www.doxygen.jp/">Doxygen</a>を使うことにしました。</p>

<p>DoxygenはC++, C, Java, Objective-C, Python, IDL, Fortran, VHDL, PHP, C#のためのドキュメントジェネレータツールです。<br/>
独特のリファレンススタイルであるものの、下記3点のメリットがあると公式サイトに書かれています。</p>

<ul>
<li>ドキュメントとソースコードの一貫性を保つことが容易</li>
<li>文書化されていないソースファイルから、 コードの構造を抽出するように設定可能</li>
<li>Doxygen を「乱用 (abuse)」して、 通常のドキュメントを作成可能</li>
</ul>


<p>では、早速使ってみることにしましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Doxygenの使い方</h5>

<p>まず、<a href="http://www.stack.nl/~dimitri/doxygen/download.html#srcbin">Doxygen公式サイト</a>からダウンロードしましょう。<br/>
PCへのインストールが完了すると、下記のウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/doxygen_1.png" alt="Doxygen.app" /></p>

<p>ドラッグ＆ドロップでApplicationに追加しましょう。</p>

<p>Doxygenを起動します。<br/>
すると下記のようなウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/doxygen_4.png" alt="Doxygenウィンドウ" /></p>

<p>各項目を下記のように指定しましょう。<br/>
<img src="http://grandbig.github.io/images/doxygen_3.png" alt="Doxygenウィンドウに各項目を指定" /></p>

<p>そして、Runをクリックしてタブを切り替えます。そして、Run doxygenをクリックします。<br/>
すると、Output produced by doxygenにログが出力されます。</p>

<p><img src="http://grandbig.github.io/images/doxygen_2.png" alt="ログを出力" /></p>

<p>完了したら、 <strong>Show HTML output</strong> をクリックしましょう。<br/>
ブラウザが起動して、リファレンスが表示されるはずです。</p>

<p><img src="http://grandbig.github.io/images/doxygen_5.png" alt="リファレンス" /></p>

<p>クラス間の関係性もわかるため、なかなか良い気がします。<br/>
appledocとほとんど書式も同じっぽいですし。<br/>
少しずつ慣れていこうと思います。<br/>
といったところで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-Cにおける継承とカテゴリ]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/inheritance-and-expansion/"/>
    <updated>2015-04-05T01:10:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/inheritance-and-expansion</id>
    <content type="html"><![CDATA[<h4>Objective-Cの継承とカテゴリについて</h4>

<p>さて、本日は今更ですが、Objective-Cの継承とカテゴリについて書きたいと思います。<br/>
理由は、最近、自分だけではなく、 <strong>『第三者が見てもわかりやすいクラス』</strong> を作ることを意識し始めたからです。<br/>
本当に今更ですね笑。</p>

<p>アジェンダは下記です。</p>

<ul>
<li>Objective-Cの継承</li>
<li>Objective-Cのカテゴリ</li>
<li>シングルトンパターンでの継承</li>
<li>シングルトンパターンのクラスを継承したクラスのカテゴリ</li>
</ul>


<p>では、早速見て行きましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Objective-Cの継承</h4>

<p>まずは、継承です。<br/>
初めに元となるクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sampleProperty</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleProperty</span> <span class="o">=</span> <span class="s">@&quot;これはsamplePropertyです&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sampleMethodを実行しました&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このSampleClassを継承したクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span> : <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample2Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにSampleClass2はSampleClassを継承しているので、sampleMethodを利用することができます。<br/>
このクラスをViewControllerで使う場合は下記のようにできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClass2の初期化</span>
</span><span class='line'>  <span class="n">SampleClass2</span> <span class="o">*</span><span class="n">sample2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample2</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// スーパークラスであるSampleClassのsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample2</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>元々あったクラスに新たなプロパティやメソッドを追加したクラスを作成した場合はこのようにやれば良いわけです。</p>

<h4>Objective-Cのカテゴリ</h4>

<p>続いて、カテゴリです。</p>

<p>SampleClassのカテゴリクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass3.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を見ると、継承と何が違うの？と思われるかもしれません。<br/>
実はカテゴリでは継承のようにプロパティの定義ができません。<br/>
基本的に元のクラスに新しいメソッドを追加したいときに使うもののようです。<br/>
<a href="http://ja.wikipedia.org/wiki/Objective-C">Wikipedia</a>にも書いてある通り、『ひとつのクラスの実装を関連するメソッド群毎に別々の場所に分割して記述することを可能とする目的で作られた』だそうです。</p>

<p>しかしながら、厳密にはプロパティも追加できます。<br/>
追加したい場合は下記のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample3Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass3.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass3.h&quot;</span>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span><span class="nl">(SampleClass3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">sample3Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValue:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">sample3Property</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">sample3Property</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample3Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、このカテゴリクラスをViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassの初期化</span>
</span><span class='line'>  <span class="n">SampleClass</span> <span class="o">*</span><span class="n">sample</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass3のsample3Methodを実行</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sample</span> <span class="n">sample3Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>カテゴリは <strong>元のクラスに定義を追加した</strong> ものなので、上記ソースのように初期化するオブジェクトはあくまでも <strong>SampleClass</strong> であることに注意しましょう。</p>

<h4>シングルトンパターンでの継承</h4>

<p>シングルトンパターンでは、少し注意が必要です。<br/>
元のクラスをシングルトンパターンにしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sampleProperty</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SampleClass</span><span class="o">*</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">sampleProperty</span> <span class="o">=</span> <span class="s">@&quot;これはsamplePropertyです&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sampleMethodを実行しました&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>SampleClassをシングルトンパターンにした上で、継承したSample2ClassをViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>実はこれだとうまくいきません。<br/>
どこがうまくいかないかというと、 <strong>SampleClass2で定義されたsample2Methodの実行</strong> の部分です。<br/>
これは <strong>SampleClassにsample2Methodは定義されていません</strong> といったエラーが表示されます。<br/>
そう、初期化されたのはあくまでもSampleClassであって、SampleClass2ではないため、上記のようなエラーが出るのです。</p>

<p>このエラーを防ぐためには、SampleClass2を下記のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span> : <span class="nc">SampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">sample2Property</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">SampleClass2</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass2.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// シングルトンのインスタンス取得</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SampleClass2</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">SampleClass2</span><span class="o">*</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample2Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい。当たり前ですね。<br/>
正しく理解していないと悩むことになるのでご注意を！</p>

<h4>シングルトンパターンのクラスを継承したクラスのカテゴリ</h4>

<p>最後にややこしいことをしてみましょう笑。<br/>
先ほどのシングルトンパターンのクラスであるSampleClassを継承したSampleClass2のカテゴリであるSampleClass4を作成してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SampleClass4.h</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass2</span><span class="nl">(SampleClass4)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample4Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;SampleClass4.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass2</span><span class="nl">(SampleClass4)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample4Method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">sample2Property</span> <span class="o">=</span> <span class="s">@&quot;SampleClass4オブジェクトのsample2Propertyプロパティ&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、ViewControllerで使ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;SampleClass4.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">testMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMethod</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// SampleClassで定義されたsampleMethodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sampleMethod</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass2で定義されたsample2Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample2Method</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// SampleClass4で定義されたsample4Methodを実行</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">SampleClass2</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">sample4Method</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なかなかに頭を混乱させられましたが、なんとかできました笑。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでCROSSWALKを使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/crosswalk/"/>
    <updated>2015-03-28T13:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/crosswalk</id>
    <content type="html"><![CDATA[<h4>Androidでハイブリッドアプリを作ろう</h4>

<p>以前、iOSではiOS8からWKWebViewという新しいWebViewが追加されたことを説明しました。<br/>
では、Androidはどうなのでしょうか？</p>

<p>Androidは4.3までWebKitベースのWebViewをアプリに組み込んでいました。<br/>
しかし、Android4.4より、ChromiumベースのWebViewとなりました。ここで、大きく異なるのはレンダリングエンジンが <strong>Blink</strong> になったというところです。<br/>
また、Android4.4まではChromiumがバージョンアップされたとしても、各メーカーがAndroidのOSバージョンアップを提供しなければ、最新のWebViewを利用することができませんでした。</p>

<p>この現状を見たのかGoogleはAndroid5.0以降、WebViewをOSから切り離し、Google Play経由でバージョンアップ可能としました。<br/>
よって、メーカーがOSのバージョンアップをする/しないに関わらず、Google側の意志で最新のWebViewをユーザに提供可能となったのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>近年はAndroid2.xを使っているユーザもだいぶ減少してきました。<br/>
が、未だ、Android4.0〜4.3の端末を利用しているユーザは相当数、存在しています。<br/>
では、4.x〜5.0.xまでの端末全てに対応するハイブリットアプリを作成するためには、各バージョンに気をつけつつ、開発するしかないのでしょうか？</p>

<p>本記事では、 <strong>CROSSWALK</strong> に注目し、上記の問題に対応することとしました。</p>

<h4>CROSSWALKを組み込もう</h4>

<p>まずは、CROSSWALKのレポジトリを追加できるようにしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// build.gradle(Module: app)</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ここを追加</span>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="err">&#39;</span><span class="nl">https:</span><span class="c1">//download.01.org/crosswalk/releases/crosswalk/android/maven2&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">xwalk</span><span class="o">:</span><span class="nl">xwalk_core_library:</span><span class="mf">10.39</span><span class="o">.</span><span class="mf">235.15</span><span class="err">&#39;</span>        <span class="c1">// ここも追加</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、CROSSWALKのWebViewである <strong>XWalkView</strong> を画面に組み込みましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>// activity_main.xml
</span><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>  <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span> <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>  <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="na">android:paddingLeft=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingRight=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingTop=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>  <span class="na">android:paddingBottom=</span><span class="s">&quot;0dp&quot;</span> <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- XWalkViewを追加 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;org.xwalk.core.XWalkView</span>
</span><span class='line'>      <span class="na">android:id=</span><span class="s">&quot;@+id/xwalkWebView&quot;</span>
</span><span class='line'>      <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>      <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>      <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>      <span class="na">android:background=</span><span class="s">&quot;#000000&quot;</span>
</span><span class='line'>      <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、AndroidManifest.xmlにWebViewを使うための設定を書きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>// AndroidManifest.xml
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.example.takahiro.crosswalksample&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- 追加 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  ....
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、メイン画面にWebViewの設定を書き込みましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">crosswalksample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.ActionBarActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.xwalk.core.XWalkView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">XWalkView</span> <span class="n">mXWalkView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mXWalkView</span> <span class="o">=</span> <span class="o">(</span><span class="n">XWalkView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mXWalkView</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="s">&quot;https://www.google.co.jp&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">pauseTimers</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onHide</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">resumeTimers</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onShow</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mXWalkWebView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mXWalkWebView</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでAndroid4.x 〜 5.xで同じChromiumベースのWebViewを利用することができるはずです。<br/>
といったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://diego.org/2015/01/07/embedding-crosswalk-in-android-studio/">Embedding Crosswalk in Android Studio</a></li>
<li><a href="https://crosswalk-project.org/documentation/embedding_crosswalk.html">Embedding the Crosswalk Project</a></li>
<li><a href="https://crosswalk-project.org/apis/embeddingapidocs_v3/org/xwalk/core/XWalkView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String">XWalkView Reference</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioを始めてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/start-android-studio/"/>
    <updated>2015-03-28T13:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/start-android-studio</id>
    <content type="html"><![CDATA[<h2>Android Studioとは</h2>

<p>Googleが2013年のGoogle I/Oで発表したAndroidアプリ開発に最適化した開発統合環境です。<br/>
iOSアプリ開発者であると、Macを使っている方がほとんどだと思うのですが、<br/>
もちろんMacにもインストール可能です。<br/>
Android Studioのインストールは<a href="http://developer.android.com/sdk/index.html">こちら</a>からできます。</p>

<p>この記事時点での最新版は1.2です。<br/>
では、早速、Android Studioを使ってみましょう。</p>

<h3>プログラミングまでの準備</h3>

<p>Android Studioを起動すると次のウィンドウが表示されます。<br/>
<img src="http://grandbig.github.io/images/android_studio_1.png" alt="Android Studioを起動" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>プロジェクトを新規作成する場合は、『Start a new Android Studio project』を選択します。<br/>
すると、Application Name, Company Nameを設定するウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_2.png" alt="プロジェクトの設定ウィンドウ" /></p>

<p>Nextを選択して、次に進むとAndroidアプリの対応バージョンを設定するウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_3.png" alt="Androidアプリのバージョンを設定するウィンドウ" /></p>

<p>Androidアプリのバージョンと一言で言っても、どのバージョンから対応させるべきか迷うこともあるでしょう。<br/>
そんなときは <strong>Help me choose</strong> を選択しましょう。</p>

<p><img src="http://grandbig.github.io/images/android_studio_4.png" alt="Androidアプリのバージョン確認ウィンドウ" /></p>

<p>今回は9割をカバーするために <strong>API 15</strong> で設定しました。<br/>
続いてNextを選択すると、初期GUI設定ウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_5.png" alt="GUI設定ウィンドウ" /></p>

<p>ここまで選択できたところで、プロジェクト作成ウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/android_studio_6.png" alt="プロジェクト作成ウィンドウ" /></p>

<p>初めはヘルプウィンドウが表示されるので、Closeで閉じちゃいましょう。</p>

<p>Android Studioで各ソースを編集するために、左サイドバーにある <strong>1: Project</strong> を選択しましょう。<br/>
最終的に下記の画面が表示できれば準備完了です。</p>

<p><img src="http://grandbig.github.io/images/android_studio_7.png" alt="プロジェクト作成ウィンドウ" /></p>

<p>本記事はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
