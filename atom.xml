<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-10-09T03:25:57+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clean Swiftを勉強してみよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/10/08/clean-swift-2/"/>
    <updated>2017-10-08T22:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/10/08/clean-swift-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://clean-swift.com/">Clean Swift</a>を用いた具体的な例について見ていきたいと思います。<br/>
題材として、下記のような要件を持つアプリを扱います。</p>

<p><img src="http://grandbig.github.io/images/clean-swift-2_1.png" alt="Clean Swiftの題材アプリ" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの要件</h3>

<p>要件としては、下記の通りです。</p>

<ul>
<li>現在地を中心にマップを表示する</li>
<li>検索ボタンをタップして、現在地周辺のレストラン情報を取得する</li>
<li>マップに表示されたレストランのマーカをタップすると、レストラン情報の概要ウィンドウが表示される</li>
</ul>


<h3>フォルダ構成</h3>

<p>フォルダ構成は以下のようになっています。<br/>
※ 今回のアプリの名称を <code>CleanFoodLogger</code> とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">CleanFoodLogger</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Views</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">ViewController</span><span class="o">+</span><span class="nx">Alert</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Models</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">Restaurant</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomGMSMarker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Workers</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Services</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">HotpepperAPI</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Scenes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">MapView</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">View</span>
</span><span class='line'><span class="err">│</span>         <span class="err">│</span>    <span class="err">├──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">xib</span>
</span><span class='line'><span class="err">│</span>         <span class="err">│</span>    <span class="err">└──</span> <span class="nx">CustomInfoWindow</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewController</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewInteractor</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewModels</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewPresenter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">├──</span> <span class="nx">MapViewRouter</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">│</span>         <span class="err">└──</span> <span class="nx">MapViewWorker</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">AppDelegate</span><span class="p">.</span><span class="nx">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Main</span><span class="p">.</span><span class="nx">storyboard</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">Assets</span><span class="p">.</span><span class="nx">xcassets</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">key</span><span class="p">.</span><span class="nx">plist</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれの構成の意味について説明します。</p>

<h4>Views</h4>

<p><code>Scene</code> に寄らない共通ビュー系を格納します。</p>

<ul>
<li><code>ViewController+Alert.swift</code>

<ul>
<li><code>UIViewController</code> を拡張する形で実装</li>
<li>共通アラート表示処理を実装</li>
</ul>
</li>
</ul>


<h4>Models</h4>

<p><code>Scene</code> に寄らないモデル系を格納します。</p>

<ul>
<li><code>Restaurant.swift</code>

<ul>
<li>APIを通して取得したレストラン情報を格納するモデル</li>
</ul>
</li>
<li><code>CustomGMSMarker</code>

<ul>
<li><code>GMSMarker</code>を継承したカスタムクラス</li>
<li>マーカにショップ情報を追加して持たせたモデル</li>
</ul>
</li>
</ul>


<h4>Workers</h4>

<p><code>Scene</code> に寄らない <code>Clean Swift</code> で言うところの <code>Worker</code> 系を格納します。<br/>
※ 今回は、レストラン情報を取得するのに<a href="https://webservice.recruit.co.jp/hotpepper/reference.html">ホットペッパーAPI</a>を利用しています。</p>

<ul>
<li><code>HotpepperWorker.swift</code>

<ul>
<li>ホットペッパーAPI管理マネージャに当たる <code>Services/HotpepperAPI.swift</code> を通じて取得したレストラン情報を扱う</li>
</ul>
</li>
</ul>


<h4>Services</h4>

<p><code>Scene</code> に寄らない管理マネージャ系の共通処理を扱います。</p>

<ul>
<li><code>HotpepperAPI.swift</code>

<ul>
<li>ホットペッパーAPIを用いた具体的なロジックを実装</li>
</ul>
</li>
</ul>


<h4>Scenes</h4>

<p>ここは画面単位に <code>Clean Swift</code>のテンプレートを当て込んだ構成になります。<br/>
今回は簡単なサンプルなので1画面しかありません。<br/>
よって、 <code>Scenes</code> に格納しているのも <code>MapView</code> 1つになります。<br/>
<code>MapView</code> の配下は <code>Clean Swift</code> テンプレート一式になっています。</p>

<h3>アプリの実装</h3>

<p>続いて具体的なアプリの実装について見ていきます。<br/>
データフローとしては、下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/clean-swift_3.png" alt="データフロー図" /></p>

<p>ではまずは、共通系の処理から説明します。</p>

<h4>Models</h4>

<p>この後の <code>Services</code> や <code>Workers</code> にも出てくるので、まずは <code>Models</code> から説明します。</p>

<h5>Restaurant.swift</h5>

<p>ホットペッパーAPIで取得したレストラン情報の一部を抜粋して格納するため、下記のような構成になっています。<br/>
今回は <code>==</code> で比較する処理を利用している箇所はありませんが、 <a href="https://github.com/Clean-Swift/CleanStore">Clean Store</a> を参考にしたので、そのまま残しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">Restaurant:</span> <span class="n">Equatable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">lhs:</span> <span class="n">Restaurant</span><span class="p">,</span> <span class="nl">rhs:</span> <span class="n">Restaurant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="kt">id</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">category</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">category</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">imageURL</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">imageURL</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">latitude</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">longitude</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>CustomGMSMarker.swift</h5>

<p>マーカをタップした際に、ショップ情報を表示する <code>InfoWindow</code> を表示する要件があるため、 <code>GMSMarker</code> クラスを継承して、ショップ情報を追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomGMSMarker:</span> <span class="n">GMSMarker</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">category:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">imageURL:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 初期化</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Workers</h4>

<p><code>Services</code> の説明に移る前に、<code>Protocol</code> を提供している <code>Workers</code> について見ていきます。</p>

<h5>HotpepperWorker.swift</h5>

<p>これは、</p>

<ul>
<li>API処理を扱うための <code>Worker</code> クラスを提供</li>
<li>外部へのインターフェースを定義したプロトコルの定義</li>
</ul>


<p>の役目を果たしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - Hotpepper worker</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperWorker</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">hotpepper:</span> <span class="n">HotpepperProtocol</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">hotpepper:</span> <span class="n">HotpepperProtocol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">hotpepper</span> <span class="o">=</span> <span class="n">hotpepper</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hotpepper</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: Hotpepper API</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">HotpepperProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: CRUD operations</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - CRUD operation errors</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="nl">HotpepperError:</span> <span class="n">Equatable</span><span class="p">,</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">CannotFetch</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">lhs:</span> <span class="n">HotpepperError</span><span class="p">,</span> <span class="nl">rhs:</span> <span class="n">HotpepperError</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">(.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">let</span> <span class="n">a</span><span class="p">),</span> <span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">let</span> <span class="n">b</span><span class="p">))</span> <span class="n">where</span> <span class="n">a</span> <span class="o">==</span> <span class="nl">b:</span> <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Services</h4>

<p><code>Worker</code> で定義された外部へのインターフェースの挙動を実装したクラスに当たります。</p>

<h5>HotpepperAPI.swift</h5>

<p>今回は <code>HotpepperProtocol</code> を継承した <code>HotpepperAPI</code> 内で実際にホットペッパーAPIを叩いて処理しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">HotpepperAPI:</span> <span class="n">HotpepperProtocol</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// API Key</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">/// Geocoding APIのベースURL</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 初期化処理</span>
</span><span class='line'>    <span class="c1">// key.plistに定義したAPIKeyを取得してセット</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HotpepperWorker.swift内のHotpepperProtocolインターフェースの具体的な処理</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">([</span><span class="n">Restaurant</span><span class="p">],</span> <span class="n">HotpepperError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>        <span class="n">Alamofire</span><span class="p">.</span><span class="n">SessionManager</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">requestWithoutCache</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">isFailure</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">defaultErrorMessage</span> <span class="o">=</span> <span class="s">&quot;レストラン情報を取得できませんでした。&quot;</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">([],</span> <span class="n">HotpepperError</span><span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span> <span class="o">??</span> <span class="n">defaultErrorMessage</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>            <span class="n">guard</span> <span class="n">let</span> <span class="n">shops</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">].</span><span class="n">array</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">defaultErrorMessage</span> <span class="o">=</span> <span class="s">&quot;レストラン情報を取得できませんでした。&quot;</span>
</span><span class='line'>                <span class="n">completionHandler</span><span class="p">([],</span> <span class="n">HotpepperError</span><span class="p">.</span><span class="n">CannotFetch</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span> <span class="o">??</span> <span class="n">defaultErrorMessage</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="n">shop</span> <span class="k">in</span> <span class="n">shops</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="kt">id</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ID不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;ショップ名不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">category</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;genre&quot;</span><span class="p">][</span><span class="s">&quot;name&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;カテゴリ不明&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">imageURL</span> <span class="o">=</span> <span class="n">shop</span><span class="p">[</span><span class="s">&quot;photo&quot;</span><span class="p">][</span><span class="s">&quot;mobile&quot;</span><span class="p">][</span><span class="s">&quot;l&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lat&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">shop</span><span class="p">[</span><span class="s">&quot;lng&quot;</span><span class="p">].</span><span class="n">string</span> <span class="o">??</span> <span class="s">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">restaurant</span> <span class="o">=</span> <span class="n">Restaurant</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">,</span> <span class="nl">name:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">category:</span> <span class="n">category</span><span class="p">,</span> <span class="nl">imageURL:</span> <span class="n">imageURL</span><span class="p">,</span> <span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>                <span class="n">restaurants</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">restaurant</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">completionHandler</span><span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Clean Swiftとは無関係ですが、キャッシュなしリクエストをAlamofireを通して実装する処理</span>
</span><span class='line'><span class="n">extension</span> <span class="n">Alamofire</span><span class="p">.</span><span class="n">SessionManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">discardableResult</span>
</span><span class='line'>    <span class="n">open</span> <span class="n">func</span> <span class="n">requestWithoutCache</span><span class="p">(</span>
</span><span class='line'>        <span class="n">_</span> <span class="nl">url:</span> <span class="n">URLConvertible</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">method:</span> <span class="n">HTTPMethod</span> <span class="o">=</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">parameters:</span> <span class="n">Parameters</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">encoding:</span> <span class="n">ParameterEncoding</span> <span class="o">=</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">headers:</span> <span class="n">HTTPHeaders</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span> <span class="n">DataRequest</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">urlRequest</span> <span class="o">=</span> <span class="n">try</span> <span class="n">URLRequest</span><span class="p">(</span><span class="nl">url:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">method:</span> <span class="n">method</span><span class="p">,</span> <span class="nl">headers:</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>                <span class="n">urlRequest</span><span class="p">.</span><span class="n">cachePolicy</span> <span class="o">=</span> <span class="p">.</span><span class="n">reloadIgnoringCacheData</span> <span class="c1">// &lt;&lt;== Cache disabled</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">encodedURLRequest</span> <span class="o">=</span> <span class="n">try</span> <span class="n">encoding</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">urlRequest</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">request</span><span class="p">(</span><span class="n">encodedURLRequest</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">request</span><span class="p">(</span><span class="n">URLRequest</span><span class="p">(</span><span class="nl">url:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;http://example.com/wrong_request&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MapView</h4>

<p>ここから重要な <code>Clean Swift</code> を使った実装に入っていきます。<br/>
今回は共通 <code>Worker</code> のみ利用しているため、 <code>MapViewWorker.swift</code> は省略します。<br/>
また、画面遷移の処理もないため、 <code>MapViewRouter.swift</code> についても省略します。</p>

<h5>MapViewModels.swift</h5>

<p>Clean Swiftで今回扱う <code>Model</code> は以下の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">MapView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Init</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Search</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">restaurants:</span> <span class="p">[</span><span class="n">Restaurant</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Init</code>

<ul>
<li>マップ画面の初期描画時に「現在地を中心としたマップ位置に移動する」際に利用</li>
</ul>
</li>
<li><code>Search</code>

<ul>
<li>「現在地周辺のレストランを検索する」際に利用</li>
</ul>
</li>
</ul>


<h5>MapViewInteractor.swift</h5>

<p><code>ViewController</code> から受け取った依頼を <code>Worker</code> を経由して取得した値を <code>Presenter</code> に渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapViewBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapViewDataStore</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapViewInteractor:</span> <span class="n">MapViewBusinessLogic</span><span class="p">,</span> <span class="n">MapViewDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">MapViewPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">HotpepperWorker</span><span class="p">(</span><span class="nl">hotpepper:</span> <span class="n">HotpepperAPI</span><span class="p">())</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">var</span> <span class="nl">initView:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">initView</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>            <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>            <span class="n">initView</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">worker</span><span class="p">.</span><span class="n">fetchRestaurants</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">request</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">restaurants</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">restaurants:</span> <span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>initMapView</code>

<ul>
<li>APIやローカルDBを利用する必要がないため、<code>Worker</code>は利用していません</li>
<li>初回だけ、実行すれば良い処理なので内部で定義した <code>initView</code> でハンドリングしています</li>
</ul>
</li>
<li><code>searchRestaurants</code>

<ul>
<li>ホットペッパーAPIによるデータ取得は <code>HotpepperWorker</code> に任せています</li>
<li><code>HotpepperWorker</code> を介して取得したデータを <code>MapView.Search.Response</code> 形式に変換</li>
<li>それを <code>MapViewPresenter</code> に渡しています</li>
</ul>
</li>
</ul>


<h5>MapViewPresenter.swift</h5>

<p><code>Interactor</code> から受け取ったデータを表示形式に変換して、<code>ViewController</code> に描画指示を出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">MapViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapViewPresenter:</span> <span class="n">MapViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">MapViewDisplayLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">let</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentInitMapView</span><span class="p">(</span><span class="nl">response:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">latitude</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">longitude</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">,</span> <span class="nl">zoomLevel:</span> <span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Present searched restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">presentSearchedRestaurants</span><span class="p">(</span><span class="nl">response:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">restaurants</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">restaurants</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">restaurants:</span> <span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">restaurants</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>presentInitMapView</code>

<ul>
<li>「現在地を中心としたマップ位置に移動する」ために <code>ViewController</code> に緯度/経度/ズームレベルを渡します</li>
</ul>
</li>
<li><code>presentSearchedRestaurants</code>

<ul>
<li>レストラン情報の有無で <code>ViewController</code> に出す指示を変えています</li>
<li>今回はシンプルな実装のため、<code>MapView.Search.Response</code> から <code>MapView.Search.ViewModel</code> に変換はありません</li>
</ul>
</li>
</ul>


<h5>MapViewController.swift</h5>

<p>最後に <code>ViewController</code> について説明します。<br/>
下記で</p>

<ul>
<li><code>Interactor</code> に具体的な処理内容(表示ロジック)を問い合わせる</li>
<li><code>Presenter</code> からの指示を受けて、最適な <code>View</code> を描画する</li>
</ul>


<p>を実現しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">MapViewDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MapViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">MapViewDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">MapViewBusinessLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">MapViewRoutingLogic</span> <span class="o">&amp;</span> <span class="n">MapViewDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Object lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil:</span> <span class="n">Bundle</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="n">nibNameOrNil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="n">nibBundleOrNil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Setup</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">viewController</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">interactor</span> <span class="o">=</span> <span class="n">MapViewInteractor</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">presenter</span> <span class="o">=</span> <span class="n">MapViewPresenter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">MapViewRouter</span><span class="p">()</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>        <span class="n">viewController</span><span class="p">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
</span><span class='line'>        <span class="n">presenter</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">dataStore</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Routing</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">&quot;routeTo\(scene)WithSegue:&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span><span class="p">,</span> <span class="n">router</span><span class="p">.</span><span class="n">responds</span><span class="p">(</span><span class="nl">to:</span> <span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">router</span><span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">segue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: View lifecycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">configureMapView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">configureLocationManager</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Configuration</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">configureMapView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// GoogleMapの初期化</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">isMyLocationEnabled</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">mapType</span> <span class="o">=</span> <span class="n">GMSMapViewType</span><span class="p">.</span><span class="n">normal</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">myLocationButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">configureLocationManager</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 位置情報関連の初期化</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBest</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">requestWhenInUseAuthorization</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Init mapView</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displayInitMap</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 初期描画時のマップ中心位置の移動</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">camera</span> <span class="o">=</span> <span class="n">GMSCameraPosition</span><span class="p">.</span><span class="n">camera</span><span class="p">(</span><span class="nl">withTarget:</span> <span class="n">coordinate</span><span class="p">,</span> <span class="nl">zoom:</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>        <span class="n">mapView</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="n">camera</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Search restaurants</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">searchRestaurants</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">myLocation</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">searchRestaurants</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedSuccess</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">restaurants</span> <span class="o">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">restaurants</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">restaurant</span> <span class="k">in</span> <span class="n">restaurants</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">putMarker</span><span class="p">(</span><span class="nl">restaurant:</span> <span class="n">restaurant</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">displaySearchedFailure</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Search</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">showAlert</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;確認&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;周辺にレストランは見つかりませんでした。&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tappedSearchButton</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">searchRestaurants</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: Other</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">func</span> <span class="n">putMarker</span><span class="p">(</span><span class="nl">restaurant:</span> <span class="n">Restaurant</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">CustomGMSMarker</span><span class="p">()</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="kt">id</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">category</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">imageURL</span> <span class="o">=</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">imageURL</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">restaurant</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">icon</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;RestaurantIcon&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">appearAnimation</span> <span class="o">=</span> <span class="n">GMSMarkerAnimation</span><span class="p">.</span><span class="n">pop</span>
</span><span class='line'>        <span class="n">marker</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="n">mapView</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">MapViewController:</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// マップの初期描画</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">locations</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">MapView</span><span class="p">.</span><span class="n">Init</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>            <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">initMapView</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="nl">MapViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="p">,</span> <span class="n">markerInfoWindow</span> <span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">let</span> <span class="n">cMarker</span> <span class="o">=</span> <span class="n">marker</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomGMSMarker</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cMarker</span><span class="p">.</span><span class="n">tracksInfoWindowChanges</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">CustomInfoWindow</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="mi">250</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">265</span><span class="p">))</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">setup</span><span class="p">(</span><span class="nl">name:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nl">category:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">category</span><span class="p">,</span> <span class="nl">imageURL:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>configureMapView</code> / <code>configureLocationManager</code>

<ul>
<li>最低限必要な <code>ViewController</code> 上での設定処理</li>
<li>ここで <code>startUpdatingLocation</code> を実行することで現在地の更新を開始</li>
</ul>
</li>
<li><code>didUpdateLocations</code> → <code>displayInitMap</code>

<ul>
<li>初期起動時は <code>mapView.myLocation</code> から現在地の即時取得ができないため、<code>startUpdatingLocation</code> を利用しています</li>
<li>現在地が取得できたタイミングで <code>didUpdateLocations</code> を通るため、 <code>Interactor</code> にマップ中心位置の移動を依頼しています</li>
<li>位置を移動させるか否かは <code>ViewController</code> では判断しません</li>
</ul>
</li>
<li><code>tappedSearchButton</code> → <code>searchRestaurants</code> → <code>displaySearchedSuccess</code> / <code>displaySearchedFailure</code>

<ul>
<li>検索ボタンをタップした時に <code>searchRestaurants</code> を呼び出しています</li>
<li><code>Interactor</code> にレストラン情報の検索を依頼しています</li>
<li><code>Presenter</code> から <code>displaySearchedSuccess</code> または <code>displaySearchedFailure</code> の描画指示を受けて描画します</li>
<li><code>Presenter</code> から返却された <code>MapView.Search.ViewModel</code> を利用して <code>putMarker</code> を実行することでマップにマーカをプロットします。</li>
<li><code>displaySearchedFailure</code> では、失敗したことをアラート表示することで表現しています</li>
</ul>
</li>
<li><code>GMSMapViewDelegate</code>

<ul>
<li>マーカタップ時の処理を実装しています</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
次回は今回扱ったサンプルを拡張する形で実装し、説明していきたいと思います。<br/>
因みに、本記事のソースは <a href="https://github.com/grandbig/CleanFoodLogger">CleanFoodLogger</a>にて公開しています。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Swiftを勉強してみよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/25/clean-swift/"/>
    <updated>2017-09-25T23:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/25/clean-swift</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は<a href="https://clean-swift.com/">Clean Swift</a>について書いていきたいと思います。</p>

<h3>Clean Swiftとは</h3>

<p>Clean Swiftは簡単に言うと『<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>のSwift版』です。  <br/>
参考までにClean Architectureの有名な図を掲載します。<br/>
※ <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>より抜粋させて頂きました。<br/>
<img src="http://grandbig.github.io/images/clean-swift_1.jpg" alt="Clean Architecture" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>Clean Swiftアーキテクチャを採用することで受けられる恩恵として下記が考えられます。</p>

<ul>
<li>各種コンポーネントの責務を細分化することで、Massive ViewControllerの解消に繋がる</li>
<li>データの方向性が一方向になるため、各種コンポーネントの相互依存性が減り、TDD開発が進めやすくなる</li>
<li>各種コンポーネントの責務がはっきりしているため、チーム開発する際に、実装が平準化される</li>
</ul>


<h3>コンポーネントの関係性</h3>

<p>各種コンポーネントの関係性を表した全体像が下図になります。<br/>
<img src="http://grandbig.github.io/images/clean-swift_2.png" alt="Clean Swift Architectureの図" /></p>

<p>この関係性を説明するにあたって、各種コンポーネントの責務を理解しておく必要があるのでそれぞれ見ていきましょう。</p>

<h3>各コンポーネントの説明</h3>

<h4>View</h4>

<p>特に他のアーキテクチャと大きく違わない認識です。</p>

<p><strong>責務：</strong><br/>
① iOSアプリの見た目を表現する</p>

<h4>ViewController</h4>

<p><code>Massive ViewController</code> になりがちな部分ですが、Clean Swiftでの責務は以下になります。</p>

<p><strong>責務：</strong><br/>
① <code>Interactor</code> に具体的な処理内容(表示ロジック)を問い合わせる<br/>
② <code>Presenter</code> からの指示を受けて、最適な <code>View</code> を描画する<br/>
③ <code>Router</code> に画面遷移を依頼する</p>

<p>具体例は下記になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="nl">SampleViewDisplayLogic:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">transitionToSomeWhere</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">SampleViewDisplayLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">interactor:</span> <span class="n">SampleViewBusinessLogic</span><span class="o">?</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">router:</span> <span class="p">(</span><span class="n">NSObjectProtocol</span> <span class="o">&amp;</span> <span class="n">SampleViewRoutingLogic</span> <span class="o">&amp;</span> <span class="n">SampleViewDataPassing</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Object lifecycle</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil:</span> <span class="n">Bundle</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">nibName:</span> <span class="n">nibNameOrNil</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="n">nibBundleOrNil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setup</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Setup</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">viewController</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">interactor</span> <span class="o">=</span> <span class="n">SampleViewInteractor</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">presenter</span> <span class="o">=</span> <span class="n">SampleViewPresenter</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">SampleViewRouter</span><span class="p">()</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'>    <span class="n">interactor</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
</span><span class='line'>    <span class="n">presenter</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>    <span class="n">router</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>    <span class="n">router</span><span class="p">.</span><span class="n">dataStore</span> <span class="o">=</span> <span class="n">interactor</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Routing</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nl">segue:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">&quot;routeTo\(scene)WithSegue:&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span><span class="p">,</span> <span class="n">router</span><span class="p">.</span><span class="n">responds</span><span class="p">(</span><span class="nl">to:</span> <span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">router</span><span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="nl">with:</span> <span class="n">segue</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: View lifecycle</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fetchSomethingOnLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ① Interactorに具体的な処理内容を問い合わせる</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">fetchSomethingOnLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span><span class='line'>    <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ② Presenterからの指示を受けてViewを描画する</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do error something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ③ Routerに画面遷移を依頼する</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">transitionToSomeWhere</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 画面遷移</span>
</span><span class='line'>    <span class="n">router</span><span class="o">?</span><span class="p">.</span><span class="n">routeToSomeWhere</span><span class="p">(</span><span class="nl">segue:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、ユーザによるアクション起因の場合は下記のようにするだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">tapSomeAction</span><span class="p">(</span><span class="n">_</span> <span class="nl">sender:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ① Interactorに具体的な処理内容を問い合わせる</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span><span class='line'>  <span class="n">interactor</span><span class="o">?</span><span class="p">.</span><span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Presenter</code> からの指示を受けて、 <code>ViewController</code> は描画処理を実行するため、見た目の整形などの <strong>描画処理自体</strong> は <code>ViewController</code> 内に書きます。</p>

<p>例えば、</p>

<p>・正方形の <code>UIView</code> を角丸にする/背景色を変更する/非表示にする etc<br/>
・マップにマーカを配置する/図形を描画する etc</p>

<h4>Interactor</h4>

<p><code>ViewController</code> から依頼を受け、 <code>Interactor</code> は下記を実施する責務を持っています。</p>

<p><strong>責務：</strong><br/>
① <code>Worker</code> と <code>Presenter</code> を仲介する<br/>
② どんな条件で、 <code>Worker</code> に何の処理を依頼するのかハンドリングする<br/>
③ <code>Worker</code> 経由で取得したレスポンスを <code>Presenter</code> に渡す</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewBusinessLogic</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewDataStore</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 画面遷移時にパラメータを受け取れるように定義</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">something:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="n">set</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewInteractor:</span> <span class="n">SampleViewBusinessLogic</span><span class="p">,</span> <span class="n">SampleViewDataStore</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">presenter:</span> <span class="n">SampleViewPresentationLogic</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">SampleViewWorker</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">something:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomething</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ① WorkerとPresenterを仲介する</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="nl">success:</span> <span class="p">{</span> <span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 処理が成功した場合</span>
</span><span class='line'>        <span class="c1">// ③ Worker経由で取得したレスポンスをPresenterに渡す  </span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">isError:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="p">},</span> <span class="nl">failure:</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 処理が失敗した場合</span>
</span><span class='line'>        <span class="c1">// ③ Worker経由で取得したレスポンスをPresenterに渡す  </span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">object</span><span class="p">,</span> <span class="nl">isError:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSometime</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ② どんな条件で、Workerに何の処理を依頼するのかハンドリングする</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">time</span> <span class="o">&gt;</span> <span class="n">Date</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">future:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSometime</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Sometime</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">future:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>      <span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSometime</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetchSomeWhat</span><span class="p">(</span><span class="nl">request:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">SomeWhat</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 画面遷移時に渡されたパラメータを利用した描画を実施したい場合</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">response</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">(</span><span class="nl">object:</span> <span class="n">something</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">presenter</span><span class="o">?</span><span class="p">.</span><span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Worker</h4>

<p><code>Interactor</code> から受けた依頼を実行します。</p>

<p><strong>責務：</strong><br/>
① <code>API</code> 処理や <code>Core Data</code> / <code>Realm</code> などのアプリ内ローカルデータの処理をハンドリングする<br/>
② 成功/失敗レスポンスをハンドリングする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">SampleViewWorker</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">fetch</span><span class="p">(</span><span class="nl">success:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">SomeObject</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">),</span> <span class="nl">failure:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">Error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// APIリクエストまたはローカルDBへのアクセスを実行してデータを取得</span>
</span><span class='line'>      <span class="c1">// 具体的な処理は省略</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">obj:</span> <span class="n">SomeObject</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'>      <span class="n">success</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Presenter</h4>

<p><code>Interactor</code> から <code>Worker</code> 経由で取得したレスポンスを受け取った後に、 <code>Presenter</code> は下記を実行することを責務とします。</p>

<p><strong>責務：</strong><br/>
① 受け取ったレスポンスを元に最適な表示(成功/失敗などの表示)になるようハンドリングする<br/>
② 受け取ったレスポンスを <code>Model.ViewModel</code> 形式に変換する<br/>
③ <code>ViewController</code> に <code>Model.ViewModel</code> を渡して描画を依頼する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">protocol</span> <span class="n">SampleViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">SampleViewPresenter:</span> <span class="n">SampleViewPresentationLogic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">weak</span> <span class="n">var</span> <span class="nl">viewController:</span> <span class="n">SampleViewDisplayLogic</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Present something</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">presentSomething</span><span class="p">(</span><span class="nl">response:</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">Response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ② 受け取ったレスポンスをModel.ViewModel形式に変換する</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">SampleView</span><span class="p">.</span><span class="n">Something</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">(</span><span class="nl">object:</span> <span class="n">response</span><span class="p">.</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ① 受け取ったレスポンスを元に最適な表示(成功/失敗などの表示)になるようハンドリングする</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">isError</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// エラーがある場合</span>
</span><span class='line'>      <span class="c1">// ③ ViewControllerにModel.ViewModelを渡して描画を依頼する  </span>
</span><span class='line'>      <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displayError</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ③ ViewControllerにModel.ViewModelを渡して描画を依頼する</span>
</span><span class='line'>    <span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">displaySomething</span><span class="p">(</span><span class="nl">viewModel:</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Model</h4>

<p>Clean Swiftアーキテクチャの肝といっても過言ではないのが <code>Model</code> です。</p>

<p><strong>責務：</strong><br/>
① 各種コンポーネントを切り離し、各種コンポーネント間のやり取りに利用される<br/>
② <code>Request</code> / <code>Response</code> / <code>ViewModel</code> の3つの構造体を持つ</p>

<p><strong>3つの構造体の説明：</strong><br/>
・ <code>Request</code><br/>
　　・ ユーザの操作をInputパラメータとして内包したデータ形式<br/>
　　・ <code>ViewController</code> から <code>Interactor</code> に渡される<br/>
・ <code>Response</code><br/>
　　・ <code>Worker</code> 処理結果を内包しているデータ形式<br/>
　　・ <code>Interactor</code> から <code>Presenter</code> に渡される<br/>
・ <code>ViewModel</code><br/>
　　・ <code>ViewController</code> での描画に即したデータ形式<br/>
　　・ <code>Presenter</code> から <code>ViewController</code> に渡される</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">SampleView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Fetch something</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">Something</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">object:</span> <span class="n">SomeObject</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">isError:</span> <span class="n">Bool</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">object:</span> <span class="n">SomeObject</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: Fetch sometime</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">Sometime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Request</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ViewModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>データフローの例</h3>

<p>各コンポーネントの責務を理解した上で、コンポーネント間のフローの流れを見ていきましょう。</p>

<h4>ユーザがボタンをタップして通信処理後に取得データを描画するフロー</h4>

<p>ユーザが <code>View</code> 上のボタンをタップした後に、外部APIを叩いて取得したデータで <code>View</code> 描画するデータフローは下記になります。</p>

<p>① <code>ViewController</code> が <code>View</code> に対するユーザアクションを検知<br/>
② <code>ViewController</code> が <code>Interactor</code> に <code>Model.Request</code> を送って具体的な処理を依頼<br/>
③ <code>Interactor</code> が <code>Worker</code> に処理を依頼<br/>
④ <code>Worker</code> が通信処理した結果を <code>Interactor</code> に返却<br/>
⑤ <code>Interactor</code> が返却データを <code>Model.Response</code> に変換して、 <code>Presenter</code> に処理を依頼 <br/>
⑥ <code>Presenter</code> が受け渡されたデータを <code>Model.ViewModel</code> に変換して、 <code>ViewController</code> に描画を指示<br/>
⑦ <code>ViewController</code> が <code>View</code> に描画を反映</p>

<p><img src="http://grandbig.github.io/images/clean-swift_3.png" alt="データのフロー例１" /></p>

<p>※このフローでは画面遷移がないため、Routerへの繋がりはありません。</p>

<h4>ユーザがボタンをタップしてローカルDBからデータ取得して画面遷移するフロー</h4>

<p>ユーザが <code>View</code> 上のボタンをタップした後に、ローカルDB内データを取得して、画面遷移するデータフローは下記になります。</p>

<p>① <code>ViewController</code> が <code>View</code> に対するユーザアクションを検知<br/>
② <code>ViewController</code> が <code>Interactor</code> に <code>Model.Request</code> を送って具体的な処理を依頼<br/>
③ <code>Interactor</code> が <code>Worker</code> に処理を依頼<br/>
④ <code>Worker</code> がローカルDBから処理した結果を <code>Interactor</code> に返却<br/>
⑤ <code>Interactor</code> が返却データを <code>Model.Response</code> に変換して、 <code>Presenter</code> に処理を依頼 <br/>
⑥ <code>Presenter</code> が受け渡されたデータを <code>Model.ViewModel</code> に変換して、 <code>ViewController</code> に描画を指示<br/>
⑦ <code>ViewController</code> が <code>Router</code> に画面遷移を依頼<br/>
⑧ <code>Router</code> が依頼された画面先にデータを受け渡し、画面遷移を実行</p>

<p><img src="http://grandbig.github.io/images/clean-swift_4.png" alt="データのフロー例２" /></p>

<h3>まとめ</h3>

<p>まず、各種コンポーネントの責務と、そのコンポーネント間の関係性および抽象的なデータフローについて説明しました。<br/>
次回は具体的なサンプルを元にClean Swiftについて説明したいと思います。</p>

<p>参考URL:</p>

<ul>
<li><a href="https://clean-swift.com/clean-swift-ios-architecture/">Clean Swift公式ページ</a></li>
<li><a href="https://hackernoon.com/introducing-clean-swift-architecture-vip-770a639ad7bf">Introducing Clean Swift Architecture (VIP)</a></li>
<li><a href="https://swifting.io/blog/2016/09/07/architecture-wars-a-new-hope/">swifting.io: #24 Architecture Wars – A New Hope</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プッシュ通知をnode-apnで送ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/node-apn/"/>
    <updated>2017-09-18T20:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/node-apn</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="https://grandbig.github.io/blog/2017/09/18/firebase-notification/">前回</a>はFirebaseを利用してiOSにRemote Notificationを送信することについて書きました。<br/>
今後は自作せずにFirebaseを利用するプロダクトが増えてくると思うことに変わりはないのですが、ふと昔利用していた<a href="https://github.com/node-apn/node-apn">node-apn</a>が気になりました。<br/>
折角の機会なので、この<code>node-apn</code>を利用してRemote Notificationを送信してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>プロジェクトの用意</h3>

<p>ベースプロジェクトは<a href="https://github.com/expressjs/express">Express</a>を使ってしまいましょう。<br/>
今回の各種バージョンは下記の通りです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Node</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span>  <span class="nx">v7</span><span class="p">.</span><span class="mf">3.0</span>
</span><span class='line'><span class="nx">npm</span><span class="o">:</span>      <span class="nx">v3</span><span class="p">.</span><span class="mf">10.10</span>
</span><span class='line'><span class="nx">Express</span><span class="o">:</span>  <span class="nx">v4</span><span class="p">.</span><span class="mf">15.0</span>
</span><span class='line'><span class="nx">nodebrew</span><span class="o">:</span> <span class="nx">v0</span><span class="p">.</span><span class="mf">9.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>① Expressコマンドで<code>pushtest</code>プロジェクトの生成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">express</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">ejs</span> <span class="nx">pushtest</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると下記のプロジェクト構成が出来上がります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pushtest</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">bin</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">www</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">routes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">users</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、<code>express</code>コマンドを打つには<code>express</code>と<code>express-generator</code>のインストールが必要です。<br/>
また、グローバルインストールした<code>node_modules</code>へのパスを<code>.bash_profile</code>に通しておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="nx">$HOME</span><span class="o">/</span><span class="p">.</span><span class="nx">nodebrew</span><span class="o">/</span><span class="nx">current</span><span class="o">/</span><span class="nx">bin</span><span class="o">:</span><span class="nx">$PATH</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">NODE_PATH</span><span class="o">=</span><span class="nx">$HOME</span><span class="o">/</span><span class="p">.</span><span class="nx">nodebrew</span><span class="o">/</span><span class="nx">current</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>source ~/.bash_profile</code>で最新状況を読み込むのを忘れずに。</p>

<p>② <code>node-apn</code>のインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">node</span><span class="o">-</span><span class="nx">apn</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>因みに、必要なモジュールをインストールしたつもりでも、何度も<code>Cannot find module xxx</code>と出てしまうようであれば、<code>app.js</code>と同じ階層下で<code>npm install -d</code>を実行しましょう。</p>

<h3>処理を実装</h3>

<p>プロジェクトが用意できたので、処理を実装していきましょう。<br/>
今回は簡単のため要件としては下記のみとします。</p>

<p>・特定の端末のデバイストークンを指定<br/>
・GETリクエスト</p>

<p>① <code>app.js</code>に処理を実装<br/>
まずはGETリクエストの受け口を<code>app.js</code>に用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">favicon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;serve-favicon&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;morgan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cookieParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cookie-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/apns&#39;</span><span class="p">);</span><span class="c1">// apns.jsは④で作成しますが、既にある体で追記</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/apns&#39;</span><span class="p">,</span> <span class="nx">apns</span><span class="p">);</span><span class="c1">// GETリクエストを受けられるように追記</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>② <code>routes/apns.js</code>を作成</p>

<p>最後にメインとなる処理を書いていきます。<br/>
専用の<code>routes/apns.js</code>を作成し、その内部に<code>node-apn</code>を利用した処理を書いていきます。<br/>
推奨されている<code>APNS Key</code>を利用するため、別途<code>AuthKey_xxxxxxxxxx.p8</code>を用意しましょう。</p>

<p>その結果、プロジェクト構成としては下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pushtest</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">bin</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">www</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">key</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">AuthKey_xxxxxxxxxx</span><span class="p">.</span><span class="nx">p8</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">public</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">routes</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="nx">users</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">views</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて具体的な処理です。<br/>
昔よりもシンプルに書けるようになっているイメージです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;apn&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;qs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// GETパラメータからトークンを取得</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deviceToken</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// プッシュ通知の設定</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">token</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;./keys/AuthKey_xxxxxxxxxx.p8&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">keyId</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxx&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">teamId</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxx&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">production</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">apnProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apn</span><span class="p">.</span><span class="nx">Provider</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apn</span><span class="p">.</span><span class="nx">Notification</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">badge</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">sound</span> <span class="o">=</span> <span class="s2">&quot;ping.aiff&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">alert</span> <span class="o">=</span> <span class="s2">&quot;プッシュ通知が届きましたよ！&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">topic</span> <span class="o">=</span> <span class="s2">&quot;com.xxx.NotificationSample&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// プッシュ送信</span>
</span><span class='line'>  <span class="nx">apnProvider</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="nx">deviceToken</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;respond with a resource&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>プッシュ通知を送信</h3>

<p>準備ができたのでプッシュ通知を送ってみましょう。</p>

<p>① <code>Node</code>を起動</p>

<p>デバッグしながら起動するために下記を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">node</span> <span class="o">--</span><span class="nx">inspect</span> <span class="o">--</span><span class="nx">debug</span><span class="o">-</span><span class="nx">brk</span> <span class="nx">bin</span><span class="o">/</span><span class="nx">www</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、下記出力がされるのでChromeでアクセスしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Debugger</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9229</span><span class="p">.</span>
</span><span class='line'><span class="nx">Warning</span><span class="o">:</span> <span class="nx">This</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">experimental</span> <span class="nx">feature</span> <span class="nx">and</span> <span class="nx">could</span> <span class="nx">change</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">start</span> <span class="nx">debugging</span><span class="p">,</span> <span class="nx">open</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">URL</span> <span class="k">in</span> <span class="nx">Chrome</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="o">-</span><span class="nx">devtools</span><span class="o">:</span><span class="c1">//devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>② プッシュ通知を送る</p>

<p>下記URLにアクセスしてGETリクエストを投げましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/apns?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけで下図のようにプッシュ通知が届きました。</p>

<p><img src="http://grandbig.github.io/images/node-apn_1.png" alt="node-apnで送ったプッシュ通知" /></p>

<h3>まとめ</h3>

<p>さて今回は<code>node-apn</code>でのプッシュ通知について書きました。<br/>
3年以上前に<a href="https://grandbig.github.io/blog/2014/02/22/silentremotenotification/">Silent Remote Notificationを試そう！</a>で利用したりしていたのですが、今見るといろいろと変わっているなと改めて感じました。<br/>
今更ではありますが、これも一つ勉強になったと思い、<code>Firebase</code>に没頭していこうかなと&hellip;笑<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firebase NotificationをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/firebase-notification/"/>
    <updated>2017-09-18T00:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/firebase-notification</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はFirebase Notificationについて見ていきたいと思います。<br/>
一昔前であれば、プロダクトごとにNotificationの仕組みを作り込んだり、共通基盤としてNotificationプロジェクトを推進していたりといった会社が多かった気がします。<br/>
また、未だにリッチなNotificationのプロダクトを生業として利益を上げている会社もあるので、それだけNotificationの仕組みは自作ではなくあるものを使いたいという需要が大きいのでしょう。<br/>
しかしながら、Firebaseの登場により、Notificationプロダクト市場もより加熱化しているのではないでしょうか。</p>

<p>筆者的にはGoogleが出す、それも無料のプロダクトであるわけなので、使わない手はないと思うわけです。<br/>
なんて偉そうなことを言いつつ、FireabseによるNotificationの仕組みを利用したことがなかったので、今回試しに使ってみることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Firebaseの導入</h3>

<p>こちらの内容は<a href="https://grandbig.github.io/blog/2017/05/14/firebase-ios/">以前書いた記事</a>に任せたいと思います。</p>

<h3>APNs証明書の作成</h3>

<p>こちらに関しては、様々なサイトにて説明がされているので、そちらを見るなどした方が早いので省きます。<br/>
例えば <a href="http://qiita.com/natsumo/items/d5cc1d0be427ca3af1cb#6-apns%E7%94%A8%E8%A8%BC%E6%98%8E%E6%9B%B8cer%E3%81%AE%E4%BD%9C%E6%88%90">プッシュ通知に必要な証明書の作り方2017</a>など参考にすると良いでしょう。</p>

<h3>Firebase Notificationの利用</h3>

<p>さて、本題です。<br/>
Firebase Notificationを利用するための手順について説明します。</p>

<p>① 作成したAPNs証明書をダウンロードする<br/>
先程作成したAPNs証明書はキーチェーンに登録していると思います。<br/>
(Apple Developer Programで作成したAPNs証明書は必ずDLしてキーチェーンに登録しましょう。)<br/>
キーチェーンを開いて、該当の証明書をダウンロードします。</p>

<p>該当のAPNs証明書は <code>Apple Development IOS Push Services: xxxxx</code> のようになっているものです。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_1.png" alt="キーチェーンを開く" /></p>

<p>右クリックして書き出すを選択します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_2.png" alt="証明書を書き出す" /></p>

<p>ファイル名とパスワードをつけて保存します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_3.png" alt="ファイル名とパスワードの付け方" /></p>

<p>② ダウンロードしたAPNs証明書をFirebaseに登録する</p>

<p>FirebaseのConsoleを開き、設定画面に遷移します。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_4.png" alt="Firebase Consoleの設定画面" /></p>

<p>クラウドメッセージングタブを開き、APNs証明書をアップロードします。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_5.png" alt="Firebase Console クラウドメッセージングタブ" /></p>

<p>③ Firebaseの必要ライブラリを導入する<br/>
Firebaseの導入で<code>Core</code>ライブラリはインストールできているかもしれませんが、Notificationでは<code>Messaging</code>が必要になります。<br/>
よって、<code>Podfile</code>を下記のように修正して、<code>pod update</code>をする必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;NotificationSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Firebase</span><span class="o">/</span><span class="n">Core</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Firebase</span><span class="o">/</span><span class="n">Messaging</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">abstract_target</span> <span class="err">&#39;</span><span class="n">Tests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">search_paths</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;NotificationSampleTests&quot;</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;NotificationSampleUITests&quot;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>④ ソースコードにFirebase Notificationが利用できるように実装する<br/>
続いて、ソースコードの設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Firebase</span>
</span><span class='line'><span class="n">import</span> <span class="n">UserNotifications</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span><span class="p">,</span> <span class="n">UNUserNotificationCenterDelegate</span><span class="p">,</span> <span class="n">MessagingDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// リモート通知 (iOS10に対応)</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">authOptions:</span> <span class="n">UNAuthorizationOptions</span> <span class="o">=</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">]</span>
</span><span class='line'>    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span>
</span><span class='line'>      <span class="nl">options:</span> <span class="n">authOptions</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">completionHandler:</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UNUserNotificationCenterDelegateの設定</span>
</span><span class='line'>    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="c1">// FCMのMessagingDelegateの設定</span>
</span><span class='line'>    <span class="n">Messaging</span><span class="p">.</span><span class="n">messaging</span><span class="p">().</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// リモートプッシュの設定</span>
</span><span class='line'>    <span class="n">application</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Firebase初期設定</span>
</span><span class='line'>    <span class="n">FirebaseApp</span><span class="p">.</span><span class="n">configure</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// アプリ起動時にFCMのトークンを取得し、表示する</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">token</span> <span class="o">=</span> <span class="n">Messaging</span><span class="p">.</span><span class="n">messaging</span><span class="p">().</span><span class="n">fcmToken</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;FCM token: \(token ?? &quot;&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 省略</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">userNotificationCenter</span><span class="p">(</span><span class="n">_</span> <span class="nl">center:</span> <span class="n">UNUserNotificationCenter</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">willPresent</span> <span class="nl">notification:</span> <span class="n">UNNotification</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">withCompletionHandler</span> <span class="nl">completionHandler:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">UNNotificationPresentationOptions</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;フロントでプッシュ通知受け取ったよ&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">messaging</span><span class="p">(</span><span class="n">_</span> <span class="nl">messaging:</span> <span class="n">Messaging</span><span class="p">,</span> <span class="n">didRefreshRegistrationToken</span> <span class="nl">fcmToken:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Firebase registration token: \(fcmToken)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけでプッシュ通知の受信ができるようになります。</p>

<h3>Firebase Notificationを利用する</h3>

<p>設定が完了したため、Firebaseからプッシュ通知を送ってみましょう。</p>

<p>方法は簡単です。</p>

<p>① 左メニューから <code>Notification</code> を選択する<br/>
② 「新しいメッセージ」を選択する<br/>
③ 必要項目を入力して「メッセージを送る」を選択する</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_6.png" alt="Firebase Consoleからプッシュ通知を送る" /></p>

<p>これにより、下図のようにプッシュが届くことを確認できます。<br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_7.png" alt="端末にプッシュ通知が届く" /></p>

<h3>FirebaseにAPNs Keyを登録する方法</h3>

<p>さて、上記まででは、APNs証明書を作成して、Firebaseに登録する方法を説明しましたが、実はAPNs証明書よりも <code>APNs Key</code> というものの利用を推奨されています。<br/>
なので、こちらの方法も説明しておきます。</p>

<p>作成方法はいたって簡単です。</p>

<p>① Apple Developer Programの左メニューから<code>Keys &gt; All</code>を選択する<br/>
② 「＋」ボタンで新規作成する<br/>
③ Keyの名称を設定する<br/>
④ Service種別として<code>APNs</code>を選択する<br/>
⑤ Continueボタンを選択して作成する</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_8.png" alt="APNs Keyの作成方法" /></p>

<p>上記で作成した<code>APNs Key</code>をFirebase Console上で設定します。</p>

<p>Firebase Console > 設定 > クラウドメッセージング > iOSアプリの設定から<code>APNs認証キー</code>に設定します。</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_9.png" alt="APNs認証キーを設定" /></p>

<p>因みに、設定時に利用するIDはそれぞれ下記から取得します。</p>

<p><img src="http://grandbig.github.io/images/firebase_notificcation_ios_10.png" alt="キーID" /><br/>
<img src="http://grandbig.github.io/images/firebase_notificcation_ios_11.png" alt="App ID Prefix" /></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
まだまだFirebase Console上からプッシュできるNotificationにも制限があるようですが、複雑なことをしない例えば「一斉お知らせ機能」のような形で利用するのであれば非常に良いのではないでしょうか？<br/>
今後もバージョンアップして使いやすくなることを期待しつつ、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(4周年)]]></title>
    <link href="http://grandbig.github.io/blog/2017/08/27/blog-4-year-anniversary/"/>
    <updated>2017-08-27T13:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/08/27/blog-4-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めてもうすぐ4周年</h3>

<p>来月頭に技術ブログ4周年を迎えるため、今年も書いていきたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p><strong>Google Analytics</strong> からデータアクセスの推移を見ていきたいと思います。<br/>
今年の結果は、<br/>
<img src="http://grandbig.github.io/images/4anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
となっていました。<br/>
特にゴールデンウィーク後にアクセス数が急増している様子が見られました。</p>

<p>もう少し詳細化したものを記載します。<br/>
以下、1年間のアクセス数の推移を示しています。  <br/>
<img src="http://grandbig.github.io/images/4anniversary2.png" alt="1年間でのアクセス数の推移" /></p>

<p>特にゴールデンウィーク後からは、平日のページビュー数/日が680〜800を常時維持しています。</p>

<p>また、2017/06に最高のページビュー数を記録しました。<br/>
(もう少しで20,000に届きそうなところまで来ました。)<br/>
<img src="http://grandbig.github.io/images/4anniversary3.png" alt="2017/06の記録" /></p>

<p>因みにですが&hellip;<br/>
ブログ開始当初からの各値の総計は下図の通りです。<br/>
<img src="http://grandbig.github.io/images/4anniversary4.png" alt="ブログ開始からの各数値" /></p>

<h4>アクセス数の多い記事を紹介</h4>

<p>続いてアクセス数が多かった記事ランキングです！！</p>

<p><strong>1位: <a href="https://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary5.png" alt="第1位記事の詳細データ" /></p>

<p><strong>2位: <a href="https://grandbig.github.io/blog/2016/05/28/redirect-parameter-spring-boot/">Spring Bootでリダイレクト先にパラメータを渡す方法</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary6.png" alt="第2位記事の詳細データ" /></p>

<p><strong>3位: <a href="https://grandbig.github.io/blog/2016/07/16/git-reset/">GitでリモートにPushした内容を取り消したい！！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary7.png" alt="第3位記事の詳細データ" /></p>

<p><strong>4位: <a href="http://grandbig.github.io/blog/2016/01/11/xctest/">SwiftでXCTestを使って単体テストとUIテストをしてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary8.png" alt="第4位記事の詳細データ" /></p>

<p><strong>5位: <a href="https://grandbig.github.io/blog/2016/09/19/start-xcode8/">Xcode8を始めてみよう！</a></strong><br/>
<img src="http://grandbig.github.io/images/4anniversary9.png" alt="第5位記事の詳細データ" /></p>

<p>以上が上位5記事です。</p>

<p>3年目まで1位をキープしていた <strong>『Backgroundで位置情報を取得しよう！』</strong> がとうとう1位の座を明け渡す結果となりました。<br/>
(因みに今年は7位でした&hellip;)<br/>
そして、昨年2位の位置につけていたAndroidの記事ですが、今年はぶっちぎりの1位という結果となりました。  <br/>
今後はKotlinの記事がアクセス増加に寄与するかもしれませんね。</p>

<p>2位は昨年筆者がSpring Bootに触れる機会があったため、書いていたSpring Boot系の記事でした。<br/>
3位はGitの記事です。<br/>
今やGitを使うことはデファクトスタンダードになっていると思うものの、失敗した時にどうすれば良いのかという部分についてはまだまだ浸透していないということなのかもしれません。<br/>
4位と5位はiOS関連の記事です。<br/>
特に4位の記事はiOSアプリのテストに関するものだったので、ネイティブアプリ開発における自動テストの意識も向上しているのかなと思ったりします。</p>

<h4>広告収入の推移</h4>

<p>広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
毎年説明していますが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。<br/>
本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、今年の推移(2016/09/01〜2017/08/26)を見ていきます。<br/>
<img src="http://grandbig.github.io/images/4anniversary10.png" alt="Google Adsenseの推移" /></p>

<p>上記期間のAdsense収益は <strong>$79.29</strong> (約8,600円)でした。<br/>
1年間で1回Googleから頂けるような形になっているので、成長を実感します。</p>

<h3>まとめ</h3>

<p>さて、いかがでしたでしょうか？<br/>
筆者自身も毎年楽しみにこの記事を書いているので、今年も書けて良かったです。<br/>
毎月1記事は必ず書く目標を何とか貫けているので、これからも続けたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionViewCellをカスタム化しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/08/06/custome-collectionview/"/>
    <updated>2017-08-06T03:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/08/06/custome-collectionview</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は基礎中の基礎ではあるものの、結構忘れがちなカスタム化についてメモ書きしておきたいと思います。<br/>
その題材として <code>UICollectionViewCell</code> を使ってみます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>カスタムファイルの作成</h3>

<p>まずは <code>xib</code> ファイルを作成します。<br/>
今回は下記のように <code>UIImageView</code> を持たせるようにカスタム化させます。<br/>
(<code>CustomCollectionViewCell.xib</code>とします。)</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-1.png" alt="xibファイル" /></p>

<p>これと対となる<code>swift</code>ファイルを作成します。<br/>
(<code>CustomCollectionViewCell.swift</code>とします。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CustomCollectionViewCell.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomCollectionViewCell:</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">imageView:</span> <span class="n">UIImageView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;CustomCollectionViewCell&quot;</span><span class="p">,</span> <span class="nl">owner:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">first</span> <span class="n">as</span><span class="o">?</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この<code>xib</code>と<code>swift</code>ファイルを繋ぐために <code>xib</code>ファイルの<code>File's Owner</code>の<code>Custom Class</code>の<code>Class</code>にクラス名を入力します。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-2.png" alt="xibとswiftの接続" /></p>

<h3>Storyboardにカスタム部品を配置</h3>

<p>続いて、先程作成したカスタム部品を<code>Storyboard</code>に配置します。<br/>
今回は <code>UICollectionViewCell</code> をカスタム化しているので、右メニューから <code>UICollectionView</code> をドラッグ&amp;ドロップして持ってきます。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-3.png" alt="UICollectionViewをドラッグ&amp;ドロップ" /></p>

<p>持ってきた部品とカスタム化クラスを結びつけます。<br/>
<code>右メニュー &gt; Show the Identity inspector &gt; Custom Class &gt; Class</code> にクラス名を入力します。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-4.png" alt="カスタムクラスへの接続" /></p>

<h3>CustomCollectionViewCellの表示</h3>

<p>ここまでくれば後はいつも通り<code>UICollectionView</code>を使えば良いだけです。</p>

<p>・ <code>Storyboard</code> 上で <code>Collection Reusable View</code> の <code>Identifier</code> に値を設定<br/>
・ 下記の通りソースコードを実装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CreateShopMemoViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">UICollectionViewDataSource</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// UICollectionView</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - UICollectionViewDataSource</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">cellForItemAt</span> <span class="nl">indexPath:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withReuseIdentifier:</span> <span class="s">&quot;CustomCell&quot;</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomCollectionViewCell</span>
</span><span class='line'>    <span class="c1">// 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)</span>
</span><span class='line'>    <span class="n">cell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">numberOfItemsInSection</span> <span class="nl">section:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>その結果は下記の通りです。</p>

<p><img src="http://grandbig.github.io/images/custom-collection-view-6.png" alt="CustomCollectionViewCellの表示" /></p>

<p>因みに、今回のように、Viewを1枚ペタッと貼るだけであれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MARK: - UICollectionViewDataSource</span>
</span><span class='line'><span class="n">func</span> <span class="n">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nl">collectionView:</span> <span class="n">UICollectionView</span><span class="p">,</span> <span class="n">cellForItemAt</span> <span class="nl">indexPath:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UICollectionViewCell</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withReuseIdentifier:</span> <span class="s">&quot;CustomCell&quot;</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)</span>
</span><span class='line'>  <span class="n">cell</span><span class="p">.</span><span class="n">backgroundView</span> <span class="o">=</span> <span class="n">UIImageView</span><span class="p">(</span><span class="nl">image:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いだけです。</p>

<h3>まとめ</h3>

<p>今回は完全なるメモ書きでしたが、カスタム化の基礎なので、十二分に慣れておかないとですね。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://himaratsu.hatenablog.com/entry/ios/customview">カスタムViewをNibから初期化し、IBDesignableとIBInspectableで便利に使う</a></li>
<li><a href="http://qiita.com/taketomato/items/7bf3f1dc2690c76079fb">xib 化した UITableViewCell を使うときの Tips</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bond, SwiftBondを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/31/swiftbond-1/"/>
    <updated>2017-07-31T20:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/31/swiftbond-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回はiOSで <code>MVVM</code> アーキテクチャで重宝されている<a href="https://github.com/ReactiveKit/Bond">ReactiveKit/Bond</a>(SwiftBond)について勉強したいと思います。<br/>
趣味で個人iOSアプリを作成する分にはそこまで大規模アプリになることも少ないとは思うものの、仕事で大人数で1つのアプリを開発することは当然あることでしょう。<br/>
そんなときに備えて知識を向上させたいと思います。<br/>
(今まで <code>MVC</code> で済んできたこともあり、良い機会なので <code>MVVM</code> を勉強したいと思っています。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>MVVMとは</h3>

<p>まず、 <code>MVVM</code> とはそもそも何なのでしょうか？<br/>
<code>MVVM</code> とは <code>Model View ViewModel</code> の略です。</p>

<p><a href="https://ja.wikipedia.org/wiki/Model_View_ViewModel">Wikipedia</a>を見ると、それぞれ</p>

<ul>
<li><code>Model</code>

<ul>
<li>そのアプリケーションが扱う領域のデータと手続き (ビジネスロジック)を表現する要素</li>
<li>データの格納に永続的な記憶の仕組み(データベース)やサーバ側との通信ロジックなど</li>
</ul>
</li>
<li><code>View</code>

<ul>
<li>ユーザに見せるためのアウトプット描画およびユーザ入力を受け取る(UIへの入力とUIからの出力を担当する)要素</li>
<li>データバインディング機構を通して自動的に描画</li>
<li><code>View</code> そのものに複雑なロジックや状態を持たない</li>
</ul>
</li>
<li><code>ViewModel</code>

<ul>
<li>Viewを描画するための状態の保持と、Viewから受け取った入力を適切な形に変換してModelに伝達する役目を持つ</li>
</ul>
</li>
</ul>


<p>と書かれています。<br/>
他の方のブログ記事を見ても、上記からそう遠くはない印象です。</p>

<h3>Bond, SwiftBondとは</h3>

<p><code>Bond</code> は昔は <code>SwiftBond</code> と呼ばれていたようですが、今はGitHub上でも <code>ReactiveKit</code> の一部として提供されているようです。<br/>
元々、 <code>SwiftBond</code> も <code>ReactiveKit</code> も開発者は同じなので、どこかのタイミングで取り込まれたんですかね&hellip;。<br/>
この <code>Bond</code> を <code>MVVM</code> で言うところのデータバインディング機構を実現するために利用します。</p>

<h3>サンプルを作ってみよう</h3>

<p>今回のサンプルで扱う機能は下記です。</p>

<ul>
<li>Google　Mapに現在地周辺のレストランをマッピングする</li>
<li>レストラン情報はホットペッパーAPIの周辺レストラン検索APIから取得する</li>
</ul>


<p>続いてXcode上のフォルダ構成は下記にします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">SampleApp</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">HotpepperAPI</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewModel</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">HotpepperAPIViewModel</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">└──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、今回は <code>Google Maps SDK for iOS</code> と ホットペッパーのAPIを利用します。<br/>
これらのAPIキーを公式案内を元に取得して、 <code>Info.plist</code> と同じ階層に作成した <code>key.plist</code> に追加します。</p>

<p><img src="http://grandbig.github.io/images/swiftbond_1.png" alt="ホットペッパーAPIキー" /></p>

<p>さて下準備は済んだので、各ファイルの実装を見ていきましょう。</p>

<h4>AppDelegate.swift</h4>

<p><code>Google Maps SDK for iOS</code> を利用するために <code>AppDelegate.swift</code> に下記処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleMapsApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">GMSServices</span><span class="p">.</span><span class="n">provideAPIKey</span><span class="p">(</span><span class="n">apiKey</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HotpepperAPI.swift</h4>

<p>ホットペッパーのグルメサーチAPIを利用する <code>Model</code> ファイルです。<br/>
今回はサンプルということもあって、ほとんど複雑な処理はありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPI.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ホットペッパーAPI</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperAPI</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// ホットペッパーAPIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   ホットペッパーグルメサーチAPI</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter coordinate: 位置</span>
</span><span class='line'><span class="cm">   - parameter completion: レストラン情報を返却するcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">JSON</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HotpepperAPIViewModel.swift</h4>

<p><code>Model</code>である<code>HotpepperAPI.swift</code>と<code>View</code>である<code>ViewController.swift</code>を繋ぐ<code>ViewModel</code>ファイルです。<br/>
<code>View</code>からの入力受付を想定して<code>searchRestaurant</code>メソッドを用意しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPIViewModel.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">ReactiveKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Bond</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 通信の各状態をEnumで表現</span>
</span><span class='line'><span class="k">enum</span> <span class="n">RequestState</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">none</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">requesting</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">finish</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">error</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// HotpepperAPIのViewModelクラス</span>
</span><span class='line'><span class="n">final</span> <span class="n">class</span> <span class="n">HotpepperAPIViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">items:</span> <span class="n">ObservableArray</span><span class="o">&lt;</span><span class="n">JSON</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">ObservableArray</span><span class="p">([])</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">requestState</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">RequestState</span><span class="o">&gt;</span><span class="p">(.</span><span class="n">none</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">hotpepperAPI</span> <span class="o">=</span> <span class="n">HotpepperAPI</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">finishSearchRestaurant:</span> <span class="n">Signal</span><span class="o">&lt;</span><span class="p">[</span><span class="n">JSON</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="n">NoError</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="p">(</span><span class="n">requestState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">JSON</span><span class="p">]</span><span class="o">?</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">requestState</span> <span class="o">==</span> <span class="p">.</span><span class="n">finish</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">array</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">RequestState</span><span class="p">.</span><span class="n">requesting</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hotpepperAPI</span><span class="p">.</span><span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">coordinate</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">resultArray</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">array</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">ObservableArray</span><span class="p">(</span><span class="n">resultArray</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">requestState</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">RequestState</span><span class="p">.</span><span class="n">finish</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、<code>searchRestaurant</code>の中で先程紹介した<code>Model</code>の<code>HotpepperAPI</code>クラスにアクセスしてサーバ通信を委託しています。<br/>
また、返却された値を受け取って<code>requestState</code>の状態を変えることが、<code>finishSearchRestaurant</code>の処理のトリガーになっています。<br/>
<code>finishSearchRestaurant</code>では、<code>RequestState</code>の状態が<code>finish</code>になったときのみ正しい値を返却し、それ以外は<code>nil</code>を返却しています。</p>

<h4>ViewController.swift</h4>

<p>最後に <code>View</code> に当たる <code>ViewController.swift</code> について見ていきます。<br/>
iOSでファットになりがちな <code>ViewController</code> を <code>View</code> の定義に則って実装していくというのがキーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// マップビュー</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>  <span class="c1">/// 検索ボタン</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">searchButton:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="c1">/// 現在地</span>
</span><span class='line'>  <span class="n">internal</span> <span class="n">var</span> <span class="nl">currentLocation:</span> <span class="n">CLLocationCoordinate2D</span><span class="o">?</span>
</span><span class='line'>  <span class="c1">/// ViewModel</span>
</span><span class='line'>  <span class="n">internal</span> <span class="n">var</span> <span class="n">hotpepperAPIVM</span> <span class="o">=</span> <span class="n">HotpepperAPIViewModel</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データバインディング機構の設定処理</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">setUpBind</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">func</span> <span class="n">setUpBond</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 検索ボタンをタップ(.touchUpInside)したときに呼び出される処理</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">searchButton</span><span class="p">.</span><span class="n">reactive</span><span class="p">.</span><span class="n">tap</span><span class="p">.</span><span class="n">observeNext</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">hotpepperAPIVM</span><span class="p">.</span><span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">self</span><span class="p">.</span><span class="n">currentLocation</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// finishSearchRestaurantから値が返却されるときに呼び出される処理</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">hotpepperAPIVM</span><span class="p">.</span><span class="n">finishSearchRestaurant</span><span class="p">.</span><span class="n">ignoreNil</span><span class="p">().</span><span class="n">observeNext</span><span class="p">(</span><span class="nl">with:</span> <span class="p">{</span> <span class="p">(</span><span class="n">searchShops</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">searchShop</span> <span class="k">in</span> <span class="n">searchShops</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Google Mapへのマッピング処理</span>
</span><span class='line'>        <span class="c1">// 省略</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように実装することで、データバインディング機構を <code>View</code> に実装することができます。<br/>
ポイントは上記ソース内コメントに書いた通りですが、筆者が苦戦したのは、</p>

<ul>
<li><code>_ =</code> から始めなかったためSwift3の静的解析で怒られた</li>
<li><code>observeNext</code> 内で <code>nil</code> 判定してしまっていたが、 <code>ignoreNil</code> という便利なものがある</li>
</ul>


<p>の2点です。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
筆者的にもまだまだ理解しきれていないところがあり、引き続き勉強する必要があると感じています。<br/>
特にエラーハンドリング周りでは <code>ReactiveKit</code> を利用することで、<br/>
うまく書けるようになるのではという期待感があるのでもう少し見ていきたいと思っています。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://qiita.com/hachinobu/items/27a92d480db24511559a">SwiftBondの魅力 ~実用サンプル編~</a></li>
<li><a href="http://qiita.com/susieyy/items/2af5321b287b8d2f49f6">MVVMをベースに複雑な振る舞いをしっかり把握できるアプリ開発</a></li>
<li><a href="http://qiita.com/ko2ic/items/44c18b07c7f337dfb06b">SwiftBondをSwift3対応するためにv5にマイグレーションする</a></li>
<li><a href="https://www.raywenderlich.com/149753/bond-tutorial-bindings-swift">Bond Tutorial: Bindings in Swift</a></li>
<li><a href="https://github.com/ReactiveKit/ReactiveKit">ReactiveKit/ReactiveKit</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlamofireImageを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/alamofireimage/"/>
    <updated>2017-07-23T15:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/alamofireimage</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は何気に今まで使ってこなかった<a href="https://github.com/Alamofire/AlamofireImage">AlamofireImage</a>についてメモ書きです。<br/>
キャッシュコントロールやら同期/非同期での画像取得など考えなくても良いというのはパワー的にかなり楽になりますね。<br/>
ということで早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>API経由で取得した画像URLを使ってUIImageViewに画像を表示する</h3>

<h4>テストとして利用するAPI</h4>

<p>今回はテスト用APIとして<a href="https://webservice.recruit.co.jp/hotpepper/reference.html">ホットペッパーのグルメサーチAPI</a>を利用しました。</p>

<p>ホットペッパーAPIを利用するには新規登録して<code>API Key</code>をゲットする必要があります。<br/>
また、前提として取得した<code>API Key</code>は<code>key.plist</code>に書いているとします。</p>

<p><img src="http://grandbig.github.io/images/alamofireimage_1.png" alt="API Keyをkey.plistに書き出し" /></p>

<p>上記準備をした上で下記クラスを作成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// HotpepperAPI.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> ホットペッパーAPI</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="n">HotpepperAPI</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// ホットペッパーAPIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://webservice.recruit.co.jp/hotpepper/gourmet/v1/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;hotpepperApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   ホットペッパーグルメサーチAPI</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter coordinate: 位置</span>
</span><span class='line'><span class="cm">   - parameter completion: レストラン情報を返却するcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchRestaurant</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">JSON</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;key&quot;</span><span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span><span class="p">,</span> <span class="s">&quot;format&quot;</span><span class="o">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="s">&quot;lat&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="s">&quot;lng&quot;</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">,</span> <span class="s">&quot;range&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span> <span class="n">as</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">baseURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="s">&quot;shop&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>テストとして用意するUIImageView</h4>

<p>今回はテストとして <strong>マップにプロットしたマーカをタップしたときに表示するInfoWindow内にUIImageViewを用意する</strong> ようにしました。</p>

<p>【準備事項】<br/>
&ndash; Google Maps SDK for iOSをマップとして利用<br/>
&ndash; マーカタップ時に表示されるInfoWindowをカスタム化</p>

<p>表示するViewとしては下図のようになります。<br/>
<img src="http://grandbig.github.io/images/alamofireimage_2.png" alt="MarkerInfoContentsView.xib" /></p>

<h4>AlamofireImageの用意</h4>

<p>では肝心な<code>AlamofireImage</code>の導入を見てみましょう。<br/>
<code>CocoaPods</code>で簡単に導入が可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">10.0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;SampleApp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">AlamofireImage</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">3.1</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
</span><span class='line'>  <span class="n">installer</span><span class="p">.</span><span class="n">pods_project</span><span class="p">.</span><span class="n">targets</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">target</span><span class="o">|</span>
</span><span class='line'>    <span class="n">target</span><span class="p">.</span><span class="n">build_configurations</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">SWIFT_VERSION</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mf">3.0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>マーカタップ時に表示するInfoWindowに画像を表示する</h4>

<p>まずは<code>InfoWindow</code>をカスタム化したクラスである<code>MarkerInfoContentsView.swift</code>のソースコードを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// MarkerInfoContentsView.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">AlamofireImage</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MarkerInfoContentsView:</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">shopName:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">categoryName:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">shopImage:</span> <span class="n">UIImageView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">required</span> <span class="n">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder:</span> <span class="n">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coder:</span> <span class="n">aDecoder</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">xibViewSet</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">internal</span> <span class="n">func</span> <span class="n">xibViewSet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;MarkerInfoContentsView&quot;</span><span class="p">,</span> <span class="nl">owner:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">first</span> <span class="n">as</span><span class="o">?</span> <span class="n">UIView</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    データの設定処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    - parameter shopName: 店舗名</span>
</span><span class='line'><span class="cm">    - parameter categoryName: カテゴリ名</span>
</span><span class='line'><span class="cm">    - parameter shopImageURLString: 画像URL</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">setData</span><span class="p">(</span><span class="nl">shopName:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">categoryName:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">shopImageURLString:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 店舗名の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">shopNameTextCount</span> <span class="o">=</span> <span class="n">shopName</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">shopNameTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">shopName</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;店舗名不明&quot;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopName</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">gray</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 詳細説明の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">categoryNameTextCount</span> <span class="o">=</span> <span class="n">categoryName</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">categoryNameTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">categoryName</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;カテゴリ不明&quot;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">categoryName</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">gray</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 画像の設定</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">shopImageURLStringTextCount</span> <span class="o">=</span> <span class="n">shopImageURLString</span><span class="o">?</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">shopImageURLStringTextCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">shopImageURL</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string:</span> <span class="n">shopImageURLString</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">af_setImage</span><span class="p">(</span><span class="nl">withURL:</span> <span class="n">shopImageURL</span><span class="p">,</span> <span class="nl">placeholderImage:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際に<code>AlamofireImage</code>を利用して画像URLから取得した画像データを格納している箇所は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">shopImage</span><span class="p">.</span><span class="n">af_setImage</span><span class="p">(</span><span class="nl">withURL:</span> <span class="n">shopImageURL</span><span class="p">,</span> <span class="nl">placeholderImage:</span> <span class="n">UIImage</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;NoImageIcon&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>になります。<br/>
続いて、<code>ViewController.swift</code>での<code>GMSMapViewDelegate</code>部分の処理を抜粋して書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">extension</span> <span class="nl">ViewController:</span> <span class="n">GMSMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="p">,</span> <span class="n">markerInfoWindow</span> <span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">let</span> <span class="n">cMarker</span> <span class="o">=</span> <span class="n">marker</span> <span class="n">as</span><span class="o">?</span> <span class="n">CustomGMSMarker</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cMarker</span><span class="p">.</span><span class="n">tracksInfoWindowChanges</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">MarkerInfoContentsView</span><span class="p">(</span><span class="nl">frame:</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="mi">250</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">265</span><span class="p">))</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">setData</span><span class="p">(</span><span class="nl">shopName:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">shopName</span><span class="p">,</span> <span class="nl">categoryName:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">categoryName</span><span class="p">,</span> <span class="nl">shopImageURLString:</span> <span class="n">cMarker</span><span class="p">.</span><span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重要なのは、 <strong><code>cMarker.tracksInfoWindowChanges = true</code></strong> です。<br/>
これを書かないと <strong>画像URLから画像データを取得したタイミングで<code>InfoWindow</code>の画像を更新する</strong>ということができなくなります。<br/>
(<code>placeholderImage</code>として用意した画像がずっと表示されてしまいます。)</p>

<p>筆者はここでドハマリして試行錯誤してしまいました。<br/>
非同期で画像データを取得しに行っているので、データ取得前に<code>InfoWindow</code>の描画処理に進んでしまうということはわかるのですが、どうすれば想定した挙動が実現できるのか悩みました。<br/>
ですが、蓋を開けてみれば何ということもなかったんですよね。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
画像取得/キャッシュ関連のOSSライブラリは多種多様なものが出ており、好き嫌いもあるかもしれませんが、筆者は通信ライブラリに<code>Alamofire</code>を使うことが多いため、<code>AlamofireImage</code>も嫌いではないんですよね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[方向音痴メモ ver1.0の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1/"/>
    <updated>2017-07-23T11:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はついこの間まで趣味で開発していたアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/us/app/%E6%96%B9%E5%90%91%E9%9F%B3%E7%97%B4%E3%83%A1%E3%83%A2/id1260288529?mt=8&amp;ign-mpt=uo%3D2">方向音痴メモ</a>というアプリです。<br/>
(仕事終わりに1時間ちびちびと開発していたこともあって、)製作期間は1ヶ月もかかってしまいました。<br/>
全然大した機能があるわけでもないのに&hellip;。</p>

<p>今回の開発を通して学んだこともあるため、記録として本記事を書こうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの紹介</h3>

<p>アプリの機能から紹介したいと思います。<br/>
まず、アイコンはこちらになります。</p>

<p><img src="http://grandbig.github.io/images/HelpSenseOfDirection_icon.jpg" alt="方向音痴メモのアイコン" /></p>

<h4>アプリのコンセプト</h4>

<p>このアプリのターゲットはアプリの名にもある通り『方向音痴な人』です。<br/>
このターゲットを助けるために筆者は下記が必要だと考えました。</p>

<ul>
<li>道に迷った時に、通った場所の記憶を蘇らせるためのメモを残せる</li>
<li>メモは「その場所の概要」や「その場所の画像」を記録できるようにする</li>
</ul>


<p>上記を実装したのが、今回のアプリになります。</p>

<h4>アプリの使い方</h4>

<p>ではアプリの使い方を見ていきましょう。<br/>
今回はアプリ起動時にチュートリアルを見れるようにしたため、そのチュートリアルの指示に従って進めば簡単だと思います。</p>

<h5>基本的な使い方</h5>

<p>チュートリアルを進むことで、下記のように、基本的な使い方を知ることができます。</p>

<p><img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_1.jpg" alt="チュートリアル１" /><br/>
<img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_2.jpg" alt="チュートリアル２" /><br/>
<img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_3.jpg" alt="チュートリアル３" /></p>

<h5>不要なポイントの削除</h5>

<p>誤ってポイントを作成してしまうこともあると思います。<br/>
そんなときには下記のように不要なポイントを削除してしまいましょう。</p>

<p><img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_4.jpg" alt="不要なポイントの削除" /></p>

<h5>ポイントの全削除</h5>

<p>配置したポイントを一気に削除することもできます。</p>

<p><img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_5.jpg" alt="ポイントの全削除" /></p>

<h5>チュートリアルをもう一度見る</h5>

<p>初回起動時にチュートリアルを見たものの、使い方を忘れてしまうこともあるでしょう。<br/>
そんな時用にチュートリアルをもう一度見る機能を用意しています。</p>

<p><img src="http://grandbig.github.io/images/HelpSenseOfDirection_tutorial_6.jpg" alt="チュートリアルをもう一度見る" /></p>

<h3>アプリの実装</h3>

<p>続いて実装面に関して触れます。<br/>
実コードは<a href="https://github.com/grandbig/HelpSenseOfDirection">GitHub: HelpSenseOfDirection</a>を参照頂ければと思います。</p>

<h4>プロジェクト構成</h4>

<p>Xcode上のプロジェクト構成は下記の通りです。<br/>
今回もMVCで実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">HelpSenseOfDirection</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Enum</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">MarkerType</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomGMSMarker</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Direction</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Geocoding</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">RealmMarker</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">RealmMarkerManager</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">Marker</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">MarkerInfoContentsView</span><span class="p">.</span><span class="n">xib</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">MarkerInfoContentsView</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">UIPlaceHolderTextView</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">CustomCell</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewController</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">AnnotationViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">CreateMarkerViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">ViewController</span><span class="o">+</span><span class="n">CLLocationManager</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">ViewController</span><span class="o">+</span><span class="n">GMSMapView</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">ViewController</span><span class="o">+</span><span class="n">SpotlightControllerView</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">SettingViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">SlideMenuViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">└──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span></code></pre></td></tr></table></div></figure>


<h4>利用ライブラリ</h4>

<p>今回利用したライブラリは下記になります。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。</li>
<li><a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a><br/>
今回はAppleデフォルトではなく、Google Mapsを利用しています。</li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a><br/>
Google Directions APIやGeocoding APIを利用する際にネットワーク通信が必要なので利用しています。</li>
<li><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a><br/>
APIレスポンスとしてJSON方式で取得するので扱いやすさのために導入しています。</li>
<li><a href="https://github.com/yukiasai/Gecco">Gecco</a><br/>
チュートリアル表示用に利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>今回も少々クラス説明を書いておきたいと思います。</p>

<h5>Enum/MarkerType.swift</h5>

<p>今回のアプリでは <strong>スタート地点/ゴール地点/途中ポイント地点</strong> の3種類の地点にマーカを設置する必要があるため、<code>Enum</code>としてパターンを定義しています。<br/>
デフォルトは最も多く設置するであろう <strong>途中ポイント地点</strong> である <code>MarkerType.point</code> としています。<br/>
因みに <code>SwiftLint</code> の設定で <code>Enum</code> の <code>case</code> 定義は <strong>小文字始まり</strong> としているため、それぞれ <code>start/point/goal</code> としています。</p>

<h5>Model/CustomGMSMarker.swift</h5>

<p>Google Maps SDK for iOSでは <code>GMSMarker</code> クラスが用意されています。<br/>
今回のアプリでは、</p>

<ul>
<li>スタート地点/ゴール地点/途中ポイント地点とタイプ別でマーカを設置する</li>
<li><code>Realm</code>に<code>ID</code>を採番してマーカ情報を保存する</li>
<li>マーカをタップしたときに<code>InfoWindow</code>に表示する地点情報を<code>ID</code>を元に<code>Realm</code>から取得する</li>
</ul>


<p>という処理が必要であるため、通常の <code>GMSMarker</code> クラスでは機能が足りません。<br/>
よってプロパティに<code>id</code>と<code>type</code>を追加した <code>CustomGMSMarker</code> を作成しました。</p>

<h5>Model/Direction.swift, Model/Geocoding.swift</h5>

<p>こちらはGoogle Maps SDK for iOSだけではカバーできない機能があるため、<br/>
<code>Google Directions API</code>や<code>Google Geocoding API</code>を利用します。<br/>
そのためのクラスになります。</p>

<h5>Model/Marker.swift</h5>

<p>これは少々わかりにくいクラスになってしまいました。<br/>
と言うのも、<code>ViewController.swift</code>の<code>putMarker</code>のメソッドの引数を減らすためだけに作成したクラスだからです。<br/>
各種で<code>Marker</code>というワードを利用していることもあって非常にわかりにくいですね&hellip;</p>

<h5>Model/RealmMarker.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式です。</p>

<h5>Model/RealmMarkerManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/MarkerInfoContentsView.swift</h5>

<p>マップにプロットするマーカをタップしたときに表示する<code>InfoWindow</code>に当たります。</p>

<h5>View/UIPlaceHolderTextView.swift</h5>

<p>こちらは<code>InfoWindow</code>内に<code>UITextView</code>が必要だったのですが、<code>UILabel</code>同様に<code>placeholder</code>を表示したかったため利用しています。<br/>
<a href="http://qiita.com/matsuhisa_h/items/5f4877e8ec89729de824">UITextViewでのPlaceHolder（プレースホルダ）をSwiftで実装する方法</a>からほぼほぼ拝借させて頂きました。</p>

<h5>View/CustomCell.swift</h5>

<p>チュートリアルを再度閲覧できるように設定画面に<code>UISwitch</code>つきの<code>Cell</code>を用意する必要があったため、作成しました。</p>

<h5>ViewController/ViewController+◯◯.swift</h5>

<p>さて今回は<code>ViewController+CLLocationManager.swift</code>のように幾つかファイルを分けています。<br/>
理由としては、<code>ViewController</code>が肥大化することで最大行数が<code>SwiftLint</code>のデフォルト値を超過してしまったためです。<br/>
簡単のために<code>delegate</code>系を別ファイルとして切り出しました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
正直、iOSアプリを開発する際のプロジェクト構成やアーキテクチャには迷いがあります。<br/>
今は個人で1ヶ月程度で開発成果を残していくことが目的になっているため、慣れているMVC形式での開発で進めてしまっています。<br/>
ただ、チーム開発やモダンな開発のことを考えるともう少しチャレンジを入れてみたいと思っています。</p>

<p>引き続き別アプリの開発を進めているので、徐々に新しい要素を追加してブログ記事に残せていければと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geocoding APIとDirections APIを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/google-maps-api/"/>
    <updated>2017-07-17T22:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/google-maps-api</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はGoogleが提供している<a href="https://developers.google.com/maps/documentation/geocoding/intro?hl=ja">Geocoding API</a>と<a href="https://developers.google.com/maps/documentation/directions/?hl=ja">Directions API</a>をiOSで使ってみた話を書きます。</p>

<p>まずは、Google Cloud Platform > API Managerから <strong>Geocoding API</strong> と <strong>Directions API</strong> を有効にしましょう。</p>

<p><img src="http://grandbig.github.io/images/google_api_1.png" alt="API Manager" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geocoding APIの利用</h3>

<p>Googleから提供されたAPIを利用し、それがJSON形式が返却されるため、<code>Alamofire</code>と<code>SwiftyJSON</code>をあわせて利用します。</p>

<p>因みに、APIキーは<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>で説明した通り<code>key.plist</code>に記載することでGitHubにアップすることを避けています。</p>

<p>今回実装する処理は <strong>住所を緯度/経度に変換する処理</strong> になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">Geocoding</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// Geocoding APIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://maps.googleapis.com/maps/api/geocode/json?language=ja&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleWebApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   ジオコーディング</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter address: 住所</span>
</span><span class='line'><span class="cm">   - parameter completion: 緯度/経度を返すcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">geocoding</span><span class="p">(</span><span class="nl">address:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="s">&quot;\(baseURL)&amp;key=\(String(describing: self.apiKey))&quot;</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">requestURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="p">[</span><span class="s">&quot;address&quot;</span><span class="o">:</span> <span class="n">address</span><span class="p">],</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;geometry&quot;</span><span class="p">][</span><span class="s">&quot;location&quot;</span><span class="p">][</span><span class="s">&quot;lat&quot;</span><span class="p">].</span><span class="kt">double</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">guard</span> <span class="n">let</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;geometry&quot;</span><span class="p">][</span><span class="s">&quot;location&quot;</span><span class="p">][</span><span class="s">&quot;lng&quot;</span><span class="p">].</span><span class="kt">double</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Directions APIの利用</h3>

<p>ここで実装する処理は <strong>開始地点から終了地点までの道順を取得する処理</strong> になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">CoreLocation</span>
</span><span class='line'><span class="n">import</span> <span class="n">Alamofire</span>
</span><span class='line'><span class="n">import</span> <span class="n">SwiftyJSON</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">Direction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// API Key</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">apiKey:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">/// Geocoding APIのベースURL</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">let</span> <span class="nl">baseURL:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// 初期化処理</span>
</span><span class='line'>  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleWebApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   目的地までの道順を取得</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   - parameter from: 開始地点</span>
</span><span class='line'><span class="cm">   - parameter to: 終了地点</span>
</span><span class='line'><span class="cm">   - parameter completion: 道順を返すcallback</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">getRoutes</span><span class="p">(</span><span class="nl">from:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">to:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">JSON</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="s">&quot;\(baseURL)&amp;key=\(String(describing: self.apiKey))&quot;</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;origin&quot;</span><span class="o">:</span> <span class="s">&quot;\(from.latitude),\(from.longitude)&quot;</span><span class="p">,</span> <span class="s">&quot;destination&quot;</span><span class="o">:</span> <span class="s">&quot;\(to.latitude),\(to.longitude)&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">Alamofire</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">requestURL</span><span class="p">,</span> <span class="nl">method:</span> <span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">,</span> <span class="nl">encoding:</span> <span class="n">URLEncoding</span><span class="p">.</span><span class="k">default</span><span class="p">,</span> <span class="nl">headers:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">value</span> <span class="n">as</span> <span class="n">Any</span><span class="p">)</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">steps</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;routes&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;legs&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;steps&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">completion</span><span class="p">(</span><span class="n">steps</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>今回はGoogleが提供している <strong>Geocoding API</strong> と <strong>Directions API</strong> について見てみました。<br/>
Google Mapを利用するサービスを考えると案外必要となる場面が多いんですよね。<br/>
知っておいて損はないかと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geccoを使ったiOSアプリのチュートリアルを実装しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/gecco/"/>
    <updated>2017-07-17T21:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/gecco</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はアプリでのチュートリアル実装について見ていきたいと思います。<br/>
あまたあるOSSライブラリの中で筆者が注目したのは、<a href="https://github.com/yukiasai/Gecco">Gecco</a>です。<br/>
理由は</p>

<ul>
<li>Swiftで作られていること</li>
<li>GitHubでのStar数が多いこと</li>
<li>タップ箇所を誘導するUIであること</li>
</ul>


<p>です。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geccoのインストール</h3>

<p>CocoaPodsでインストールします。<br/>
以下のように <code>Podfile</code> を作成して、 <code>pod install</code> を実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">10.0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;SampleApplication&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Gecco</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Geccoの使い方</h3>

<p>これまた実にシンプルです。</p>

<h4>スポットライトの表示</h4>

<p>タップを促すときなどに焦点を当てるためのスポットライトを表示させたいことがあると思います。<br/>
これを実現してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Gecco</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">spotlightViewController:</span> <span class="n">SpotlightViewController</span><span class="o">!</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初期化</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span> <span class="o">=</span> <span class="n">SpotlightViewController</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillAppear</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// スポットライトの表示</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="p">.</span><span class="n">spotlightView</span><span class="p">.</span><span class="n">appear</span><span class="p">(</span><span class="n">Spotlight</span><span class="p">.</span><span class="n">Oval</span><span class="p">(</span><span class="nl">center:</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">100</span><span class="p">),</span> <span class="nl">diameter:</span> <span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように初期化をして、<code>present</code>で画面遷移させる要領で表示させることができます。<br/>
また、上記例では円形のスポットライトが表示されますが、<br/>
スポットライトの形式には <code>Oval</code>(円) / <code>Rect</code>(長方形) / <code>RoundRect</code>(角丸長方形)の3つがあるため用途にあった形式を選択することができます。</p>

<h4>スポットライトに対するアクションを拾う</h4>

<p>続いて、下図のようにボタンタップを促す形で表示したスポットライトをタップしたことを検知して、次のチュートリアルに進みたいことがあると思います。</p>

<p><img src="http://grandbig.github.io/images/gecco_1.png" alt="ボタンの上にスポットライトの表示" /></p>

<p>これは <code>SpotlightViewControllerDelegate</code> を利用することになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Gecco</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">SpotlightViewControllerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">button:</span> <span class="n">UIButton</span><span class="o">!</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">spotlightViewController:</span> <span class="n">SpotlightViewController</span><span class="o">!</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初期化</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span> <span class="o">=</span> <span class="n">SpotlightViewController</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillAppear</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">present</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="p">.</span><span class="n">spotlightView</span><span class="p">.</span><span class="n">appear</span><span class="p">(</span><span class="n">Spotlight</span><span class="p">.</span><span class="n">Oval</span><span class="p">(</span><span class="nl">center:</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">100</span><span class="p">),</span> <span class="nl">diameter:</span> <span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// SpotlightViewControllerをタップした場合</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">spotlightViewControllerTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">isInsideSpotlight:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">isInsideSpotlight</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// スポットライトの内側をタップした場合</span>
</span><span class='line'>      <span class="c1">// SpotlightViewControllerを非表示にする</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">spotlightViewController</span><span class="p">.</span><span class="n">dismiss</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">button</span><span class="p">.</span><span class="n">sendActions</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">touchUpInside</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のようにタップの検知は <code>spotlightViewControllerTapped</code> で可能です。<br/>
また、 <code>isInsideSpotlight</code> を利用することでスポットライトの内側をタップしたかどうかも検知できます。<br/>
余談ですが、<br/>
スポットライトをタップしても、そのままではボタンをタップしたことにはなりません。<br/>
そのため、ボタンへのタップアクションを伝えるために <code>sendActions(for: .touchUpInside)</code> を利用します。</p>

<p><code>spotlightViewControllerTapped</code>以外にも<code>spotlightViewControllerWillPresent</code>や<code>spotlightViewControllerWillDismiss</code>もありますので、状況次第で利用すると良いかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="n">objc</span> <span class="n">public</span> <span class="n">protocol</span> <span class="nl">SpotlightViewControllerDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerWillPresent</span><span class="p">(</span><span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerWillDismiss</span><span class="p">(</span><span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerTapped</span><span class="p">(</span><span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">isInsideSpotlight:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Geccoに機能を追加しよう</h3>

<p>デフォルトで用意されている機能以外に何らかの機能を合わせて使いたいこともあるでしょう。<br/>
そんなときは自ら実装するのが良いかと思います。</p>

<h4>チュートリアル用の説明を追加</h4>

<p>今回、筆者がGeccoを使った際に必要とした機能の中に <strong>説明表記</strong> がありました。<br/>
<code>GeccoExample</code> の中に <code>AnnotationViewController</code> が用意されていますので参考にさせて頂きました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AnnotationViewController</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Gecco</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">AnnotationViewController:</span> <span class="n">SpotlightViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">label:</span> <span class="n">UILabel</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewWillAppear</span><span class="p">(</span><span class="n">_</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">updateLabel</span><span class="p">(</span><span class="n">_</span> <span class="nl">text:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">blackColor:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">blackColor</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">black</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">white</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>筆者の場合、<code>UILabel</code>の位置は常に同じ場所で十分だったため上記のみの追加になっています。</p>

<h4>長押しジェスチャの追加</h4>

<p>今回、筆者がGeccoを使った際に必要とした機能の中に <strong>長押し検知</strong> がありました。<br/>
デフォルトで実装されていないため、GitHubからRepositoryをForkして機能追加することにしました。<br/>
コメントを記載した4箇所の追加のみで実装できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// SpotlightViewController</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">objc</span> <span class="n">public</span> <span class="n">protocol</span> <span class="nl">SpotlightViewControllerDelegate:</span> <span class="n">class</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">objc</span> <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerWillPresent</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'>  <span class="err">@</span><span class="n">objc</span> <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerWillDismiss</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'>  <span class="err">@</span><span class="n">objc</span> <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerTapped</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">isInsideSpotlight:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// (1)長押し検知</span>
</span><span class='line'>  <span class="err">@</span><span class="n">objc</span> <span class="n">optional</span> <span class="n">func</span> <span class="n">spotlightViewControllerLongPressed</span><span class="p">(</span><span class="n">_</span> <span class="nl">viewController:</span> <span class="n">SpotlightViewController</span><span class="p">,</span> <span class="nl">isInsideSpotlight:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">open</span> <span class="n">class</span> <span class="nl">SpotlightViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">open</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">delegate:</span> <span class="n">SpotlightViewControllerDelegate</span><span class="o">?</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">open</span> <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setupSpotlightView</span><span class="p">(</span><span class="n">alpha</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setupContentView</span><span class="p">()</span>
</span><span class='line'>    <span class="n">setupTapGesture</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// (2)長押し処理の追加</span>
</span><span class='line'>    <span class="n">setupLongPressGesture</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// (3)長押し処理ジェスチャの初期化</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">func</span> <span class="n">setupLongPressGesture</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">gesture</span> <span class="o">=</span> <span class="n">UILongPressGestureRecognizer</span><span class="p">(</span><span class="nl">target:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">action:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">SpotlightViewController</span><span class="p">.</span><span class="n">viewLongPressed</span><span class="p">(</span><span class="nl">_:</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">addGestureRecognizer</span><span class="p">(</span><span class="n">gesture</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">SpotlightViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// (4)長押し時に実行される処理を追加</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">viewLongPressed</span><span class="p">(</span><span class="n">_</span> <span class="nl">gesture:</span> <span class="n">UILongPressGestureRecognizer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">pressPoint</span> <span class="o">=</span> <span class="n">gesture</span><span class="p">.</span><span class="n">location</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">spotlightView</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">isInside</span> <span class="o">=</span> <span class="n">spotlightView</span><span class="p">.</span><span class="n">spotlight</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">pressPoint</span><span class="p">)</span> <span class="o">??</span> <span class="n">false</span>
</span><span class='line'>    <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">spotlightViewControllerLongPressed</span><span class="o">?</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">pressPoint:</span> <span class="n">pressPoint</span><span class="p">,</span> <span class="nl">isInsideSpotlight:</span> <span class="n">isInside</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はチュートリアル用に利用する <code>Gecco</code> ライブラリについて紹介させて頂きました。<br/>
チュートリアルにはGoogleがよく使うような初めに説明スライドを数枚用意する方式もあるかと思います。<br/>
ケースによって使い分けると良いんでしょうね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2/"/>
    <updated>2017-07-16T23:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>について説明しましたが、今回はもう一歩踏み込んで使い方を見ていこうと思います。</p>

<p>これまた本家の<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">Google スタートガイド</a>を見ればできることも多いのですが、見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Mapにマーカを配置する</h3>

<p>Google Mapを使う上で必ずと言っていいほど利用する機能である「マーカの配置」を見ていきましょう。<br/>
これは実に簡単で「マーカを配置するメソッド」はたった下記だけで実装できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  マップにマーカを設置する処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  - parameter title: マーカのタイトル</span>
</span><span class='line'><span class="cm">  - parameter coordinate: 位置</span>
</span><span class='line'><span class="cm">  - parameter iconName: アイコン名</span>
</span><span class='line'><span class="cm">  - parameter completion: Callback</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">putMarker</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">iconName:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">completion:</span> <span class="err">@</span><span class="n">escaping</span> <span class="p">((</span><span class="n">GMSMarker</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// マーカの生成</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">GMSMarker</span><span class="p">()</span>
</span><span class='line'>  <span class="n">marker</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="n">marker</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">coordinate</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">iconName</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// アイコン名が指定されている場合は画像を設定</span>
</span><span class='line'>    <span class="n">marker</span><span class="p">.</span><span class="n">icon</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">named:</span> <span class="n">iconName</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">marker</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span>
</span><span class='line'>  <span class="n">completion</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google Mapからマーカを削除する</h3>

<p>逆にGoogle Mapからマーカを削除する場合はどうするかを見ていきます。<br/>
これも簡単なので、下記のように実装できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  マップからマーカを削除する処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  - parameter marker: マーカ</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="nf">deleteMarker</span><span class="p">(</span><span class="nl">marker:</span> <span class="n">GMSMarker</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">marker</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2つのマーカが入る縮尺にGoogle Mapを変更する</h3>

<p>こちらはGoogle Mapを捉えるカメラの位置を移動することで実現可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  現在地と指定した場所の両方が入るようにマップの縮尺を変更する処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  - parameter coordinate: 場所</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">changeCameraPosition</span><span class="p">(</span><span class="nl">fromCoordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">toCoordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">GMSCoordinateBounds</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">fromCoordinate</span><span class="p">,</span> <span class="nl">coordinate:</span> <span class="n">toCoordinate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">margin:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">50.0</span>  <span class="c1">// 上下左右に設定するマージン</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">let</span> <span class="n">camera</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">camera</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">bounds</span><span class="p">,</span> <span class="nl">insets:</span> <span class="n">UIEdgeInsets</span><span class="p">(</span><span class="nl">top:</span> <span class="n">margin</span><span class="p">,</span> <span class="nl">left:</span> <span class="n">margin</span><span class="p">,</span> <span class="nl">bottom:</span> <span class="n">margin</span><span class="p">,</span> <span class="nl">right:</span> <span class="n">margin</span><span class="p">))</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="n">camera</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google Mapに線を描画する</h3>

<p>これもそんなに難しくありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'><span class="n">private</span> <span class="n">var</span> <span class="nl">routePath:</span> <span class="n">GMSPolyline</span> <span class="o">=</span> <span class="n">GMSPolyline</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  マップへの線描画</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  - parameter fromCoordinate: 起点位置</span>
</span><span class='line'><span class="cm">  - parameter toCoordinate: 終点位置</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">drawPolyline</span><span class="p">(</span><span class="nl">fromCoordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">toCoordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">GMSMutablePath</span><span class="p">()</span>
</span><span class='line'>  <span class="n">path</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">fromCoordinate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">toCoordinate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">routePath</span> <span class="o">=</span> <span class="n">GMSPolyline</span><span class="p">(</span><span class="nl">path:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">routePath</span><span class="p">.</span><span class="n">strokeWidth</span> <span class="o">=</span> <span class="mf">3.0</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">routePath</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google Mapから線を削除する</h3>

<p>先程描画した線を削除するには下記で実行できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">private</span> <span class="n">var</span> <span class="nl">routePath:</span> <span class="n">GMSPolyline</span> <span class="o">=</span> <span class="n">GMSPolyline</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  マップへの描画線を削除する処理</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">clearRoutePath</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">routePath</span><span class="p">.</span><span class="n">map</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>緯度/経度とピクセル座標の相互変換</h3>

<p>これは利用ケースが限られるかもしれませんが、覚えておくと役に立つ処理です。<br/>
Google Mapは複数のマップ座標を扱うことができます。</p>

<ul>
<li>緯度/経度を用いて地球上にプロット</li>
<li>世界座標: メルカトル図法を用いて緯度/経度を地図に変換した座標</li>
<li>ピクセル座標: 世界座標を指定したズームレベルで変換した座標</li>
<li>タイル座標: 地図を複数の画像に分けたときの座標</li>
</ul>


<p>ほとんどの場合は緯度/経度をマップにプロットすると思いますが、<br/>
筆者は先日ピクセル座標を利用する場面がありました。</p>

<p>それは、「Google Mapの上に透過Viewが載せられた状態でGoogle Mapにマーカを配置する」というものでした。
今回はこれを例に変換方法を見ていきましょう。</p>

<h4>ピクセル座標を緯度/経度に変換</h4>

<p>これはGoogle Maps SDKに用意されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">pressPoint</span> <span class="o">=</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">projection</span><span class="p">.</span><span class="n">coordinate</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">pressPoint</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけでピクセル座標を緯度/経度に変換できるんです。</p>

<h4>緯度/経度をピクセル座標に変換</h4>

<p>これもGoogle Maps SDKに用意されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">let</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2D</span><span class="p">(</span><span class="nl">latitude:</span> <span class="mi">35</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="mi">139</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">point</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">projection</span><span class="p">.</span><span class="n">point</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">coordinate</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
JavaScriptでGoogle Maps APIを利用していた方々も臆することなく使えるような簡単さだと思います。<br/>
次回はGeocoding APIやDirection APIを見ていきたいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[足跡計 ver1.0.3の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3/"/>
    <updated>2017-06-29T22:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はいつもと趣向を変えて、最近作り直したアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/jp/app/%E8%B6%B3%E8%B7%A1%E8%A8%88/id725412788?mt=8">足跡計</a>というアプリです。<br/>
これは実に3年半以上昔に作成したアプリで、v1.0.0リリース後に一度も更新をしていませんでした&hellip;。</p>

<p>そんな状況なので当たり前ではあるのですが、<br/>
前々からAppleより警告が来ていたものの対応せずにいたら、とうとうApp Storeから削除されてしまいました。　　</p>

<p>最近、iOSアプリ開発を仕事でもする機会がなくなっていた筆者にとって、これを良い機会だと捉え、アプリを作り直してみることにしました。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!-- more -->


<h3>アプリの紹介</h3>

<p>まずはアプリの機能について紹介してみたいと思います。<br/>
基本的にはv1.0.0からそんなに変えてはいません。</p>

<p>アイコンはこちらになります。</p>

<p><img src="http://grandbig.github.io/images/footStepMeter_Icon.png" alt="足跡計のアイコン" /></p>

<h4>移動経路の計測</h4>

<p>メイン機能として <strong>移動経路の計測</strong> が可能です。<br/>
手順は実に簡単で、</p>

<ol>
<li>初期画面にてタブの『開始』ボタンをタップします</li>
<li>計測したい精度を選択します</li>
<li>計測する経路のタイトルを設定します</li>
</ol>


<p>以上となります。</p>

<p><img src="http://grandbig.github.io/images/footStepMeter4.png" alt="移動経路の計測手順" /></p>

<p>計測したい精度の種類としては、</p>

<ul>
<li>最高精度: kCLLocationAccuracyBestForNavigation</li>
<li>高精度: kCLLocationAccuracyBest</li>
<li>10m誤差: kCLLocationAccuracyNearestTenMeters</li>
<li>100m誤差: kCLLocationAccuracyHundredMeters</li>
<li>1km誤差: kCLLocationAccuracyKilometer</li>
<li>3km誤差: kCLLocationAccuracyThreeKilometers</li>
</ul>


<p>となっています。</p>

<h4>過去経路の閲覧</h4>

<p>計測直後の経路を見ることはもちろん、過去の経路を閲覧することもできます。<br/>
また、経路表示のために配置しているアイコンを「人の足跡アイコン」と「動物の足跡アイコン」の2つを切り替えることが可能です。</p>

<p>さらに、もう1つの機能として、過去経路のデータをCSVファイルとしてメールで送信することができます。</p>

<p><img src="http://grandbig.github.io/images/footStepMeter5.png" alt="過去の経路の閲覧" /></p>

<h3>アプリの実装</h3>

<p>さて、続いて、アプリの実装部分、中身について紹介したいと思います。<br/>
実コードは<a href="https://github.com/grandbig/footStepMeter">GitHub: footStepMeter</a>を見て頂ければわかるのですが、かいつまんで少々説明したいと思います。</p>

<h4>プロジェクト構成</h4>

<p>プロジェクト構成は下記の通りです。<br/>
シンプルにMVCで実装しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">footStepMeter</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Enum</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">LocationAccuracy</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Model</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Location</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">Footprint</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">FootprintManager</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">CustomAnnotation</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">UIImage</span><span class="o">+</span><span class="n">Extension</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">View</span>
</span><span class='line'><span class="err">│</span>    <span class="err">├──</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">xib</span>
</span><span class='line'><span class="err">│</span>    <span class="err">└──</span> <span class="n">PickerView</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AppDelegate</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">ViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">SettingViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">FootprintsViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">AboutViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">LicenceViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">├──</span> <span class="n">HistoryViewController</span><span class="p">.</span><span class="n">swift</span>
</span><span class='line'><span class="err">└──</span> <span class="n">Main</span><span class="p">.</span><span class="n">storyboard</span>
</span></code></pre></td></tr></table></div></figure>


<p>本当は <code>ViewController</code>系をフォルダにまとめても良かったのですが、そのままにしています。<br/>
あとMain.storyboardも<code>View</code>フォルダ配下においても良かったのですが、これもそのままにしています。</p>

<h4>利用OSSライブラリ</h4>

<p>今回導入したOSSライブラリは以下の通りです。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。<br/>
因みに、V1.0.0では<a href="https://github.com/ccgus/fmdb">fmdb</a>を使っていました。</li>
<li><a href="https://github.com/Quick/Quick">Quick</a><br/>
UIテストのために利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>少し、各クラスの説明や意図についても紹介します。</p>

<h5>Enum/LocationAccuracy.swift</h5>

<p>わざわざ <code>Enum/LocationAccuracy.swift</code> を用意した理由としては、位置情報の精度は各種クラスで利用する可能性があるためです。<br/>
実際は <code>Model/Location.swift</code> と <code>View/PickerView.swift</code> で利用しています。</p>

<h5>Model/Location.swift</h5>

<p>位置情報関連のロジック処理を書いています。<br/>
実態は <code>CLLocationManagerDelegate</code> を逃した感じになっています。</p>

<h5>Model/Footprint.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式ですね。</p>

<h5>Model/FootprintManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/PickerView.swift</h5>

<p><code>UIPickerView</code>は<code>UITableView</code>に負けず劣らず面倒な作業が多いので、<code>ViewController</code>からは切り離して扱っています。<br/>
<code>Main.storyboard</code>に配置することはできなくもないのですが、</p>

<ul>
<li>必要な機会が少ないのに、<code>UITabBar</code>などの他の要素と被って配置されるのが気になる</li>
<li>初めは非表示状態にしたい</li>
</ul>


<p>の理由から <code>ViewController</code> で <code>self.view.addSubView(pickerView!)</code> として要素を追加しています。</p>

<p>位置情報の精度を選択するときに利用するので、ピッカーの各行に精度を表示する必要があります。<br/>
そこで <code>Enum/LocationAccuracy.swift</code> で定義した値を利用しています。</p>

<h3>アプリのテストについて</h3>

<p><code>Quick</code>を導入した本格的なテストを実装することを考えていたものの、実際にはあまり書けていません&hellip;</p>

<p><code>FootprintManager.swift</code>の単体テスト用に<code>FootprintManagerTests.swift</code>を実装しました。<br/>
中身は<a href="http://grandbig.github.io/blog/2017/05/06/quick-2/">QuickでSwiftコードのUnitテストをしよう！(2)</a>で書いた内容です。</p>

<p>View系のテストも実装しようと思ったものの、下記のように途中までしか書けていません。<br/>
(というのも、View系だとUIテストの方に譲った方が実装しやすいのかなと思ったからなんですよね。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewControllerTests.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Quick</span>
</span><span class='line'><span class="n">import</span> <span class="n">Nimble</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">footStepMeter</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewControllerTests:</span> <span class="n">QuickSpec</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">subject:</span> <span class="n">ViewController</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">beforeEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// StoryboardからViewControllerを初期化</span>
</span><span class='line'>            <span class="n">subject</span> <span class="o">=</span> <span class="n">UIStoryboard</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;Main&quot;</span><span class="p">,</span> <span class="nl">bundle:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">instantiateViewController</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="s">&quot;ViewController&quot;</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="n">ViewController</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">view</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">statusBarView</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">mapView</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">tabBar</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">currentLocationButton</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">countLabel</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">it</span><span class="p">(</span><span class="s">&quot;countLabel default is ****&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">countLabel</span><span class="p">.</span><span class="n">text</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;****&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">it</span><span class="p">(</span><span class="s">&quot;User&#39;s current location move when tapped currentLocationButton&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">subject</span><span class="p">.</span><span class="n">currentLocationButton</span><span class="p">.</span><span class="n">sendActions</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">UIControlEvents</span><span class="p">.</span><span class="n">touchUpInside</span><span class="p">)</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">span</span><span class="p">.</span><span class="n">latitudeDelta</span><span class="p">)</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="n">subject</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">span</span><span class="p">.</span><span class="n">longitudeDelta</span><span class="p">)</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="nl">format:</span> <span class="s">&quot;%.2f&quot;</span><span class="p">,</span> <span class="n">subject</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">span</span><span class="p">.</span><span class="n">latitudeDelta</span><span class="p">)).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;0.06&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="nl">format:</span> <span class="s">&quot;%.2f&quot;</span><span class="p">,</span> <span class="n">subject</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">span</span><span class="p">.</span><span class="n">longitudeDelta</span><span class="p">)).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;0.05&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>UIテストもRecording機能を使って、少し実装したものの、やっぱり手で書かなくてはいけない部分が出てくるな〜と思い、一旦止めています。<br/>
(ま、当たり前なんですけどね。)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はiOSアプリ開発およびSwiftコーディングのリハビリも兼ねて進めてみました。<br/>
また別のアプリ開発も考えていたりするので、完成でき次第、どんどんブログでも紹介できればと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを導入してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/"/>
    <updated>2017-06-18T19:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/18/google-maps-sdk</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は<a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a>の導入の仕方を書きたいと思います。<br/>
(<a href="https://grandbig.github.io/blog/2014/01/27/googlemapssdk2/">3年以上前</a>に遊んでいたようですが、全く記憶にない&hellip;)</p>

<p>基本的には、<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">本家のスタートガイド</a>に従って進めるだけで特に問題なく<code>Google Map</code>を実装できるでしょう。<br/>
筆者の場合は<code>Storyboard</code>を使いたかったので少し気をつける必要がありました。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Maps SDK for iOSの導入</h3>

<p>実際に手順を書いていきます。</p>

<p><strong>１．Xcodeでプロジェクトを作成します。</strong><br/>
<strong>２．<code>Podfile</code>を作成します。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;GoogleMapsSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">GoogleMaps</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">GooglePlaces</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">abstract_target</span> <span class="err">&#39;</span><span class="n">Tests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">search_paths</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;GoogleMapsSampleTests&quot;</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;GoogleMapsSampleUITests&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Quick</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Nimble</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
</span><span class='line'>  <span class="n">installer</span><span class="p">.</span><span class="n">pods_project</span><span class="p">.</span><span class="n">targets</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">target</span><span class="o">|</span>
</span><span class='line'>    <span class="n">target</span><span class="p">.</span><span class="n">build_configurations</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">SWIFT_VERSION</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mf">3.0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>３．<code>pod install</code>で必要な<code>Framework</code>をインストールします。</strong><br/>
<strong>４．APIキーを取得します。</strong><br/>
スタートガイドに従って下記ボタンをクリックすればAPIキーを取得することができます。</p>

<p><img src="http://grandbig.github.io/images/google-maps-sdk-1.png" alt="APIキーの取得" /></p>

<p><strong>５．アプリのAPIキーを読み取らせる処理を導入します。</strong><br/>
筆者の場合、基本的なソースコードは<code>GitHub</code>に公開したかったため、そのままAPIキーをべた書きするわけにいきませんでした。<br/>
なので、<code>key.plist</code>ファイルを作成し、このファイルを<code>GitHub</code>にアップしないという手法を取ることにしました。</p>

<p>下図のように<code>key.plist</code>ファイルを作成</p>

<p><img src="http://grandbig.github.io/images/google-maps-sdk-2.png" alt="key.plistの作成" /></p>

<p>また下図のようなフォルダ構成で<code>Info.plist</code>と同じ階層に<code>key.plist</code>を配置しています。<br/>
<img src="http://grandbig.github.io/images/google-maps-sdk-6.png" alt="フォルダ構成" /></p>

<p><code>AppDelegate.swift</code>で<code>key.plist</code>からAPIキーを読み込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'><span class="n">import</span> <span class="n">GooglePlaces</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource:</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="nl">ofType:</span> <span class="s">&quot;plist&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="n">NSDictionary</span><span class="p">(</span><span class="nl">contentsOfFile:</span> <span class="n">path</span><span class="p">)</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String:</span> <span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">apiKey</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;googleMapsApiKey&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">GMSServices</span><span class="p">.</span><span class="n">provideAPIKey</span><span class="p">(</span><span class="n">apiKey</span><span class="p">)</span>
</span><span class='line'>          <span class="n">GMSPlacesClient</span><span class="p">.</span><span class="n">provideAPIKey</span><span class="p">(</span><span class="n">apiKey</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>６．<code>Storyboard</code>に<code>Google Map</code>を追加します。</strong><br/>
本家スタートガイドだと<code>Storyboard</code>を利用しない方式での説明が書かれていましたが、筆者は<code>Storyboard</code>を利用しました。</p>

<p><img src="http://grandbig.github.io/images/google-maps-sdk-3.png" alt="StoryboardにGoogle Mapを配置" /></p>

<p>これで導入が完了です。</p>

<h3>Google Cloud PlatformのAPI Managerで詳細設定</h3>

<p>先程、本家のスタートガイドからAPIキーを取得していましたが、<a href="https://console.cloud.google.com/home">Google Cloud Platform</a>内の<code>API Manager</code>からAPIキーに対して詳細設定をすることができます。<br/>
例えば、スタートガイドから取得しただけでは、APIキーの用途が無制限になっています。<br/>
この状態では意図しない大量利用に繋がる可能性もあるため、iOSアプリでのみ利用するなど詳細を設定した方が良いでしょう。</p>

<p><code>API Manager</code>ページには下記のように遷移できます。<br/>
<img src="http://grandbig.github.io/images/google-maps-sdk-4.png" alt="Google Cloud Platform" /></p>

<p>APIキーの詳細設定は下記の通りです。<br/>
<img src="http://grandbig.github.io/images/google-maps-sdk-5.png" alt="APIキーの詳細設定" /></p>

<h3>Google Mapで初期描画時の中心位置を現在地にしてみる</h3>

<p>Apple標準で用意されている<code>MapKit</code>であれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">setUserTrackingMode</span><span class="p">(</span><span class="n">MKUserTrackingMode</span><span class="p">.</span><span class="n">follow</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いだけでした。<br/>
しかし、<code>Google Map</code>では同様の手立てがなさそうなので、下記のように対応しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">GoogleMaps</span>
</span><span class='line'><span class="n">import</span> <span class="n">GooglePlaces</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">GMSMapViewDelegate</span><span class="p">,</span> <span class="n">CLLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">GMSMapView</span><span class="o">!</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">locationManager:</span> <span class="n">CLLocationManager</span><span class="o">?</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">currentLocation:</span> <span class="n">CLLocation</span><span class="o">?</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">placesClient:</span> <span class="n">GMSPlacesClient</span><span class="o">!</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">zoomLevel:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">15.0</span>
</span><span class='line'>  <span class="c1">/// 初期描画の判断に利用</span>
</span><span class='line'>  <span class="n">private</span> <span class="n">var</span> <span class="nl">initView:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// GoogleMapの初期化</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">isMyLocationEnabled</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">mapType</span> <span class="o">=</span> <span class="n">GMSMapViewType</span><span class="p">.</span><span class="n">normal</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">compassButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">myLocationButton</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 位置情報関連の初期化</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="n">CLLocationManager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBest</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">requestAlwaysAuthorization</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">distanceFilter</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">startUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">placesClient</span> <span class="o">=</span> <span class="n">GMSPlacesClient</span><span class="p">.</span><span class="n">shared</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: CLLocationManagerDelegate</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="n">_</span> <span class="nl">manager:</span> <span class="n">CLLocationManager</span><span class="p">,</span> <span class="n">didUpdateLocations</span> <span class="nl">locations:</span> <span class="p">[</span><span class="n">CLLocation</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">initView</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 初期描画時のマップ中心位置の移動</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">camera</span> <span class="o">=</span> <span class="n">GMSCameraPosition</span><span class="p">.</span><span class="n">camera</span><span class="p">(</span><span class="nl">withTarget:</span> <span class="p">(</span><span class="n">locations</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">coordinate</span><span class="p">)</span><span class="o">!</span><span class="p">,</span> <span class="nl">zoom:</span> <span class="n">self</span><span class="p">.</span><span class="n">zoomLevel</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="n">camera</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="o">?</span><span class="p">.</span><span class="n">stopUpdatingLocation</span><span class="p">()</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">initView</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<code>viewDidLoad</code>時に<code>startUpdatingLocation()</code>で位置情報の取得を開始し、取得したタイミングである<code>didUpdateLocations</code>内で位置情報を<code>camera</code>に設定しています。<br/>
(もっと良い方法がありそうな気もしますが、一旦これで様子見&hellip;)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
これから<code>Google Maps SDK for iOS</code>をバシバシ使っていきたいと思っているので理解が進み次第、続きを書いていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSでヘッダーを設定する3つの方法]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/17/ios-header/"/>
    <updated>2017-06-17T14:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/17/ios-header</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は今更ではありますが、iOSでヘッダーを作るための方法について書いていきたいと思います。</p>

<ul>
<li>代表的な方法

<ul>
<li><code>NavigationController</code>を利用する方法</li>
<li><code>UIView</code> + <code>UINavigationBar</code>を利用する方法</li>
<li><code>UINavigationBar</code>の高さをカスタマイズする方法</li>
</ul>
</li>
</ul>


<p>1つずつ見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>NavigationControllerを利用する方法</h3>

<p>最も少ない手間でヘッダーを作るなら<code>NavigationController</code>ではないでしょうか。<br/>
幾つかメリット/デメリットを上げてみます。</p>

<ul>
<li>メリット

<ul>
<li>最も簡単にヘッダーを作成できる(Editor > Embed In > Navigation Controller)</li>
<li>画面遷移の設定が簡単(戻るも自動で設定される)</li>
<li>ステータスバー(最上部の縦20pxの領域)を考慮する必要なし</li>
</ul>
</li>
<li>デメリット

<ul>
<li>ヘッダーの不要な画面に遷移するときにヘッダーの非表示をコードで書く必要がある</li>
<li>画面遷移時のアニメーション変更に手間がかかる</li>
</ul>
</li>
</ul>


<h3>UIView + UINavigationBarを利用する方法</h3>

<p>Storyboardを利用するなら初めに上げた「<code>NavigationController</code>を利用する方法」か「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」を使うと良いでしょう。<br/>
わざわざ<code>UIView</code>を利用する理由は、ただ単に<code>UINavigationBar</code>のみを配置すると、ステータスバー領域に邪魔されて表示が崩れてしまうためです。<br/>
これを回避するためだけに<code>UIView</code>を配置するという方法です。</p>

<p>具体的には下図のような配置になります。</p>

<p><img src="http://grandbig.github.io/images/ios_header_1.png" alt="UIView + UINavigationBarの例" /></p>

<ul>
<li>メリット

<ul>
<li>Storyboard上でキレイに見える方法でヘッダーを作成できる</li>
<li>画面遷移先でヘッダーが不要であれば配置しなければOK</li>
<li>画面遷移時のアニメーションのデフォルト選択肢が多い</li>
</ul>
</li>
<li>デメリット

<ul>
<li>画面遷移先でヘッダーが必要な場合は毎回<code>UIView</code>を配置する必要がある(色の透過の考慮など面倒な側面あり)</li>
</ul>
</li>
</ul>


<h3>UINavigationBarの高さをカスタマイズする方法</h3>

<p>割りと昔からある方法です。<br/>
ただし、昔(iOS6以前)は純粋の<code>UINavigationBar</code>の高さを変更したいという用途で使われていました。<br/>
今回は通常の<code>UINavigationBar</code>ではステータスバーと被ってしまうため、ステータスバー分の高さを拡張したいという用途で利用します。</p>

<p>高さをステータスバー分、拡張した<code>CustomNavigationBar</code>は下記のように作成できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CustomNavigationBar.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomNavigationBar:</span> <span class="n">UINavigationBar</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">layoutSubviews</span><span class="p">()</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRect</span><span class="p">(</span><span class="nl">x:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">super</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをStoryboardで利用するのをオススメしないのは他のパーツと組み合わせて利用する際に、<code>AutoLayout</code>を利用して(客観的に見たら謎の)マージンを設定しないとならないためです。</p>

<p><img src="http://grandbig.github.io/images/ios_header_2.png" alt="CustomeNavigationBarをStoryboardで設定" /><br/>
<img src="http://grandbig.github.io/images/ios_header_3.png" alt="20のマージンを設定しないといけない" /></p>

<p>一応、メリット/デメリットも書いておきます。</p>

<ul>
<li>メリット

<ul>
<li>「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」よりもソースコードがスマート(機能拡張して利用しているという意味で。)</li>
<li>(ソースコードで書いて実装することを前提にするなら)自由度が最も大きい</li>
</ul>
</li>
<li>デメリット

<ul>
<li>Storyboardで利用するとキレイではない(画面ごとに謎マージンを設定しなくてはならない)</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
たまに必要性を感じる内容であることもあって、一度まとめてみようと思い、書いてみました。<br/>
今の世の中なら、用途にあったOSSライブラリもたくさんあると思うので手法は3つには限らないでしょうね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift3でUIImageを任意の角度で回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3/"/>
    <updated>2017-06-11T22:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>以前、<a href="http://grandbig.github.io/blog/2014/03/13/uiimagerotate/">UIImageを任意の角度で回転させる方法について</a>を書きましたが、今回はそのSwift3版です。<br/>
Objective-Cで書いた方法と基本的には同じではあるのですが、そのままの書き方が使えるわけではないため覚えておいて損はないはず！</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UIImageの回転方法</h3>

<p>Objective-Cでは下記のように回転させていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 元の画像。ここではtest.pngという画像があるとします。</span>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;test.png&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGSize</span> <span class="n">imgSize</span> <span class="o">=</span> <span class="p">{</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">};</span>
</span><span class='line'><span class="c1">// Contextを開く</span>
</span><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">imgSize</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 回転の中心点を移動</span>
</span><span class='line'><span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Y軸方向を補正</span>
</span><span class='line'><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ラジアンに変換(45°回転させたい場合)</span>
</span><span class='line'><span class="kt">float</span> <span class="n">radian</span> <span class="o">=</span> <span class="mi">45</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">;</span>
</span><span class='line'><span class="n">CGContextRotateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">radian</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 回転画像の描画</span>
</span><span class='line'><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">image</span><span class="p">.</span><span class="n">CGImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Contextを閉じる</span>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">rotatedImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// UIImageViewに回転後の画像を設定</span>
</span><span class='line'><span class="n">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">rotatedImage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをSwift3で書き直すと以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 元の画像。ここではtest.pngという画像があるとします。</span>
</span><span class='line'><span class="n">let</span> <span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">imgSize</span> <span class="o">=</span> <span class="n">CGSize</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">width:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Contextを開く</span>
</span><span class='line'><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">imgSize</span><span class="p">,</span> <span class="n">false</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="nl">context:</span> <span class="n">CGContext</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'><span class="c1">// 回転の中心点を移動</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">translateBy</span><span class="p">(</span><span class="nl">x:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Y軸方向を補正</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">scaleBy</span><span class="p">(</span><span class="nl">x:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">y:</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ラジアンに変換(45°回転させたい場合)</span>
</span><span class='line'><span class="n">let</span> <span class="nl">radian:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">45</span> <span class="o">*</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">Double</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span> <span class="o">/</span> <span class="mf">180.0</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="nl">by:</span> <span class="n">radian</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 回転画像の描画</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">cgImage</span><span class="o">!</span><span class="p">,</span> <span class="k">in</span><span class="o">:</span> <span class="n">CGRect</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">x:</span> <span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nl">y:</span> <span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nl">width:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height:</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Contextを閉じる</span>
</span><span class='line'><span class="n">let</span> <span class="nl">rotatedImage:</span> <span class="n">UIImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span><span class="o">!</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// UIImageViewに回転後の画像を設定</span>
</span><span class='line'><span class="n">let</span> <span class="n">imageView</span> <span class="o">=</span> <span class="n">UIImageView</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">rotatedImage</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
基本的な回転の流れは変わりませんね。<br/>
ただ、Swift3で書いた方が心なしか自然なメソッドで書けている気がするのは筆者だけですかね&hellip;<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RealmSwiftでdistinctしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/swift3-realm-2/"/>
    <updated>2017-06-11T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/swift3-realm-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">RealmSwift</a>に関するメモ書きです。<br/>
<code>RealmSwift</code>を使って保存したデータを<code>distinct</code>したいときがあったのですが、<code>RealmSwift</code>内で定義されているわけではなさそうなので迷いました。<br/>
よく考えてみれば、なんてことはなく<code>Swift</code>に標準で用意されたものを使えばよかったのでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>distinctする方法</h3>

<p>さて、具体的な方法を見てみましょう。<br/>
例として<code>RealmSwift</code>で保存するオブジェクトを下記のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Footprint.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> 足跡</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Footprint:</span> <span class="n">Object</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">latitude:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">longitude:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">speed:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">direction:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="n">dynamic</span> <span class="n">var</span> <span class="nl">created:</span> <span class="n">Double</span> <span class="o">=</span> <span class="n">Date</span><span class="p">().</span><span class="n">timeIntervalSince1970</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// プライマリーキーの設定</span>
</span><span class='line'>  <span class="n">override</span> <span class="k">static</span> <span class="n">func</span> <span class="n">primaryKey</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;id&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// インデックスの設定</span>
</span><span class='line'>  <span class="n">override</span> <span class="k">static</span> <span class="n">func</span> <span class="n">indexedProperties</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>RealmSwift</code>で保存していくと、下記のような結果になるでしょう。</p>

<p><img src="http://grandbig.github.io/images/realmswift_distinct_1.png" alt="RealmSwiftブラウザで結果を見てみる" /></p>

<p>もし、これらのデータから<code>title</code>を<code>distinct</code>して取得したい場合があったとしましょう。<br/>
その場合は下記のように取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// FootprintManager.swift</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  保存した足跡タイトルを取得する処理</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  - returns: [タイトル]の配列</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">func</span> <span class="n">distinctByTitle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">distinctTitles</span> <span class="o">=</span> <span class="n">Set</span><span class="p">(</span><span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Footprint</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">value</span><span class="p">(</span><span class="nl">forKey:</span> <span class="s">&quot;title&quot;</span><span class="p">)</span> <span class="n">as</span><span class="o">!</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">distinctTitles</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実はSwiftでは<code>Set</code>という重複を許さない集合体を定義するための型が用意されています。<br/>
なので、<code>RealmSwift</code>から単に取得してきた値を<code>Set</code>型に変換することで<code>distinct</code>と同じ結果が得られるということになります。</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか。<br/>
<code>distinct</code>は決して負荷の軽い処理ではありませんが、様々な場面で求められることでしょう。<br/>
使い方を知っておいて損はありません。<br/>
ということで今回はメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapに好きな画像を配置しよう！ Swift編]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/04/put-annotation-2/"/>
    <updated>2017-06-04T21:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/04/put-annotation-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>実に3年半ほど前のブログを始めた当初、<a href="https://grandbig.github.io/blog/2013/09/28/put-annotation/">Mapに好きな画像を配置しよう！</a>といった記事を書いたことがありました。<br/>
駆け出しのiOSエンジニアであった当時の筆者はお世辞にもObjective-CやiOS自体について詳しいとは言い難きスキルレベルでした。<br/>
(当時のブログ記事に不必要な記述があるかとは思いますが、あえてそのまま残しています。)</p>

<p>それから月日を経て、Swiftで同じ実装をするタイミングがあったことで、本記事を書こうと思い、今に至ります。<br/>
簡単な内容ではありますが、感慨深く書かせて頂いています笑</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>CustomAnnotationを作成しよう</h3>

<p>当時と同じ手法で実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">Foundation</span>
</span><span class='line'><span class="n">import</span> <span class="n">MapKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">CustomAnnotation:</span><span class="n">NSObject</span><span class="p">,</span> <span class="n">MKAnnotation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">var</span> <span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">var</span> <span class="nl">subtitle:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">,</span> <span class="nl">title:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">subtitle:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">coordinate</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">subtitle</span> <span class="o">=</span> <span class="n">subtitle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、<code>MKAnnotation</code>を拡張し、<code>coordinate</code> / <code>title</code> / <code>subtitle</code>を初期化時に一斉に設定できるようなイニシャライザを用意しました。</p>

<h3>Mapに画像を配置しよう</h3>

<p>さて、ではMapに画像を配置する方法を見ていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">MapKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">MKMapViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="nl">mapView:</span> <span class="n">MKMapView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// マップ関連の初期化処理</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">setUserTrackingMode</span><span class="p">(</span><span class="n">MKUserTrackingMode</span><span class="p">.</span><span class="n">followWithHeading</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CustomAnnotationの初期化</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">ann</span> <span class="o">=</span> <span class="n">CustomAnnotation</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">coordinate:</span> <span class="n">CLLocationCoordinate2D</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">latitude:</span> <span class="mf">35.685623</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="mf">139.763153</span><span class="p">),</span> <span class="nl">title:</span> <span class="s">&quot;TEST&quot;</span><span class="p">,</span> <span class="nl">subtitle:</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// CustomAnnotationをマップに配置</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">addAnnotation</span><span class="p">(</span><span class="n">ann</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: MKMapViewDelegate</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">mapView</span><span class="p">(</span><span class="n">_</span> <span class="nl">mapView:</span> <span class="n">MKMapView</span><span class="p">,</span> <span class="n">viewFor</span> <span class="nl">annotation:</span> <span class="n">MKAnnotation</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">MKAnnotationView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">annotation</span> <span class="n">is</span> <span class="n">MKUserLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザの現在地の青丸マークは置き換えない</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// CustomAnnotationの場合に画像を配置</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">identifier</span> <span class="o">=</span> <span class="s">&quot;Pin&quot;</span>
</span><span class='line'>      <span class="n">var</span> <span class="nl">annotationView:</span> <span class="n">MKAnnotationView</span><span class="o">?</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">dequeueReusableAnnotationView</span><span class="p">(</span><span class="nl">withIdentifier:</span> <span class="n">identifier</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">annotationView</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">annotationView</span> <span class="o">=</span> <span class="n">MKAnnotationView</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">annotation:</span> <span class="n">annotation</span><span class="p">,</span> <span class="nl">reuseIdentifier:</span> <span class="n">identifier</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">annotationView</span><span class="o">?</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIImage</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">named:</span> <span class="s">&quot;xxxx&quot;</span><span class="p">)</span> <span class="c1">// 任意の画像名</span>
</span><span class='line'>      <span class="n">annotationView</span><span class="o">?</span><span class="p">.</span><span class="n">annotation</span> <span class="o">=</span> <span class="n">annotation</span>
</span><span class='line'>      <span class="n">annotationView</span><span class="p">.</span><span class="n">canShowCallout</span> <span class="o">=</span> <span class="n">true</span>  <span class="c1">// タップで吹き出しを表示</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">annotationView</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は次のようになります。<br/>
<img src="http://grandbig.github.io/images/annotationpractice6.png" alt="Mapに画像を表示" /></p>

<h3>まとめ</h3>

<p>昔は様々なサイトを参考にしながら、解読しながら書いていたソースがすんなりと書くことができました。<br/>
今回の記事を通して、もっと他にもSwiftに書き直しても良い記事がありそうだなと思いました。
まあ、タイミング見てですかね&hellip;といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FirebaseをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/14/firebase-ios/"/>
    <updated>2017-05-14T16:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/14/firebase-ios</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今や商用で利用している人も珍しくないであろうFirebaseを触ってみようと思います！<br/>
と言うのも、最近Stackoveflowを眺めている時にFirebaseに関する質問を時たま見かけるようになったからです。<br/>
(筆者はまともにFirebaseを使ったことがないため、この機会に使ってみようと思い立ちました。)</p>

<p>ということで、初歩の初歩から見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h3>Firebaseの導入</h3>

<p>まずは何と言っても利用方法ですよね？<br/>
ほとんどGoogleが用意してくれているため、本当に簡単にできます。</p>

<p>１．Firebaseの公式ページにアクセス<br/>
まずは、<a href="https://console.firebase.google.com/?hl=ja">Firebaseの公式ページ</a>に遷移して、新規プロジェクトを作成しましょう。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_1.png" alt="Firebaseの新規プロジェクトを作成" /></p>

<p>２．iOSアプリにFirebaseを追加<br/>
１で新規プロジェクトが作成できたため、続いてiOSアプリにFirebaseを追加しましょう。</p>

<p>追加対象のXcodeプロジェクトを作成します。<br/>
<img src="http://grandbig.github.io/images/firebase_ios_2.png" alt="Xcodeプロジェクトの作成" /></p>

<p>Firebase管理ページから「iOSアプリにFirebaseを追加」を選択します。<br/>
<img src="http://grandbig.github.io/images/firebase_ios_3.png" alt="iOSアプリにFirebaseを追加" /></p>

<p>plistファイルをDLしてXcodeプロジェクトに追加します。<br/>
<img src="http://grandbig.github.io/images/firebase_ios_4.png" alt="plistファイルをXcodeプロジェクトに追加" /></p>

<p>続いて、<code>CocoaPods</code>でFrameworkをインストールします。<br/>
<img src="http://grandbig.github.io/images/firebase_ios_5.png" alt="CocoaPodsでFrameworkを追加" /></p>

<p><code>Podfile</code>には下記を記載しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;FirebaseSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Firebase</span><span class="o">/</span><span class="n">Core</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">abstract_target</span> <span class="err">&#39;</span><span class="n">Tests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">search_paths</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;FirebaseSampleTests&quot;</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;FirebaseSampleUITests&quot;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、<code>.xcworkspace</code>ファイルを開いて、下図の指示の通り<code>AppDelegate.swift</code>にコードを追加します。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_6.png" alt="AppDelegate.swiftにコードを追加" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">Firebase</span> <span class="c1">// ここを追記</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="n">class</span> <span class="nl">AppDelegate:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="n">_</span> <span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions:</span> <span class="p">[</span><span class="nl">UIApplicationLaunchOptionsKey:</span> <span class="n">Any</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>        <span class="n">FIRApp</span><span class="p">.</span><span class="n">configure</span><span class="p">()</span><span class="err">　</span><span class="c1">// ここを追記</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでFirebase管理画面にiOSプロジェクトとの紐付けが完了したことがわかります。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_7.png" alt="iOSプロジェクトへのFirebase紐付け完了" /></p>

<h3>Firebaseの導入を確認</h3>

<p>ここまででFirebaseの導入が完了したものの、正しく導入できたかどうかわからないかと思います。<br/>
そういうときには<code>DebugView</code>を利用しましょう。</p>

<p>１．XcodeプロジェクトにFirebaseのデバッグ設定を追加<br/>
Target > Edit Scheme > Run > Arguments を見てみましょう。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_8.png" alt="Firebaseデバッグ設定を追加" /></p>

<p><code>-FIRDebugEnabled</code>をONにしておくことでデバッグが可能になります。<br/>
デバッグ機能を利用しない場合は明示的に<code>-FIRDebugDisabled</code>をONにしましょう。<br/>
(<a href="https://support.google.com/firebase/answer/7201382?hl=ja&amp;utm_id=ad">Google公式ページ</a>によると一度デバッグ機能を有効化すると<code>-FIRDebugDisabled</code>を指定しないと無効化しないそうです。)</p>

<p>２．Xcodeからデバッグ状況を確認<br/>
上記設定を追加した状態で実機でアプリを起動してみましょう。<br/>
すると、Xcodeのコンソールログ欄に下図のようにログが出力されるようになります。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_9.png" alt="Xcodeにログが出力されます" /></p>

<p>３．Firebase管理サイトでデバッグ状況を確認<br/>
Firebase管理サイトからもデバッグ状況を確認できます。</p>

<p><img src="http://grandbig.github.io/images/firebase_ios_10.png" alt="Firebase管理サイトでデバッグ状況を確認" /></p>

<h3>まとめ</h3>

<p>これでFirebaseをiOSに追加することができました。非常に簡単ですね！<br/>
サイドメニューを見るだけでも、非常に多くの機能を有しているようなので、少しずつ試してみたいと思いますが、まずは導入まで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickでSwiftコードのUnitテストをしよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/06/quick-2/"/>
    <updated>2017-05-06T19:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/06/quick-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は久しぶりに<code>Quick</code>を使ったSwiftコードでのUnitテストについて見ていきたいと思います。<br/>
<a href="https://grandbig.github.io/blog/2016/01/16/quick/">前回</a>記事を書いてから実に1年以上経過しました。<br/>
当時、筆者はテスト駆動型での開発を業務で実行することがありませんでした。
最近は当たり前に単体テストを書かずにコードを書くことがありえないという開発環境になってきました。<br/>
しかし、それはWEBの世界に閉じており、iOSの世界では未だ、単体テストを書く工数が見合わないといった話が議論されていたりします。<br/>
言わんとすることはわからんでもないものの、WEBの世界でもテスト駆動型開発が広まるまではきっと同じような話をしていたのではないかと思ったりしています。<br/>
つまり、今後はiOSでも単体テストを書かないなんてありえないといった世界になるのでは？と期待しているのです。</p>

<p>そんな期待を抱きつつ、本記事を書いていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>テスト内容</h3>

<p>今回テスト内容として<code>Realm</code>に関わる処理を取り上げたいと思います。<br/>
狙いとしてはSpring BootでWEBアプリケーションを開発したときで言うところの<code>Repository</code>に関するテストといったイメージになります。</p>

<h3>テスト対象処理</h3>

<p>さて、具体的なテストの対象となる処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// IDからデータを検索</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchEngineerById</span><span class="p">(</span><span class="n">_</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Engineer</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Engineer</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;id == \(id)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">engineers</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">engineers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 名前からデータを検索</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">searchEngineerByName</span><span class="p">(</span><span class="n">_</span> <span class="nl">name:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Results</span><span class="o">&lt;</span><span class="n">Engineer</span><span class="o">&gt;?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Engineer</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">filter</span><span class="p">(</span><span class="s">&quot;name == &#39;\(name)&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">engineers</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">engineers</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 保存しているデータ数を取得</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">countEngineer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">realm</span><span class="p">.</span><span class="n">objects</span><span class="p">(</span><span class="n">Engineer</span><span class="p">.</span><span class="n">self</span><span class="p">).</span><span class="n">count</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 新規データ作成</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">createEngineer</span><span class="p">(</span><span class="nl">name:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">level:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">searchEngineerByName</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 既に検索結果がある場合は処理を終了</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 検索結果がない場合は処理を継続</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">skillList</span> <span class="o">=</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Skill</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">skill</span> <span class="k">in</span> <span class="n">skills</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">newSkill</span> <span class="o">=</span> <span class="n">Skill</span><span class="p">()</span>
</span><span class='line'>      <span class="n">newSkill</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">skill</span>
</span><span class='line'>      <span class="n">skillList</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">newSkill</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">Engineer</span><span class="p">()</span>
</span><span class='line'>    <span class="n">engineer</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">countEngineer</span><span class="p">()</span>
</span><span class='line'>    <span class="n">engineer</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">engineer</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class='line'>    <span class="n">engineer</span><span class="p">.</span><span class="n">skills</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">objectsIn:</span> <span class="n">skillList</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">try</span><span class="o">!</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">realm</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">Engineer</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">engineer</span><span class="p">,</span> <span class="nl">update:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// IDを元にレベルを更新</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">updateEngineerLevelById</span><span class="p">(</span><span class="n">_</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">level:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">searchEngineerById</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 検索結果がある場合は処理を継続</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>      <span class="n">try</span><span class="o">!</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">engineer</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 検索結果がない場合は処理を終了</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// IDを元にスキルを更新</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">updateEngineerSkillById</span><span class="p">(</span><span class="n">_</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">searchEngineerById</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 検索結果がある場合は処理を継続</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">()</span>
</span><span class='line'>      <span class="n">try</span><span class="o">!</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">skill</span> <span class="k">in</span> <span class="n">skills</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">let</span> <span class="n">newSkill</span> <span class="o">=</span> <span class="n">Skill</span><span class="p">()</span>
</span><span class='line'>          <span class="n">newSkill</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">skill</span>
</span><span class='line'>          <span class="n">engineer</span><span class="p">.</span><span class="n">skills</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">newSkill</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 検索結果がない場合は処理を終了</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Quickの導入方法</h3>

<p>Swift3になっていることもあるので、念のためQuickの導入方法を書いておきたいと思います。<br/>
(<code>Realm</code>も使っていることに注意してください。)</p>

<p><code>CocoaPods</code>にて導入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp"># Podfile</span>
</span><span class='line'><span class="n">use_frameworks</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;QuickTestSample&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Normal</span> <span class="n">libraries</span>
</span><span class='line'>  <span class="n">pod</span> <span class="err">&#39;</span><span class="n">RealmSwift</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">abstract_target</span> <span class="err">&#39;</span><span class="n">Tests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">search_paths</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;QuickTestSampleTests&quot;</span>
</span><span class='line'>    <span class="n">target</span> <span class="s">&quot;QuickTestSampleUITests&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Quick</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">pod</span> <span class="err">&#39;</span><span class="n">Nimble</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
</span><span class='line'>  <span class="n">installer</span><span class="p">.</span><span class="n">pods_project</span><span class="p">.</span><span class="n">targets</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">target</span><span class="o">|</span>
</span><span class='line'>    <span class="n">target</span><span class="p">.</span><span class="n">build_configurations</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">SWIFT_VERSION</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mf">3.0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Quickでのテストコードの実装</h3>

<p>早速、Quickでのテストコードを実装していきましょう。</p>

<h4>Quickでテスト実行するための準備</h4>

<p>Quickでテストを実行するためには、テスト用に用意されたファイルのクラスを変更する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// QuickTestSampleTests</span>
</span><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">Quick</span>
</span><span class='line'><span class="n">import</span> <span class="n">Nimble</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">QuickTestSample</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">QuickTestSampleTests:</span> <span class="n">QuickSpec</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>テスト用データの作成について</h4>

<p>今回、<code>Realm</code>関連の処理を実装するにあたって悩んだのが、モック用のデータをどうするかという問題です。<br/>
今回取り上げている処理がかなりシンプルな処理であるため、<strong>manual mocking</strong> で作成するのも微妙です。</p>

<p>結果、下記のように実装しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// QuickTestSampleTests</span>
</span><span class='line'><span class="n">import</span> <span class="n">XCTest</span>
</span><span class='line'><span class="n">import</span> <span class="n">Quick</span>
</span><span class='line'><span class="n">import</span> <span class="n">Nimble</span>
</span><span class='line'><span class="n">import</span> <span class="n">RealmSwift</span>   <span class="c1">// 追加</span>
</span><span class='line'><span class="err">@</span><span class="n">testable</span> <span class="n">import</span> <span class="n">QuickTestSample</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">QuickTestSampleTests:</span> <span class="n">QuickSpec</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span><span class="p">(</span><span class="s">&quot;Realm Database&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// テスト用のRealmデータ保存ファイルを作成</span>
</span><span class='line'>      <span class="c1">// 保存場所はdefault.realmと同じでファイル名のみtest.realmに変更</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">config</span> <span class="o">=</span> <span class="n">Realm</span><span class="p">.</span><span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>      <span class="n">config</span><span class="p">.</span><span class="n">fileURL</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">fileURL</span><span class="o">!</span><span class="p">.</span><span class="n">deletingLastPathComponent</span><span class="p">().</span><span class="n">appendingPathComponent</span><span class="p">(</span><span class="s">&quot;test.realm&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Realm</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">config</span>
</span><span class='line'>      <span class="c1">// 上記の設定情報を利用してRealmを扱う</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Realm</span><span class="p">(</span><span class="nl">configuration:</span> <span class="n">config</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">beforeEach</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// テスト用にモックデータを追加</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">Engineer</span><span class="p">()</span>
</span><span class='line'>        <span class="n">engineer</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;mock_name&quot;</span>
</span><span class='line'>        <span class="n">engineer</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">skill</span> <span class="o">=</span> <span class="n">Skill</span><span class="p">()</span>
</span><span class='line'>        <span class="n">skill</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;mock_skill_name&quot;</span>
</span><span class='line'>        <span class="n">engineer</span><span class="p">.</span><span class="n">skills</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">skill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">try</span><span class="o">!</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">realm</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">Engineer</span><span class="p">.</span><span class="n">self</span><span class="p">,</span> <span class="nl">value:</span> <span class="n">engineer</span><span class="p">,</span> <span class="nl">update:</span> <span class="n">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">afterEach</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// テスト終了後にデータを全て削除</span>
</span><span class='line'>        <span class="n">try</span><span class="o">!</span> <span class="n">realm</span><span class="p">.</span><span class="n">write</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">realm</span><span class="p">.</span><span class="n">deleteAll</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、最低限必要なモックデータをテスト用の<code>Realm</code>のデータベースに作成してみました。<br/>
<code>Realm</code>の使い方さえ間違えなければ、こちらでテストしたい独自処理には影響を与えないはずです。</p>

<p>上記のソースコードにコメントとして書いていますが、ポイントとしては下記の通りです。</p>

<ul>
<li>実際のアプリで利用する<code>Realm</code>ファイルとは別のテスト用の<code>Realm</code>ファイルを利用する</li>
<li>テスト実行前にテスト用のモックデータを作成する</li>
<li>テスト実行後はテスト用のモックデータを全て削除する</li>
</ul>


<h4>テストの記載箇所</h4>

<p>さて、実際にテストを実装すると下記のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// QuickTestSampleTests</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">spec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">subject:</span> <span class="n">ViewController</span><span class="o">!</span>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">&quot;Realm Database&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">beforeEach</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span><span class="p">(</span><span class="s">&quot;searchEngineerById&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">&quot;find realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerById</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_name&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">afterEach</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイント次の通りです。</p>

<ul>
<li>テストの内容は<code>beforeEach</code>と<code>afterEach</code>の間に書く</li>
<li>メソッドごとにテストを記載していることをわかりやすくするために、<code>describe</code>でメソッドごとにくくる</li>
<li>テストで確かめたい内容次第で<code>notTo</code> / <code>to</code> / <code>equal</code> などを使い分ける</li>
</ul>


<h4>テストの内容</h4>

<p>では、テスト内容の詳細を個別に見ていきたいと思います。</p>

<h5>searchEngineerByIdのテスト</h5>

<p>まずは、<code>searchEngineerById</code>のテストを書きます。<br/>
このメソッドは検索成功時に<code>Engineer</code>型のオブジェクトを返し、検索失敗時には<code>nil</code>を返します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>検索成功：取得内容の整合性をチェック</li>
<li>検索失敗：<code>nil</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// QuickTestSampleTests</span>
</span><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;searchEngineerById&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 取得内容の整合性チェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;find realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerById</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_name&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_skill_name&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// nilであることのチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;cannot find realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerById</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>searchEngineerByNameのテスト</h5>

<p>続いて、<code>searchEngineerByName</code>のテストを書きます。<br/>
このメソッドは検索成功時に<code>List&lt;Engineer&gt;</code>型のオブジェクトを返し、検索失敗時には<code>nil</code>を返します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>検索成功：取得内容の整合性およびカウント数のチェック</li>
<li>検索失敗：<code>nil</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;searchEngineerByName&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 取得内容の整合性およびカウント数のチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;find realm data by name&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerByName</span><span class="p">(</span><span class="s">&quot;mock_name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">.</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_name&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">skills</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_skill_name&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// nilであることのチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;cannot find realm data by name&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerByName</span><span class="p">(</span><span class="s">&quot;mock_mistake_name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>countEngineerのテスト</h5>

<p>次は<code>countEngineer</code>のテストを書きます。<br/>
このメソッドは検索成功時にデータのレコード数を返却します。<br/>
検索失敗時の処理は独自実装していないため成功時のテストのみ書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;countEngineer&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// カウント数のチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;count realm data&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">countEngineer</span><span class="p">()</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>createEngineerのテスト</h5>

<p>今度は<code>createEngineer</code>のテストを書きます。<br/>
このメソッドは同名の<code>Engineer</code>オブジェクトが保存されている場合は、新規オブジェクトを作成しないということがポイントです。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>新規<code>Engineer</code>オブジェクト作成が成功した場合：取得内容の整合性およびカウント数のチェック</li>
<li>新規<code>Engineer</code>オブジェクト作成が失敗した場合：カウント数が変わっていないことをチェック</li>
</ul>


<p>を書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;createEngineer&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// カウント数が変わっていないことのチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;cannot create engineer&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">subject</span><span class="p">.</span><span class="n">createEngineer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;mock_name&quot;</span><span class="p">,</span> <span class="nl">level:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="s">&quot;swift&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerByName</span><span class="p">(</span><span class="s">&quot;mock_name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">.</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 取得内容の整合性およびカウント数のチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;create new engineer&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">subject</span><span class="p">.</span><span class="n">createEngineer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">&quot;takahiro&quot;</span><span class="p">,</span> <span class="nl">level:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="s">&quot;swift&quot;</span><span class="p">,</span> <span class="s">&quot;spring boot&quot;</span><span class="p">,</span> <span class="s">&quot;react.js&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineers</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerByName</span><span class="p">(</span><span class="s">&quot;takahiro&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="p">).</span><span class="n">notTo</span><span class="p">(</span><span class="n">beNil</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">.</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;takahiro&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">skills</span><span class="p">.</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">skills</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;swift&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">skills</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;spring boot&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineers</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">skills</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;react.js&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>updateEngineerLevelByIdのテスト</h5>

<p><code>updateEngineerLevelById</code>のテストを書きます。<br/>
このメソッドは成功可否に応じて<code>true / false</code>を返却します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>更新成功：<code>true</code>であることをチェック</li>
<li>更新失敗：<code>false</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;updateEngineerLevelById&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// trueであることをチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;update level for realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">updateEngineerLevelById</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nl">level:</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerById</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">updated</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beTrue</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">level</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// falseであることをチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;cannot update level for realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">updateEngineerLevelById</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nl">level:</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">updated</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beFalse</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>updateEngineerSkillByIdのテスト</h5>

<p><code>updateEngineerSkillById</code>のテストを書きます。<br/>
このメソッドは成功可否に応じて<code>true / false</code>を返却します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>更新成功：<code>true</code>であることをチェック</li>
<li>更新失敗：<code>false</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">&quot;updateEngineerSkillById&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// trueであることをチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;update skill for realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">updateEngineerSkillById</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="s">&quot;mock_skill_name_2&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">engineer</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">searchEngineerById</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">updated</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beTrue</span><span class="p">())</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">skills</span><span class="p">.</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_skill_name&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">engineer</span><span class="o">?</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">name</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="s">&quot;mock_skill_name_2&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// falseであることをチェック</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">&quot;cannot update skill for realm data by id&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">updated</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="n">updateEngineerSkillById</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nl">skills:</span> <span class="p">[</span><span class="s">&quot;mock_skill_name_2&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">updated</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">beFalse</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Quickでのテストコードの書式</h3>

<p>今回新たに出た書式についてまとめておきます。</p>

<h4>notTo</h4>

<p>対象と異なることを期待するときに利用します。</p>

<ul>
<li>書式例：<code>expect(engineer).notTo(beNil())</code></li>
<li>期待値：<code>engineer</code>オブジェクトが<code>nil</code>でない</li>
</ul>


<h4>to</h4>

<p>対象と一致することを期待するときに利用します。</p>

<h5>equalと組み合わせた場合</h5>

<ul>
<li>書式例：<code>expect(engineer?.name).to(equal("mock_name"))</code></li>
<li>期待値：<code>engineer</code>オブジェクトの<code>name</code>プロパティが<code>mock_name</code>と一致すること</li>
</ul>


<h5>beTrue / beFalseと組み合わせた場合</h5>

<ul>
<li>書式例：<code>expect(updated).to(beTrue())</code></li>
<li>期待値：<code>updated</code>の値が<code>true</code>と一致すること</li>
</ul>


<h4>beNil / equal / beTrue / beFalse</h4>

<p>それぞれ、</p>

<ul>
<li>beNil()：<code>nil</code>であること</li>
<li>equal()：引数の値であること(数字や文字列などを引数に設定します)</li>
<li>beTrue()：<code>true</code>であること</li>
<li>beFalse()：<code>false</code>であること</li>
</ul>


<p>を意味します。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。<br/>
今回は最近の経験を元にiOSでテスト駆動型の開発をするなら&hellip;をイメージして書いてみました。<br/>
次はもっと複雑なパターンのテストを試しに書いてみても良いかなと思いつつ、本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://realm.io/jp/docs/swift/latest/#realm-3">Realm公式ドキュメント</a></li>
<li><a href="https://news.realm.io/jp/news/rachel-bobbins-testing-view-controllers-quick/">Quickを使ってビューコントローラをテストする</a></li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/ja/ConfiguringQuick.md">Quickの挙動をカスタマイズしましょう</a></li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/ja/QuickExamplesAndGroups.md">QuickのExamplesとExample Groupsで、たくさんのテストでも整理整頓</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
