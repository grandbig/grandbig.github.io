<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2014-02-22T01:43:50+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Silent Remote Notificationを試そう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/22/silentremotenotification/"/>
    <updated>2014-02-22T00:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/22/silentremotenotification</id>
    <content type="html"><![CDATA[<h3>iOS7で新たに追加されたSilent Remote Notificationを使ってみよう！！</h3>

<p>本日はiOS7から新たに追加された<strong>Silent Remote Notification</strong>について紹介します。<br/>
iOS6までで利用できたRemote Notificationと何が違うのかと言いますと、<strong>ユーザ端末のロック画面に表示させることなく</strong>通知することができるんです。<br/>
つまり、<br/>
Remote Notification: ユーザに何かを気づかせるためにプッシュする<br/>
Silent Remote Notification: ユーザに気づかせることなくプッシュする<br/>
ということです。</p>

<p>これを見ると、『Silent Remote Notificationって使い道あるの？？』なんて思ってしまいそうですよね。これが意外とありそうなんです。<br/>
例えば、<br/>
・ユーザに気づかれずにアプリ内の情報を最新に更新する<br/>
・ユーザに気づかれずにアプリ内のユーザ情報を取得する<br/>
ことなどが考えられます。<br/>
後者はユーザ視点からすると気になるかもしれませんが、『アプリの有用性をユーザに最大限に感じてもらうための方法』と考えて頂ければとても大切なことであると伝わるでしょうか。</p>

<p>そんな様々な使い道がありそうなSilent Remote Notificationについて早速説明していきます。</p>

<!--more-->


<h4>ネイティブソースとXcode5の設定について</h4>

<p>まずは、ネイティブソースとXcode5の設定から説明します。Xcode5でプロジェクトを作成したら、TARGETS > Capabilities > Background Modes > Remote notificationsにチェックを入れます。<br/>
<img src="http://grandbig.github.io/images/xcode-silent-notifications1.png" alt="Xcode5での設定方法" /><br/>
続いてはネイティブソースでプッシュの受取り口を作りましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// AppDelegate.hファイル</span>
</span><span class='line'><span class="err">@</span><span class="n">interfase</span> <span class="n">AppDelegate</span> <span class="o">:</span> <span class="n">NSObject</span><span class="o">&lt;</span><span class="n">UIApplicationDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// AppDelegate.mファイル</span>
</span><span class='line'><span class="c1">// ①トークン値の取得</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span><span class="o">:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">devToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//デバイストークンから&#39;&lt;&#39;,&#39;&gt;&#39;,&#39; &#39;を削除して変数に保存</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">deviceToken</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">devToken</span> <span class="n">description</span><span class="p">]</span> <span class="n">stringByReplacingOccurrencesOfString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&lt;&quot;</span><span class="n">withString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;] </span>
</span><span class='line'>                          <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="err">@</span><span class="s">&quot;&gt;&quot;</span> <span class="n">withString</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;&quot;</span><span class="p">]</span>
</span><span class='line'>                          <span class="n">stringByReplacingOccurrencesOfString</span><span class="o">:</span> <span class="err">@</span><span class="s">&quot; &quot;</span> <span class="n">withString</span><span class="o">:</span> <span class="err">@</span><span class="s">&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;deviceToken: %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">deviceToken</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ②通常のRemote Notificationが届いたときに通る処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="n">didReceiveRemoteNotification</span><span class="o">:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">userInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ③Silent Remote Notificationが届いたときに通る処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">application</span><span class="o">:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span>
</span><span class='line'> <span class="nl">didReceiveRemoteNotification:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">userInfo</span>
</span><span class='line'>  <span class="nl">fetchCompletionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">UIBackgroundFetchResult</span><span class="p">))</span><span class="n">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>プッシュ通知を受け取ったとき、上記に書いたdidReceiveRemoteNotification処理が実行されます。コメントアウトにも書いていますが、③がSilent Remote Notificationが届いたときに通る処理です。<br/>
ただし、Silent Remote NotificationはiOS7以上でないと対応していないのでiOS6の場合は通常のRemote Notification, Silent Remote Notificationに関わらず②のdidReceiveRemoteNotificationを通りますので、ご注意ください。<br/>
あとは③に実行させたい処理を書けば、Silent Remote Notificationの実装は完了です。</p>

<h4>動作確認用に簡単にプッシュ通知を送る処理を書こう</h4>

<p>さて、ネイティブ側の実装はできましたが、本当にこれで送れるのか確認したいですよね？Node.jsのnode-apnモジュールを使えば驚くほど簡単に用意することができます。<br/>
より簡単に作成するためにExpressモジュールを使って説明します。Expressモジュールの用意については<a href="https://gihyo.jp/dev/serial/01/nodejs/0003">第3回 Express.jsを使ったWebアプリケーションを構築</a>を参照ください。</p>

<p>それではpushtestという名前のWebアプリの雛形を作成しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>express -t ejs pushtest
</span></code></pre></td></tr></table></div></figure>


<p>次にpushtest配下で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>を実行して必要なモジュールをインストールしましょう。さらに、node-apnモジュールもインストールしましょう。また後ほど利用するquerystringモジュールもインストールしておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install apn
</span><span class='line'>npm install qs
</span></code></pre></td></tr></table></div></figure>


<p>これでモジュールが揃ったので、app.jsを編集しましょう。<br/>
pushtest/routes/apns.jsを作成しておきます。(デフォルトで作成されるindex.jsかuser.jsをコピーしてファイル名を変更すればOKです)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/apns&#39;</span><span class="p">);</span><span class="c1">// apns.jsの読み込みを追加</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/apns&#39;</span><span class="p">,</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">push</span><span class="p">);</span><span class="c1">// GETリクエストを想定</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>そしてお待ちかねのプッシュメイン処理をapns.jsに書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">apns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;apn&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;qs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">push</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// ① GETパラメータからトークンを取得</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ② プッシュ通知の設定</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;cert&quot;</span><span class="o">:</span> <span class="s2">&quot;./keys/cert.pem&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;key&quot;</span><span class="o">:</span> <span class="s2">&quot;./keys/key.pem&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;gateway&quot;</span><span class="o">:</span> <span class="s2">&quot;gateway.sandbox.push.apple.com&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myDevice</span> <span class="o">=</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Device</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">apnConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Connection</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">apns</span><span class="p">.</span><span class="nx">Notification</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">note</span><span class="p">.</span><span class="nx">newsstandAvailable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">apnConnection</span><span class="p">.</span><span class="nx">pushNotification</span><span class="p">(</span><span class="nx">note</span><span class="p">,</span> <span class="nx">myDevice</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;respond with a resource&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどインストールしたqsはGETパラメータをオブジェクト化してくれる便りなモジュールです。詳しくは<a href="http://nodejs.org/api/querystring.html">Node.js Manual&amp;Documents</a>を参照してください。<br/>
まず、①のようにトークン値を取得します。<br/>
次に②のようにプッシュ通知を送るための設定を書きます。<a href="https://github.com/argon/node-apn">GitHubで公開されているReference</a>をほぼそのまま書くだけなので簡単です。<br/>
注意しておきたいのはSilent Remote Notificationの場合は<strong>note.newsstandAvailable=1</strong>を設定する必要があります。逆にbadge, alert, soundは不要です。これらを入れてもプッシュ通知ができないわけではないのですが、冒頭に述べた<strong>ユーザに気づかれずに</strong>という要件を満たせなくなります。</p>

<p>因みに, optionsで設定しているcertとkeyは証明書の保存場所です。上記ソースで設定している場所はapp.jsと同じ階層にkeyフォルダがあることを指します。また、gatewayにはsandboxをつけることを忘れずに。(商用の場合はsandboxは不要です。develop用ではsandboxを設定するんです。)<br/>
証明書(cert.pemとkey.pem)の作成は多くのサイトで説明されているのでここでは割愛します。</p>

<p>ここまで準備ができたら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node app.js
</span></code></pre></td></tr></table></div></figure>


<p>でWeb&amp;APサーバをローカルに起動しましょう。<br/>
そして、『localhost:3000?token=トークン値』をブラウザのアドレス部分に打って、Silent Remote Notificationを送りましょう!!<br/>
トークン値はネイティブソース内のdidRegisterForRemoteNotificationsWithDeviceToken関数でLogとして出力しているはずなので、コピーしましょう。</p>

<p>届きましたでしょうか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MKMapViewの初期中心点をユーザの現在地に設定する方法]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/16/userlocationandmap/"/>
    <updated>2014-02-16T21:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/16/userlocationandmap</id>
    <content type="html"><![CDATA[<h3>MKMapViewの中心位置について考えた</h3>

<p>本日はMKMapViewの初期表示について説明します。MKMapViewを扱うときにはユーザの位置情報を用いることが多いと思います。そのほとんどの場合、マップを初期表示したときにユーザの現在地を中心にしたいのではないかと思います。しかしながらiPhoneで位置情報を取得するとき、アプリを起動して即座に現在地を特定することはできません。では、『どうするのか？』について失敗談を交えつつ紹介させて頂きます。</p>

<!--more-->


<p>まずは失敗例から紹介します。<br/>
筆者は<strong>ユーザの現在地をマップの中心位置に設定する</strong>ということに意識が向きすぎたせいか当初は下記の手段を取っていました。</p>

<p>下記はViewController.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;CoreLocation/CoreLocation.h&gt;
</span><span class='line'>#import &lt;MapKit/MapKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController &lt;MKMapViewDelegate, CLLocationManagerDelegate&gt;
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) IBOutlet CLLocationManager *locationManager;
</span><span class='line'>@property (weak, nonatomic) IBOutlet MKMapView *map;</span></code></pre></td></tr></table></div></figure>


<p>下記はViewController.m</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ユーザの位置を取得
</span><span class='line'>CLLocation *location = [locationManager location];
</span><span class='line'>CLLocationCoordinate2D uCoordinate = [location coordinate];
</span><span class='line'>// マップの中心位置を設定
</span><span class='line'>MKCoordinateRegion region = MKCoordinateRegionMake(uCoordinate, MKCoordinateSpanMake(0.05, 0.05));</span></code></pre></td></tr></table></div></figure>


<p>しかし、これではアプリ起動直後に真っ青な画面が表示されてしまうことでしょう。その理由はiPhone側で位置情報を取得する前にマップを表示しようとしてしまっているためです。結果、ユーザの現在地はlatitude, longitude共に0として返ってきます。<br/>
ここで筆者はマップに現在地のピンを表示することは割りと早くできていることに気づきました。であれば何かマップからユーザ情報が取得できるのではないかと。<br/>
で考えたのが下記。(ViewController.mのみ修正)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ユーザの位置を取得
</span><span class='line'>CLLocation *userLocation = self.map.userLocation.location;
</span><span class='line'>CLLocationCoordinate2D uCoordinate = CLLocationCoordinate2DMake(userLocation.coordinate.latitude, userLocation.coordinate.longitude);
</span><span class='line'>// マップの中心位置を設定
</span><span class='line'>MKCoordinateRegion region = MKCoordinateRegionMake(uCoordinate, MKCoordinateSpanMake(0.05, 0.05));</span></code></pre></td></tr></table></div></figure>


<p>しかし、これまたアプリ起動後に真っ青な画面が表示されてしまいました&hellip;。う〜む、なかなかうまくいかない。</p>

<p>で、結局、下記で解決。(ViewController.mのみ修正)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// マップにユーザの現在地を表示
</span><span class='line'>self.map.showsUserLocation = YES;
</span><span class='line'>// マップの中心地がユーザの現在地を追従するように設定
</span><span class='line'>[self.map setUserTrackingMode:MKUserTrackingModeFollow];</span></code></pre></td></tr></table></div></figure>


<p>位置情報が取れ次第(ユーザの現在地が特定でき次第)、マップの中心地が移動するのでアプリ起動後に割りとすぐ理想の結果が得られます。(因みにマップを動かせば、追従モードはOFFとなります。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でAuto Layoutを使おう]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout/"/>
    <updated>2014-02-09T17:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout</id>
    <content type="html"><![CDATA[<h3>Auto Layoutで『iOS6・iOS7』と『3.5-inch・4-inch』対応</h3>

<p>さて、これまで<strong>iOS6/7 deltas</strong>を利用した方法や<strong>全てコードで書く</strong>方法について説明してきました。これとは別に本日は<strong>Auto Layout</strong>を利用した方法について説明します。<br/>
先にこれらの方法の違いについて紹介します。<br/>
・iOS6/7 deltasを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS5以前から対応する場合<br/>
・全てコードで書く方法<br/>
  XIBやStoryboardなどのGUIを利用せずに、全OS・全ディスプレイに対応する場合<br/>
・Auto Layoutを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS6以降から対応する場合</p>

<p>求められている仕様や開発者の技量、プロジェクトの運用から最適な方法を選択する必要があります。<br/>
とは言え、個人的には<strong>全てコードで書く</strong>方法が最も自由がきくと思っているので、これに慣れていると他の手法は案外シンドイです。</p>

<!--more-->


<h4>Auto LayoutでUINavigationBarを調整しよう</h4>

<p>以前、iOS6/7 deltasを利用する方法で説明したことをAuto Layoutで説明します。皆様、ご存知の通りiOS6以前とiOS7以降とではステータスバーの20px分をナビゲーションバーの高さを考慮しなくてはなりません。<br/>
<img src="http://grandbig.github.io/images/ios6_7_difference.png" alt="iOS6とiOS7でナビゲーションバーの高さが異なる" /></p>

<p>早速、詳しく説明していきます。<br/>
まず、プロジェクトを作成し終わったら、XIBファイルを表示してください。そしてUINavigationBarを設置します。このUINavigationBarの高さをiOSのバージョンごとに変化させたいので、下記手順でAuto LayoutのConstraintを追加します。<br/>
1: 右下のバーの左から2番目をクリックしてConstraintsのウィンドウを表示<br/>
2: 高さを変更したいのでHeightにチェックを入れる<br/>
3: Add ConstraintボタンをクリックしてConstraintを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout1.png" alt="Constraintを追加する" /></p>

<p>これでConstraintsが追加されたのでViewController.hと関連づける。<br/>
1: Constraints > Heightを右クリックしてViewController.hへドラッグ&amp;ドロップ<br/>
2: ウィンドウが表示されるので、名前をつけてConnectをクリックする<br/>
<img src="http://grandbig.github.io/images/autolayout2.png" alt="ViewController.hに関連づける" /><br/>
<img src="http://grandbig.github.io/images/autolayout3.png" alt="名前をつけてConnect" /></p>

<p>次にViewController.mファイルを開きましょう。<br/>
以下のように編集してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  // iOS7の場合は64pxにする
</span><span class='line'>  if (floor(NSFoundationVersionNumber) &gt; NSFoundationVersionNumber_iOS_6_1) {
</span><span class='line'>      self.nvBarHeight.constant = 64;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上の手順をすることで下記のようにiOS6とiOS7でUINavigationBarを正しく表示することができます。<br/>
<img src="http://grandbig.github.io/images/autolayout4.png" alt="UINavigationBarの表示" /></p>

<h4>Auto LayoutでUIViewを中央に配置しよう</h4>

<p>次に主にディスプレイサイズで困るであろう中央配置の方法について説明します。<br/>
まずは、何も考えずに普通にUIViewを追加してみましょう。そしてViewを3.5-inch Full Screenと4-inch Full Screenとで表示を変更して見てみましょう。すると、下記のようにUIViewの高さが変わってしまうことがわかると思います。<br/>
<img src="http://grandbig.github.io/images/autolayout5.png" alt="4-inchの場合" /><br/>
<img src="http://grandbig.github.io/images/autolayout6.png" alt="3.5-inchの場合" /><br/>
こんなはずでは&hellip;なんて絶句してしまうかもしれません。が、ご安心ください。これは先ほど説明したHeightのConstraintsを追加することで対応できます。先ほどと同様に下記の手順でHeightのConstraintを追加してみてください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 高さを保持したいのでHeightにチェックを入れます。高さが希望の値になっていることを確認してください。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する</p>

<p>これで先ほどと同様にViewのinchを変更させてみてください。追加したUIViewの高さが保持されていることがわかると思います。</p>

<p>はい。本題です。<br/>
UIViewをディスプレイのCenterに表示させたい場合は下記手順を実行してください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から1番目をクリックしてConstraintのウィンドウを表示<br/>
2: Vertical方向に常にディスプレイの中央に表示させたいので、Vertical Center in Containerにチェックを入れます。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout7.png" alt="Vertical Center in Containerを追加" /></p>

<p>これでUIViewを高さを保持した状態で3.5-inch/4-inchでもディスプレイの中央に表示することができます。</p>

<h4>Auto Layoutでマージンを調整しよう</h4>

<p>そして、Auto Layoutを用いたマージンの調整方法についても説明しましょう。<br/>
先ほど、ディスプレイの中央に表示したい場合を説明したと思いますが、3.5-inchで見るとUINavigationBarに近すぎると感じることがあるかもしれません。<br/>
であるならば、3.5-inchでも4-inchでもUINavigationBarから一定の距離を保持した方が見栄えが良いと思うこともあると思います。<br/>
さて、その方法について説明します。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 上部との距離を変更します。(初期状態は点線表記になっていますが、赤の実線になるように値を変更してください)<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="http://grandbig.github.io/images/autolayout8.png" alt="上部マージンを追加" /></p>

<p>これで3.5-inch/4-inchにディスプレイが変更されたとしてもUINavigationBarとUIViewとの距離は一定に保たれます。</p>

<h4>最後に</h4>

<p>いかがだったでしょうか？<br/>
筆者的には完全に手探りな状態で始めたので、わからないことだらけだったのですが、なんとなく理解できてきました。<br/>
現在はiPhone4S以前を利用しているユーザは(日本では？)少なくなってきたと思うのですが、iPadがiPhoneの3.5-inchと同じ比率ですので、Universalアプリを開発するのであれば対応せざるを得ません。<br/>
また、iOS6ユーザはまだまだいると思いますので、仕様として要求される可能性は十分あります。細かい修正が常に要求されるとは思いますが、忍耐強くiOS8, 9, 10&hellip;とリリースされるのを待ちましょう笑<br/>
次回リリースされるiPhoneやiPadまたはリリースされるかもしれない新デバイスがどんなディスプレイの比率になるかもわからないので、今後こういった対応は常に要求されるんでしょうね(汗)</p>

<p>ということでまた次回！<br/>
筆者も継続して勉強します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリを相対表示で作りたい！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/04/ios-developapp-relative/"/>
    <updated>2014-02-04T22:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/04/ios-developapp-relative</id>
    <content type="html"><![CDATA[<h3>iOSアプリでpixel表示を使わない？</h3>

<p>さて、皆さんは<strong>iPhoneとiPadに対応</strong>、<strong>iOS6とiOS7に対応</strong>を仕様として求められたときにどうやって作るのが最も簡単だと思いますか？<br/>
Storyboardを使う方法, 空プロジェクトからnib/xibを使う方法, ただひたすらにコードを書く方法など人によって様々かと思います。筆者は最近、<strong>ただひたすらにコードを書く方法</strong>を取っています。理由は結局, iPhone/iPadの対応やiOS6/iOS7の対応のためにそこだけコードを書いて対応したりすることが生じるためです。それならばいっそのこと、0からコードを書いた方が勉強にもなるし、気持ちが良いのです。<br/>
しかし、周りからのは『コードで書くとデバッグしないとイメージが湧かないんだよなぁ』とか、『pixel指定で作るとか面倒くさくね〜？』なんて言われたりするんですよね(汗)<br/>
この両方に通ずることは<strong>相対表示で画面の構造が作れれば良いのに</strong>なんてことなんじゃないかと勝手に思いました。<br/>
なので、本日は開発者がpixel指定を意図せずiOSアプリの画面を作成できるような関数を定義してみたいと思います。</p>

<!--more-->


<h4>関数の定義</h4>

<p>さて、早速定義します。<br/>
横幅や縦幅を指定したパーセンテージの長さに変換したい場合は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 横幅の相対変換
</span><span class='line'>- (float) relativeWidth:(CGRect)frame
</span><span class='line'>              percent:(int)percent
</span><span class='line'>{
</span><span class='line'>  // 引数のframeから横幅を取得
</span><span class='line'>  float parentWidth = frame.size.width;
</span><span class='line'>  float childWidth = parentWidth * percent / 100;
</span><span class='line'>
</span><span class='line'>  return childWidth;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>で良いでしょう。<br/>
横幅, 縦幅にとらわれたくなければ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (float) relativeLength:(float)length
</span><span class='line'>               percent:(int)percent
</span><span class='line'>{
</span><span class='line'>  float childLength = length * percent / 100;
</span><span class='line'>
</span><span class='line'>  return childLength;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>とすれば良いでしょう。<br/>
横幅, 縦幅を同時に変換したければ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGRect) relativeFrame:(CGRect)frame
</span><span class='line'>          percentWidth:(int)percentWidth
</span><span class='line'>         percentHeight:(int)percentHeight
</span><span class='line'>{
</span><span class='line'>  float parentWidth = frame.size.width;
</span><span class='line'>  float parentHeight = frame.size.height;
</span><span class='line'>
</span><span class='line'>  float childWidth = parentWidth * percentWidth / 100;
</span><span class='line'>  float childHeight = parentHeight * percentHeight / 100;
</span><span class='line'>
</span><span class='line'>  CGRect rect;
</span><span class='line'>  rect.size.width = childWidth;
</span><span class='line'>  rect.size.height = childHeight;
</span><span class='line'>
</span><span class='line'>  return rect;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>とできると思います。</p>

<p>これでHTML, CSSでいうところの<strong>position: relative</strong>で<strong>width: 30%; height: 20%;</strong>のような形を取ることができます。<br/>
動作確認してないけど、たぶん行けるでしょう&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonのaddTargetについて]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/01/uibuttonfunction/"/>
    <updated>2014-02-01T22:04:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/01/uibuttonfunction</id>
    <content type="html"><![CDATA[<h3>UIButtonをタップしたときの処理を書くときの注意点</h3>

<p>今日は簡単なメモを書きます。ネイティブアプリを開発するときに、レイアウトをこりたいと思うことがあります。そんなときにひっかかってしまったことを書きます。(まさか今更こんなことにひっかかるとは&hellip;と思いました笑)</p>

<p>UIButtonは下記のように作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIButton *btn = [UIButton buttonWithType: UIButtonTypeRoudedRect];
</span><span class='line'>btn.frame = CGRectMake(0, 0, 100, 30);
</span><span class='line'>[btn setTitle:@"ボタン" forState:UIControlStateNormal];
</span><span class='line'>[btn addTarget:self action:@selector(test:) forControlEvents:UIControlEventTouchDown];</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>で、このボタンをUILabelに配置するために</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 300, 50)];
</span><span class='line'>[label addSubview: btn];</span></code></pre></td></tr></table></div></figure>


<p>と書いたところ、addTargetで設定したタップイベントが実行されませんでした。<br/>
これを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> UIView *uv = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 300, 50)];
</span><span class='line'>[uv addSubview: btn];</span></code></pre></td></tr></table></div></figure>


<p>と<strong>UIView</strong>に変えたところ、うまくいきました。</p>

<p>ま、UILabelをあえて使う必要もないので、UIViewで良いでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSをiOS6対応させようとしてハマったこと]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/27/googlemapssdk2/"/>
    <updated>2014-01-27T23:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/27/googlemapssdk2</id>
    <content type="html"><![CDATA[<h3>iOS6からGoogle Maps SDKが使いたい！！</h3>

<p>さて、最近取り組んでいるGoogle Maps SDKについて書きます。前回ご紹介させて頂いたときはiOS7からの対応として書かせて頂きました。<br/>
今日はiOS6から対応するアプリを開発する上でハマったことについて説明します。</p>

<p>Xcode5でiOS6から対応に変更するとき、<strong>Deployment Target</strong>を6.0に変更すると思います。そのままClearn ⇒ Buildをしてみると下図のようなおびただしい数のエラーが&hellip;<br/>
<img src="http://grandbig.github.io/images/googlemapssdk_howtouse1.png" alt="iOS6でビルドするとエラーがたくさん出る" /></p>

<!--more-->


<p>なぜ、Deployment Targetを変えただけでこんなにもエラーが？と思ったので、エラー内容を見てみると&hellip;<br/>
<strong>Undefined symbols for architecture armv7</strong>と書いてあります。<br/>
これだけで調べてもよくわかりませんでした。(原因がわかってからよくよく見てみると様々なサイトでヒントを教えてくれていたとわかるのですが&hellip;)</p>

<p>もう少し、詳しく見てみると<strong>Google Maps</strong>がひっかかっていることがわかりました。で、再度検索し続けると<br/>
<strong>ライブラリが足りない</strong><br/>
という可能性にたどり着きました。<br/>
さ、<a href="https://developers.google.com/maps/documentation/ios/start?hl=ja">Google Maps SDK 公式ページ</a>を見てみましょう。<br/>
自分で作成したXcodeプロジェクトに追加してあるライブラリと公式ページに書いてある追加すべきライブラリを比較すると下記の違いに気づきました。(作成したXcodeプロジェクトにはデフォルトで追加されているライブラリも含まれています。)<br/>
<img src="http://grandbig.github.io/images/googlemapssdk_howtouse2.png" alt="ライブラリが違う" /></p>

<p>結果、ライブラリが異なるという単純な理由だったわけですが、気づくのに時間がかかりました。<br/>
iOS7では動いてしまうという部分も混乱を招く原因だったと思います。</p>

<p>ま、英語を嫌がらずに公式ページを読んだ方が時間はかかりませんってことですね&hellip;。<br/>
今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSでMapにGIFアニメーションの画像を表示したい]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/26/googlemapsdk/"/>
    <updated>2014-01-26T23:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/26/googlemapsdk</id>
    <content type="html"><![CDATA[<h3>MAPにGIFアニメーション画像を表示したい</h3>

<p>最近、ネイティブアプリ開発を再び始めました。そこでマップ上にアニメーションGIF画像を表示しようと思ったのですが、これがなかなかうまくいかないんですね。<br/>
そのときのことについて今日は書きます。</p>

<p>iOSのMapライブラリにはApple標準提供の<strong>MapKit</strong>とGoogleが提供する<strong>Google Maps SDK for iOS</strong>があります。<br/>
当然のことながら標準のMapKitの方が導入は簡単です。(Google Mapsの利用にはそれなりに導入手順があります。ただ、ここで挫折しなければ実はかなり使いやすいのではないかと。)</p>

<p>Google Mapsの導入手順については下記を参考にすると良いと思います。<br/>
<a href="http://qiita.com/shu223/items/bfb5ef3e45682c2bb763">Google Maps SDK for iOSの導入手順 &ndash; Qiita</a><br/>
<a href="http://dev.eyewhale.com/archives/157">Google Maps SDK for iOSの使い方 &ndash; 目くじら日記</a></p>

<!--more-->


<h4>Apple標準提供のMapKitを使ってみる</h4>

<p>さて、まずは当然のことながらMapKitで試してみることにしました。そもそもMapKitライブラリを使用すると簡単にはピンの画像を変えられません。<br/>
詳しくは<a href="http://grandbig.github.io/blog/2013/09/28/put-annotation/">Mapに好きな画像を配置しよう！</a>を見てください。</p>

<p>MapKitにGIFアニメーション画像を配置するべく、LBGIFImageを利用しました。非常に簡単に利用できるので、ぜひ<a href="https://github.com/larcus94/LBGIFImage">LBGIFImage &ndash; GitHub</a>からダウンロードしてみてください。
しかし、MapKitではGIFアニメーション画像を表示することができませんでした。アノテーション(Mapにさすピン)をGIFアニメーションで置き換えることができないのか定かではないのですが、うまくいきませんでした。</p>

<h4>Google Maps SDK for iOSを使ってみる</h4>

<p>次にもしや<strong>Google Maps SDK for iOS</strong>ならできるのでは！？と思いつき試してみました。<br/>
結果から言いますと、超簡単にできました！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// マーカーの作成
</span><span class='line'>GMSMarker *marker = [[GMSMarker alloc] init];
</span><span class='line'>// 位置の設定
</span><span class='line'>marker.position = CLLocationCoordinate2DMake(35.659352, 139.776228);
</span><span class='line'>// マーカーを地図にプロット
</span><span class='line'>marker.map = mapView;
</span><span class='line'>// GIFアニメーションをUIImageに設定
</span><span class='line'>UIImage* image = [UIImage animatedGIFNamed:@"GIF画像名(.gifは含まない)"];
</span><span class='line'>// マーカーにその画像を設定
</span><span class='line'>marker.icon = image;</span></code></pre></td></tr></table></div></figure>


<p>これだけでできます。(もちろんLBGIFImageライブラリはインポートしてください)</p>

<p>標準提供のMapKitを利用しているアプリでGIFアニメーションをマップ上に表示しているアプリもあるので、やり方はあるのと思います。
ただ、Google Maps SDKはとても使いやすそうなので、こっち使おうかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodebrewで複数のnodeをインストールしよう]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/19/howtonodebrew/"/>
    <updated>2014-01-19T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/19/howtonodebrew</id>
    <content type="html"><![CDATA[<h3>nodebrewでnodeをインストール</h3>

<p>最近はNode.jsがかなりメジャーになってきた気がします。しかし、Node.jsは未だにバージョンが1.0に届いていないので、開発途中に最新バージョンが出てくることも十分あり得ます。そのたびにアンインストールをするわけにもいかないので複数のバージョンのNode.jsをインストールできるようにしておくと便利です。<br/>
nvmを使う方法もあるのですが、筆者は簡単に設定ができるnodebrewを活用しています。</p>

<!--more-->


<h4>設定手順</h4>

<p>早速、設定手順を説明します。<br/>
1. nodebrewをインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L git.io/nodebrew | perl - setup</span></code></pre></td></tr></table></div></figure>


<p>2. .bash_profileにパスを追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$HOME/.nodebrew/current/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<p>3. .bash_profileを再読み込み</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>4. nodeのインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodebrew install-binary v0.10.24</span></code></pre></td></tr></table></div></figure>


<p>ただし、v0.8.6以前はバイナリからインストールできないので、下記のようにインストールする必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodebrew install v0.6.12</span></code></pre></td></tr></table></div></figure>


<p>5. インストールされたnodeのバージョンを確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodebrew ls</span></code></pre></td></tr></table></div></figure>


<p>6. 利用したいnodeを指定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodebrew use v0.10.24</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passbook webServiceURLについて]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/19/passbook-detail/"/>
    <updated>2014-01-19T21:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/19/passbook-detail</id>
    <content type="html"><![CDATA[<h3>Passbook webServiceURLの設定で躓いたところ</h3>

<p>さて、最近はPassbookばかり触っているので、3回連続でPassbookについてです。筆者が躓いたところをピックアップして記載していきます。<br/>
具体的には<br/>
・webServiceURLに指定するURL<br/>
・Passbookを追加/更新/削除したときに自動で投げてくるパラメータ<br/>
についてです。</p>

<!--more-->


<h4>webServiceURLについて</h4>

<p>PassbookではwebServiceURLを設定するところで躓きました。使いきり&amp;更新や削除などを感知しないパスであれば、何も気にせず適当なURLを設定して構いません。しかし、パスの追加/更新/削除を感知して、ユーザ固有のアクションを起こさせたいという狙いがある場合は、きちんと考えなくてはなりません。</p>

<p>結論から言うと、<strong>http</strong>ではなく<strong>https</strong>から始まるURLを指定しなくてはなりません。また、自己証明書で試した結果、通信ができませんでした&hellip;。これは筆者の設定が悪いのかどうか不明なところなんですが、きちんとした証明書で<strong>https</strong>通信ができるサーバで試した結果、通信できました。ここについてはネット上ではっきりと書かれているサイトがなかったため真実はわからないのですが、少なくとも筆者は自己証明書では失敗したということをお伝えします。</p>

<p>因みに筆者は今回、Windows AzureでWebサイトを作成して活用しました。Webサイトではhttpでもhttpsでもアクセスできるように設定されているとのことで非常に使い勝手が良かったです。</p>

<p>また、Apple iOS Developerであれば、開発者だけができる設定でwebServiceURLにhttpのURLを設定しても通信することができます。次の章で説明する内容を実際に見たい場合は余分なお金のかからないhttpサーバで試してみると良いでしょう。設定は下記のようにできます。<br/>
<img src="http://grandbig.github.io/images/httpAllow.png" alt="設定からhttpを許可する" /></p>

<h4>Passbookを追加/更新/削除したときに自動で投げてくるパラメータ</h4>

<p>続いて、Passbookをユーザが受け取ってからwebServiceURLに指定したサーバに投げてくるパラメータについて説明します。パラメータが送られるパターンは下記です。<br/>
・Passbookを受け取って<strong>追加</strong>ボタンを押したとき<br/>
・Passbookを手動/自動で<strong>更新</strong>したとき<br/>
・Passbookを<strong>削除</strong>したとき</p>

<p>それぞれについて具体的に説明します。</p>

<h5>Passbookを受け取って追加ボタンを押したとき</h5>

<p>追加ボタンを押した瞬間に自動的にPOSTで通信されます。<br/>
その際、投げられるURLは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/webServiceURLで指定したURL/v1/devices/デバイスライブラリID/registrations/パスタイプID/シリアルナンバー</span></code></pre></td></tr></table></div></figure>


<p>となります。
このURLもしくはreq.paramsから<strong>デバイスライブラリID</strong>, <strong>パスタイプID</strong>, <strong>シリアルナンバー</strong>を取得することができます。また、req.headersに<strong>authorization</strong>の値が入っています。</p>

<p>デバイスライブラリIDはデバイスによって異なり、さらに新規パス取得の際には毎回異なる値です。パスタイプIDは開発者が発行するPassbookの証明書の.passを外した部分のことです。シリアルナンバーはパス毎に発行すべきものです。例えば、忘年会のチケットを配布する場合、そのチケットでは同じシリアルナンバーを使います。(ユーザごとにユニークな値をふるべきではありません。)authorizationはユーザ毎にユニークな値を持たせた方が使い勝手が良いと思われます。また、MD5などで暗号化した方がセキュリティ的には良いでしょう。</p>

<h5>Passbookを手動/自動で更新したとき</h5>

<p>Passbookアプリでパスの裏面を上から下にスクロールして手動で更新したときなどではGETで通信されます。<br/>
その際に投げられるURLは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/webServiceURLで指定したURL/v1/passes/パスタイプID/シリアルナンバー</span></code></pre></td></tr></table></div></figure>


<p>となります。
更新の場合は<strong>パスタイプID</strong>, <strong>シリアルナンバー</strong>, <strong>authorization</strong>を取得することができます。<br/>
また、更新処理のときにはログ用にPOSTで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/webServiceURL/v1/log</span></code></pre></td></tr></table></div></figure>


<p>が投げられます。<br/>
これを用いてログをDBに格納するのも良いでしょう。</p>

<h5>Passbookを削除したとき</h5>

<p>最後はパスを削除した場合です。このときはDELETEで通信されます。<br/>
その際、投げられるURLは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/webServiceURLで指定したURL/v1/devices/デバイスライブラリID/registrations/パスタイプID/シリアルナンバー</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<p>因みに筆者の場合は、Node.jsでExpressモジュールを使用しているので、下記のように書いています。<br/>
webServiceURLで末尾に/sendParamというパスをつけた場合です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Passbookを受け取って追加ボタンを押したとき
</span><span class='line'>app.post('/sendParam/v1/devices/:deviceLibraryID/registrations/:passTypeID/:serialNumber', pass.createData);
</span><span class='line'>// Passbookを手動/自動で更新したとき
</span><span class='line'>app.get('/sendParam/v1/passes/:passTypeID/:serialNumber', pass.updateData);
</span><span class='line'>// ログ用
</span><span class='line'>app.post('/sendParam/v1/log', pass.logData);
</span><span class='line'>// Passbookを削除したとき
</span><span class='line'>app.delete('/sendParam/v1/devices/:deviceLibraryID/registrations/:passTypeID/:serialNumber', pass.deleteData);</span></code></pre></td></tr></table></div></figure>


<p>大体Passbookのことはわかってきたのですが、まだまだ躓くところも多く勉強です。本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-passbookではまったこと]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/06/node-passbook/"/>
    <updated>2014-01-06T22:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/06/node-passbook</id>
    <content type="html"><![CDATA[<h3>PassbookのPassを動的生成するためにnode-passbookを使ってみました</h3>

<p>皆様、あけましておめでとうございます。2014年1回目のブログ更新です。<br/>
今回は<strong>node-passbookではまったこと</strong>について紹介したいと思います。通常、はまらないことかもしれないのですが、筆者は2日半くらい悩みました。</p>

<p>node-passbookは<a href="https://github.com/assaf/node-passbook">Github</a>上で公開されています。</p>

<!--more-->


<h4>node-passbookの設定</h4>

<p>今回は、nodeのWebフレームワークであるExpressを使います。Expressの始め方については<a href="http://gihyo.jp/dev/serial/01/nodejs/0003">gihyo.jsさんのページ</a>を参考にしてください。Expressの準備が整っている前提で説明を始めたいと思います。</p>

<p>まずはnode-passbookモジュールをインストールしましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install passbook</span></code></pre></td></tr></table></div></figure>


<p>次に、app.jsを編集しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var express = require('express');
</span><span class='line'>var routes = require('./routes');
</span><span class='line'>var user = require('./routes/user');
</span><span class='line'>// passbook発行処理を書いたpass.jsをrequire
</span><span class='line'>var pass = require('./routes/pass');
</span><span class='line'>
</span><span class='line'>&lt;省略&gt;
</span><span class='line'>
</span><span class='line'>app.get('/', routes.index);
</span><span class='line'>app.get('/users', user.list);
</span><span class='line'>// passbookのpassをダウンロードするときのget
</span><span class='line'>app.get('/download', pass.download);
</span><span class='line'>// passbookのpassを作成するときのget
</span><span class='line'>app.get('/create', pass.create);
</span><span class='line'>
</span><span class='line'>&lt;省略&gt;
</span></code></pre></td></tr></table></div></figure>


<p>では、passbook発行処理を書いたpass.jsをroutes配下に作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var fs = require('fs');
</span><span class='line'>var path = require('path');
</span><span class='line'>var createTemplate = require("passbook");
</span><span class='line'>
</span><span class='line'>exports.create = function(req, res) {
</span><span class='line'>  // Passbook作成
</span><span class='line'>  var template = createTemplate('eventTicket', {
</span><span class='line'>      'passTypeIdentifier': 'pass.****.****.****',
</span><span class='line'>      'teamIdentifier': '***********',
</span><span class='line'>      'organizationName': 'Passbookテスト'
</span><span class='line'>  });
</span><span class='line'>  template.keys('./public/keys', 'test12345');
</span><span class='line'>  var passbook = template.createPass({
</span><span class='line'>      serialNumber: 'abcdefc',
</span><span class='line'>      description: 'Passbookテスト用のチケットです。',
</span><span class='line'>      logoText: '参加チケット',
</span><span class='line'>      foregroundColor: 'rgb(255, 255, 255)',
</span><span class='line'>      backgroundColor: 'rgb(60, 65, 76)'
</span><span class='line'>  });
</span><span class='line'>  passbook.fields.webServiceURL = "https://example.com/passes";
</span><span class='line'>  passbook.fields.authenticationToken = "vxwxd7J8AlNNFPS8k0a0FfUFtq0ewzFdc";
</span><span class='line'>  passbook.fields.relevantDate = "2014-01-25T17:00+09:00";
</span><span class='line'>  passbook.fields.barcode = {
</span><span class='line'>      message: "http://google.com",
</span><span class='line'>      format: "PKBarcodeFormatQR",
</span><span class='line'>      messageEncoding: "iso-8859-1",
</span><span class='line'>      altText: "ユーザID"
</span><span class='line'>  };
</span><span class='line'>  passbook.primaryFields.add([
</span><span class='line'>      {
</span><span class='line'>          "key" : "event",
</span><span class='line'>          "label" : "イベント",
</span><span class='line'>          "value" : "Passbookテスト"
</span><span class='line'>      }
</span><span class='line'>  ]);
</span><span class='line'>  passbook.secondaryFields.add([
</span><span class='line'>      {
</span><span class='line'>          "key" : "loc",
</span><span class='line'>          "label" : "場所",
</span><span class='line'>          "value" : "東京近辺"
</span><span class='line'>      }
</span><span class='line'>  ]);
</span><span class='line'>  passbook.backFields.add([
</span><span class='line'>      {
</span><span class='line'>          "key" : "message",
</span><span class='line'>          "label" : "メッセージ",
</span><span class='line'>          "value" : "Passbook盛り上げていきましょう！"
</span><span class='line'>      }
</span><span class='line'>  ]);
</span><span class='line'>  passbook.loadImagesFrom("./public/images");
</span><span class='line'>
</span><span class='line'>  var pkpassFile = fs.createWriteStream("mypass.pkpass");
</span><span class='line'>  passbook.on("error", function(error) {
</span><span class='line'>      console.error(error);
</span><span class='line'>      process.exit(1);
</span><span class='line'>  });
</span><span class='line'>  passbook.pipe(pkpassFile);
</span><span class='line'>          
</span><span class='line'>  res.end();
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>exports.download = function(req, res){
</span><span class='line'>
</span><span class='line'>  var file = './mypass.pkpass',
</span><span class='line'>      filestream = fs.createReadStream(file),
</span><span class='line'>      filename = path.basename(file),
</span><span class='line'>      mimetype = 'application/vnd.apple.pkpass';
</span><span class='line'>  res.setHeader('Content-disposition', 'attachment; filename=' + filename);
</span><span class='line'>  res.setHeader('Content-type', mimetype); 
</span><span class='line'>  filestream.on('data', function(chunk) {
</span><span class='line'>      res.write(chunk);
</span><span class='line'>  });
</span><span class='line'>  filestream.on('end', function() {
</span><span class='line'>      res.end();
</span><span class='line'>  });
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>さて、これでソースの準備は完了です。<br/>
次の章では、筆者がはまった点について具体的に説明します。</p>

<h4>証明書ではまりました</h4>

<p>筆者は上記のソースを書き終わった時点で完了だと思ったのですが、iPhoneから落としてもうまくいきませんでした。<br/>
うまくいかなかったときの現象は下記です。<br/>
iOS6 ⇒ Pass自体は表示されるものの、追加ボタンを押しても追加されない<br/>
iOS7 ⇒ Pass自体表示されない</p>

<p>また、XcodeのOrganizerのコンソールでログを見たところ、<strong>Signature is missing</strong>と表示されてしまいました。<br/>
悩んだ果てにnode-inspectorでデバッグして1つ1つ処理を確認したところ、<strong>node_modules/passbook/lib/pass.js</strong>の342〜350行目を見て気づきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> function signManifest(template, manifest, callback) {
</span><span class='line'>   var identifier = template.passTypeIdentifier().replace(/^pass./, "");
</span><span class='line'>   
</span><span class='line'>   var args = [
</span><span class='line'>      "smime",
</span><span class='line'>      "-sign", "-binary",
</span><span class='line'>      "-signer",    Path.resolve(template.keysPath, identifier + ".pem"),
</span><span class='line'>      "-certfile",  Path.resolve(template.keysPath, "wwdr.pem"),
</span><span class='line'>      "-passin",    "pass:" + template.password
</span><span class='line'>  ];
</span><span class='line'>
</span><span class='line'>  &lt;省略&gt;</span></code></pre></td></tr></table></div></figure>


<p>そう、pemファイルの名前が間違っていたのです。pemファイルの名前は<strong>passTypeIdentifier</strong>に設定する文字列から<strong>pass.</strong>を削除したものにしなくてはなりませんでした。</p>

<p>やっぱりデバッグは大切ですね。</p>

<p>参考ページ:<br/>
<a href="http://blog.techfirm.co.jp/2012/10/23/node-js%E3%81%A7passbook%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B1/">node.jsでPassbookサーバをつくってみる</a><br/>
<a href="http://kataok.hatenablog.com/entry/2012/10/20/102125">Node.jsでPassbookを発行してみる</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passbookを使ってみよう！(超基礎)]]></title>
    <link href="http://grandbig.github.io/blog/2013/12/25/createpassbookbasic/"/>
    <updated>2013-12-25T23:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/12/25/createpassbookbasic</id>
    <content type="html"><![CDATA[<h3>Passbook 超入門</h3>

<p>今日はPassbookについて書いてみようと思います。この記事を書こうと思ったきっかけはネットでPassbookのPassの作成方法を探してみたところ、『いまいちわかりにくい&hellip;。画像で手順を見たい！！』という思いが生まれたからです。今後、日本でもPassbookの利用を盛り上げていきたいという意向もあります。だって触ってみると案外面白いんですから。<br/>
では、早速説明していきましょう。</p>

<!--more-->


<h4>キーチェーンアクセスに証明書を登録しよう</h4>

<p>Apple Developerプログラムに登録されている前提で説明します。<br/>
まず、<strong>iOS Pass Type IDs</strong>を新規作成します。右上の『＋』ボタンをクリックしましょう。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert1.png" alt="iOS Pass Type IDsを新規作成" /><br/>
次に、<strong>Pass Type ID Description</strong>と<strong>Identifier</strong>を入力してContinueを選択して先に進みましょう。<br/>
※ Identifierは必ず先頭に<strong>pass.</strong>がきます。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert2.png" alt="任意の文字列を入力" /><br/>
そして、Registerをクリックすれば、<strong>iOS Pass Type IDs</strong>を新たに作成されたことを確認できます。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert3.png" alt="Registerをクリック" /><br/>
<img src="http://grandbig.github.io/images/create_passbook_cert4.png" alt="iOS Pass Type IDsを新規作成できました" /><br/>
ここで終了ではありません。ここから<strong>iOS Pass Type IDs</strong>と<strong>certSigningRequestファイル</strong>をひもづける作業が必要となります。<br/>
先ほど作成した<strong>iOS Pass Type IDs</strong>を選択してEditをクリックしましょう。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert5.png" alt="iOS Pass Type IDsを編集" /><br/>
編集画面でCreate Certificate&hellip;を選択して、アップロードするファイルの説明書きを読んでContinueを選択したら、Choose File&hellip;をクリックして<strong>certSigningRequestファイル</strong>をアップロードしましょう！！<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert6.png" alt="Create Certificateを選択" /><br/>
<img src="http://grandbig.github.io/images/create_passbook_cert7.png" alt="Continueでそのまま進む" /><br/>
<img src="http://grandbig.github.io/images/create_passbook_cert8.png" alt="Choose Fileを選択" /><br/>
これで証明書が作成できました。Downloadしてキーチェーンアクセスに登録しましょう！(Chromeであればブラウザの下部にダウンロードファイルが表示されるのでダブルクリックしましょう)<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert9.png" alt="証明書をDownloadしましょう" /><br/>
<img src="http://grandbig.github.io/images/create_passbook_cert10.png" alt="キーチェーンアクセスに登録完了" /></p>

<h4>pass.jsonを編集しよう</h4>

<p>証明書の準備が整ったら実際にPassbookのPassの中身を作成していきます。0から作るのはたいへんですし、いろいろとApple側で決められている制限に従う必要があるので、<a href="https://developer.apple.com/downloads/index.action?name=Passbook">Apple公式ダウンロードページ</a>からサンプル(Passbook Materials)を落としてきましょう。<br/>
dmgファイルを解凍すると中身のファイル構成は下記のようになっています。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert11.png" alt="Passbook Materialsの中身" /></p>

<p>Passesの配下には<strong>.pkpassファイル</strong>と<strong>.rawフォルダ</strong>があります。PassbookのPassとして扱われるファイルが<strong>.pkpassファイル</strong>です。<strong>.rawフォルダ</strong>はPassを構成する素材が入っています。実は<strong>.pkpassファイル</strong>は<strong>.rawフォルダ</strong>を圧縮したものになっています。</p>

<p>また、ファイルやフォルダの種類としてBoardingPass, Coupon, Event, Generic, StoreCardの5種類がありますが、これはPassbookの種類になります。これはレイアウトが異なるので最適なものを利用するようにしましょう。</p>

<p>さて、ここからは実際にサンプルを編集することでオリジナルPassを作成してみたいと思います。<br/>
先ほど解答したフォルダからEvent.rawフォルダを任意の場所にコピーしましょう。<br/>
Event.rawフォルダ内のpass.jsonを編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "formatVersion" : 1,
</span><span class='line'>  "passTypeIdentifier" : "pass.com.apple.sample-event",
</span><span class='line'>  "serialNumber" : "nmyuxofgnb",
</span><span class='line'>  "teamIdentifier" : "A1B2C3D4E5",</span></code></pre></td></tr></table></div></figure>


<p>必ず編集する必要があるのは<strong>passTypeIdentifier</strong>と<strong>teamIdentifier</strong>です。<br/>
<strong>passTypeIdentifier</strong>はキーチェーンアクセスから表示されているPass Type IDを使いましょう。(Apple Developerサイトからも確認できます。) また、<strong>teamIdentifier</strong>はキーチェーンアクセスでPassbookの証明書を右クリックして『情報を見る』を選択してください。その中の組織に表示されている英数字を使います。<br/>
<img src="http://grandbig.github.io/images/create_passbook_cert12.png" alt="passTypeIdentifierの確認" /><br/>
<img src="http://grandbig.github.io/images/create_passbook_cert13.png" alt="teamIdentifierの確認" /><br/>
これを先ほどのpass.json内に記載しましょう。</p>

<h4>Passを作成しよう</h4>

<p>さて、Passを作成するための素材は揃いました。最後に<strong>.pkpassファイル</strong>を作成するためのsignpassファイルを書き出します。<br/>
手順としては先ほどダウンロードしたdmgファイル内にあったsignpassフォルダ内のsignpass.xcodeprojファイルをXcodeで起動します。これをBuildしてください。デフォルト設定のままであれば『/Users/＜ユーザー名＞/Library/Developer/Xcode/DerivedData』配下にsignpass&hellip;..(signpassの後はよくわからない文字列)が作成されています。もし、デフォルト設定を変更したせいか、見つからない場合はXcode > Preferences&hellip; > Locations > DerivedDataで設定されているパスを確認して下さい。</p>

<p>該当フォルダを見ると、Build/Products/Debug配下にsignpassファイルが見つかるはずです。
ここまで来たら後は下記コマンドをターミナルで叩くだけ！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./signpass -p ＜パッケージするパスファイルのパス＞</span></code></pre></td></tr></table></div></figure>


<p>パッケージするパスファイルのパスとは例えば、signpassファイルとEvent.rawフォルダが同じ階層にある場合は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./signpass -p ./Event.raw</span></code></pre></td></tr></table></div></figure>


<p>となります。
これで<strong>Event.pkpassファイル</strong>が作成されているはずです。これにてPass作成完了です。</p>

<h4>PassをWeb配布しよう</h4>

<p>最後にWebでPassを配布する方法について解説します。<br/>
とりあえず、ローカルPCからPassを取得してみたいと思います。これを実現するにあたって、『システム環境設定の共有にWeb共有がない』なんて方がいるかもしれないので、それは<a href="http://d.hatena.ne.jp/sakura_bird1/20120804/1344055999">こちら</a>を参考に設定してください。<br/>
pkpassファイルを取得するためにはhttpd.confにpkpassファイルの行を書き足す必要があります。<br/>
※Apacheを使っている場合の説明です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType application/vnd.apple.pkpass    pkpass</span></code></pre></td></tr></table></div></figure>


<p>AddTypeが書かれている<IfModule>タグ内に記載してください。<br/>
apacheを再起動することをお忘れなく。<br/>
これで晴れてPassをWebから取ってくることができます！</p>

<p><img src="http://grandbig.github.io/images/create_passbook_sample.png" alt="Passのサンプル" /></p>

<p>細かいPassの編集については割愛しましたが、試してみていろいろとわかってきたらブログにも載せていきます。</p>

<p>では本日はこの辺で！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unityが無料になっていました！]]></title>
    <link href="http://grandbig.github.io/blog/2013/12/23/unity-is-free/"/>
    <updated>2013-12-23T22:49:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/12/23/unity-is-free</id>
    <content type="html"><![CDATA[<h3>気軽にUnityが使えるようになりました</h3>

<p>さて、久々にブログを書きます。ここ最近はハッカソンへの参加, 準備などで全然書けていませんでした。書きたいネタはいくつかあったので少しずつブログを再開しようと思います。<br/>
本日はUnityで遊んでみた話を書きます。私も以前からUnityの存在は知っていたものの、実機で動かすのにお金が必要ということで触ってはいませんでした。しかし、今は<strong>無料</strong>なんですね！！<br/>
その辺含めて、私がUnityを触ろうと思ったきっかけから書きます。</p>

<!--more-->


<p>2013/12/12にドラゴンクエストⅧがSQUARE ENIXからiPhoneアプリとしてリリースされたことは記憶に新しいと思います。PS2で発売された当時は大学受験まっただ中で遊んでいる余裕がなかったことが思い出されます。そんな懐かしさから早速インストールしてみたところ、びっくり！！なんとUnityのロゴが映し出されるではありませんか！！</p>

<p><img src="http://grandbig.github.io/images/Unity1.PNG" alt="DQ8を起動するとこの画面が！！" /></p>

<p>かの有名なゲームもUnityを使っているなんて！やはり、法人はお金があるから余裕なのかな？なんて思いながら、ふとUnityをググって見ました。すると<a href="http://japan.unity3d.com/blog/press/?p=408&amp;preview=true">Unity公式ページ</a>で<strong>iOS と Android を含む個人・小規模開発者向けのモバイル向け機能を完全無償化</strong>という発表が記載されていました。(2013/5/21時点での話なので、だいぶ前から周知の話なんだろうな〜)</p>

<p>これは企業の気が変わる前にインストールするっきゃない！と即効でインストールしてみました。興味がある方は<a href="http://japan.unity3d.com/unity/download/">公式ダウンロードページ</a>にアクセスしてみてください。(最新版は4.3.2)</p>

<p>これから無料で2D/3Dゲームが開発しやすくなるということでワクワクしてきました。ってことでまずは手始めに<strong>Unity 入門</strong>なんてワードで検索し、<a href="http://image.itmedia.co.jp/l/im/ait/articles/1204/04/l_r1314.gif">このページ</a>にたどり着きました。<br/>
で作ったのが下記アプリ。<br/>
<img src="http://grandbig.github.io/images/Unity2.PNG" alt="Unity入門を読んで作成したアプリ" /><br/>
これはiPhoneの傾きを検知して表示されているキューブを角度を変えて見ることができるという単純なものです。入門記事を読んで頂ければわかるのですが、コードはJavaScriptで少し書いただけです。(あとは基本的にドラッグ&amp;ドロップ)</p>

<p>今はまだ、どこに何があるのかわからないような状態ですが、使いこなすことができれば非常に簡単にゲームを作ることができそうです。今後、少しずつ触ってみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView内でheaderを固定して滑らかなスクロールを実現しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/12/06/header-fixed/"/>
    <updated>2013-12-06T23:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/12/06/header-fixed</id>
    <content type="html"><![CDATA[<h3>header固定をしたスクロールは案外難しい！！</h3>

<p>本日はUIWebViewを全面に貼り付けた上で、ヘッダーを固定して滑らかなスクロールを実現する方法について書きたいと思います。<br/>
もし、ヘッダーをネイティブで作成して、中身をWebで作成すれば簡単に実現できます。しかし、ネイティブとWebのハイブリットアプリを目指すとAndroidへの対応が手間となるため一長一短な面があります。今回はあえて全面UIWebViewに拘りたいと思います。</p>

<!--more-->


<h4>position: fixedだとうまくいかない！？</h4>

<p>まず、Webでヘッダーを固定することを考えたときに真っ先に思い浮かぶものは<strong>position: fixed</strong>を利用することだと思います。</p>

<p>サンプルHTML</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type" /&gt;
</span><span class='line'>      &lt;meta content="width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0" name="viewport" /&gt;
</span><span class='line'>      &lt;link href="./main.css" media="all" rel="stylesheet" type="text/css" /&gt;
</span><span class='line'>      &lt;title&gt;サンプル&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;div id="header"&gt;ヘッダー&lt;/div&gt;
</span><span class='line'>      &lt;div id="mainContents"&gt;
</span><span class='line'>          &lt;div id="main"&gt;
</span><span class='line'>              contents
</span><span class='line'>              &lt;br&gt;
</span><span class='line'>              contents
</span><span class='line'>              &lt;br&gt;
</span><span class='line'>              ...
</span><span class='line'>              contents
</span><span class='line'>              &lt;br&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>サンプルCSS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html, body {
</span><span class='line'>  padding: 0;
</span><span class='line'>  margin: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#header {
</span><span class='line'>  position: fixed;
</span><span class='line'>  top: 0;
</span><span class='line'>  left: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 64px;
</span><span class='line'>  z-index: 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#mainContents {
</span><span class='line'>  position: relative;
</span><span class='line'>  top: 64px;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>  -webkit-overflow-scrolling: touch;
</span><span class='line'>  z-index: 1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>確かにこの設定であればヘッダーを固定して中身を滑らかにスクロールすることが可能になります。そして、iPhoneのSafariからその画面を見るのであればさして違和感はないでしょう。しかし、これをUIWebView上で見ると画面のバウンドを止められないことに気がつきます。これは結構な違和感です。<br/>
このバウンドを以下のようにネイティブソース側から止めることを考えました。</p>

<p>ネイティブソース(UIWebViewの設定部分)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  uiWebView.delegate = self;
</span><span class='line'>  // バウンドしないように設定
</span><span class='line'>  [[(UIScrollView *)[uiWebView subviews] objectAtIndex:0] setBounces:NO];
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>しかし、これだとCSSで設定した<strong>-webkit-overflow-scrolling: touch</strong>の効果がなくなってしまいます。なので別の方法を考えました。</p>

<h4>position: absoluteを使う！！</h4>

<p>position: fixed;は使いません。position: absolute;を使います。以下、踏まえて書き直します。</p>

<p>サンプルHTML</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type" /&gt;
</span><span class='line'>      &lt;meta content="width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0" name="viewport" /&gt;
</span><span class='line'>      &lt;link href="./main.css" media="all" rel="stylesheet" type="text/css" /&gt;
</span><span class='line'>      &lt;title&gt;サンプル&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>      &lt;div id="wrapper"&gt;
</span><span class='line'>          &lt;div id="header"&gt;ヘッダー&lt;/div&gt;
</span><span class='line'>          &lt;div id="mainContents"&gt;
</span><span class='line'>              &lt;div id="main"&gt;
</span><span class='line'>                  contents
</span><span class='line'>                  &lt;br&gt;
</span><span class='line'>                  contents
</span><span class='line'>                  &lt;br&gt;
</span><span class='line'>                  ...
</span><span class='line'>                  contents
</span><span class='line'>                  &lt;br&gt;
</span><span class='line'>              &lt;/div&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>サンプルCSS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html, body {
</span><span class='line'>  padding: 0;
</span><span class='line'>  margin: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>  overflow: hidden;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#wrapper {
</span><span class='line'>  position: relative;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#header {
</span><span class='line'>  position: absolute;
</span><span class='line'>  top: 0;
</span><span class='line'>  left: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 64px;
</span><span class='line'>  z-index: 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#mainContents {
</span><span class='line'>  position: relative;
</span><span class='line'>  top: 64px;
</span><span class='line'>  width: 100%;
</span><span class='line'>  height: 100%;
</span><span class='line'>  overflow: auto;
</span><span class='line'>  -webkit-overflow-scrolling: touch;
</span><span class='line'>  z-index: 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#main {
</span><span class='line'>  position: relative;
</span><span class='line'>  padding: 64px 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これでほとんどの場合、バウンドしなくなります。しかも、滑らかなスクロールを保つこともできます。<br/>
ただし、ヘッダーをタッチムーブすると&hellip;バウンドしてしまいます！！</p>

<p>う〜ん。これは果たして無理なのか！？と思ったところで思いつきました。<strong>touchイベントを無効化</strong>しましょう！！<br/>
jQueryを使っている前提で下記を紹介します。</p>

<p>サンプルJS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>jQuery( function($) {
</span><span class='line'>  
</span><span class='line'>  $("#header").bind("touchstart", function() {
</span><span class='line'>      event.preventDefault();
</span><span class='line'>  });
</span><span class='line'>  
</span><span class='line'>  $("#header").bind("touchmove", function() {
</span><span class='line'>      event.preventDefault();
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  $("#header").bind("touchend", function() {
</span><span class='line'>      event.preventDefault();
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>これでバウンドせずに滑らかなスクロールを保つことができました。</p>

<p>と思ったのですが、画面の両端を触っているとバウンドが発生してしまいます&hellip;。要調査ですね&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/30/fmdatabase/"/>
    <updated>2013-11-30T19:22:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/30/fmdatabase</id>
    <content type="html"><![CDATA[<h3>iPhoneのローカルストレージを開発で活用しよう！</h3>

<p>本日はiPhoneのローカルストレージ活用方法について簡単に紹介したいと思います。<br/>
iPhoneアプリを開発するにあたって、データ保管のためにDBサーバを活用したくなることがあると思います。しかし、個人で開発するにはレンタルサーバを借りるだけでも一苦労&hellip;。毎月お金もかかる&hellip;。そもそも保存したいデータ量も大きくないし&hellip;。なんてことがあるでしょう。そんなときは迷わず、iPhoneのローカルストレージを使いましょう！！</p>

<!--more-->


<h4>FMDBを使おう！！</h4>

<p>iPhoneローカルストレージを使うなら、非常に便利な<strong>FMDB</strong>をぜひダウンロードしましょう。<br/>
FMDBはMITライセンスということもあり、商用でも簡単に導入できます。</p>

<p>では早速、使い方を説明しましょう。<br/>
1: GitHubより<a href="https://github.com/ccgus/fmdb">FMDB</a>をダウンロードします。<br/>
2: fmdb-master/src/ 配下のファイルをコピーしてFMDBを利用したいXcodeのプロジェクトフォルダ内に置く<br/>
※ただし、fmdb.mファイルは不要<br/>
<img src="http://grandbig.github.io/images/fmdatabase1.png" alt="fmdb.m以外を利用する" /><br/>
<img src="http://grandbig.github.io/images/fmdatabase2.png" alt="fmdb.m以外をXcodeプロジェクトに追加" /><br/>
3: libsqlite3.0.dylibフレームワークをXcodeプロジェクトに追加<br/>
※これがないとエラーが出るので注意<br/>
<img src="http://grandbig.github.io/images/fmdatabase3.png" alt="libsqlite3.0.dylibフレームワークの追加" /><br/>
4: FMDBを利用するファイルで<strong>FMDatabase.h</strong>をimportする<br/>
<img src="http://grandbig.github.io/images/fmdatabase4.png" alt="FMDatabase.hをimportする" /></p>

<p>これでFMDBを利用することができます。</p>

<h4>FMDBを使った具体的な書き方</h4>

<p>次にFMDBを使った具体的な書き方について説明したいと思います。</p>

<p><strong>DB接続の書き方</strong><br/>
DB接続方法は下記だけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];</span></code></pre></td></tr></table></div></figure>


<p><strong>DBの開閉</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBを開く場合
</span><span class='line'>[db open];
</span><span class='line'>//DBを閉じる場合
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p>上記がDBを扱う上での基本になります。</p>

<p><strong>tableの作成</strong><br/>
ここでは上記の基本を含めた一連の流れを書きます。<br/>
下記ではTEXT型のuid, createtimeを持ったusersという名前のtableを作成しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//tableの作成
</span><span class='line'>NSString *sql = @"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY,uid TEXT,createtime TEXT);";
</span><span class='line'>[db open];
</span><span class='line'>//クエリの実行
</span><span class='line'>[db executeUpdate:sql];
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p>以下、説明することは上記で作成したtableを利用しています。</p>

<p><strong>select文の実行</strong><br/>
下記ではuidを取得する例を書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//select文の作成
</span><span class='line'>NSString *select = [[NSString alloc] initWithFormat:@"SELECT * from users"];
</span><span class='line'>[db open];
</span><span class='line'>FMResultSet *rs = [db executeQuery:select];
</span><span class='line'>NSString *uid;
</span><span class='line'>while([rs next]) {
</span><span class='line'>  uid = [rs stringForColumnIndex:1];
</span><span class='line'>}
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p><strong>insert文の実行</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//insert文の作成
</span><span class='line'>NSString *createtime = @"20131130011728462";
</span><span class='line'>NSString *uid = @"user01";
</span><span class='line'>NSString *insert = [[NSString alloc] initWithFormat:@"INSERT INTO users(uid, createtime) VALUES(%@, %@)", uid, createtime];
</span><span class='line'>[db open];
</span><span class='line'>[db executeUpdate:insert];
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p><strong>update文の実行</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//update文の作成
</span><span class='line'>NSString *createtime = @"20131201054830467";
</span><span class='line'>NSString *uid = @"user02";
</span><span class='line'>//DBにレコードが１つ追加されていて、そのid=1のレコードを更新しています
</span><span class='line'>NSString *update = [[NSString alloc] initWithFormat:@"UPDATE users SET uid='%@', createtime='%@' where id=1", uid, createtime];
</span><span class='line'>[db open];
</span><span class='line'>[db executeUpdate:update];
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p><strong>delete文の実行</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//delete文の作成
</span><span class='line'>NSString *delete = [[NSString alloc] initWithFormat:@"DELETE from users where id=1"];
</span><span class='line'>[db open];
</span><span class='line'>[db executeUpdate:delete, [NSNumber numberWithInteger:n]];
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<p><strong>count文の実行</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//DBの呼び出し
</span><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>NSString *dir = [paths objectAtIndex:0];
</span><span class='line'>FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:@"test.db"]];
</span><span class='line'>
</span><span class='line'>//count文の作成
</span><span class='line'>NSString *uid = @"user02";
</span><span class='line'>NSString *cntquery = [[NSString alloc] initWithFormat:@"select count(*) as count from users where uid=%d", uid];
</span><span class='line'>[db open];
</span><span class='line'>FMResultSet *cntrs = [db executeQuery:cntquery];
</span><span class='line'>if([cntrs next]) {
</span><span class='line'>  NSString *count = [cntrs intForColumn:@"count"];
</span><span class='line'>}
</span><span class='line'>[db close];</span></code></pre></td></tr></table></div></figure>


<h4>まとめ</h4>

<p>たったこれだけのことを知っておくだけでiPhoneのローカルストレージを使いこなすことができます。ぜひ使ってみてください！(筆者もめちゃくちゃ使っています。)</p>

<p>参考:<br/>
<a href="http://akabeko.me/blog/2011/11/ios-sqlite-fmdb/">iOS で SQLite – FMDB の使い方</a><br/>
<a href="http://obc-fight.blogspot.jp/2012/09/fmdb-basic-how-to-use.html">Objective-Cと戦うブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでアフィリエイト！]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/21/octopress-affiliate/"/>
    <updated>2013-11-21T22:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/21/octopress-affiliate</id>
    <content type="html"><![CDATA[<h3>Octopressでアフィリエイトを始めよう！！</h3>

<p>さて、本日は久々にOctopressのことについて紹介させて頂きます。<br/>
前々からアフィリエイトはやろうと決めていたのですが、億劫で進んでいませんでした。<br/>
そして、いざやってみたところ、<br/>
<strong>Octopressへの載せ方がわからない！！</strong><br/>
<strong>ネットで調べてもよくわからない！！！</strong><br/>
なんてことがあったのでメモがてら書こうと思った次第です。</p>

<!--more-->


<h4>アフィリエイト広告を表示しよう</h4>

<p>筆者はとりあえず、<strong>iTunesアフィリエイト</strong>と<strong>Google Adsense</strong>に登録してみました。iTunesアフィリエイトは1営業日で審査が通りました。Google Adsenseは1次審査まで1営業日, 2次審査は広告をブログに貼ってから1営業日で通過しました。<br/>
まず、Google Adsenseですが、広告を作成すると下記のように広告を表示するためのコードを取得することができます。<br/>
<img src="http://grandbig.github.io/images/octopress_affiliate1.png" alt="Google Adsenseで広告コードを取得" /></p>

<p>これをどこに書き込むかで表示できる場所が異なります。<br/>
1: サイドに表示したい場合<br/>
2: ブログの途中に表示したい場合</p>

<p><strong>1: サイドに表示したい場合</strong><br/>
まず、octopress/source/_includes/custom/asides/ 配下にhtmlを作成します。<br/>
筆者はgoogleAdsense.htmlを作成しました。<br/>
次にそのhtmlを編集して、取得したコードをsectionタグ内に書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;!-- 広告１ --&gt;
</span><span class='line'>&lt;ins class="adsbygoogle"style="display:inline-block;width:300px;height:250px"data-ad-client="*******************"data-ad-slot="**********"&gt;&lt;/ins&gt;
</span><span class='line'>&lt;script&gt;
</span><span class='line'>(adsbygoogle = window.adsbygoogle || []).push({});
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>そして、octopress/_config.ymlを編集します。default_asidesの配列内に自作したhtmlを追記する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, custom/asides/googleAdsense.html]
</span></code></pre></td></tr></table></div></figure>


<p>これでOKです。Google Adsenseは2次審査が完了するまで空白が表示されるため、正しくできているかどうかは</p>

<p>rake previewを実行<br/>
ブラウザでプレビュー画面にアクセス<br/>
表示されるであろうサイドの辺りを右クリックしてデバックコンソールを開く<br/>
先ほど書き込んだソースがあることを確認</p>

<p>ここまで確認が取れれば、審査終了後、すぐに表示されます(一応、48時間以内と言われていますが…)。</p>

<p><strong>2:ブログの途中に表示したい場合</strong><br/>
例えば下記のようにブログの途中に広告を表示したい場合はどうすれば良いかというと、</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 広告2 -->


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>ただ単に、取得したコードを表示したいmarkdownファイルに書くだけです。<br/>
ただし、tabが入っている場合はmarkdownの書式として判別されてしまうので注意しましょう。</p>

<p>iTunesアフィリエイトでも下記のようにソースコードを取得することができます。(iTunes Link MakerでiOS Appのリンクを作成)<br/>
<img src="http://grandbig.github.io/images/octopress_affiliate2.png" alt="iTunes Link Makerでリンク作成" /></p>

<p>これをGoogle Adsenseのときと同様に貼り付けるとリンクを貼ることができます。<br/>
(筆者は過去のアプリ紹介ページにリンクを貼ってみました。)</p>

<p>他にもいろんなアフィリエイトを試してみようかな！ということで本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEメジャー ver 1.0.0]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0/"/>
    <updated>2013-11-17T21:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリ『BLEメジャー ver1.0.0』の紹介</h3>

<p>本日(2013/11/17)、iPhoneアプリ<strong>BLEメジャー</strong>をリリースしました。本アプリはiOS7から新たに使用可能となったiBeaconの技術を利用した距離計測アプリです。今回はこのアプリの使い方について説明したいと思います。</p>

<p>興味を持った方はインストールページヘ！！<br/>
<a href="https://itunes.apple.com/jp/app/blemeja/id741597546?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<h4>BLEメジャーの使い方</h4>

<p>早速、本アプリの使い方を説明します。<br/>
まず、iOS7以上の端末(iPhone4S以降, iPad 第3世代以降, iPad mini, iPod touch 第5世代以降)を2台用意してください。2端末間の距離を計測するために必要となります。<br/>
次に各端末で<strong>BLEメジャー</strong>アプリを起動します。すると下記画面が表示されます。</p>

<p><img src="http://grandbig.github.io/images/ble_measure1.PNG" alt="BLE初期画面" /></p>

<p>２台のうちどちらかの端末で<strong>Attract</strong>を、もう片方の端末で<strong>Keep</strong>を選択してください。
<img src="http://grandbig.github.io/images/ble_measure2.png" alt="別々のボタンをタップする" /></p>

<p>それぞれ別の画面が表示されます。<br/>
<img src="http://grandbig.github.io/images/ble_measure3.png" alt="Attract画面とKeep画面が表示されます" /></p>

<p>Attract(左側の)画面では初期起動時のみ位置情報サービスの利用の可否を求められます。これは必ず許可を選択してください。2端末間の計測が始まっていない時は<strong>default</strong>と表示されます。Keep(右側の)画面では特に操作はありません。<br/>
計測が開始されるとAttract側で数値が表示されます。</p>

<p><img src="http://grandbig.github.io/images/ble_measure4.PNG" alt="計測開始" /></p>

<p>※うまく計測できない場合は再度、両端末でアプリを起動し直してください。<br/>
※途中、計測がうまくいかなくなったときは-1.000000[m]と表示されますが、そのまま使って頂くと計測が再開されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBeaconを使ったアプリについて考えてみた]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/09/ios7-ibeacon-app/"/>
    <updated>2013-11-09T23:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/09/ios7-ibeacon-app</id>
    <content type="html"><![CDATA[<h3>iOS7から新たに導入されたiBeaconについて</h3>

<p>本日は多くのディベロッパーが期待を寄せているiBeaconについてブログを書こうと思います。</p>

<p>さて、皆さんは<strong>iBeacon</strong>という言葉をご存知だろうか？IT関連、それもスマートフォン向けサービスを生業としている方であれば既知のことかもしれません。ですが、街中でiPhone片手にLINEを使っている多くのユーザは知らないのではないだろうか？<br/>
今回は次世代サービスとして多くの期待を一身に背負う<strong>iBeacon</strong>に迫ってみた。<br/>
と情熱大陸のオープニング曲が頭から離れないせいか、いつもと違う出だしになってしまいました笑。<br/>
(頭のなかで情熱大陸のオープニング曲を鳴らした状態で冒頭から読んで頂けるとしっくりくるかな&hellip;)</p>

<!--more-->


<h4>iBeaconとは</h4>

<p>iBeaconとはiOS7から実装された領域観測機能です。これまで領域観測するためには主にiPhone端末のGPSやWiFi, ネットワークから算出された位置情報を使うしかありませんでした。この場合の問題点としては下記２点が上げられます。<br/>
・最大精度が5〜10m(高精度を要求すると、それだけ電池消耗が激しい)<br/>
・屋外での使用(それもビルなどの乱立していない開けた場所でないと検知できない)</p>

<p>このことから、これまで領域観測と言ってもかなりアバウトなものであり、利用用途は限定的でありました。<br/>
それがiBeaconの登場により、領域観測のサービスを一歩前進させることとなる可能性があります。</p>

<p>iBeaconはBluetooth Low Energy(BLE)を利用して、<strong>Beacon</strong>の存在を検知することができます。(<strong>Beacon</strong>とはBluetoothを利用して発する信号だと思ってください。)この<strong>Beacon</strong>を検知することで、それを発している機器と自身との距離を計測することができます。</p>

<p>iBeaconはiPhone4S, iPad第3世代以降の端末で利用が可能です。(それ以外はiOS7以上にバージョンアップしたとしても利用できません。)</p>

<h4>iBeaconを用いたサンプルについて</h4>

<p>割りと多くのサイトで解説がされているため、本ブログでは割愛します。<a href="http://dev.classmethod.jp/references/ios7-ibeacon-api/">新たな領域観測サービス iBeacon を使ってみる</a>が初めてiBeaconを使ったプログラミングをしようとされる方にはたいへん参考になると思います。</p>

<p>筆者もこのサイトを参考に<strong>『Beacon検知アプリ』</strong>と<strong>『Beacon送出アプリ』</strong>を開発しました。<br/>
私がサンプルとして作成したアプリは<strong>Beacon検知アプリ</strong>で検知した情報を表示するというものです。<br/>
<img src="http://grandbig.github.io/images/iBeacon_sample.png" alt="iBeaconサンプルアプリ" /></p>

<p>私が何度か計測した感覚では<br/>
・Range Immidiate: 〜0.2mくらい<br/>
・Range Near: 0.2〜2.0mくらい
・Range Far: 2.0m〜<br/>
といった判定でした。<br/>
ただし、数値は非常に不安定で障害物の有無によっても多少異なるようなので『超至近距離』と『近距離』の判別は結構難しいなぁと思いました。</p>

<h4>iBeaconでできることについて</h4>

<p>サンプルアプリを作成して試したものの、１つ壁にぶつかりました。それはiPhoneやiPadでは<strong>Beacon送出デバイスとしては制限がある</strong>ということです。具体的にはBeacon送出するためにはアプリをフォアグラウンドで起動しっぱなしにする必要があります。これはかなり高額なBeacon送出デバイスになってしまいます&hellip;。<br/>
因みに<strong>Beacon検知アプリはバックグラウンドでの検知も可能</strong>です。</p>

<p>よって個人・法人に関係なくiBeaconを利用したアプリを世に出すためには下記２つのいずれかの方法を用いることになりそうです。<br/>
・アプリを起動した状態で何かをする<br/>
・Beacon送出デバイスを別に用意する(iPhone, iPadなどのデバイスはBeacon送出デバイスとしては使わない)</p>

<p>別デバイスの利用を考えたときに<strong>Estimo Beacons</strong>というものを見つけました。現在、販売はされていない？ようですが、非常に楽しみなデバイスです。これからBeacon送出デバイスのスタンダードになるのか注目です。</p>

<p>下記、公式サイトでBeaconサービスのサンプル動画が見れます。<br/>
<a href="http://estimote.com/">estimoホームページ</a></p>

<p>う〜ん。何かiBeaconを使った面白いアプリは作れないだろうか&hellip;。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 広告１ -->


<p><ins class="adsbygoogle"style="display:inline-block;width:300px;height:250px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="4255355169"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[足跡計 ver1.0.0の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/03/footstepmeter-ver1-dot-0-0/"/>
    <updated>2013-11-03T19:19:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/03/footstepmeter-ver1-dot-0-0</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリ『足跡計 ver 1.0.0』の紹介</h3>

<p>さて、筆者が先日リリースしたiPhoneアプリについて紹介したいと思います。実はiPhoneアプリを申請するときに<strong>Support URL</strong>の入力が必須だったのです。ひとまず、筆者のブログのトップページを書いたものの、後々きちんと専用ページを作っておきたいなと思っていました。しかし、思わぬリジェクト内容から使い方の動画を作成してしまったので、何を書くか悩みました。<br/>
そこで、アプリの操作方法ではなく<strong>役立つ使用方法</strong>を記載することでインストールした方に(いや、インストールされていない方にも)作り手の意図をできるだけ伝えようと決めました。<br/>
iPhoneでの位置情報取得に興味のある方はぜひ御覧ください。</p>

<p>興味がある方は下記ボタンからインストールページヘ！</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<h4>足跡計アプリについて</h4>

<p>基本操作は前回のブログにも記載しましたが、<a href="http://www.youtube.com/watch?v=r2nHW-imRv4">You Tubeにアップした動画</a>を見て頂ければ大体わかると思います。<br/>
ここでは本アプリの役立つ使い方について説明したいと思います。</p>

<p>早速、下記をご覧ください。<br/>
<img src="http://grandbig.github.io/images/footStepMeter1.png" alt="精度の選択" /><br/>
これはアプリで足跡計測をするときに精度を選択する画面です。全6種類の中から精度を選択することがあります。位置情報をiPhoneで扱ったことがある方ならすぐにわかると思うのですが、各選択肢はdesireAccuracyの設定を選ぶことと同義です。<br/>
つまり<br/>
・最高精度： kCLLocationAccuracyBestForNavigation<br/>
・高精度： kCLLocationAccuracyBest<br/>
・10m誤差： kCLLocationAccuracyNearestTenMeters<br/>
・100m誤差： kCLLocationAccuracyHundredMeters<br/>
・1km誤差： kCLLocationAccuracyKilometer<br/>
・3km誤差： kCLLocationAccuracyThreeKilometers<br/>
のようになっているということです。</p>

<p>取得する位置情報の精度は電池消耗とのトレードオフになるので、iPhoneアプリで位置情報を取得する場合、どの程度の精度にすべきか悩むと思います。<br/>
ここの判断を適正に行わないと電池の消耗の激しさばかりが目立ってしまい、アプリのレビューで凄まじく叩かれることになるかもしれません&hellip;。<br/>
とは言え、実際にどの精度を選択すればどの程度の情報を取得できるのか、やってみないとわかりませんよね。そんなときに本アプリは非常に役に立つのです。</p>

<p>下記をご覧ください。<br/>
本アプリでは記録している情報の詳細を<strong>計測中であっても</strong>確認することができます。<br/>
<img src="http://grandbig.github.io/images/footStepMeter2.png" alt="情報の詳細を確認" /></p>

<p>これを見れば、計測中に現在、選択している精度がアプリとして適正かどうか確認することができますし、なんなら計測途中で精度を再選定してテストし直すこともできます。</p>

<p>また、記録した情報を解析したいということもあるでしょう。<br/>
例えば、6種類の精度を比較するために山手線を6周して、<strong>取得データ数, 精度のバラつき</strong>をグラフ化したいとかですね。そんなときは本アプリの足跡履歴からデータをメールでPCに送信してしまいましょう！受け取った後、どう解析するかは完全に自由です。<br/>
<img src="http://grandbig.github.io/images/footStepMeter3.png" alt="データをメールで送信" /></p>

<p>因みに、本アプリでは<strong>標準位置情報サービス</strong>を使用しています。大幅変更位置情報サービスは使っていません。(大幅変更位置情報サービスは今回の目的からは外れるためです。あくまでも設定可能な精度の中での比較をしてみたかったので&hellip;)</p>

<h4>今後について</h4>

<p>いかがだったでしょうか？驚くほどシンプルな内容ではなかったでしょうか？(筆者もたくさん書くことを想定していたのですが、案外書くことがなかった&hellip;)</p>

<p>今後は、まだまだ現状のアプリで不便なところも多々あるので、バージョンアップに取り組んでいきたいと思っています。もっと便利にオリジナリティを出していきたいという構想はあります。<br/>
もし、iPhoneでの位置情報の取得精度について悩まれている方がいましたら、本アプリを参考にして頂けると幸いです。なお、本アプリには全く広告はついていない&amp;無料アプリですので、筆者にはお金は一銭も入りません笑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました(2)]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/02/submit-ios-app2/"/>
    <updated>2013-11-02T22:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/02/submit-ios-app2</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリをApp Storeで公開するまでの話</h3>

<p>本日、私が個人的に開発したiPhoneアプリがApp Storeで公開されました。<br/>
それまでの流れと苦労(さほどしなかったが&hellip;)を記憶に留めるために書いておこうかと思います。ついでに私が公開したアプリも紹介します笑<br/>
これ→<a href="https://itunes.apple.com/us/app/zu-ji-ji/id725412788?l=ja&amp;ls=1&amp;mt=8">足跡計</a><br/>
App Storeで検索するときは<strong>足跡計, 足跡</strong>を入力して下さい。下記アイコンのアプリが出てくるはずです。<br/>
<img src="http://grandbig.github.io/images/ashiatokei_icon.png" alt="足跡計のアイコン" /></p>

<!--more-->


<h4>Keynoteを使ったホームアイコン&amp;スプラッシュ画面の作成について補足</h4>

<p>前回、iPhoneアプリを申請したときにブログで書かせて頂いたKeynoteを用いた『ホームアイコン&amp;スプラッシュ画面』について補足しておきたいと思います。<br/>
前回のブログ記事: <a href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/">iPhoneアプリを申請しました</a></p>

<p>1: Keynoteでホームアイコンを作成<br/>
Keynoteでホームアイコンを作成するときは、iPhoenアプリ申請に必要な最大サイズで作りましょう。最大サイズは1024×1024です。その他、必要な画像サイズについては多くのサイトで紹介さえているので、そちらをご覧ください→<a href="http://dev.classmethod.jp/references/ios-device-icon-file-list-2013-9/">アイコンファイル早見表</a></p>

<p>因みにKeynoteで作成した画像は<strong>ToyViewer</strong>を使って画像として抽出しました。多少、サイズがずれてしまったりするので調整が必要ですが、非常に簡単に画像が作成できるのでオススメです。<br/>
2: スプラッシュ画面を作成<br/>
スプラッシュ画面は最大サイズが640×1136となっています。OSをMarvericksにしてからKeynoteを最新バージョンにすることができます。最新(青色)のKeynoteを使うとスライドサイズを非常に簡単に変更することができます。
<img src="http://grandbig.github.io/images/create_icon_by_keynote1.png" alt="Keynoteのスライドサイズを変更" /></p>

<h4>iPhone申請時のステータスについて</h4>

<p>さ〜てここからが本日の本題です。まずはiPhone申請時のステータスについてご紹介します。<br/>
iPhoneアプリを申請するにあたってiTunes Connectで今、自分のアプリがどんな状態にあるのか確認することができます。それを見て、ウキウキワクワクするわけです。<br/>
いろいろとあるようですが、私が実際に体験したステータスについて紹介します。<br/>
・Waiting For Review: 『これからレビューするんで待ってて下さい。』ということ。この時点で1〜2週間待ちます。(Reject後の再申請では1週間ほど待ちました)  <br/>
・In Review: 『今、レビュー中です』ということ。<br/>
・Rejected: 『審査が通らず、アプリが棄却されました』ということ。最も凹むステータスです。<br/>
・Processing for App Store: 『審査が通りました。』ということ。ただし、この時点ではApp Storeには公開されていません。<br/>
・Ready For Sale: 『App Storeに公開されています。』ということ。</p>

<p>結構、ハマることなのかもしれませんが、<strong>Processing for App Store</strong>にステータスがなった後、すぐには<strong>Ready For Sale</strong>にならないようです。私の場合、数時間経っても変わらなかったのでiTunes Connect > View Details > MetaData and Uploadsを編集しました。すると即座に<strong>Ready For Sale</strong>に変更されました。そして数分後(少なくとも1時間以内)にはApp Storeで公開されました。また、数時間してApp StoreからKeywords検索できるようになりました。</p>

<h4>Rejectについて</h4>

<p>私は今回、申請したアプリで１度リジェクトされました。リジェクト判定されるとその理由が説明されるわけですが、そのときは<br/>
<img src="http://grandbig.github.io/images/iphone_app_reject_contents.png" alt="リジェクト内容" /><br/>
といった内容でした。<br/>
簡単に言うと<strong>アプリの使い方のビデオを作成して、リンクを教えよ！</strong>ってことです。</p>

<p>これは全く予想していなかったリジェクト内容でした。しかし、ネット上では同じリジェクトを受けてる人は結構いるようですね&hellip;。YouTubeなどとにかく見れるところにアップすれば良いようなので、ビデオ作成をすることにしました。</p>

<p>初めはiPhone2台持ちで外出して撮影を実行したのですが、明らかに不審者がられる &amp; 動画がぶれぶれ &amp; iPhoneでの動画はあまりキレイじゃなかった といった理由から断念しました。<br/>
そこで、キャプチャをとって説明書きを入れていく形で動画を撮影しました。そう、動画として撮影する必要はなかったのです。</p>

<p><a href="http://www.youtube.com/watch?v=r2nHW-imRv4">作成した動画はこちらです</a><br/>
慣れない英語で説明を書いているので間違っている部分が多々あると思いますが、ご愛嬌で&hellip;。<br/>
このリンクはiTunes Connect内の該当アプリのReview Notesに書きました。ついでにこういうアプリなんだぞ！と説明を書いておきました。<br/>
今回は上記対応で1週間後にめでたくアプリの申請を通過することができました。</p>

<h4>アプリ申請の総括</h4>

<p>個人で開発して申請したアプリだったので、結構時間がかかるのかなと予想していましたが、法人 or 個人は関係ないようですね。初めにアプリをアップロードした日付が10/13だったので大体3週間程度で申請許可がおりました。(動画の作成を早めていればもう少し早くできたと思います。)
今後はバージョンアップも視野に入れているので、その際にどの程度時間がかかるものなのか調べてみたいと思います。</p>

<p>最後に、今回、私が開発したアプリは実は開発者支援を意識したアプリであって、通常の消費者が使う用途はほとんどありません。簡単に言うと本アプリは『iPhoneで位置情報を使おうという開発者に<strong>精度と電池消耗率との兼ね合いを考えることを支援するツール</strong>』となっています。いざ、位置情報を使おう！と思ったときに参考になればと思います。<br/>
まぁ、App Storeからでは埋もれて探すことなどできないかもしれませんが笑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIDynamicAnimatorを使ったピンボールゲームを開発しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/30/create-pinball-game/"/>
    <updated>2013-10-30T22:44:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/30/create-pinball-game</id>
    <content type="html"><![CDATA[<h3>ネット上でUIDynamicAnimatorを使ったピンボールゲームが大人気！</h3>

<p>先日、iOS7で新たに加わった機能であるUIDynamicAnimatorを使った簡単なアクションゲーム作りについて紹介しました。その後、どんどんこういった物理法則を用いたサンプルがネット上で溢れてくると踏んでいたのですが、まだあまり多くないのが現状です。英語ブログでの紹介はそこそこ増えてきているのですが、如何せん日本語ブログでの扱いは少ないんですよね&hellip;。<br/>
そこで<a href="http://www.codigator.com/tutorials/uikit-dynamics-ios7-tutorial/">英語でTutorialとして紹介されたページ</a>からUIDynamicAnimatorを用いた簡単なゲームを紹介したいと思います。<br/>
今回はピンボールゲームです。メインで扱うものは<br/>
・UICollisionBehavior<br/>
・UIPushBehavior<br/>
の２つです。<br/>
それでは早速説明していきましょう。</p>

<!--more-->


<h4>ソースを書こう！</h4>

<p>新規プロジェクトとしてDynamicPractice1を作ります。<br/>
1: 新規作成時に<strong>Empty Application</strong>を選択<br/>
2: ProjectNameをDinamicPractice1とします。<br/>
3: プロジェクトを右クリックしてNew File&hellip;からUIViewControllerを追加してください。<br/>
4: AppDelegate.mファイルで追加したUIViewControllerをメインビューとして設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// AppDelegate.mファイル
</span><span class='line'>#import "ViewController.h"
</span><span class='line'>...
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class='line'>  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</span><span class='line'>  self.window.backgroundColor = [UIColor whiteColor];
</span><span class='line'>  [self.window makeKeyAndVisible];
</span><span class='line'>  UIViewController *viewCtl = [[ViewController alloc] init];
</span><span class='line'>  self.window.rootViewController = viewCtl;
</span><span class='line'>  
</span><span class='line'>  return YES;</span></code></pre></td></tr></table></div></figure>


<p>さて、上記のように準備ができたら、メインビュー側ソースを書いていきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.hファイル
</span><span class='line'>
</span><span class='line'>@interface ViewController : UIViewController &lt;UICollisionBehaviorDelegate&gt; {
</span><span class='line'>  // iPhoneの世界に物理法則を加えるために必要
</span><span class='line'>  IBOutlet UIDynamicAnimator *animator;
</span><span class='line'>  IBOutlet UIPushBehavior *push;
</span><span class='line'>  IBOutlet UICollisionBehavior *collision;
</span><span class='line'>
</span><span class='line'>  // ピンボールゲームなのでスライダーバーとボールを用意
</span><span class='line'>  // barもballもUIViewだとつまらないのでballは画像にしてみます
</span><span class='line'>  IBOutlet UIView *bar;
</span><span class='line'>  IBOutlet UIImageView *ball;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ヘッダーファイルに必要なものの定義が終わったので、続いてViewController.mファイルを書いていきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.mファイル
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>  [super viewDidLoad];
</span><span class='line'>  // 物理法則を設定
</span><span class='line'>  animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.view];
</span><span class='line'>
</span><span class='line'>  // ボールに画像を設定
</span><span class='line'>  ball = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"sun.png"]];
</span><span class='line'>  [self.view addSubview:ball];
</span><span class='line'>
</span><span class='line'>  // スライダーバーを設定
</span><span class='line'>  bar = [[UIView alloc] initWithFrame:CGRectMake(6, 534, 145, 12)];
</span><span class='line'>  [bar setBackgroundColor:[UIColor blackColor]];
</span><span class='line'>  [self.view addSubview:bar];
</span><span class='line'>
</span><span class='line'>  // 初めにボールが下に落ちていくように設定
</span><span class='line'>  push = [[UIPushBehavior alloc] initWithItems:@[ball] mode:UIPushBehaviorModeInstantaneous];
</span><span class='line'>  [push setPushDirection:CGVectorMake(-0.2, 0.2)];
</span><span class='line'>
</span><span class='line'>  // ボールが衝突を検知するように設定
</span><span class='line'>  collision = [[UICollisionBehavior alloc] initWithItems:@[ball]];
</span><span class='line'>  // スライダーバーを衝突の境界線として設定
</span><span class='line'>  [collision addBoundaryWithIdentifier:@"bar" fromPoint:bar.frame.origin toPoint:CGPointMake(bar.frame.origin.x+bar.frame.size.width, bar.frame.origin.y)];
</span><span class='line'>  // 天井を衝突の境界線として設定
</span><span class='line'>  [collision addBoundaryWithIdentifier:@"top" fromPoint:CGPointMake(0, 0) toPoint:CGPointMake(self.view.frame.size.width ,0 )];
</span><span class='line'>  // 左壁一帯を衝突の境界線として設定
</span><span class='line'>  [collision addBoundaryWithIdentifier:@"left" fromPoint:CGPointZero toPoint:CGPointMake(0, self.view.frame.size.height)];
</span><span class='line'>  // 右壁一帯を衝突の境界線として設定
</span><span class='line'>  [collision addBoundaryWithIdentifier:@"right" fromPoint:CGPointMake(self.view.frame.size.width, 0) toPoint:CGPointMake(self.view.frame.size.width, self.view.frame.size.height)];
</span><span class='line'>
</span><span class='line'>  collision.collisionDelegate = self;
</span><span class='line'>
</span><span class='line'>  [animator addBehavior:push];
</span><span class='line'>  [animator addBehavior:collision];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 衝突したときの処理を書きます
</span><span class='line'>- (void)collisionBehavior:(UICollisionBehavior*)behavior beganContactForItem:(id &lt;UIDynamicItem&gt;)item withBoundaryIdentifier:(id &lt;NSCopying&gt;)identifier atPoint:(CGPoint)p {
</span><span class='line'>  // スライダーバーとボールが衝突したとき
</span><span class='line'>  if ([(NSString*)identifier isEqualToString:@"bar"]) {
</span><span class='line'>      [self-&gt;push setPushDirection:CGVectorMake(0.2, -0.2)];
</span><span class='line'>      [self-&gt;push setActive:YES];
</span><span class='line'>  } else if([(NSString*)identifier isEqualToString:@"top"]) {
</span><span class='line'>      // 天井とボールが衝突したとき
</span><span class='line'>      [self-&gt;push setPushDirection:CGVectorMake(-0.8, 0.6)];
</span><span class='line'>      [self-&gt;push setActive:YES];
</span><span class='line'>  } else if([(NSString*)identifier isEqualToString:@"left"]) {
</span><span class='line'>      // 左壁とボールが衝突したとき
</span><span class='line'>      [self-&gt;push setPushDirection:CGVectorMake(0.4, 0.4)];
</span><span class='line'>      [self-&gt;push setActive:YES];
</span><span class='line'>  } else {
</span><span class='line'>      // 右壁とボールが衝突したとき
</span><span class='line'>      [self-&gt;push setPushDirection:CGVectorMake(-0.4, -0.4)];
</span><span class='line'>      [self-&gt;push setActive:YES];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 以下はスライダーバーを動かす処理です
</span><span class='line'>-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
</span><span class='line'>  [self-&gt;collision removeBoundaryWithIdentifier:@"bar"];
</span><span class='line'>  UITouch *touch = [touches anyObject];
</span><span class='line'>  CGPoint touchPoint = [touch locationInView:self.view];
</span><span class='line'>  CGRect frame = bar.frame;
</span><span class='line'>  [bar setCenter:CGPointMake(touchPoint.x, frame.origin.y + frame.size.height/2)];
</span><span class='line'>  [self-&gt;collision addBoundaryWithIdentifier:@"bar" fromPoint:bar.frame.origin toPoint:CGPointMake(bar.frame.origin.x+bar.frame.size.width, bar.frame.origin.y)];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>さて、ピンボールゲームの完成です。<br/>
実際、UIPushBehaviorではなく、UIGravityBehaviorでも作れると思いますが、<strong>Gravity</strong>ってところから<strong>重力</strong>ってイメージだからUIPushBehaviorの方が自然なのかな〜。と思ったり思わなかったり&hellip;。</p>

<p>筆者はボールをどんどん増やしてゲームの難易度をあげようかと思いましたが、これが難しい。<br/>
物理法則をアプリの世界に作って、その物理法則を受ける世界に入れてあげるアイテムとしてballを追加しているというイメージなんですよね&hellip;。</p>

<p>iOS7で対応する以前から物理法則をアプリに再現しているゲームは多々あったと思います。その中でこのクラスがどういった役割を果たしていくのか個人的に気になるところです。</p>
]]></content>
  </entry>
  
</feed>
