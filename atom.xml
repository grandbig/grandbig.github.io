<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-11-08T15:50:20+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for Androidを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-android/"/>
    <updated>2015-11-08T12:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-android</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-in SDKのAndroidでの使い方について見ていきたいと思います。<br/>
Androidの場合、Google製のため、親和性は元々高いのですが、推奨されているGoogle Sign-in SDKを使うことでより快適なコーディングやUXを提供できるのではと期待しています。</p>

<p>では、早速、使い方を見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。(iOSと同じです。)</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-0.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-1.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-2.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はAndroid用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-3.png" alt="OAuth2.0クライアントISを作成2" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="http://grandbig.github.io/images/google-sign-in-android-6.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for Androidを実装しよう</h4>

<p><a href="https://developers.google.com/identity/sign-in/android/?hl=ja">Googleの公式サイト</a>に書かれていますが、英語が苦手な方向け(+自分のメモ書き)として説明していきたいと思います。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/android/start?hl=ja">Google Sign-In for Androidのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-4.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-5.png" alt="Enable Google services for your app" /></p>

<p>ここで、 <strong>App name</strong> にGoogle Developers Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力した後に、 <strong>Android package name</strong> を入力しましょう。</p>

<p>必要項目の入力が終わったら、Choose and configure servicesボタンを押しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-7.png" alt="Choose and configure servicesボタンを押す" /></p>

<p>結果、画面が遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-8.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方に <strong>SHA1</strong> を入力する項目があるので、これを入力して、 <strong>ENABLE GOOGLE SIGN-IN</strong> ボタンを選択しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-9.png" alt="Configuration Fileを作成しよう" /></p>

<p>因みにSHA1の調べ方は下記の通りです。</p>

<ol>
<li>ターミナルで/Users/{ユーザ名}/.androidの階層に移動</li>
<li><code>keytool -list -v -keystore "/Users/{ユーザ名}/.android/debug.keystore" -alias androiddebugkey -storepass android -keypass android</code>コマンドを入力</li>
<li>出力結果の証明書のフィンガプリント > SHA1の値を取得</li>
</ol>


<p>画面下の <strong>Generate configuration files</strong> ボタンが押せるようになるので、押しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-10.png" alt="Configuration Fileを作成しよう" /></p>

<p>jsonファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-11.png" alt="jsonファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、自身のプロジェクトのappフォルダ配下にダウンロードした<code>google-services.json</code>を配置しましょう。</p>

<p>続いて、<code>build.gradle</code>ファイルの設定にGoogle Play Services Pluginを追加しましょう。<br/>
まずは、<code>build.gradle(Project)</code>の<code>dependencies</code>内に<code>classpath 'com.google.gms:google-services:1.5.0-beta2'</code>を追加<br/>
次に、<code>build.gradle(app)</code>の最上部に<code>apply plugin: 'com.google.gms.google-services'</code>を追加<br/>
そして、<code>build.gradle(app)</code>の<code>dependencies</code>内に<code>compile 'com.google.android.gms:play-services-auth:8.3.0'</code>を追加</p>

<p>これで用意が整いましたので、ソースを書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'><span class="kn">package</span> <span class="o">...</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.design.widget.FloatingActionButton</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.design.widget.Snackbar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.widget.Toolbar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MenuItem</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.Auth</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInAccount</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInOptions</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.auth.api.signin.GoogleSignInResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.ConnectionResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.SignInButton</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.android.gms.common.api.GoogleApiClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span>
</span><span class='line'>        <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">OnConnectionFailedListener</span><span class="o">,</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RC_SIGN_IN</span> <span class="o">=</span> <span class="mi">9001</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">GoogleApiClient</span> <span class="n">mGoogleApiClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Button listenersの設定</span>
</span><span class='line'>      <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Google Sign-Inの設定</span>
</span><span class='line'>      <span class="n">GoogleSignInOptions</span> <span class="n">gso</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GoogleSignInOptions</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">GoogleSignInOptions</span><span class="o">.</span><span class="na">DEFAULT_SIGN_IN</span><span class="o">).</span><span class="na">requestEmail</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mGoogleApiClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GoogleApiClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">enableAutoManage</span><span class="o">(</span><span class="k">this</span> <span class="cm">/* FragmentActivity */</span><span class="o">,</span> <span class="k">this</span> <span class="cm">/* OnConnectionFailedListener */</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">addApi</span><span class="o">(</span><span class="n">Auth</span><span class="o">.</span><span class="na">GOOGLE_SIGN_IN_API</span><span class="o">,</span> <span class="n">gso</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Google Sign-Inボタンの設定</span>
</span><span class='line'>      <span class="n">SignInButton</span> <span class="n">signInButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">SignInButton</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">);</span>
</span><span class='line'>      <span class="n">signInButton</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="n">SignInButton</span><span class="o">.</span><span class="na">SIZE_STANDARD</span><span class="o">);</span>
</span><span class='line'>      <span class="n">signInButton</span><span class="o">.</span><span class="na">setScopes</span><span class="o">(</span><span class="n">gso</span><span class="o">.</span><span class="na">getScopeArray</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-Inした結果を受け取る処理</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">RC_SIGN_IN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">GoogleSignInResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Auth</span><span class="o">.</span><span class="na">GoogleSignInApi</span><span class="o">.</span><span class="na">getSignInResultFromIntent</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>          <span class="n">handleSignInResult</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-Inした結果を扱う処理</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSignInResult</span><span class="o">(</span><span class="n">GoogleSignInResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;handleSignInResult:&quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Signed in successfully, show authenticated UI.</span>
</span><span class='line'>          <span class="n">GoogleSignInAccount</span> <span class="n">acct</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getSignInAccount</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Signed out, show unauthenticated UI.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sign-In処理</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">signIn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">signInIntent</span> <span class="o">=</span> <span class="n">Auth</span><span class="o">.</span><span class="na">GoogleSignInApi</span><span class="o">.</span><span class="na">getSignInIntent</span><span class="o">(</span><span class="n">mGoogleApiClient</span><span class="o">);</span>
</span><span class='line'>      <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">signInIntent</span><span class="o">,</span> <span class="n">RC_SIGN_IN</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_sign_in</span><span class="o">:</span>
</span><span class='line'>              <span class="n">signIn</span><span class="o">();</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてレイアウトの作成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// content_main.xml</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">gms</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">SignInButton</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">id</span><span class="o">=</span><span class="s">&quot;@+id/button_sign_in&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_below</span><span class="o">=</span><span class="s">&quot;@+id/textView&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_alignParentStart</span><span class="o">=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>  <span class="nl">android:</span><span class="n">layout_marginTop</span><span class="o">=</span><span class="s">&quot;100dp&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実装すると下記のような画面遷移ができます。</p>

<p><img src="http://grandbig.github.io/images/google-sign-in-android-12.png" alt="アプリ起動後の画面" /><br/>
<img src="http://grandbig.github.io/images/google-sign-in-android-13.png" alt="アカウントの選択" /></p>

<p>Google Sign-In SDK for Androidを使うことで、UI/UXをiOS側と合わせることもできるので、非常に良いと思います。<br/>
ぜひ使ってみてはいかがでしょうか。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSがアップデートされました！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-update/"/>
    <updated>2015-11-08T01:31:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-update</id>
    <content type="html"><![CDATA[<h3>Google Sign-In SDK for iOSを利用する理由</h3>

<p>本日は再び、Google Sign-In SDK for iOSについてお話したいと思います。<br/>
筆者は業務でも積極的にGoogle Sign-In SDK for iOSを使っています。<br/>
理由は、</p>

<ul>
<li><a href="https://itunes.apple.com/jp/app/google/id284815942?mt=8">Google</a>, <a href="https://itunes.apple.com/jp/app/google+/id447119634?mt=8">Google+</a>アプリを入れているユーザはアカウントを入力しなくてもOAuth認証が可能</li>
<li>クライアント側で手軽にOAuth認証を実装できる</li>
</ul>


<p>といった2つがあります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>前者は特にユーザの手間を省けるので、非常に有用だと考えています。<br/>
例え、1つの端末内で複数のアカウントを使っていても、ユーザが選択できる形でOAuth認証をすることができます。</p>

<p><img src="http://grandbig.github.io/images/google-sign-in-update-1.png" alt="OAuth認証" /></p>

<p>もちろんGoogle, Google+共にインストールされていない端末であったとしても、メールアドレスとパスワードを入力する従来の方法で問題なくOAuth認証を通すことができます。</p>

<p>後者は以前紹介した手順(<a href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/">Google Sign-In SDK for iOSを使ってみよう！</a>を参照のこと)を踏むだけで、簡単に実装することができます。<br/>
OAuth認証で得られるトークン(アクセストークンやIDトークン)は端末ローカルで保存することも多いため、サーバサイドよりもクライアントサイドでOAuth認証を通す方が良い場合もあります。<br/>
あとは、サーバを自身で持てない場合もクライアントサイドで処理が済むので、非常に良いですね。</p>

<h3>Google Sign-In SDK for iOSがアップデートされて、さらに使いやすくなりました！</h3>

<p>上記で説明した通り、非常に実装が簡単でユーザにとっても利益のあるSDKではあるものの、微妙に使いにくい側面も持っていました。<br/>
それは、IDトークンを取得するタイミングが<code>[[GoogleSinIn sharedInstance] signIn];</code>と<code>[[GoogleSignIn sharedInstance] signInSilently];</code>の2つのみだったからです。<br/>
IDトークンはアクセストークンと同じく、有効期限が <strong>発行されてから1時間</strong> と定義されているため、IDトークンを利用する場合は割りと頻繁に更新情報を取得する必要があります。<br/>
しかし、先ほど2つのメソッドはアプリ起動後に <strong>ユーザがログイン済みか否かを判断した上で実行するメソッド</strong> であるため、頻繁に利用するシーンには不向きと言えます。(アプリ初回起動後とそれ以外との判断を自身で定義したフラグなどで管理する必要があるため)</p>

<p>それが先日公開されたv2.4.0から(<a href="https://developers.google.com/identity/sign-in/ios/release">Release Notes</a>を参照のこと)変更が加わりました。<br/>
具体的には、</p>

<ul>
<li><code>- (void) getAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) getTokensWithHandler:</code>が代わりに追加</li>
<li><code>- (void) refreshAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) refreshTokensWithHandler:</code>が代わりに追加</li>
</ul>


<p>の2点です。</p>

<p>これまでアクセストークンを取得するために利用していた<code>getAccessTokenWithHandler</code>ではアクセストークンのみを返却していましたが、<code>getTokenWithHandler</code>では<code>GIDAuthentication</code>オブジェクトごと返却してくれるようになったため、アクセストークンだけでなく、IDトークンも取得することができるようになりました。</p>

<p>また、<code>refreshAccessTokenWithHandler</code>ではアクセストークンのみをリフレッシュするものでしたが、<code>refreshTokenWithHandler</code>ではアクセストークンとIDトークンをリフレッシュしてくれるようになりました。</p>

<p>IDトークンはアクセストークンと同じ1時間だけ有効なトークンなので、自然と更新タイミングはアクセストークンと同じになります。<br/>
アクセストークンのみを使うのであれば、<code>getAccessTokenWithHandler</code>と<code>refreshAccessTokenWithHandler</code>で良かったのですが、IDトークンも使うとなると<code>getTokensWithHandler</code>および<code>refreshTokensWithHandler</code>でないと成り立ちません。</p>

<h3>OAuth認証を通して取得する各種トークンについて</h3>

<p>Google OAuth認証では様々なトークンが飛び交います。ここではそれぞれのトークンの利用用途について少し触れておきたいと思います。</p>

<ul>
<li>one-time code<br/>
これはアクセストークンを取得するための一時的なトークンです。<br/>
今回のSDKとは直接からみませんが、<a href="https://developers.google.com/identity/sign-in/web/server-side-flow?hl=ja">
Google Sign-In for server-side apps</a>に書かれている通りで、サーバサイドでアクセストークンを取得するために利用します。</li>
<li>access-token<br/>
これは各種APIを利用するために必要なトークンです。<br/>
API実行時にヘッダーにこのトークンを渡すことで、認証されたことを伝えることができます。(ヘッダーに入れていない場合はunauthorized errorが発生します。)</li>
<li>refresh-token<br/>
これはアクセストークンをリフレッシュするために利用するトークンです。<br/>
アクセストークンは有効期限が1時間なので、継続的にAPIを実行するためには、きちんとアクセストークンをリフレッシュする必要があります。</li>
<li>id-token<br/>
JWT(Json Web Token)と呼ばれるデータ形式で、ユーザのユニークな識別子が入っています。<br/>
各種サービス間でのID連携するときに利用します。<br/>
例えば、GREEにログインするときにYahoo!アカウントを使ってログインした場合に、ユーザの基本情報(名前やメールアドレス)が自動で入力されていることがあると思います。<br/>
そういった連携を組み込みたい場合に使います。</li>
</ul>


<p>今回、id-tokenを調べる上で、OpenID Connectの考え方に触れました。これまで全く気にしてこなかった内容なのですが、かなり大事であることがわかりました。<br/>
これについてもどこかで記事を書ければ良いなと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p>参考:<br/>
* <a href="http://webos-goodies.jp/archives/how_to_migrate_from_openid_to_openid_connect.html">Google アカウントの認証を OpenID から OpenID Connect に移行する方法</a><br/>
* <a href="http://www.slideshare.net/kura_lab/openid-connect-id">OpenID Connect 入門 〜コンシューマーにおけるID連携のトレンド〜</a><br/>
* <a href="http://oauth.jp/blog/2015/01/06/oauth2-multiple-response-type/">OAuth 2.0 の Response Type 全パターン</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLGeocoderによるジオコーディングについて]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/07/geocoder/"/>
    <updated>2015-11-07T23:04:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/07/geocoder</id>
    <content type="html"><![CDATA[<h3>ジオコーディング/逆ジオコーディングについて</h3>

<p>本日は、CoreLocation.frameworkによる <strong>ジオコーディング</strong> について書きたいと思います。まず、 <strong>ジオコーディング</strong> とは住所を緯度・経度に変換する技術のことです。逆に緯度・経度を住所に変換する技術を <strong>逆ジオコーディング</strong> と言います。</p>

<p>ジオコーディングは多くのサービスで利用されていることと思いますが、大抵の場合、GoogleやYahooのジオコーディングAPIを利用しているのではないでしょうか？<br/>
ですが、冒頭でも述べたようにあえてCoreLocation.frameworkによるジオコーディング/逆ジオコーディングについて見てみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>CoreLocation.frameworkでのジオコーディング/逆ジオコーディング方法</h4>

<p>早速、説明していきます。<br/>
ジオコーディング/逆ジオコーディングのためのメソッドはCLGeocoderクラスの中に含まれています。<br/>
下記のように使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ジオコーディング処理(住所を緯度・経度に変換)</span>
</span><span class='line'><span class="n">func</span> <span class="nf">geocode</span><span class="p">(</span><span class="nl">address:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">geocoder</span> <span class="o">=</span> <span class="n">CLGeocoder</span><span class="p">()</span>
</span><span class='line'>  <span class="n">geocoder</span><span class="p">.</span><span class="n">geocodeAddressString</span><span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">placeMarks:</span><span class="p">[</span><span class="n">CLPlacemark</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="nl">error:</span><span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">placeMark</span> <span class="k">in</span> <span class="n">placeMarks</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;latitude: \(placeMark.location?.coordinate.latitude), longitude: \(placeMark.location?.coordinate.longitude)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 逆ジオコーディング処理(緯度・経度を住所に変換)</span>
</span><span class='line'><span class="n">func</span> <span class="nf">reverseGeocode</span><span class="p">(</span><span class="nl">latitude:</span><span class="n">CLLocationDegrees</span><span class="p">,</span> <span class="nl">longitude:</span><span class="n">CLLocationDegrees</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocation</span><span class="p">(</span><span class="nl">latitude:</span> <span class="n">latitude</span><span class="p">,</span> <span class="nl">longitude:</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">geocoder</span> <span class="o">=</span> <span class="n">CLGeocoder</span><span class="p">()</span>
</span><span class='line'>  <span class="n">geocoder</span><span class="p">.</span><span class="n">reverseGeocodeLocation</span><span class="p">(</span><span class="n">location</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nl">placeMarks:</span><span class="p">[</span><span class="n">CLPlacemark</span><span class="p">]</span><span class="o">?</span><span class="p">,</span> <span class="nl">error:</span><span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">placeMark</span> <span class="o">=</span> <span class="n">placeMarks</span><span class="o">?</span><span class="p">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">country</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">country</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(country)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">administrativeArea</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">administrativeArea</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(administrativeArea)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subAdministrativeArea</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subAdministrativeArea</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subAdministrativeArea)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">locality</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">locality</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(locality)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subLocality</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subLocality</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subLocality)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">thoroughfare</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">thoroughfare</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(thoroughfare)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="n">subThoroughfare</span> <span class="o">=</span> <span class="n">placeMark</span><span class="o">?</span><span class="p">.</span><span class="n">subThoroughfare</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(subThoroughfare)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は簡単なサンプルなので、ログ出力のみにしています。<br/>
実に簡単ですね！<br/>
逆ジオコーディングの場合、全ての値が入った上でplaceMarkが返されるわけではないので、思い描いた住所が出ない場合もありました。</p>

<h4>CoreLocation.frameworkでの逆ジオコーディングの精度</h4>

<p>では、このCoreLocation.frameworkによる逆ジオコーディングって、どの程度正確なんでしょうか？<br/>
Googleが公開している逆ジオコーディングAPIは<code>https://maps.googleapis.com/maps/api/geocode/json?latlng=&lt;緯度&gt;,&lt;経度&gt;&amp;sensor=false</code>です。<br/>
筆者が自宅で実機で実際に取得した位置情報を逆ジオコーディングして試したところ、Google APIの結果と必ず一致するわけではありませんでした。</p>

<p>どちらが正しかったかというと、正直なところ、Google APIの方が精度が高かったです。<br/>
これがあまり逆ジオコーディングの方法としてCoreLocation.frameworkが使われない理由なのかもしれません。<br/>
Appleはどんどんマップの精度向上に力を入れていますし、いつの日か、Googleと遜色のない結果が返ってくるかもしれません。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術ブログのアクセスと収入の推移(2周年)]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/01/blog-2-year-anniversary/"/>
    <updated>2015-11-01T20:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/01/blog-2-year-anniversary</id>
    <content type="html"><![CDATA[<h3>技術ブログを書き始めて2周年を迎えました</h3>

<p>なんと、先々月9/4時点で本技術ブログが2周年を迎えました！！<br/>
それを記念しまして年に1回のブログ振り返りをしたいと思います。</p>

<p>本日の紹介内容の概要は下記です。</p>

<ul>
<li>アクセス数の推移</li>
<li>アクセス数の多い記事を紹介</li>
<li>広告収入の推移</li>
</ul>


<!-- more -->


<h4>アクセス数の推移</h4>

<p>まずは、アクセス数の推移から紹介していきましょう。<br/>
データは <strong>Google Analytics</strong> で取得しています。<br/>
結果をお見せすると、<br/>
<img src="http://grandbig.github.io/images/2anniversary1.png" alt="ブログ開始からのアクセス数の推移" /><br/>
このようになっています。</p>

<p>もっと詳しく見ていきましょう。<br/>
1周年記念と比較した場合のグラフをご覧下さい。<br/>
<img src="http://grandbig.github.io/images/2anniversary2.png" alt="1周年記念からのアクセス数の推移" /></p>

<p>1周年記念のときは、平日が <strong>280〜320程度</strong> のセッション数で土日が <strong>90〜120程度</strong> のセッション数でした。それが最近では平日が <strong>320〜370程度</strong> のセッション数で土日が <strong>100〜150程度</strong> のセッション数にまで上昇しました。</p>

<p>因みに2015/10が月別換算で最高のセッション数/ページビュー数を記録しました！<br/>
<img src="http://grandbig.github.io/images/2anniversary3.png" alt="2015/10の記録" /></p>

<p>なんと初めて1ヶ月でのページビュー数が1,0000を突破しました。(あくまでもGoogle Analytics換算です。)</p>

<p>1周年記念時に <strong>『1年間で3万を超えるページビュー数を稼げたことが非常に嬉しい』</strong> と書かせて頂きましたが、一月で <strong>『1万を超えるページビュー数を稼げるようになった』</strong> ということが今回振り返ってみて一番の驚きでした。<br/>
いや〜成長しました笑。<br/>
(筆者の拙い技術ブログにいつもお付き合い頂きまして、皆様たいへんありがとうございます。)</p>

<p>ブログ開始時からの総計の値も記載します。<br/>
<img src="http://grandbig.github.io/images/2anniversary4.png" alt="ブログ開始からの各数値" /></p>

<ul>
<li>【セッション数】1周年時: 24,996 → 現在: 122,247</li>
<li>【ユーザー数】1周年時: 16,819 → 現在: 72,567</li>
<li>【ページビュー数】1周年時: 32,022 → 現在: 153,541</li>
<li>【ページ/セッション】1周年時: 1.28 → 現在: 1.26</li>
<li>【平均セッション時間】1周年時: 00:01:11 → 現在: 00:01:11</li>
<li>【直帰率】1周年時: 84.54% → 現在: 85.36%</li>
<li>【新規セッション率】1周年時: 67.28% → 現在: 59.36%</li>
</ul>


<p>※ 1周年時とは「ブログ開始〜1年後」で現在とは「ブログ開始〜現在」を指しています。</p>

<p>比較してみるとセッション数, ユーザ数, ページビュー数が1年目よりも2年目の方が飛躍的に上昇していることがわかります。<br/>
トータルで見たとき、直帰率が誤差の範囲程度ですが下がっていますね。<br/>
また新規セッション率が結構下がっているので、広く宣伝していかないと頭打ちに成りかねません。</p>

<h4>アクセス数の多い記事を紹介</h4>

<p>次に、本ブログの中で柱となっている記事について紹介します。<br/>
これは1周年のときに紹介したものと変化が起きているか見るのが楽しみでした笑</p>

<p><strong>1位: <a href="http://grandbig.github.io/blog/2013/09/27/location-nstimer/">Backgroundで位置情報を取得しよう！</a></strong><br/>
　　ページビュー数: 15,134 (9.86%)<br/>
　　平均ページ滞在時間: 00:07:00<br/>
<strong>2位: <a href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/">Xcode6でSingle View Applicationにチャレンジ</a></strong><br/>
　　ページビュー数: 8,068 (5.25%)<br/>
　　平均ページ滞在時間: 00:06:24<br/>
<strong>3位: <a href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/">はっきりさせよう！iOSのデバイストークン</a></strong><br/>
　　ページビュー数: 6,773 (4.41%)<br/>
　　平均ページ滞在時間: 00:04:45<br/>
<strong>4位: <a href="http://grandbig.github.io/blog/2013/11/30/fmdatabase/">FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！</a></strong><br/>
　　ページビュー数: 6,276 (4.09%)<br/>
　　平均ページ滞在時間: 00:06:50<br/>
<strong>5位: <a href="http://grandbig.github.io/">TOPページ</a></strong><br/>
　　ページビュー数: 6,200 (4.04%)<br/>
　　平均ページ滞在時間: 00:01:19</p>

<p>以上が上位5記事です。</p>

<p>結果を見て分かる通り、圧倒的に <strong>『Backgroundで位置情報を取得しよう！』</strong> が見られていました。これは1周年の時と一緒でした。初期の頃の記事にも関わらず依然としてたくさんのユーザ様に見て頂いているということはそれだけ長きに渡る価値のある記事であったと胸を張っても良いでしょうか？<br/>
続いては <strong>『Xcode6でSingle View Applicationにチャレンジ』</strong> がランクインしました。これは初めてiPhoneアプリ開発をする人向けに書いた記事でしたが、需要があったということでしょう。Storyboardは基本中の基本ですが、見た目以上に奥が深くもあります。筆者もまだまだ使いこなせているとは言えないと思っています。<br/>
3番目に <strong>『はっきりさせよう！iOSのデバイストークン』</strong> が多く見られていました。これは1周年時には2位だったのですが、1つランクを下げましたね。プッシュの機構は年々変化が起きているので、未だによく見られるということなのでしょうか。<br/>
4番目には <strong>『FMDBを使って簡単にiPhoneのローカルストレージを活用しよう！』</strong> は1周年時に5位だった記事ですね。筆者のソースミスで多大なご迷惑をおかけした思い出深い記事でもあります。(※もちろんソースは修正しています笑)<br/>
5番目に滑り込んだのは、 <strong>『TOPページ』</strong> でした。このサイト自体が少しは知られるようになったのか、それとも他の記事を見ようとトップ画面に遷移した結果なのか計り知れませんが、気合を入れて記事を書き続けなくてはと思い直されます。</p>

<p>なんと、2013年の記事が3つもランクインしており、2014年の記事が1つという結果でした。<br/>
2015年の記事は当たり前ですが、年月が短いのでアクセス数も多くはないのでしょうが、来年また振り返ったときにランクインさせてみたいものです。</p>

<h4>広告収入の推移</h4>

<p>最後に広告収入の推移について紹介します。<br/>
本ブログでは <strong>Google Adsense</strong> を利用しています。<br/>
昨年も説明しましたが、Google Adsenseの広告とは下記のようなものです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>この広告はユーザがGoogleで検索しているワードに基いて興味のある製品を表示するというものです。本ブログを訪れたユーザにこの広告を見て頂く、あるいはクリックして頂くことで筆者の収入に繋がるわけです。</p>

<p>では、推移を見ていきます。<br/>
これまでの全期間の推移(2013/11/15〜2015/10/31での推移)は下図のようになっています。<br/>
<img src="http://grandbig.github.io/images/2anniversary5.png" alt="Google Adsenseの推移" /><br/>
見てお分かりの通り、見積もり収益額が8,000円を超えています。Google Adsenseは8,000円以上で初めてお金がもらえるのですが、2年目にして初めてGoogle様からお金を頂きました！<br/>
そして1回目の振り込みから早くも約4000円の収益を上げているので、きっと3周年を迎えるまでには2回目の振り込みも頂けるはず&hellip;.。</p>

<p>因みに、1年目と2年目の見積もり収益額を比較してみますと、1年目の2013/11/15〜2014/09/14は <strong>2,021円</strong> となっており、2年目の2014/09/15〜2015/09/14は <strong>9,019円</strong> となっていました。</p>

<p>ということで、2周年記念として振り返ってみましたが、まだまだ精進できるところがたくさんありますし、常に時代は流れているので、どんどん新しい技術が出てきています。<br/>
2年目はiOSに限らず、Androidに関する記事を書いたりと少しずつ技術の幅を広げてきました。筆者はもともとWeb系のエンジニアであったものの、最近はネイティブソースばかり書いてきました。今後はWeb系の技術に関することも学びつつ(サーバサイドも！)、徐々にではありますが、本ブログの対象範囲も広げていければと思っております。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS端末同士でBluetoothペアリングするときの注意点]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/29/bluetooth-pairing/"/>
    <updated>2015-10-29T00:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/29/bluetooth-pairing</id>
    <content type="html"><![CDATA[<h4>iOS端末同士でのBluetoothペアリング方法について</h4>

<p>さて、本日はiOS端末同士でBluetoothペアリングするときの注意点について書きたいと思います。<br/>
筆者は仕様に気づかずにだいぶ苦しめられました笑。</p>

<p>始めにおさらいの意味も兼ねて、Bluetoothでのペアリングについて書いていきます。<br/>
今回はSwiftで書きます。</p>

<p>まずはBluetoothの発信側から説明します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreBluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CBPeripheralManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 必要なプロパティの宣言</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">pm:</span><span class="n">CBPeripheralManager</span><span class="o">!</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">sUUID:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">CBUUID</span><span class="p">(</span><span class="nl">string:</span><span class="s">&quot;47EC089D-2FBB-410D-BEDF-C88730DBBD3A&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">characteristic:</span><span class="n">CBMutableCharacteristic</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// CBPeripheralManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span> <span class="o">=</span> <span class="n">CBPeripheralManager</span><span class="p">(</span><span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">queue:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ボタンをタップしたときに実行</span>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">peripheralStartAction</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// サービスの追加</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">service</span> <span class="o">=</span> <span class="n">CBMutableService</span><span class="p">(</span><span class="nl">type:</span> <span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">,</span> <span class="nl">primary:</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">characteristic</span> <span class="o">=</span> <span class="n">CBMutableCharacteristic</span><span class="p">(</span><span class="nl">type:</span> <span class="n">sUUID</span><span class="p">,</span> <span class="nl">properties:</span> <span class="n">CBCharacteristicProperties</span><span class="p">.</span><span class="n">Read</span><span class="p">,</span> <span class="nl">value:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">permissions:</span> <span class="n">CBAttributePermissions</span><span class="p">.</span><span class="n">ReadEncryptionRequired</span><span class="p">)</span>
</span><span class='line'>      <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">]</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">addService</span><span class="p">(</span><span class="n">service</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// アドバタイズ開始</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">advertisementData:</span><span class="p">[</span><span class="nl">String:</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nl">CBAdvertisementDataServiceUUIDsKey:</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">CBAdvertisementDataLocalNameKey:</span><span class="s">&quot;MyBlog&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">startAdvertising</span><span class="p">(</span><span class="n">advertisementData</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - CBPeripheralManagerDelegate -</span>
</span><span class='line'>  <span class="c1">// Bluetoothの状態が変化したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManagerDidUpdateState</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;state: \(peripheral.state)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// アドバタイズの開始結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManagerDidStartAdvertising</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;アドバタイズ開始失敗。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;アドバタイズ開始成功！&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// サービスの追加結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManager</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="n">didAddService</span> <span class="nl">service:</span> <span class="n">CBService</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;サービスの追加に失敗しました。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;サービス追加成功&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Readリクエストを取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheralManager</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheralManager</span><span class="p">,</span> <span class="n">didReceiveReadRequest</span> <span class="nl">request:</span> <span class="n">CBATTRequest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  
</span><span class='line'>      <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span><span class="p">.</span><span class="n">isEqual</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// プロパティで保持しているキャラクタリスティックへのReadリクエストかどうかを判定</span>
</span><span class='line'>          <span class="c1">// CBMutableCharacteristicのvalueをCBATTRequestのvalueにセット</span>
</span><span class='line'>          <span class="n">request</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>                                                                          
</span><span class='line'>          <span class="c1">// リクエストに応答</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">respondToRequest</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="nl">withResult:</span> <span class="n">CBATTError</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注目して頂きたいのが、<br/>
<code>self.characteristic = CBMutableCharacteristic(type: sUUID, properties: CBCharacteristicProperties.Read, value: nil, permissions: CBAttributePermissions.ReadEncryptionRequired)</code>の部分です。<br/>
<code>permissions</code>に<code>CBAttributePermissions.ReadEncryptionRequired</code>を設定することで下図のようなペアリングアラートが表示されます。</p>

<p><img src="http://grandbig.github.io/images/bluetooth-pairing-1.png" alt="Bluetoothペアリングアラート" /></p>

<p>続いて、Bluetoothの受信側の処理を書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">CoreBluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">CBCentralManagerDelegate</span><span class="p">,</span> <span class="n">CBPeripheralDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 必要なプロパティの宣言</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">cm:</span><span class="n">CBCentralManager</span><span class="o">!</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">connectPeripheral:</span><span class="n">CBPeripheral</span><span class="o">!</span>
</span><span class='line'>  <span class="n">let</span> <span class="nl">sUUID:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">CBUUID</span><span class="p">(</span><span class="nl">string:</span><span class="s">&quot;47EC089D-2FBB-410D-BEDF-C88730DBBD3A&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// CBCentralManagerの初期化</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">cm</span> <span class="o">=</span> <span class="n">CBCentralManager</span><span class="p">(</span><span class="nl">delegate:</span> <span class="n">self</span><span class="p">,</span> <span class="nl">queue:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">centralStartAction</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// スキャン開始</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">scanForPeripheralsWithServices</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MARK: - CBCentralManagerDelegate -</span>
</span><span class='line'>  <span class="c1">// Bluetoothの状態が変化したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManagerDidUpdateState</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;state: \(central.state)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 周辺にBLEデバイスが見つかったときに通る処</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didDiscoverPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="nl">advertisementData:</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">AnyObject</span><span class="p">],</span> <span class="nl">RSSI:</span> <span class="n">NSNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">let</span> <span class="nl">uuidArray:</span><span class="p">[</span><span class="n">CBUUID</span><span class="p">]</span> <span class="o">=</span> <span class="n">advertisementData</span><span class="p">[</span><span class="s">&quot;kCBAdvDataServiceUUIDs&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">?</span> <span class="p">[</span><span class="n">CBUUID</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">uuid:</span><span class="n">CBUUID</span> <span class="o">=</span> <span class="n">uuidArray</span><span class="p">.</span><span class="n">first</span><span class="o">!</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">uuid</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">sUUID</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Peripheralに接続</span>
</span><span class='line'>              <span class="n">self</span><span class="p">.</span><span class="n">connectPeripheral</span> <span class="o">=</span> <span class="n">peripheral</span>
</span><span class='line'>              <span class="n">self</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">connectPeripheral</span><span class="p">(</span><span class="n">connectPeripheral</span><span class="p">,</span> <span class="nl">options:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 接続が成功したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didConnectPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">peripheral</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>      <span class="c1">// サービス探索開始</span>
</span><span class='line'>      <span class="n">peripheral</span><span class="p">.</span><span class="n">discoverServices</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 接続に失敗したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">centralManager</span><span class="p">(</span><span class="nl">central:</span> <span class="n">CBCentralManager</span><span class="p">,</span> <span class="n">didFailToConnectPeripheral</span> <span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;接続失敗: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// MARK: - CBPeripheralDelegate -</span>
</span><span class='line'>  <span class="c1">// サービスの探索結果を受け取るときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didDiscoverServices</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">services:</span><span class="p">[</span><span class="n">CBService</span><span class="p">]</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">.</span><span class="n">services</span><span class="o">!</span>
</span><span class='line'>                              
</span><span class='line'>      <span class="k">for</span> <span class="n">service</span> <span class="k">in</span> <span class="n">services</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">peripheral</span><span class="p">.</span><span class="n">discoverCharacteristics</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">sUUID</span><span class="p">],</span> <span class="nl">forService:</span> <span class="n">service</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// キャラクタリスティックの探索結果を受け取るときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didDiscoverCharacteristicsForService</span> <span class="nl">service:</span> <span class="n">CBService</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">let</span> <span class="nl">characteristics:</span><span class="p">[</span><span class="n">CBCharacteristic</span><span class="p">]</span> <span class="o">=</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="o">!</span>
</span><span class='line'>                          
</span><span class='line'>      <span class="k">for</span> <span class="n">characteristic</span> <span class="k">in</span> <span class="n">characteristics</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;properties: \(characteristic.properties)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">peripheral</span><span class="p">.</span><span class="n">readValueForCharacteristic</span><span class="p">(</span><span class="n">characteristic</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データの読込み結果を取得したときに通る処理</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">peripheral</span><span class="p">(</span><span class="nl">peripheral:</span> <span class="n">CBPeripheral</span><span class="p">,</span> <span class="n">didUpdateValueForCharacteristic</span> <span class="nl">characteristic:</span> <span class="n">CBCharacteristic</span><span class="p">,</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">print</span><span class="p">(</span><span class="s">&quot;読込みに失敗しました。error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;読込みに成功しました。service.uuid: \(characteristic.service.UUID), characteristic uuid: \(characteristic.UUID), value: \(characteristic.value)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さあ、これでペアリングアラートが出るはず！ということで2台のiOS端末で試してみました。<br/>
結果、 <strong>『アラートが表示されません！』</strong> でした。<br/>
どこか書き方が間違っているのかと思い、試行錯誤を繰り返したり、ググり続けたりしたところ、理由が判明しました。<br/>
<strong>2台共にiOS8端末かつiCloudに同じApple IDを設定している場合はセキュアと見なされてペアリングアラートが表示されない</strong> ということでした。</p>

<p>なるほど、出ないわけだ&hellip;ということで皆さんも気をつけてみてください。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発で役立つオープンソースライブラリのまとめサイト]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/25/ios-opensource/"/>
    <updated>2015-10-25T22:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/25/ios-opensource</id>
    <content type="html"><![CDATA[<h4>オープンソースライブラリは積極的に使おう！</h4>

<p>さて、本日は珍しくプログラミングそのものではなく、オープンソースライブラリのまとめサイトを紹介したいと思います。<br/>
と言っても、ほとんど皆さん当たり前のように使っていると思いますが笑。</p>

<p>Webアプリケーションと同じようにiOSアプリケーションでも当然の事ながらオープンソースのライブラリが存在します。<br/>
使いやすく役立つものから、ちょっとした心をくすぐるものまで様々なものがネット上にあふれています。<br/>
何の手がかりもなしに目的のものを探すのは困難だと思うので、筆者がよく使っているサイトを紹介します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Objective-Cならcocoa-CONTROLS</h5>

<p>こちらは最早、老舗と言えるかもしれません。<a href="https://www.cocoacontrols.com/platforms/ios/controls">cocoa-CONTROLS</a>はiOSおよびOSXアプリケーションの開発に利用可能なオープンソースライブラリをまとめてくれているサイトです。</p>

<p>下記が主な特徴となります。</p>

<ul>
<li>iOS, OSXで利用可能なライブラリが記載されています</li>
<li>Objective-Cだけでなく、Swiftで書かれたライブラリが記載されています(React Nativeもあります)</li>
<li>ライセンスによる検索が可能です。</li>
</ul>


<h5>SwiftならiOS cookies</h5>

<p>Swiftのライブラリを分野別にまとめたサイトが<a href="http://www.ioscookies.com/">iOS cookies</a>です。<br/>
こちらはcocoa-CONTROLSに比べて圧倒的にライブラリの数は少なくなりますが、各分野の有名ドコロのライブラリを抑えているので、目安にはなると思われます。</p>

<p>Swiftライブラリはまだまだしばらくはネット上で検索する必要が絶えないと思いますが、ふとした時に覗いてみると良いのではないでしょうか。</p>

<h4>その他の役立つサイトの紹介</h4>

<p>さて、アプリ開発をする上では、他にも必要なサイトがあります。<br/>
折角なので、それも紹介させてください。</p>

<h5>アプリのリリースに必要な画像を一式揃えよう</h5>

<p>アプリをリリースするためには様々なサイズの画像を用意する必要があります。<br/>
全てをいちいちメモして用意するのもたいへんなので、ここは<a href="http://makeappicon.com/">MakeAppicon</a>を使いましょう。<br/>
iOSだけでなくApple Watch用そしてAndroid用も一式そろえてくれます。</p>

<h5>アプリ関係の資料を作るなら実機つき画像が良いよね！</h5>

<p>アプリを紹介するための資料やアプリの使い方マニュアルなどを作る場合、アプリの実際の画面だけでも事足りるかもしれないのですが、どうせなら、iPhoneやAndroid端末の <strong>端末自体</strong> の画像もあった方がきれいな資料になりますよね？<br/>
そんなときには<a href="http://mockuphone.com/">MockUPhone</a>を使いましょう。</p>

<h5>アプリの画面内の色を設定するために&hellip;</h5>

<p>アプリの画面を作成するためには色を事細かに設定する必要が出てくるでしょう。<br/>
iOSではUIColorによる色設定を行うのですが、これがかなり特殊でありまして、Webアプリ出身者の筆者としてはなかなか苦労するところであります。<br/>
そんなときには<a href="http://www.peko-step.com/tool/tfcolor.html">RGB↔16進数変換サイト</a>と<a href="http://tobioka.net/wp-content/uploads/2012/05/hexrgb2uicolor.html">16進数↔UIColor変換サイト</a>を使うようにしています。</p>

<p>さて如何だったでしょうか。<br/>
もし、初めて知ったというサイトがあれば、ぜひ使ってみてください。<br/>
必ず役に立つこと請け合いです！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioにKotlinを導入しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/25/kotlin-android/"/>
    <updated>2015-10-25T19:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/25/kotlin-android</id>
    <content type="html"><![CDATA[<h4>AndroidアプリはKotlinで書く時代！？</h4>

<p>さて、本日は久々にAndroidについて書きたいと思います。<br/>
<strong>Kotlin</strong> はどの程度、世に普及しているのでしょうか？ほとんどのAndroidアプリ開発者はJavaで開発していると思うのですが、今後はiOSのObjective-C/Swiftのように開発言語としてJava/Kotlinを選択することになるかもしれません。</p>

<p>KotlinはAndroid StudioのベースとなっているIntelliJを開発しているJetBrains社が開発したJVM言語であるため、Android Studioへの導入も簡単で親和性も高いらしいです。<br/>
また、iOSアプリをSwiftで開発していた開発者は書き方が似ているKotlinの方が開発が幾分か楽かもしれません。<br/>
コード補完や参照ジャンプなどの基本的なIDEサポートもあるのでAndroid Studioでも問題なくKotlinを使えるのではないでしょうか。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Kotlinの導入方法</h4>

<p>Kotlinの導入方法を書いていきます。と言ってもほとんどないです笑。</p>

<p>【導入手順】</p>

<p>1．Android Stuioを起動<br/>
2．Android Studio > Preferences > Plugins > Install JetBrains plugin&hellip;を選択<br/>
3．リストからKotlinを選択して、Install pluginを選択
<img src="http://grandbig.github.io/images/kotlin_install_1.png" alt="Kotlinのインストール" /></p>

<p>4．インストール完了後, Android Studiomを再起動<br/>
<img src="http://grandbig.github.io/images/kotlin_install_2.png" alt="Android Studioの再起動" /></p>

<p>5．javaパッケージをkotlinパッケージにリネーム<br/>
javaパッケージを右クリック > Refactor > Rename を選択<br/>
最終的に下図のようになればOKです。<br/>
<img src="http://grandbig.github.io/images/kotlin_install_3.png" alt="ペッケージ名の変更" /></p>

<p>6．javaファイルをkotlinファイルに変換<br/>
javaファイルを選択して、Code > Convert Java File to Kotlin File を選択<br/>
MainActivity(メインファイル)だけでなくApplicationTestも変換しておきましょう。<br/>
<img src="http://grandbig.github.io/images/kotlin_install_4.png" alt="kotlinファイルに変換" /></p>

<p>7．build.gradle(app)をkotlin用に修正
Tools > Kotlin > Configure Kotlin in Project を選択すると、build.gradle(app)ファイルにKotlin対応用の記述が自動で追加されます。<br/>
筆者の場合は下記のような感じになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="o">-</span><span class="n">android</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compileSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>  <span class="n">buildToolsVersion</span> <span class="s">&quot;22.0.1&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">applicationId</span> <span class="s">&quot;com.example.kato_takahiro.kotlinsample&quot;</span>
</span><span class='line'>      <span class="n">minSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>      <span class="n">targetSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>      <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">minifyEnabled</span> <span class="kc">false</span>
</span><span class='line'>          <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span><span class="o">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">rules</span><span class="o">.</span><span class="na">pro</span><span class="err">&#39;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">sourceSets</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">main</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">+=</span> <span class="err">&#39;</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">kotlin</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="err">&#39;</span><span class="nl">junit:junit:</span><span class="mf">4.12</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s">&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ext</span><span class="o">.</span><span class="na">kotlin_version</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">beta</span><span class="o">-</span><span class="mi">1038</span><span class="err">&#39;</span>
</span><span class='line'>  <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">classpath</span> <span class="s">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>8．ビルドしてデバッグ<br/>
ここまでくれば設定は完了したはずなので、Build > Clean Projectしてエラーが発生しないかチェック<br/>
問題なければ、実機を繋いでデバッグしちゃいましょう！</p>

<h4>Kotlinでコードを書いてみよう！</h4>

<p>さて、使えることにしただけでは何なので、以前書いた<a href="http://grandbig.github.io/blog/2015/05/16/altbeacon/">AltBeaconを使ってAndroidでiBeaconを検知しよう</a>をKotlinで書き直してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AltBeacon関連のライブラリをimport</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconConsumer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.BeaconParser</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.Identifier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.MonitorNotifier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.altbeacon.beacon.Region</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="o">:</span> <span class="n">ActionBarActivity</span><span class="o">(),</span> <span class="n">BeaconConsumer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">val</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;AltBeacon Sample&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// BeaconManagerクラスの変数を定義</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">var</span> <span class="nl">beaconManager:</span> <span class="n">BeaconManager</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">val</span> <span class="n">IBEACON_FORMAT</span> <span class="o">=</span> <span class="s">&quot;m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// staticメソッドでBeaconManagerクラスのインスタンスを取得</span>
</span><span class='line'>      <span class="n">beaconManager</span> <span class="o">=</span> <span class="n">BeaconManager</span><span class="o">.</span><span class="na">getInstanceForApplication</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>      <span class="c1">// BeaconParseをBeaconManagerに設定</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">!!.</span><span class="na">beaconParsers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BeaconParser</span><span class="o">().</span><span class="na">setBeaconLayout</span><span class="o">(</span><span class="n">IBEACON_FORMAT</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="nl">menu:</span> <span class="n">Menu</span><span class="o">):</span> <span class="n">Boolean</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Inflate the menu; this adds items to the action bar if it is present.</span>
</span><span class='line'>      <span class="n">menuInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">menu</span><span class="o">.</span><span class="na">menu_main</span><span class="o">,</span> <span class="n">menu</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="nl">item:</span> <span class="n">MenuItem</span><span class="o">):</span> <span class="n">Boolean</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Handle action bar item clicks here. The action bar will</span>
</span><span class='line'>      <span class="c1">// automatically handle clicks on the Home/Up button, so long</span>
</span><span class='line'>      <span class="c1">// as you specify a parent activity in AndroidManifest.xml.</span>
</span><span class='line'>      <span class="n">val</span> <span class="n">id</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">itemId</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_settings</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onOptionsItemSelected</span><span class="o">(</span><span class="n">item</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onBeaconServiceConnect</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// BeaconManagerクラスのモニタリング通知受取り処理</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">!!.</span><span class="na">setMonitorNotifier</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">MonitorNotifier</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">override</span> <span class="n">fun</span> <span class="nf">didEnterRegion</span><span class="o">(</span><span class="nl">region:</span> <span class="n">Region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域進入時に実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didEnterRegion&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">override</span> <span class="n">fun</span> <span class="nf">didExitRegion</span><span class="o">(</span><span class="nl">region:</span> <span class="n">Region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域退出時に実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didExitRegion&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">override</span> <span class="n">fun</span> <span class="nf">didDetermineStateForRegion</span><span class="o">(</span><span class="nl">i:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">region:</span> <span class="n">Region</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 領域への侵入/退出のステータスが変化したときに実行</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;didDetermineStateForRegion&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// UUIDの作成</span>
</span><span class='line'>          <span class="n">val</span> <span class="n">identifier</span> <span class="o">=</span> <span class="n">Identifier</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;434B4666-E4B2-4B78-8C13-901AFEE3DBB6&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="c1">// モニタリングの開始</span>
</span><span class='line'>          <span class="n">beaconManager</span><span class="o">!!.</span><span class="na">startMonitoringBeaconsInRegion</span><span class="o">(</span><span class="n">Region</span><span class="o">(</span><span class="s">&quot;unique-id-001&quot;</span><span class="o">,</span> <span class="n">identifier</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">e:</span> <span class="n">RemoteException</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 例外が発生した場合の処理</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">()</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">!!.</span><span class="na">unbind</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">()</span>
</span><span class='line'>      <span class="n">beaconManager</span><span class="o">!!.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書いてみると、確かにSwiftに似ていますね。<br/>
気になったのは下記の通りです。</p>

<ul>
<li>Swiftで言うところの<code>let</code>がKotlinでは<code>val</code>と書くこと</li>
<li>Swiftで言うところの<code>delegate</code>の設定の仕方とKotlinで言うところの<code>implements</code>が同じ</li>
<li>Kotlinで変数が<code>null</code>のときにメソッドを実行しないよう <strong>!!</strong> が必要</li>
</ul>


<p>これからはJavaだけでなく、Kotlinでも書けるように力を蓄えていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/shoma2da/items/31edef012f224f99323c">SwiftでAndroidアプリを作る!?</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug View Hierarchy]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/18/debug-view-hierarchy/"/>
    <updated>2015-10-18T23:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/18/debug-view-hierarchy</id>
    <content type="html"><![CDATA[<h4>Debug View Hierarchyを使ってみよう！</h4>

<p>今日はDebug View Hierarchyの使い方を見てみたいと思います。<br/>
普段、めったにこの機能を使うことのない筆者ですが、使いどころを探る上でも少し見てみようと思います。</p>

<h5>Debug View Hierarchyとは</h5>

<p>Xcodeでデバッグした後に、アプリの画面の構造を確認することができる機能です。<br/>
デバッグ後に表示されるバーの下図の赤枠で囲った部分をクリックしましょう。</p>

<p><img src="http://grandbig.github.io/images/debugViewHierarchy1.png" alt="Debug View Hierarchyの開始方法" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>すると、下図のような表示が見れるはずです。</p>

<p><img src="http://grandbig.github.io/images/debugViewHierarchy2.png" alt="Debug View Hierarchyの初期図" /></p>

<p>ここでは下図のツールバーを用いて、Debug View Hierarchyを使いこなしていきます。</p>

<p><img src="http://grandbig.github.io/images/debugViewHierarchy3.png" alt="Debug View Hierarchyのツールバー" /></p>

<p>左から</p>

<ul>
<li>Show clipped content<br/>
紐付けられている画面の構造がわかる</li>
<li>Show constraints<br/>
各画面や部品に設定されたConstraintsがわかる</li>
<li>Adjust the view mode<br/>
Contents / Wireframes / Wireframes and Contentsを切り替えられる</li>
<li>Orient to 2D<br/>
2D / 3D表示を切り替えられる</li>
<li>Zoom out<br/>
Debug View Hierarchyの表示をズームアウトする</li>
<li>Actual size<br/>
Debug View Hierarchyを実際のサイズにズームする</li>
<li>Zoom in<br/>
Debug View Hierarchyの表示をズームインする</li>
</ul>


<p>となっています。</p>

<h5>Debug View Hierarchyの使いどころ</h5>

<p>筆者が躓いたときに使えるなと思ったパターンを列挙します。</p>

<ol>
<li><p>WKWebViewとネイティブ部品(ボタン, ラベルなど)を同一の画面に配置したとき
WKWebViewはstoryboardから配置できず、ソースコードを書く必要があります。<br/>
ネイティブ部品は通常、storyboardから配置するため、viewDidLoadが実行される頃にはself.viewに追加されています。<br/>
なので、うっかり気づかずにネイティブ部品がWKWebViewに隠れてしまっていることがあります。<br/>
なぜネイティブボタンが表示されないのかわからなかったときは <strong>Debug View Hierarchy</strong> を使うと良いでしょう。</p></li>
<li><p>適切なConstraintsが各部品に設定されていないとき
想定に反して、各部品が配置されないことがあったとき、まさに <strong>Debug View Hierarchy</strong> が使えます。<br/>
理由がConstraintsである場合、想定した画面からはみ出していたりすることが確認できるでしょう。</p></li>
</ol>


<p>いかがだったでしょうか？<br/>
これからは筆者も積極的にDebug View Hierarchyを使っていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBeaconはバッテリを使う？使わない？]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/10/ibeacon-battery/"/>
    <updated>2015-10-10T22:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/10/ibeacon-battery</id>
    <content type="html"><![CDATA[<h4>iBeaconのバッテリ消費量を調査しよう</h4>

<p>さて、今回はiBeaconを利用したサービスを始める上でネックとなる(正確にはネックと思われがちな)バッテリの消費量について書きたいと思います。<br/>
iPhoneでiBeaconを利用する場合、 <strong>Bluetooth</strong> だけでなく、 <strong>位置情報サービス</strong> をONにする必要があります。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting1.png" alt="iBeaconを使うための設定" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>一般的なユーザのイメージだと、スマートフォンでなるべくバッテリ消費量を抑えたいのであれば、『 <strong>Bluetooth</strong> や <strong>位置情報サービス</strong> をOFFにすべし！！』というのが定説になっていることかと思います。<br/>
しかし、開発者からしてみれば、 <strong>Bluetooth</strong> によるバッテリ消費には疑問があります。というのも現在多くのユーザが持っているスマートフォンでは、搭載されているBluetoothが4.0以上になっていることも珍しくありません。<br/>
であるならば、ほとんどのユーザは超低消費電力の <strong>BLE</strong> の恩恵を受けており、Bluetoothによる電池の消費は誤差の範囲と言えます。</p>

<p>だがしかし、幾ら開発者が『 <strong>Bluetooth</strong> はバッテリを消費しません！』と声高らかに訴えたとしても、ユーザからは『自らのサービスを利用してもらうための体の良い発言』と捉えられてしまうかもしれません。<br/>
であるならが、開発者にできることはただ一つ、データで数値で示すということではないでしょうか？<br/>
ということで今回はXcodeによるバッテリ消費量の計測を交えながらiBeaconのバッテリ消費量に迫っていきたいと思います。</p>

<h4>Xcodeでアプリのバッテリ消費量を計測しよう</h4>

<p>ではXcodeを使ったアプリのバッテリ消費量の計測方法を紹介したいと思います。<br/>
まずは、計測したいiPhone側で設定項目を確認しましょう。</p>

<ol>
<li>設定アプリを起動</li>
<li>デベロッパを選択</li>
<li>Loggingを選択</li>
<li>Start Recordingを選択</li>
</ol>


<p>※ 1度でも開発用のアプリをビルドしてインストールしていれば『デベロッパ』の項目が出るはずです。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting2.png" alt="iPhoneの設定" /></p>

<p>でなければ、<br/>
Xcode > Product > ProfileからiPhoneにアプリをインストールしましょう。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting3.png" alt="Xcode &gt; Product &gt; Profile" /></p>

<p>これで計測が開始されるので、計測終了時に同じ手順で <strong>Stop Recording</strong> を選択しましょう。<br/>
計測が完了したら、Xcodeで取込みを開始します。</p>

<p>Xcode > Product > ProfileでInstrumentsを起動します。<br/>
その中の <strong>Energy Diagnostics</strong> を選択します。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting4.png" alt="バッテリ計測にはこれ！" /></p>

<p>すると、下図のようなウィンドウが表示されます。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting5.png" alt="Energy Diagnosticsウィンドウ" /></p>

<h4>iBeaconの結果について</h4>

<p>ここまでは計測方法について説明しました。<br/>
では、iBeaconを使った場合の結果は結局どうなうのでしょうか？</p>

<p>もちろん調べましたので、さくっとご紹介します。</p>

<p><img src="http://grandbig.github.io/images/ibeacon-setting6.png" alt="iBeaconを使った時のバッテリ消費について" /></p>

<p>【結果】</p>

<ul>
<li>iBeaconはGPSを利用しない
上記グラフを見ると、Bluetoothはオレンジ色になっていますが、GPSは緑色のままだと思います。オレンジはONを表し、緑はOFFを表します。</li>
<li>バッテリ消費率は ディスプレイ > 通信 > Bluetoothの順に消費率が高い
Energy Usage Levelを見ると、Display Brightness Levelが反応しているときが最も高く、その次にNetworkが反応しているときというのがわかります。</li>
</ul>


<p>この結果からもわかるように、iBeaconはGPSを利用していないんです！<br/>
因みに、Bluetoothだけで言えば、1時間あたり1%も利用しません。Bluetoothを介して音楽を聞いたり、3G/4G/Wi-Fiなどで秒間何らかの通信をしたりすれば、バッテリは消費しますが、Bluetoothが原因というよりも、Bluetoothをトリガーとしたやり取りが原因ということなんですね。</p>

<p>このことがユーザにもっと浸透する＆開発者がBluetoothの誤解を広めないようにすることができれば、世の中でiBeaconを利用したサービスがユーザに様々なメリットを提供してくれるのだと期待しています。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android5.0から5.1にアップデートして文鎮化した事件簿]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/05/android-update-crash/"/>
    <updated>2015-10-05T22:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/05/android-update-crash</id>
    <content type="html"><![CDATA[<h4>Android OSのアップデートは恐ろしい</h4>

<p>さて、本日はAndroid OSのアップデートに関するお話です。<br/>
筆者は最近、Nexus6をAndroid5.0から5.1にアップデートしようとしたのですが、途中で失敗して端末が文鎮化するという悲劇が発生してしまったので、備忘録です。</p>

<h5>文鎮化までの軌跡</h5>

<p>まずは、如何にしてNexus6が文鎮化したかまで説明します。</p>

<ol>
<li>端末の通知センターからバージョンアップのためのデータをダウンロード</li>
<li>端末を再起動して、インストールしますか？と聞かれるのでYESを選択</li>
<li>アップデートに失敗しました。という文言と共に下図が&hellip;</li>
</ol>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p><img src="http://grandbig.github.io/images/android-update.png" alt="エラー発生" /></p>

<ol>
<li>嘘だろ&hellip;と思って端末の電源長押しで再起動
永久、再起動ループに&hellip;</li>
<li>電源 + 音量Downボタンを長押しでReboot起動
すると下図のような感じで起動します。<br/>
START, Recovery, Factory&hellip;などのメニューから仕掛けたい動作を選択できます。<br/>
<img src="http://grandbig.github.io/images/android-update2.png" alt="Reboot起動" /></li>
<li>順番に全部やっているけど、どれも無限ループに&hellip;</li>
</ol>


<p>はい！文鎮化しましたね。</p>

<h4>文鎮化Nexus6を復旧するまでの軌跡</h4>

<p>まさか文鎮化したNexus6を放っておくわけにはいきません。<br/>
復旧させましょう！</p>

<ol>
<li>LOCKを外す
<code>fastboot oem unlock</code>を実行して、端末のLOCKを解除しましょう。</li>
<li><a href="https://developers.google.com/android/nexus/images?hl=ja">Google Developerサイト</a>からFactory Imageをダウンロード
筆者は5.0.1 (LRX22C)を落としました。</li>
<li>ダウンロードしたフォルダ内にzipファイルがあるので、解凍する</li>
<li>下記のコマンドを実行</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fastboot flash bootloader bootloader-shamu-moto-apq8084-71.05.img
</span><span class='line'>fastboot reboot-bootloader
</span><span class='line'>sleep 5
</span><span class='line'>fastboot flash radio radio-shamu-d4.0-9625-02.55.04.img
</span><span class='line'>fastboot reboot-bootloader
</span><span class='line'>sleep 5
</span><span class='line'>cd "zipを解凍したフォルダ"
</span><span class='line'>fastboot flash boot boot.img
</span><span class='line'>fastboot flash cache cache.img
</span><span class='line'>fastboot flash recovery recovery.img
</span><span class='line'>fastboot flash system system.img
</span><span class='line'>fastboot flash userdata userdata.img
</span><span class='line'>flashboot reboot</span></code></pre></td></tr></table></div></figure>


<ol>
<li>再起動したAndroidで初期設定</li>
</ol>


<p>これで復旧させることができました。やったね!!</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking 2.6.0でやってみよう自己証明書でのSSL通信]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/02/afnetworking2-dot-6-0/"/>
    <updated>2015-10-02T22:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/02/afnetworking2-dot-6-0</id>
    <content type="html"><![CDATA[<h4>AFNetworking2.5.xまでの自己証明書でのSSL通信</h4>

<p>これまで<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>2.5.xを使ってきた筆者ですが、開発中は当然のことながら自己証明書を利用することがあります。<br/>
まずはこれまでの書き方を<code>AFHTTPSessionManager</code>を例に確認してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'><span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">securityPolicy</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">responseSerializer</span><span class="p">.</span><span class="n">acceptableContentTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="s">@&quot;text/plain&quot;</span><span class="p">,</span> <span class="s">@&quot;application/json&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>そうです。<br/>
自己証明書を許可するのに、<code>manager.securityPolicy.allowInvalidCertificates = YES;</code>と書いていました。</p>

<p>しかし、2015/08/18に <strong>2.6.0</strong> が登場した途端、ネット上で大騒ぎに&hellip;笑。<br/>
<a href="https://github.com/AFNetworking/AFNetworking/releases">2.6.0のRelease Note</a>を見てみると、 <strong>Full Certificate Chain Validation has been removed from AFSecurityPolicy.</strong> なんて一言が&hellip;。</p>

<p>いろいろと困ったのですが、筆者の場合は次のやり方でうまくいきました。</p>

<h4>AFNetworking2.6.0での自己証明書 SSL通信</h4>

<p>はい。2.6.0では下記のように書きました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AFHTTPSessionManagerをインスタンス化</span>
</span><span class='line'><span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPSessionManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">securityPolicy</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">securityPolicy</span><span class="p">.</span><span class="n">validatesDomainName</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="n">manager</span><span class="p">.</span><span class="n">responseSerializer</span><span class="p">.</span><span class="n">acceptableContentTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="s">@&quot;text/plain&quot;</span><span class="p">,</span> <span class="s">@&quot;application/json&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>何が変わったかお気づきでしょうか？<br/>
そうです。<br/>
<code>manager.securityPolicy.validatesDomainName = NO;</code>を追加したのです。</p>

<h4>まとめ</h4>

<p>iOS9からATS設定が追加されたこともあり、HTTPSが推奨されています。<br/>
しかも、正式な証明書が開発・商用関係なく使われていくことでしょう。<br/>
なので、こういった更新は納得感ありますが、なかなか開発者には辛いところもありますよね。<br/>
とは言え、AppleやGoogleが決めていくことにはついていった方が良いよな〜といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeが正常かチェックしましょう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/23/check-xcode/"/>
    <updated>2015-09-23T13:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/23/check-xcode</id>
    <content type="html"><![CDATA[<h4>今、話題のXcodeGhostってなに！？</h4>

<p>中国で出回っている改ざんされたXcodeのことだそうです。<br/>
App Storeから一般公開向けのXcodeをダウンロードしたり、Apple DeveloperサイトからDeveloper向けの最新版をダウンロードするのであれば、特に何の問題もないでしょう。<br/>
『いや、実はどこどこから&hellip;』なんて方がいたら、早速チェックしてみましょう。</p>

<p>ユーザとして気をつけるのは、怪しいアプリはもちろんのこと、話題として上っているアプリはきちんと対応が完了しているのか確認してみるくらいでしょうか。<br/>
Appleも感染アプリの削除に全力で取り組んでいるでしょうし、様子を見るしかなさそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Xcodeの正常チェックの方法</h4>

<p>さて、本日、Appleから以下の内容のメールが飛んできました。</p>

<p>We recently removed apps from the App Store that were built with a counterfeit version of Xcode which had the potential to cause harm to customers. You should always download Xcode directly from the Mac App Store, or from the Apple Developer website, and leave Gatekeeper enabled on all your systems to protect against tampered software.</p>

<p>When you download Xcode from the Mac App Store, OS X automatically checks the code signature for Xcode and validates that it is code signed by Apple. When you download Xcode from the Apple Developer website, the code signature is also automatically checked and validated by default as long as you have not disabled Gatekeeper.</p>

<p>Whether you downloaded Xcode from Apple or received Xcode from another source, such as a USB or Thunderbolt disk, or over a local network, you can easily verify the integrity of your copy of Xcode. Learn more.</p>

<p>で、最後の <strong>Learn more</strong> をクリックすることで専用サイトで方法を教えてくれます。</p>

<p>コマンドは下記です。<br/>
<code>spctl --assess --verbose /Applications/Xcode.app</code></p>

<p>実行してから完了までに数分かかりますが、問題なければ、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Xcode.app: accepted
</span><span class='line'>source=Mac App Store</span></code></pre></td></tr></table></div></figure>


<p>もしくは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Xcode.app: accepted
</span><span class='line'>source=Apple</span></code></pre></td></tr></table></div></figure>


<p>あるいは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Xcode.app: accepted
</span><span class='line'>source=Apple System</span></code></pre></td></tr></table></div></figure>


<p>といった結果が得られるはずです。<br/>
App Storeからダウンロードしたか、AppleのDeveloperサイトからダウンロードしたかで異なります。</p>

<p>因みに、通常、正規のルートでダウンロードしてきた場合は、自動的にGatekeeperがチェックしているそうです。<br/>
意図的にGatekeeperをdisableにしていない限り。</p>

<p>Gatekeeperは『システム環境設定 > セキュリティとプライバシー > 一般 > ダウンロードしたアプリケーションの実行許可』から変更できるそうです。<br/>
それがGatekeeperとか意識したことなかったですけど&hellip;。<br/>
(ここで、すべてのアプリケーションを許可しているとGatekeeperがOFFだとか&hellip;。)</p>

<p>筆者は念のため、調べて問題ないことを確認しましたが、気になる方は試してみてはいかがでしょうか。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFSafariViewControllerを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller/"/>
    <updated>2015-09-22T22:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller</id>
    <content type="html"><![CDATA[<h4>iOS9から導入されたSFSafariViewControllerを使ってみよう！</h4>

<p>さて、iPhone6s, iPhone6s Plusの発売を心待ちにされている開発者の皆さんを横目にブログを更新したいと思います。<br/>
と言っても、筆者は土曜日にはiPhone6sをGETできるはず&hellip;。</p>

<p>本日はSFSafariViewControllerを触ってみたいと思います。<br/>
SFSafariViewControllerはアプリ内でWeb画面を表示したいときに使うことをAppleが奨励しています。これにより、今まで自作アプリからSafariを起動させていたのに対して、アプリ内でSafariを呼び出すことが可能となりました。<br/>
気をつけて欲しいのは、 <strong>カスタマイズはできない</strong> ということです。<br/>
例えば、UIWebViewやWKWebViewでやっていたような『Web側から <strong>document.location = &hellip;.</strong> を実行することでネイティブ側で何か処理をさせる』といったことはできません。<br/>
あくまでも <strong>単なるWebサイトの表示</strong> に利用します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>SFSafariViewControllerの使い方</h5>

<p>まずは、使い方を説明しましょう。<br/>
SFSafariViewControllerを使うためには、 <strong>SafariServices.framework</strong> を追加する必要があります。</p>

<p><img src="http://grandbig.github.io/images/sfsafariviewcontroller_1.png" alt="SafariServices.frameworkを追加" /></p>

<p>後は、ソースコードを書くだけです。<br/>
今回は画面上に置かれた『WEB』ボタンをクリックしたときにSFSafariViewControllerを呼び出すようにしてみます。</p>

<p><img src="http://grandbig.github.io/images/sfsafariviewcontroller_2.png" alt="画面キャプチャ" /></p>

<p>実際のソースコードは下記です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;SafariServices/SafariServices.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">SFSafariViewControllerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">SFSafariViewController</span> <span class="o">*</span><span class="n">sfv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// WEBボタンをタップした際に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">goToWebPage:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sfv</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SFSafariViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.yahoo.co.jp/&quot;</span><span class="p">]];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sfv</span><span class="p">.</span><span class="n">modalTransitionStyle</span> <span class="o">=</span> <span class="n">UIModalTransitionStyleCrossDissolve</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">self</span><span class="p">.</span><span class="n">sfv</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">sfv</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - SFSafariViewControllerDelegate</span>
</span><span class='line'><span class="c1">// アクションボタンをタップされた際に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span><span class="o">&lt;</span><span class="n">UIActivity</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">safariViewController:</span><span class="p">(</span><span class="n">SFSafariViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="nf">activityItemsForURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">URL</span> <span class="nf">title:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;activityItemdForURL&quot;</span><span class="p">);</span>        
</span><span class='line'>  <span class="k">return</span> <span class="err">@</span><span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SFSafariViewControllerに表示する最初の画面の読込みが完了した際に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safariViewController:</span><span class="p">(</span><span class="n">SFSafariViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="nf">didCompleteInitialLoad:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">didLoadSuccessfully</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;didCompleteInitialLoad&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SFSafariViewControllerのDone(完了)ボタンをタップした際に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safariViewControllerDidFinish:</span><span class="p">(</span><span class="n">SFSafariViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;safariViewControllerDidFinish&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでSFsafariViewControllerが実装されたことがわかると思います。</p>

<p>因みに、SFSafariViewControllerを使う上で気をつけたいのが、如何にユーザにあくまでもアプリ内の遷移であると理解させることかと思います。<br/>
例えば、デフォルトではSFSafariViewControllerは下から上に上がってくる形で表示がされます。<br/>
もし、WebView内でふわっと浮かび上がってくるような画面遷移のアニメーションをしているのだとしたら、これはかなりの違和感になりますよね？<br/>
なので、<code>self.sfv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;</code>のようにアニメーションを工夫することも重要になってきます。</p>

<p>また、<code>SFSafariViewControllerDelegate</code>のメソッドを3つ書いてみましたが、あまり使いどころが思い浮かばないというのが正直なところです。<br/>
Done(完了)ボタンを押したときに<code>dismissViewController</code>が必要かとも思ったのですが、自動的に閉じますし&hellip;。</p>

<p><code>SFSafariViewController</code>をユーザに見せている間に何らかの処理を裏でしておくといったことは考えられるかもしれませんね。</p>

<h5>Safariを起動する</h5>

<p>SFSafariViewControllerが登場したからといって、Safari起動ができなくなったわけではもちろんありません。<br/>
Safariを起動したって良いんです。<br/>
というのもiOS9からはアプリ間遷移がスムーズになったからです。<br/>
ただし、 <strong>1つ前のアプリに戻る</strong> ときのみの話ですが、頻繁に多種多様なアプリ間を移動するアプリでなければ十分でしょう。</p>

<p>試しに、先ほどの『WEB』ボタンをタップしたときの処理をSafariの起動に変更してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViwController.mから一部抜粋</span>
</span><span class='line'><span class="c1">// WEBボタンをタップした際に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">goToWebPage:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Safariを起動</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.yahoo.co.jp/&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Safariアプリを起動した後、下記のように、左上に戻るボタンが表示されます。</p>

<p><img src="http://grandbig.github.io/images/sfsafariviewcontroller_3.png" alt="1つ前のアプリに戻る" /></p>

<p>さて、いかがだったでしょうか。<br/>
今後は、iOS9以降対応のアプリを開発すると、すぐには完全に割り切ることはできないと思いますので、iOS8までのことも踏まえつつ、最適な方法を取るのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9でWebViewの性能を測ろう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/21/ios9-webview/"/>
    <updated>2015-09-21T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/21/ios9-webview</id>
    <content type="html"><![CDATA[<h4>iOS9で使えるWebViewで各種テスト</h4>

<p>さて、iOS8が出た時にも結果を載せましたが、iOS9でもやってみようと思います。<br/>
iOS9では <strong>SFSafariViewController</strong> というものが増えましたし、UIWebViewおよびWKWebViewがSafariに対して、どの程度の性能を示すのか改めて調べておくことも重要だと思います。</p>

<p>早速結果を記載していきます。</p>

<h5>HTML5の結果</h5>

<p><a href="https://html5test.com/">HTML5test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 391</li>
<li>WKWebView: 407</li>
<li>SFSafariViewController: 407</li>
<li>Safari: 409</li>
</ul>


<p>上記のような結果が得られました。<br/>
各種WebView間での差異は全て <strong>Storage</strong> の差です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>CSS3の結果</h5>

<p><a href="http://css3test.com/">CSS3test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 55%</li>
<li>WKWebView: 55%</li>
<li>SFSafariViewController: 55%</li>
<li>Safari: 55%</li>
</ul>


<p>上記のようにCSS3においては差異はありませんでした。</p>

<h5>SunSpiderの結果</h5>

<p><a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>の結果を記載します。<br/>
これはJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 1481.2 ms</li>
<li>WKWebView: 351.7 ms</li>
<li>SFSafariViewController: 364.5 ms</li>
<li>Safari: 343.1 ms</li>
</ul>


<p>上記のような結果が得られました。<br/>
UIWebViewは以前もお伝えしたようにWKWebViewの約4倍程度の処理時間がかかっています。<br/>
他は誤差の範囲で全く同じと見てよいでしょう。</p>

<h5>Octane2.0の結果</h5>

<p><a href="https://developers.google.com/octane/">Octane2.0</a>の結果を記載します。<br/>
これもJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 987</li>
<li>WKWebView: 8541</li>
<li>SFSafariViewController: 8112</li>
<li>Safari: 8627</li>
</ul>


<p>Octaneは点数制なので、スコアが高いほど優秀と言えます。<br/>
UIWebViewは他と比べて、低い点数となっています。<br/>
一方で、他の3つはほぼ誤差の範囲と見て良いでしょう。(SFSafariViewControllerが多少差がついているものの&hellip;)</p>

<p>以上の結果から用途を守って正しくWebViewを使うと良いでしょう。</p>

<ul>
<li>UIWebView

<ul>
<li>Storyboard上で配置できるので、使い方が簡単。</li>
<li>重い処理をさせることがない(高速処理を求めない)</li>
</ul>
</li>
<li>WKWebView

<ul>
<li>ソースコードベースで書くため、少し手間がかかる。</li>
<li>カスタマイズ性が高い＆高速処理が可能</li>
</ul>
</li>
<li>SFSafariViewController

<ul>
<li>単なるWebサイトを表示するためだけに利用。</li>
<li>カスタマイズ性が全く不要な場合に適切</li>
</ul>
</li>
<li>Safari

<ul>
<li>アプリ外の遷移でも問題なければ、アプリからSafariを起動するのも良いでしょう。iOS9からアプリ間の遷移がスムーズになったわけですし。</li>
</ul>
</li>
</ul>


<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8でrequestLocationが使える！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/20/requestlocation/"/>
    <updated>2015-09-20T01:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/20/requestlocation</id>
    <content type="html"><![CDATA[<h4>実はiOS8.4.1でrequestLocationが使える</h4>

<p>さて、今回はたまたま気づいたバグ？の紹介です。<br/>
皆様、ご存知の通り, iOS9から <strong>requestLocation</strong> なるものがCoreLocation.frameworkに追加されました。<br/>
これにより、1回だけ現在地を取得する処理を自作せずにframeworkに任せることができるようになりました。</p>

<p>しかし、iOS9からとアナウンスされているものの、実は <strong>iOS8.4.1</strong> でも利用できました。<br/>
コードは下記になります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を許可していない</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;kCLAuthorizationStatusNotDetermined&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedAlways</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を常に許可している場合</span>
</span><span class='line'>   <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;kCLAuthorizationStatusAuthorizedAlways&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ユーザが位置情報の使用を使用中のみ許可している場合</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;kCLAuthorizationStatusAuthorizedWhenInUse&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span><span class="o">&lt;</span><span class="n">CLLocation</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 位置情報の取得に成功した場合</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">locations</span><span class="p">.</span><span class="n">firstObject</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didFailWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 位置情報の取得に失敗した場合</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">getLocation:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestLocation</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS9.x以上の場合</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lm</span> <span class="n">requestLocation</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// iOS8.x以下の場合</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;iOS8.xです&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>騙されたと思って試してみてください。<br/>
なぜかiOS8.4.1でも<code>requestLocation</code>が実行されますので。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/"/>
    <updated>2015-09-13T02:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/13/google-sign-in</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-Inを利用したOAuth認証をやってみようと思います。<br/>
最近、<a href="https://console.developers.google.com">Google Developers Console</a>の画面が完全に一新されていました。<br/>
以前であれば、Google Developers ConsoleにOAuth2.0のiOSのクライアントIDを設定したときに、クライアントIDだけでなく、クライアントシークレットなども表示されていました。<br/>
それが、 <strong>クライアントID</strong> と <strong>iOSのURLスキーム</strong> のみになっていました。<br/>
これは完全にGoogleがGoogle Sign-Inを推奨している証であろうということで、早速使い方を見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。<br/>
冒頭に述べたようにサイトのデザインや表示項目なども変わっているので、1つ1つ見ていきましょう。</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-5.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="http://grandbig.github.io/images/google-sign-in-6.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-7.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はiOS用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-8.png" alt="OAuth2.0クライアントIDを作成②" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="http://grandbig.github.io/images/google-sign-in-1.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for iOSを実装しよう</h4>

<p>当然のことながら、基本的なことは<a href="https://developers.google.com/identity/sign-in/ios/start-integrating">Googleの公式サイト</a>に書かれています。<br/>
とは言え、英語ですし、案外躓くところもあったりするので、順を追って説明していきます。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/ios/start">Google Sign-In for iOSのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-9.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-10.png" alt="Enable Google services for your app" /></p>

<p>ここで <strong>App name</strong> にGoogle Developer Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力されれば、 <strong>iOS Bundle ID</strong> も選択可能になります。</p>

<p>必要事項を入力した後はChoose and configure servicesボタンを選択しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-11.png" alt="Choose and configure services" /></p>

<p>結果、画面が遷移します。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-12.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方のGenerate configuration filesボタンをクリックしましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-13.png" alt="Configuration Fileを作成しよう" /></p>

<p>plistファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-14.png" alt="plistファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、 <strong>Google Sign-In for iOS ライブラリ</strong> を自分のプロジェクトに導入しましょう。<br/>
Podfileを作成して、<code>pod 'Google/SignIn</code>と記載します。あとは<code>pod install</code>でOK</p>

<p>さて<code>xcworkspace</code>ファイルが作成されているはずなので、Xcodeで開きましょう。<br/>
先ほどダウンロードした<code>GoogleService-Info.plist</code>ファイルをプロジェクトに組み込みましょう。<br/>
ファイルを選択して、Xcodeプロジェクトにドラッグ＆ドロップでOKです。</p>

<p>続いて、<code>GoogleService-Info.plist</code>ファイルに記載された <strong>REVERSED_CLIENT_ID</strong> と <strong>BUNDLE_ID</strong> をURL schemesとして設定する必要があります。<br/>
TARGETS > info > URL TypesでURL Typeを2つ追加しましょう。<br/>
<img src="http://grandbig.github.io/images/google-sign-in-15.png" alt="URL Typesを追加" /></p>

<p>これでソースコードを書くまでの準備が整いました。<br/>
次にソースコードを書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Google/SignIn.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="nc">UIResponder</span> <span class="o">&lt;</span><span class="n">UIApplicationDelegate</span><span class="p">,</span> <span class="n">GIDSignInDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// AppDelegate.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>          
</span><span class='line'>  <span class="n">NSError</span><span class="o">*</span> <span class="n">configureError</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">GGLContext</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">configureWithError:</span> <span class="o">&amp;</span><span class="n">configureError</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSAssert</span><span class="p">(</span><span class="o">!</span><span class="n">configureError</span><span class="p">,</span> <span class="s">@&quot;Error configuring Google services: %@&quot;</span><span class="p">,</span> <span class="n">configureError</span><span class="p">);</span>
</span><span class='line'>                      
</span><span class='line'>  <span class="p">[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>                              
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">省略</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">openURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span> <span class="nl">sourceApplication:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">sourceApplication</span> <span class="nl">annotation:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">annotation</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">handleURL:</span><span class="n">url</span> <span class="nl">sourceApplication:</span><span class="n">sourceApplication</span> <span class="nl">annotation:</span><span class="n">annotation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Google Sign-inに成功した場合に呼び出される処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">signIn:</span><span class="p">(</span><span class="n">GIDSignIn</span> <span class="o">*</span><span class="p">)</span><span class="n">signIn</span> <span class="nl">didSignInForUser:</span><span class="p">(</span><span class="n">GIDGoogleUser</span> <span class="o">*</span><span class="p">)</span><span class="n">user</span> <span class="nl">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Perform any operations on signed in user here.</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">userId</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">userID</span><span class="p">;</span>                  <span class="c1">// For client-side use only!</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">idToken</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">authentication</span><span class="p">.</span><span class="n">idToken</span><span class="p">;</span> <span class="c1">// Safe to send to the server</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">profile</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">email</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">profile</span><span class="p">.</span><span class="n">email</span><span class="p">;</span>
</span><span class='line'>                      
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;userId: %@, idToken: %@, name: %@, email: %@&quot;</span><span class="p">,</span> <span class="n">userId</span><span class="p">,</span> <span class="n">idToken</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Google Sign-inに失敗した場合に呼び出される処理</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">signIn:</span><span class="p">(</span><span class="n">GIDSignIn</span> <span class="o">*</span><span class="p">)</span><span class="n">signIn</span> <span class="nl">didDisconnectWithUser:</span><span class="p">(</span><span class="n">GIDGoogleUser</span> <span class="o">*</span><span class="p">)</span><span class="n">user</span> <span class="nl">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Perform any operations when the user disconnects from app here.</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Google/SignIn.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span> <span class="o">&lt;</span><span class="n">GIDSignInUIDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">GIDSignInButton</span> <span class="o">*</span><span class="n">signInButton</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>          
</span><span class='line'>  <span class="p">[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">uiDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 任意のスコープを設定</span>
</span><span class='line'>  <span class="p">[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">scopes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;https://www.googleapis.com/auth/calendar&quot;</span><span class="p">,</span> <span class="s">@&quot;https://www.googleapis.com/auth/drive&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;scope: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">scopes</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// エラーが発生した場合に呼び出される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">signInWillDispatch:</span><span class="p">(</span><span class="n">GIDSignIn</span> <span class="o">*</span><span class="p">)</span><span class="nv">signIn</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Google OAuth2認証画面を開始するときに実行される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">signIn:</span><span class="p">(</span><span class="n">GIDSignIn</span> <span class="o">*</span><span class="p">)</span><span class="nv">signIn</span> <span class="nf">presentViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// OAuth2認証画面を表示する処理</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Google OAuth2認証が完了したら実行される処理</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">signIn:</span><span class="p">(</span><span class="n">GIDSignIn</span> <span class="o">*</span><span class="p">)</span><span class="nv">signIn</span> <span class="nf">dismissViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// OAuth2認証の画面を閉じる処理</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Google Sign-inボタンをクリックした場合の処理(Storyboardで設定すること)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">didTapSignIn:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Google Sign-inを実行する処理</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">GIDSignIn</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">signIn</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を実行することで下記のようにOAuth2認証ができました。</p>

<p><img src="http://grandbig.github.io/images/google-sign-in-2.png" alt="Google OAuth2認証開始画面" /><br/>
<img src="http://grandbig.github.io/images/google-sign-in-3.png" alt="Google OAuth2認証の認証許可確認画面" /></p>

<p><strong>Google+アプリ</strong> がインストールされている場合はSafariではなく <strong>Google+アプリ</strong> が起動します。</p>

<p>さて、いかがだったでしょうか？<br/>
今回はひとまず、ここまでにしますが、今後はOAuth2認証後にGoogle Calendar APIやGoogle Driveの画面表示をしてみたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9 App Transport Securityについて]]></title>
    <link href="http://grandbig.github.io/blog/2015/08/31/ios9-ats/"/>
    <updated>2015-08-31T22:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/08/31/ios9-ats</id>
    <content type="html"><![CDATA[<h4>iOS9のApp Transport Securityについて調べてみた</h4>

<p>さて、今月、最終日になんとかブログ更新です。<br/>
来週、新型iPhoneの発表が期待される中、開発者間で話題となっているApp Transport Security(以下、ATS)について調べてみました。</p>

<p>ATSの詳細は<a href="http://qiita.com/yanayanalte/items/e6d83c12af77fa238a58">iOS9 ATS問題</a>などで既に詳しく書かれていますので、割愛します。<br/>
どちらかと言うと実開発よりで話をしたいと思います。</p>

<p>これまで筆者はiOSアプリを作り続けてきたわけなんですが、実は会社では所謂ハイブリッドアプリと呼ばれる、 <strong>WebViewを用いたアプリ</strong> の開発をすることが多く、古くからあるUIWebViewはもちろんのことWKWebViewも利用してきました。<br/>
正直、これまで特別な場合を覗いて、 <strong>HTTPS</strong> を意識することはありませんでした。<br/>
しかし、昨今のセキュリティ問題から周りの考え方も変わりつつあります。<br/>
それをさらに一押したのが、iOS9のATSではないかと考えています。<br/>
今後は、グローバルに空いているサーバに対しては <strong>HTTPS</strong> しか許されないことになることでしょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>iOS8でのWKWebViewにおける自己証明書について</h5>

<p>iOS9の具体的な話に入る前に一言だけ。<br/>
周知のことかもしれませんが、iOS8のWKWebViewでは自己証明書を利用したサーバの <strong>https</strong> から始まるURLを指定することはできません。<br/>
指定したとしても、表示することができません。<br/>
これは<a href="http://stackoverflow.com/questions/27100540/allow-unverified-ssl-certificates-in-wkwebview">stackoverflow &ndash; Allow unverified ssl certificates in WKWebView</a>に書かれている通り、WKNavigationDelegate Protocolである <strong>didReceiveAuthenticationChallenge</strong> メソッドが呼ばれないためです。</p>

<p>iOS8が登場した当初はバグでは？と騒がれていましたが、iOS9での <strong>HTTPS</strong> 推奨の流れから見るに、わざとだったのでは？とも勘ぐれますね&hellip;。</p>

<h5>iOS9でのWKWebViewにおける自己証明書について</h5>

<p>iOS9からは <strong>didReceiveAuthenticationChallenge</strong> メソッドを通るらしく、コードを書くことで、自己証明書を利用したHTTPS通信が可能なようです。<br/>
<a href="http://qiita.com/niwatako/items/9ae602cb173625b4530a">iOS9からWKWebViewのSSL/TLS接続はコードで制御する</a>を参照のこと。<br/>
確かに、問題なく、実行できることを確認しました。</p>

<h5>iOS9でのHTTP通信許可方法について</h5>

<p>Info.plistに下記の設定を入れることで、全てのHTTP通信を許可できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">NSAppTransportSecurity</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">NSAllowsArbitraryLoads</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">true</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>流石に全てを許可するのははばかられるといった場合にはHTTP通信を許可するドメインを指定することもできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">NSAppTransportSecurity</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">NSExceptionDomains</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">xxx</span><span class="p">.</span><span class="n">com</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">NSTemporaryExceptionAllowsInsecureHTTPLoads</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">true</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、これには注意が必要です。<br/>
もしも、指定したドメインアクセス時に呼び出されるHTMLファイルの中に、外部ドメインから取得しているJavaScriptファイルがあった場合、それらもInfo.plistに指定する必要があります。<br/>
これまで、WebソースはAppleの審査を介さずとも変更が可能な範疇でしたが、HTTP通信として設定を必要とする場合が出てくるため、十分に注意が必要です。<br/>
HTTP, HTTPSのどちらでもソースが取得できる場合は、Info.plistにHTTP通信用のドメインとして登録するのではなく、下記のように <strong>https</strong> からパスを指定した方が良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://〜&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>本日は試してみたことをパパっと書きましたが、時間があるときにもっと探ってみようと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kontakt.ioのSmart Beaconのパラメータを書き換えてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/07/20/write-kontakt-beacon/"/>
    <updated>2015-07-20T00:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/07/20/write-kontakt-beacon</id>
    <content type="html"><![CDATA[<h4>Kontakt.ioのSmart Beaconのパラメータの書き換え方法</h4>

<p>さて、続きを書いていきます。<br/>
前回、Kontakt.ioのSmart Beaconを検知するところまで書きました。<br/>
本記事では、必要に応じて、パラメータを変更する方法について書きたいと思います。</p>

<p>手順は<a href="http://docs.kontakt.io/ios-sdk/quickstart/#beacon-configuration">Kontakt.ioの公式ページのBeacon Configuration</a>に書かれていますが、<code>/device/update</code>に引っかかったり、REST APIを叩こうとしたりすることもあるかもしれないので、紹介します。(筆者は初めきちんと読まずにいろいろと実行してしまいました&hellip;)</p>

<p>では、早速書いていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Objective-C編</h5>

<p>さて、まずはObjective-Cです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;KontaktSDK.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="n">KTKBluetoothManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">KTKBeaconManager</span> <span class="o">*</span><span class="n">bm</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">KTKBeaconDevice</span> <span class="o">*</span><span class="n">bd</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_bm</span> <span class="o">=</span> <span class="p">[</span><span class="n">KTKBeaconManager</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">_bm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_flag</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iBeaconデバイスの検索開始</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_bm</span> <span class="n">startFindingDevices</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidDisappear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iBeaconデバイスの検索停止</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_bm</span> <span class="n">stopFindingDevices</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - KTKBluetoothManagerDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bluetoothManager:</span><span class="p">(</span><span class="n">KTKBluetoothManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">bluetoothManager</span> <span class="nf">didChangeDevices:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">devices</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_bd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 利用したいKTKBeaconDeviceが見つかっていない場合</span>
</span><span class='line'>       <span class="n">NSArray</span> <span class="o">*</span><span class="n">deviceArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">devices</span> <span class="n">allObjects</span><span class="p">];</span>
</span><span class='line'>       <span class="k">for</span><span class="p">(</span><span class="kt">id</span> <span class="n">device</span> <span class="k">in</span> <span class="n">deviceArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">KTKBeaconDevice</span> <span class="o">*</span><span class="n">beacon</span> <span class="o">=</span> <span class="n">device</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">([</span><span class="n">beacon</span><span class="p">.</span><span class="n">uniqueID</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;****&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 利用したいiBeaconを格納</span>
</span><span class='line'>              <span class="n">_bd</span> <span class="o">=</span> <span class="n">beacon</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 利用したいKTKBeaconDeviceが見つかった場合</span>
</span><span class='line'>      <span class="n">KTKCharacteristicDescriptor</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>      <span class="n">descriptor</span> <span class="o">=</span> <span class="p">[</span><span class="n">_bd</span> <span class="nl">characteristicDescriptorWithType:</span><span class="n">kKTKCharacteristicDescriptorTypeMajor</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// iBeaconデバイスに接続</span>
</span><span class='line'>      <span class="kt">BOOL</span> <span class="n">connected</span> <span class="o">=</span> <span class="p">[</span><span class="n">_bd</span> <span class="nl">connectWithPassword:</span><span class="s">@&quot;****&quot;</span> <span class="nl">andError:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">connected</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 接続できた場合</span>
</span><span class='line'>          <span class="c1">// パラメータ値の取得</span>
</span><span class='line'>          <span class="n">err</span> <span class="o">=</span> <span class="p">[</span><span class="n">_bd</span> <span class="nl">readValueForCharacteristicWithDescriptor:</span><span class="n">descriptor</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">NSString</span> <span class="o">*</span><span class="n">valueString</span> <span class="o">=</span> <span class="p">[</span><span class="n">_bd</span> <span class="nl">stringForCharacteristicWithDescriptor:</span><span class="n">descriptor</span><span class="p">];</span>
</span><span class='line'>              <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;value: %@&quot;</span><span class="p">,</span> <span class="n">valueString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// パラメータの書き換え処理</span>
</span><span class='line'>                  <span class="n">err</span> <span class="o">=</span> <span class="p">[</span><span class="n">_bd</span> <span class="nl">writeString:</span><span class="s">@&quot;20053&quot;</span> <span class="nl">forCharacteristicWithDescriptor:</span><span class="n">descriptor</span><span class="p">];</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="c1">// iBeaconデバイスから切断</span>
</span><span class='line'>              <span class="p">[</span><span class="n">_bd</span> <span class="n">disconnect</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記処理を実行後、Kontakt.ioの専用アプリで確認すれば、パラメータの値が変更されていることを確認できます。</p>

<h5>Swift編</h5>

<p>続いて、Swiftのコードも書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">KTKBluetoothManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">let</span> <span class="nl">bm:</span><span class="n">KTKBeaconManager</span> <span class="o">=</span> <span class="n">KTKBeaconManager</span><span class="p">()</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">bd:</span><span class="n">KTKBeaconDevice</span><span class="o">?</span> <span class="o">=</span> <span class="n">KTKBeaconDevice</span><span class="p">()</span>
</span><span class='line'>  <span class="n">var</span> <span class="nl">flag:</span><span class="n">Bool</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">bm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidAppear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// iBeaconデバイスの検索開始</span>
</span><span class='line'>      <span class="n">bm</span><span class="p">.</span><span class="n">startFindingDevices</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidDisappear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// iBeaconデバイスの検索停止</span>
</span><span class='line'>      <span class="n">bm</span><span class="p">.</span><span class="n">stopFindingDevices</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">bluetoothManager</span><span class="p">(</span><span class="nl">bluetoothManager:</span> <span class="n">KTKBluetoothManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didChangeDevices</span> <span class="nl">devices:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">?</span><span class="p">.</span><span class="n">uniqueID</span> <span class="o">==</span> <span class="s">&quot;****&quot;</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 利用したいKTKBeaconDeviceが見つかった場合</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">descriptor:</span><span class="n">KTKCharacteristicDescriptor</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">!</span><span class="p">.</span><span class="n">characteristicDescriptorWithType</span><span class="p">(</span><span class="n">kKTKCharacteristicDescriptorTypeMajor</span><span class="p">)</span>
</span><span class='line'>          <span class="n">var</span> <span class="nl">err:</span><span class="n">NSError</span><span class="o">?</span>
</span><span class='line'>          <span class="c1">// iBeaconデバイスに接続</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">connected:</span><span class="n">Bool</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">!</span><span class="p">.</span><span class="n">connectWithPassword</span><span class="p">(</span><span class="s">&quot;****&quot;</span><span class="p">,</span> <span class="nl">andError:</span> <span class="o">&amp;</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">connected</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 接続できた場合</span>
</span><span class='line'>              <span class="c1">// パラメータ値の取得</span>
</span><span class='line'>              <span class="n">err</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">!</span><span class="p">.</span><span class="n">readValueForCharacteristicWithDescriptor</span><span class="p">(</span><span class="n">descriptor</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">let</span> <span class="n">valueString</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">!</span><span class="p">.</span><span class="n">stringForCharacteristicWithDescriptor</span><span class="p">(</span><span class="n">descriptor</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(valueString)&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">flag</span> <span class="o">==</span> <span class="n">false</span> <span class="p">{</span>
</span><span class='line'>                      <span class="c1">// パラメータの書き換え処理</span>
</span><span class='line'>                      <span class="n">err</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">!</span><span class="p">.</span><span class="n">writeString</span><span class="p">(</span><span class="s">&quot;20053&quot;</span><span class="p">,</span> <span class="nl">forCharacteristicWithDescriptor:</span> <span class="n">descriptor</span><span class="p">)</span>
</span><span class='line'>                      <span class="n">self</span><span class="p">.</span><span class="n">flag</span> <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="c1">// iBeaconデバイスから切断</span>
</span><span class='line'>                  <span class="n">self</span><span class="p">.</span><span class="n">bd</span><span class="o">?</span><span class="p">.</span><span class="n">disconnect</span><span class="p">()</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 利用したいKTKBeaconDeviceが見つかっていない場合</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">deviceArray:</span><span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="n">devices</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="n">device</span> <span class="k">in</span> <span class="n">deviceArray</span>  <span class="p">{</span>
</span><span class='line'>              <span class="n">let</span> <span class="nl">beacon:</span><span class="n">KTKBeaconDevice</span> <span class="o">=</span> <span class="n">device</span> <span class="n">as</span><span class="o">!</span> <span class="n">KTKBeaconDevice</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">beacon</span><span class="p">.</span><span class="n">uniqueID</span> <span class="o">==</span> <span class="s">&quot;****&quot;</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// 利用したいiBeaconを格納</span>
</span><span class='line'>                  <span class="n">self</span><span class="p">.</span><span class="n">bd</span> <span class="o">=</span> <span class="n">beacon</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こちらも専用アプリでパラメータ値が書き換わっていることを確認できました。<br/>
Kontakt.ioの制御特性を活かしたサービスを企画できる可能性を感じました。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kontakt.ioのSmart Beaconを使ってみた]]></title>
    <link href="http://grandbig.github.io/blog/2015/07/18/start-kontakt-beacon/"/>
    <updated>2015-07-18T22:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/07/18/start-kontakt-beacon</id>
    <content type="html"><![CDATA[<h4>Kontakt.ioのSmart Beaconを使ってみよう</h4>

<p>さて、久しぶりの更新です。<br/>
実は先日、以前から気になっていた<a href="https://store.kontakt.io/our-products/1-bluetooth-beacon.html">Kontakt.io Smart Beacon</a>を購入してみました。<br/>
あまり海外の製品を購入することがないので、届くか心配でしたが、ばっちり自宅に届きました笑</p>

<p>なぜ、Kontakt.ioのSmart Beaconに着目していたかというと、筆者が知る限り、最も発信出力(TxPower)を弱くすることが可能なBeaconだからです。<br/>
<a href="https://support.kontakt.io/hc/en-gb/articles/201621521-Transmission-power-Range-and-RSSI">仕様書</a>を見てみると、出力を-30[dBm]にまで下げることができ、その電波距離は実に2[m]程度らしいです。</p>

<p>また、SDKが充実しており、発信出力を自由に変更できるところもポイント高いですね。<br/>
さて、今回は基本的な実装から見て行きましょう！(何回かに分けて記事にしようと思います。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>SDKをプロジェクトに追加</h4>

<p>まずは、SDKを使える状態に持っていきます。</p>

<h5>Objective-C編</h5>

<p>CocoaPodsで提供されていますので、簡単です。</p>

<ol>
<li>Projectファイルと同じ階層に<code>Podfile</code>を作成します</li>
<li><code>pod 'KontaktSDK'</code>と記載します</li>
<li><code>pod install</code>を実行します</li>
</ol>


<p>以上でプロジェクトへの追加完了です。</p>

<h5>Swift編</h5>

<p>CocoaPods使いましょう！</p>

<ol>
<li>Projectファイルと同じ階層に<code>Podfile</code>を作成します</li>
<li><code>pod 'KontaktSDK'</code>と記載します</li>
<li><code>pod install</code>を実行します</li>
<li>Bridging-Headerファイルを作成します
<code>ProjectName-Bridging-Header.h</code>ファイルを作成し、Build Settings > Swift Compiler > Objective-C Bridging Headerにパスを設定</li>
<li>Bridging-Headerファイルに必要なライブラリを<code>import</code>します</li>
</ol>


<p>下記は、Buid Settingsの設定です。<br/>
<img src="http://grandbig.github.io/images/kontakt1.png" alt="Bridging-Headerファイルの設定" /></p>

<p>下記はBridging-Headerファイルの中身です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#ifndef KontaktSwiftTest_KontaktSwiftTest_Bridging_Header_h</span>
</span><span class='line'><span class="cp">#define KontaktSwiftTest_KontaktSwiftTest_Bridging_Header_h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;KontaktSDK.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Kontakt.ioのBeaconを検知してみよう</h4>

<p>これで準備が整ったので、実際にソースを書いて、Beaconを検知してみましょう！</p>

<h5>Objective-C編</h5>

<p>ViewController.mにどんどん書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.m</span>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;KontaktSDK.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="n">KTKLocationManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">KTKLocationManager</span> <span class="o">*</span><span class="n">lm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_lm</span> <span class="o">=</span> <span class="p">[</span><span class="n">KTKLocationManager</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">_lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">KTKLocationManager</span> <span class="n">canMonitorBeacons</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">KTKRegion</span> <span class="o">*</span><span class="n">region</span> <span class="o">=</span> <span class="p">[</span><span class="n">KTKRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>      <span class="n">region</span><span class="p">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s">@&quot;AF41A130-E105-4F13-9483-316B7101B0A9&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">[</span><span class="n">_lm</span> <span class="nl">setRegions:</span><span class="err">@</span><span class="p">[</span><span class="n">region</span><span class="p">]];]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">_lm</span> <span class="n">startMonitoringBeacons</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidDisappear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">_lm</span> <span class="n">stopMonitoringBeacons</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - KTKLocationManagerDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">KTKLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">locationManager</span> <span class="nf">didChangeState:</span><span class="p">(</span><span class="n">KTKLocationManagerState</span><span class="p">)</span><span class="nv">state</span> <span class="nf">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">KTKLocationManagerStateFailed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Something went wrong with your Location Services settings. Check OS settings.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">KTKLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">locationManager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">KTKRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Enter region %@&quot;</span><span class="p">,</span> <span class="n">region</span><span class="p">.</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">KTKLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">locationManager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">KTKRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Exit region %@&quot;</span><span class="p">,</span> <span class="n">region</span><span class="p">.</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">KTKLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">locationManager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Ranged beacons count: %lu&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">beacons</span> <span class="n">count</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Swift編</h5>

<p><code>ViwController.swift</code>にどんどん書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ViewController.swift</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">KTKLocationManagerDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span> <span class="nl">lm:</span><span class="n">KTKLocationManager</span> <span class="o">=</span> <span class="n">KTKLocationManager</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">KTKLocationManager</span><span class="p">.</span><span class="n">canMonitorBeacons</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">let</span> <span class="nl">region:</span><span class="n">KTKRegion</span> <span class="o">=</span> <span class="n">KTKRegion</span><span class="p">()</span>
</span><span class='line'>          <span class="n">region</span><span class="p">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s">&quot;AF41A130-E105-4F13-9483-316B7101B0A9&quot;</span>
</span><span class='line'>          <span class="n">lm</span><span class="p">.</span><span class="n">setRegions</span><span class="p">([</span><span class="n">region</span><span class="p">])</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">lm</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidAppear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">lm</span><span class="p">.</span><span class="n">startMonitoringBeacons</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidDisappear</span><span class="p">(</span><span class="nl">animated:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">viewDidDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">lm</span><span class="p">.</span><span class="n">stopMonitoringBeacons</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">KTKLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didChangeState</span> <span class="nl">state:</span> <span class="n">KTKLocationManagerState</span><span class="p">,</span> <span class="n">withError</span> <span class="nl">error:</span> <span class="n">NSError</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="p">.</span><span class="n">Failed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;Something went wrong with your Location Services settings. Check OS settings.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">KTKLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didEnterRegion</span> <span class="nl">region:</span> <span class="n">KTKRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;Enter region \(region.uuid)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">KTKLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didExitRegion</span> <span class="nl">region:</span> <span class="n">KTKRegion</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;Exit region \(region.uuid)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">locationManager</span><span class="p">(</span><span class="nl">locationManager:</span> <span class="n">KTKLocationManager</span><span class="o">!</span><span class="p">,</span> <span class="n">didRangeBeacons</span> <span class="nl">beacons:</span> <span class="p">[</span><span class="n">AnyObject</span><span class="p">]</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="s">&quot;Ranged beacons count: \(beacons.count)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでKontakt.ioのSmart Beaconを検知することができるようになりました。<br/>
次回はAPI連携して、Beaconのパラメータを変えてみたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでRealmで保存した値を確認しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/22/android-realmbrowser/"/>
    <updated>2015-06-22T00:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/22/android-realmbrowser</id>
    <content type="html"><![CDATA[<h4>Android Realm Browserを使おう</h4>

<p>さて、<a href="http://grandbig.github.io/blog/2015/06/20/android-realm/">前回の記事</a>で実装したRealmですが、値を確かめたいことがあると思います。<br/>
その方法について見て行きましょう。</p>

<p><a href="https://github.com/dmytrodanylyk/realm-browser">Android Realm Browser</a>を利用することでアプリ上で直接、値を確認することが可能です。</p>

<p>実装手順</p>

<p>１. GradleScripts > build.gradle(Module: app) のdependenciesを修正
<code>compile 'com.github.dmytrodanylyk.realm-browser:library:0.0.2'</code>を<code>dependencies { ... }</code>に追加します。<br/>
２. <code>RealmFilesActivity</code>を起動する処理を追加</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MainActivity.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>          <span class="c1">// Realmデータ閲覧用のActivityを起動</span>
</span><span class='line'>          <span class="n">RealmBrowser</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">addRealmModel</span><span class="o">(</span><span class="n">Engineer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="n">RealmFilesActivity</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、これでアプリを実行してみましょう。<br/>
下記のような画面を見ることができるはずです。</p>

<p><img src="http://grandbig.github.io/images/android-realmbrowser.png" alt="Realmデータ確認画面" /></p>

<h4>ADBで確認する方法</h4>

<p>他にも確認する方法があります。<br/>
Android StudioをPC上で使えるように設定するにあたって、意識せずにADBというツールがインストールされています。<br/>
このADBコマンドを利用することでデバイスの中身を直接見ることが可能となります。</p>

<p>ADB設定手順</p>

<p>１. <code>.bashrc</code>ファイルにADBツールのパスを設定
<code>.bashrc</code>ファイルに<code>export PATH=$PATH:/Users/&lt;ユーザ名&gt;/Library/Android/sdk/platform-tools</code>とパスを設定しましょう。<br/>
２. <code>.bashrc</code>ファイルの変更を反映
<code>source ~/.bashrc</code>を実行</p>

<p>これでADBコマンドを利用可能になりました。<br/>
続いて下記手順で、Realmデータの中身を見て行きましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span>
</span><span class='line'><span class="n">$</span> <span class="n">run</span><span class="o">-</span><span class="n">as</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">takahiro</span><span class="o">.</span><span class="na">realmsample</span>
</span><span class='line'><span class="n">$</span> <span class="n">cd</span> <span class="n">files</span><span class="o">/</span>
</span><span class='line'><span class="n">$</span> <span class="n">cat</span> <span class="k">default</span><span class="o">.</span><span class="na">realm</span>
</span></code></pre></td></tr></table></div></figure>


<p>日本語を保存している場合は文字化けして見えますが、保存されていることは確認できます。<br/>
本当は<code>adb pull</code>コマンドを使ってPCに<code>default.realm</code>を持ってきて、Realm Browserアプリで中身を見たいのですが、<br/>
今のところうまくコピーできず見れていません&hellip;。<br/>
(因みに端末はNexus6を利用しています。)</p>

<p>とりあえず、<code>Android Realm Browser</code>で見るしかないかな〜といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
