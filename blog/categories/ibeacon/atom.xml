<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iBeacon | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ibeacon/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-05-07T00:59:40+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iBeacon完全攻略！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/29/ibeacon-review/"/>
    <updated>2015-04-29T21:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/29/ibeacon-review</id>
    <content type="html"><![CDATA[<h4>iBeaconを復習しよう！</h4>

<p>本日はこれまでも何度か取り上げてきたiBeaconについて改めて復習してみたいと思います。<br/>
今回はiOS端末でのiBeaconの発信/受信に特化して書きます。</p>

<p>これまでの関連記事は以下です。</p>

<ul>
<li><a href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/">噂のiOS7.1でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon/">iOS8でiBeaconを試してみよう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/">Swiftを使って、iBeaconのCentralアプリを作ろう！！</a></li>
<li><a href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/">複数のiBeacon信号を利用してみよう！</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>では、早速、まとめていきましょう。</p>

<h4>iBeaconが利用可能な端末</h4>

<ul>
<li>OS: iOS7.0以上</li>
<li>端末: iPhone4S以降, iPad(第３世代)以降, iPad mini以降, iPod touch(第５世代以降)
※もちろんiPad Airでも利用可能</li>
</ul>


<h4>iOSごとのiBeacon機能の差異</h4>

<p>まずは動作面での差異について</p>

<ul>
<li>iOS7.0.xの場合<br/>
アプリをFG起動もしくはBG起動していないとiBeaconを検知することはできない</li>
<li>iOS7.1.x以降の場合<br/>
アプリを起動していない(停止状態の)場合でもiBeaconを検知可能</li>
</ul>


<p>次にプログラミング面での差異について</p>

<p>プログラミング面ではCentral側にのみ多少の差異があります。<br/>
iBeaconの検知には <strong>CoreLocation.framework</strong> を利用します。
<strong>CoreLocation.framework</strong> は位置情報サービスを利用するためのフレームワークですが、iBeaconの領域監視メソッドが組み込まれています。<br/>
もともと、ジオフェンスの領域監視メソッドが組み込まれていますので、それと同等に扱いたいというApple側の意図が見えます。</p>

<p>具体的な差異について説明します。<br/>
位置情報サービスの利用許可メソッドをiOS8から組み込む必要があります。</p>

<p>```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) CLLocationManager <em>lm;
@property (strong, nonatomic) NSUUID </em>proximityUUID;
@property (strong, nonatomic) CLBeaconRegion <em>beaconRegion;
@property (strong, nonatomic) CLBeacon </em>nearestBeacon;
@property (strong, nonatomic) NSString *str;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion class]]) {
      // iOS7.x以降の端末
      // CLLocationManagerの初期化
      self.lm = [[CLLocationManager alloc] init];
      self.lm.delegate = self;</p>

<pre><code>  // UUIDの設定
  self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@"8D4DB809-032F-4771-96F3-99BD5C25F924"];
  // Bundle Identifierの取得
  NSBundle *bundle = [NSBundle mainBundle];
  NSString *bid = [bundle bundleIdentifier];
  self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID identifier: bid];

  if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {
      // iOS8以上の場合
      // 位置情報サービスを常に許可させて良いかどうかを尋ねるためのメソッド
      [self.lm requestAlwaysAuthorization];
  } else {
      // iOS8未満の場合
      // iBeacon領域の監視を開始
      [self.lm startMonitoringForRegion: self.beaconRegion];
  }
</code></pre>

<p>  } else {
      // iOS6.x以前の端末
      UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&ldquo;確認&rdquo; message:@&ldquo;iBeacon機能を利用できない端末です。&rdquo; delegate: nil cancelButtonTitle: nil otherButtonTitles:@&ldquo;OK&rdquo;, nil];
      // アラートを表示
      [alert show];
  }
}</p></li>
</ul>


<p>// ユーザの位置情報の許可状態を確認するメソッド
&ndash; (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{</p>

<pre><code>if (status == kCLAuthorizationStatusAuthorizedAlways) {
    // ユーザが位置情報の使用を常に許可している場合
    // iBeacon領域の監視を開始
    [self.lm startMonitoringForRegion: self.beaconRegion];
} else {
    // その他の場合
    // 設定画面に遷移
    NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
    [[UIApplication sharedApplication] openURL:url];
}
</code></pre>

<p>}</p>

<p>@end
```</p>

<p>iOS7.xでは<code>startMonitoringForRegion</code>メソッドを実行した段階で<code>didChangeAuthorizationStatus</code>メソッドが呼ばれます。<br/>
iOS8では、<code>requestAlwaysAuthorization</code>メソッドを実行(位置情報サービスを常に許可する場合のメソッド)しなければ、<code>didChangeAuthorizationStatus</code>メソッドが呼ばれないため、<code>startMonitoringForRegion</code>メソッドの実行タイミングを変える必要が出てきました。</p>

<h4>iBeacon関連メソッドの実行順について(Centralの場合)</h4>

<p>先ほどiBeaconの検知は <strong>CoreLocation.framework</strong> 内のメソッドとして組み込まれていると説明しました。では、他にどんなメソッドがあるのでしょうか。</p>

<p><code>objective-c
// 領域監視が開始された後に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager didStartMonitoringForRegion:(CLRegion *)region {
}
</code></p>

<p><code>objective-c
// 領域監視に失敗した場合に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager monitoringDidFailForRegion:(CLRegion *)region withError:(NSError *)error {
}
</code></p>

<p><code>objective-c
// 監視領域に入った場合に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager didEnterRegion:(CLRegion *)region {
}
</code></p>

<p><code>objective-c
// 監視領域から出た場合に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager didExitRegion:(CLRegion *)region {
}
</code></p>

<p><code>objective-c
// 監視領域に対する状態が変化した場合に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion *)region {
}
</code></p>

<p><code>objective-c
// iBeacon信号をレンジング検知した場合に呼び出される処理
- (void)locationManager:(CLLocationManager *)manager didRangeBeacons:(NSArray *)beacons inRegion:(CLBeaconRegion *)region {
}
</code></p>

<p>上記のメソッドを使えば十分なアプリが開発できるはずです。<br/>
さて、ここで注意しておくべきなのは、<code>startRangingBeaconsInRegion</code>メソッドをどのタイミングで実行するかということです。</p>

<p>基本的には、 <strong>監視領域に入ったタイミング</strong> で<code>startRangingBeaconsInRegion</code>メソッドを実行するのが普通かもしれません。<br/>
しかし、この場合は注意が必要です。<br/>
なぜなら、監視領域内でアプリを落として、再度起動した場合、<code>didEnterRegion</code>メソッドが実行されないからです。つまり、既に監視領域に入っている場合は <strong>監視領域に侵入したと見なされない</strong> ということです。<br/>
よって、こういったケースがアプリの利用に打撃を与えるのであれば、 <strong>監視領域に入ったタイミング</strong> のみに<code>startRangingBeaconsInRegion</code>メソッドを置くわけにはいかないことになります。<br/>
その場合は、<code>didDetermineState</code>メソッドで既に監視領域内にいる場合(<code>state</code>が<code>CLRegionStateInside</code>の場合)に<code>startRangingBeaconsInRegion</code>メソッドを実行するようにしましょう。</p>

<h4>Peripheralの注意点</h4>

<p>続いて、PeripheralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末ではアプリをFG起動している間のみiBeacon信号の発信が可能です。<br/>
アプリがBG起動になった場合、iBeacon信号の発信が止まってしまうため、数秒後にCentral側のiOS端末で<code>didExitRegion</code>メソッドが実行されます。<br/>
なので、iOS端末でPeripheralの役割を担いたいのであれば、FG起動を続けることに問題がない使い方である場合に限ります。</p>

<p>因みに、XcodeのBackground Modesで <strong>Act as a Bluetooth LE accessory</strong> を有効にしたとしても、BG起動中はiBeaconを発信することはできません。</p>

<p>また、 <strong>CoreBluetooth.framework</strong> にはiOS端末がiBeacon発信状態(アドバタイジング状態)かを判別する<code>isAdvertising</code> プロパティが存在します。<br/>
iBeaconを発信している状態でアプリをBG起動にした場合は<code>isAdvertising</code>は <strong>YES</strong> として返却されます。つまり、実際の状態と必ずしも一致するわけではないということです。</p>

<h4>Centralの注意点</h4>

<p>最後にCentralとしてiOS端末を使う場合の注意点についてお話しておきます。<br/>
iOS端末でiBeaconのレンジング処理を行う場合、FG起動時にしかレンジング処理を実行できません。<br/>
そのため、アプリの状態によらずレンジング処理が必要な仕様を実現することは不可能ということになります。</p>

<p>一応、<code>didEnterRegion</code>メソッドや<code>didExitRegion</code>メソッドなどのデリゲートメソッドが実行された場合、約10秒間はアプリの状態によらずあらゆる処理が実行可能であるため、この間のみレンジング処理を実行して<code>major</code>, <code>minor</code>などの値を取得することは可能です。</p>

<p>正しい動作検証を実施した上でiBeaconを扱うようにしましょう。</p>

<h4>各種設定がOFFの場合のアラート表示について</h4>

<p>さて、直接iBeaconとは関係がありませんが、iOS端末をPeripheralとして扱う場合は <strong>Bluetoothの設定</strong> をONにしておく必要があります。iOS端末をCentralとして扱う場合は <strong>Bluetoothの設定</strong> と <strong>位置情報サービスの設定</strong> をONにしておく必要があります。</p>

<p>これらがOFFになっている場合、iBeaconの機能を利用することができないため、アプリ開発時にアラートを表示してユーザに知らせることを考えるかと思います。<br/>
さらに、できれば設定画面に飛ばしたいと思いますよね？</p>

<p><strong>位置情報サービス</strong> の場合は、iOS8であれば設定画面へのURLスキームが復活したため、問題ありません。(iOS7.xでは設定画面への遷移は諦めましょう。)<br/>
<strong>Bluetooth</strong> の場合は <strong>CoreBluetooth.framework</strong> を利用していれば、難しくありません。(処理に <strong>CoreBluetooth.framework</strong> が不要なCentral側であっても設定画面に飛ばしたいのであれば、<code>import</code>する必要があります。)<br/>
※ 具体的には<code>CBPeripheralManager</code>もしくは<code>CBCentralManager</code>の初期化時に<code>option</code>に<code>CBPeripheralManagerOptionShowPowerAlertKey</code>もしくは<code>CBCentralManagerOptionShowPowerAlertKey</code>を設定すれば良いです。</p>

<p>以上がまとめとなります。<br/>
ぜひぜひ参考にして頂ければと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p>※現在、アップデート申請中のため、公開されていません。<br/>
(公開され次第、合わせてブログを更新する予定です。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のiBeacon信号を利用してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/13/multi-ibeacon/"/>
    <updated>2015-04-13T00:28:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/13/multi-ibeacon</id>
    <content type="html"><![CDATA[<h4>複数のiBeaconを検知する方法</h4>

<p>さて、本日はさらっと複数のiBeacon信号の検知について考えてみたいと思います。<br/>
(これまでできるだろうという考えではあったものの、実際に試してみたことがなかったのでメモ書きです。)<br/>
Central側ではiBeacon信号をキャッチしたときに、そのオブジェクトを配列の形で取得することができます。<br/>
具体的には、</p>

<p>```objective-c
// Beacon信号を検出した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region
{</p>

<pre><code>if (beacons.count &gt; 0) {
    NSLog(@"%@", beacons);
}
</code></pre>

<p>}
```</p>

<p>のように <strong>beacons</strong> が <strong>NSArray</strong> の型で返ってきていますよね。<br/>
単純にこれを使ってやればよいのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>実際にログを見てみると、</p>

<p>```objective-c
2015-04-13 00:27:23.974 iBeaconSampleCentral[312:15030] (</p>

<pre><code>"CLBeacon (uuid:&lt;__NSConcreteUUID 0x17403a6e0&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.07m, rssi:-35)",
"CLBeacon (uuid:&lt;__NSConcreteUUID 0x174037520&gt; 8D4DB809-032F-4771-96F3-99BD5C25F924, major:1, minor:2, proximity:1 +/- 0.20m, rssi:-45)"
</code></pre>

<p>)
```</p>

<p>となっています。<br/>
最寄りのiBeaconのみを使う方法ではできなかった何か新しいサービスを実現できるかもしれませんね。<br/>
今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRの発信パラメータをiOSアプリで変更してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/11/bl600sample3/"/>
    <updated>2015-02-11T14:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/11/bl600sample3</id>
    <content type="html"><![CDATA[<h4>REBL600FRのパラメータ値を変更</h4>

<p><a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>はREBL600FRの検知＆パラメータ値の読込みまでやってみました。<br/>
今日はREBL600FRが発信するパラメータ値をiOSアプリから変更してみます。</p>

<p>まず、UIButtonをタップしたときにmajorの値を固定値に変更するメソッドを作成してみます。</p>

<p>```objective-c
// ViewController.m
// 書き込みテスト用のメソッド
&ndash; (IBAction)writeDataTestMethod:(id)sender {</p>

<pre><code>// ① majorの値を4661に設定
NSInteger writeInt = 4661;
// ② 10進数を16進数に変換して文字列にする
NSString *witeString = [NSString stringWithFormat:@"%lX",(long)writeInt];
// ③ 16進数のNSString型をNSData型に変換する処理
NSData *writeData = [witeString dataFromHexString];
NSLog(@"writeData: %@", writeData);

// ④ データの書込み処理
[self.connectedPeripheral writeValue:writeData forCharacteristic:self.majorChar type:CBCharacteristicWriteWithResponse];
</code></pre>

<p>}
```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>上記メソッドの説明をします。<br/>
まず、majorの値を4661に変更したいとします。</p>

<p>【処理の順番】<br/>
① ユーザが入力する際には当然、10進数の値で考えると思うので、初めの入力値は <strong>10進数</strong> の4661とします。<br/>
② 次にREBL600FRが理解できるように16進数に変換する必要があります。<br/>
『NSInteger型かつ10進数』で表された4661を『NSString型かつ16進数』の値に変換します。<br/>
③ 書換えたい値をREBL600FRに送るためにNSData型に変換します。<br/>
④ 書込みたいデータが用意できたので、書込み処理を実行します。<br/>
<code>self.majorChar</code>には予め、major値のキャラクタリスティックを保持しています。</p>

<p>さて、③と④の処理について説明が不十分なので、説明します。<br/>
③ですが、NSString型のクラスを拡張し、 <strong>16進数のNSString型をNSData型に変換する</strong> メソッドを追加します。</p>

<p>```objective-c
// NSString+Conversion.h</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface NSString (NSString_Conversion)</p>

<h1>pragma mark &ndash; Data Conversion</h1>

<ul>
<li>(NSData *)dataFromHexString;</li>
</ul>


<p>@end
```</p>

<p>```objective-c
// NSString+Conversion.m</p>

<h1>import &ldquo;NSString+Conversion.h&rdquo;</h1>

<p>@implementation NSString (NSString_Conversion)</p>

<h1>pragma mark &ndash; Data Conversion</h1>

<ul>
<li><p>(NSData <em>)dataFromHexString {
  const char </em>chars = [self UTF8String];
  NSUInteger i = 0, len = self.length;</p>

<p>  NSMutableData *data = [NSMutableData dataWithCapacity:len / 2];
  char byteChars[3] = {&lsquo;\0&rsquo;,&lsquo;\0&rsquo;,&lsquo;\0&rsquo;};
  unsigned long wholeByte;</p>

<p>  while (i &lt; len) {
      byteChars[0] = chars[i++];
      byteChars[1] = chars[i++];
      wholeByte = strtoul(byteChars, NULL, 16);
      [data appendBytes:&amp;wholeByte length:1];
  }</p>

<p>  return data;
}</p></li>
</ul>


<p>@end
```</p>

<p>続いて、④について説明します。<br/>
<code>self.majorChar</code>にmajor値のキャラクタリステックを保持するために、<a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>の記事で説明した処理を少し書換えます。</p>

<p>```objective-c
// ViewController.m
// Characteristicesが見つかったときに呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverCharacteristicsForService:(CBService </em>)service error:(NSError *)error {</p>

<pre><code>for(CBCharacteristic *characteristic in service.characteristics) {
    // キャラクタリステックのUUID値を取得
    CBUUID *uuid = characteristic.UUID;
    NSString *uuidString = [NSString alloc] initWithFormat:@"%@", uuid];]

    if([uuidString isEqual:@"569A2013-B87F-490C-92CB-11BA5EA5167C"]) {
        // major値の場合はCharacteristicをメモリに保持
        self.majorChar = characteristic;
    }

    // 値が変わったときに通知を受けたい場合に実行
    [peripheral setNotifyValue:YES forCharacteristic:characteristic];
    // キャラクタリステックのvalueを知りたい場合に実行
    [peripheral readValueForCharacteristic:characteristic];
}
</code></pre>

<p>}
```</p>

<p>上記処理のタイミングで<code>self.majorChar</code>をメモリに保持できるので、<code>writeValue</code>メソッドの引数として指定できます。<br/>
さて、<code>writeValue</code>メソッドを実行したときにエラーが発生する可能性があるので、下記メソッドを追加します。</p>

<p>```objective-c
// Characteristicの書き込み処理が完了した場合に呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didWriteValueForCharacteristic:(CBCharacteristic </em>)characteristic error:(NSError *)error
{</p>

<pre><code>if(error) {
    NSLog(@"error: %@", error);
    return;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>以上の処理を実装した上でUIButtonを押して、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使って確認してみると、確かに値が変更されていることがわかります。</p>

<p>これまでのソースは<a href="https://github.com/grandbig/REBL600FR-Central">GitHub</a>にアップしてありますので、興味がある方はご自由にお使いください。</p>

<p>参考:<br/>
<a href="http://tyashushi.blogspot.jp/2012/09/1016.html">10進数と16進数の変換</a><br/>
<a href="http://stackoverflow.com/questions/2501033/nsstring-hex-to-bytes">NSString hex to bytes</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRを検知するiOSアプリを開発してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/"/>
    <updated>2015-02-08T21:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/08/bl600sample2</id>
    <content type="html"><![CDATA[<h4>REBL600FRを検知</h4>

<p>引き続き、REBL600FRを用いて遊んでみたいと思います。<br/>
前回の<a href="http://grandbig.github.io/blog/2015/02/07/bl600sample/">REBL600FRをiBeaconとして検知してみた！</a>では既存のアプリを拝借してREBL600FRを検知していました。<br/>
今回はそこを自作してみたいと思います。</p>

<p>そのためにCoreBluetooth.frameworkを使います。<br/>
まずは、REBL600FRの発信するBLEを検知してみましょう。</p>

<!-- more -->


<p>```objective-c
// ViewController.mファイル</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreBluetooth/CoreBluetooth.h></h1>

<p>@interface ViewController ()&lt;CBCentralManagerDelegate, CBPeripheralDelegate></p>

<p>@property(strong, nonatomic) CBCentralManager <em>cm;
@property(strong, nonatomic) CBPeripheral </em>connectedPeripheral;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  // 1: CBCentralManagerの初期化
  self.cm = [CBCentralManager alloc] initWithDelegate:self queue:nil options:nil];]
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<h1>pragma mark &ndash; CBCentralManagerDelegate</h1>

<ul>
<li>(void)centralManagerDidUpdateState:(CBCentralManager *)central
{
  if(central.state == CBCentralManagerStatePoweredOn) {
      // Centralとして機能可能な場合
      // 2: Peripheralのスキャンを開始
      [self.cm scanForPeripheralsWithServices:nil options:nil];
  }
}</li>
</ul>


<p>@end
```</p>

<p>上記ソースの説明をします。<br/>
1でCBCentralManagerを初期化すると、centralManagerDidUpdateStateメソッドが呼び出されます。<br/>
そこで、Centralとして機能する(BluetoothがONで正常である)場合に限り、scanForPeripheralsWithServicesメソッドを実行することでPeripheralのスキャンを開始します。</p>

<p>今回は、<code>scanForPeripheralsWithServices</code>の<code>serviceUUIDs</code>と<code>options</code>をnilにしています。<br/>
もし、あらかじめスキャンしたいBLEのUUIDが決まっているのであれば、</p>

<p><code>objective-c
NSArray *services = [NSArray arrayWithObjects:[CBUUID UUIDWithString:@"C6D0F826-CCBA-4738-97CE-81491F748039"], nil];
</code></p>

<p>といったように指定してあげましょう。<br/>
※ nilの指定は非推奨とされています。</p>

<p>また、optionsには<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>と<code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>を指定可能となっています。<br/>
<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>を明示的指定しない場合はデフォルトNOと判断されます。<br/>
YESにした場合、Peripheralからアドバタイズパケットを受信する度にペリフェラル発見通知が実行されます。</p>

<p><code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>にはスキャンしたいUUIDの配列を指定できます。<br/>
servicesで既に指定しているので、実際のところ何が違うのでしょうか&hellip;。</p>

<p>続いての実装です。</p>

<p>```
&ndash; (void)centralManagerDidUpdateState:(CBCentralManager *)central
{</p>

<pre><code>&lt;省略&gt;
</code></pre>

<p>}</p>

<ul>
<li>(void)centralManager:(CBCentralManager <em>)central didDiscoverPeripheral:(CBPeripheral </em>)peripheral advertisementData:(NSDictionary <em>)advertisementData RSSI:(NSNumber </em>)RSSI
{
  NSLog(@&ldquo;%@&rdquo;, RSSI);
  NSLog(@&ldquo;%@&rdquo;, advertisementData);
}</li>
</ul>


<p>```</p>

<p><code>scanForPeripheralsWithServices</code>実行後にPeripheralを発見した場合、<code>didDiscoverPeripheral</code>メソッドが呼び出されます。<br/>
このメソッドでは、<code>advertisementData</code>と<code>RSSI</code>の値を取得できます。</p>

<p>では、実際に取得できる値を見てみましょう。<br/>
<code>scanForPeripheralsWithServices</code>が実行された後に、REBL600FRのスイッチをONにします。</p>

<p><img src="/images/REBL600FR_3.jpg" alt="REBL600FRのスイッチをONにしましょう。" /></p>

<p>すると、</p>

<p>```
RSSI = -94</p>

<p>advertisementData = {</p>

<pre><code>kCBAdvDataChannel = 37,
kCBAdvDataIsConnectable = 1,
kCBAdvDataLocalName = "Laird iBeacon"
</code></pre>

<p>}
```</p>

<p>と値を取得できました。<br/>
<code>kCBAdvDataChannel</code>はBLEデバイスの発見と接続に利用するアドバタイズメントチャネルのことで、<code>kCBAdvDataIsConnectable</code>は接続可能なPeripheralかどうか判別する値(1であれば接続可)で、<code>kCBAdvDataLocalName</code>はPeripheralの名前のことです。</p>

<p>Appleの<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys">CBCentralManagerDelegate Protocol Reference</a>を見ると、advertisementDataには他にも取得可能な値が入っていることがあるようです。</p>

<h4>REBL600FRに接続</h4>

<p>次に、先ほど発見することができたREBL600FRに接続してみたいと思います。<br/>
<code>didDiscoverPeripheral</code>が実行されたときに検知したperipheralに接続するようにしてみます。</p>

<p>```objective-c</p>

<ul>
<li><p>(void)centralManager:(CBCentralManager <em>)central didDiscoverPeripheral:(CBPeripheral </em>)peripheral advertisementData:(NSDictionary <em>)advertisementData RSSI:(NSNumber </em>)RSSI
{
  NSLog(@&ldquo;%@&rdquo;, RSSI);
  NSLog(@&ldquo;%@&rdquo;, advertisementData);</p>

<p>  self.connectedPeripheral = peripheral;
  self.connectedPeripheral.delegate = self;</p>

<p>  // Peripheralへの接続処理
  [self.cm connectPeripheral:self.connectedPeripheral options:nil];
}
```</p></li>
</ul>


<p><code>connectPeripheral</code>メソッドで接続したいPeripheralに接続することができます。<br/>
このとき<code>options</code>には<code>CBConnectPeripheralOptionNotifyOnConnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnDisconnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnNotificationKey</code>の3種類のいずれかを指定可能です。<br/>
それぞれ、Peripheralと接続, Peripherlと切断, PeripheralからNotificationを受信した場合にアラートを表示したい場合に指定します。</p>

<p>接続が確立された場合に<code>centralManager:didConnectPeripheral:</code>メソッドが呼び出されます。<br/>
この中で、Peripheralが提供するサービスを検索する処理を書いてみましょう。</p>

<p>```objective-c
// Peripheralと接続できた場合に呼び出される処理
&ndash; (void)centralManager:(CBCentralManager <em>)central didConnectPeripheral:(CBPeripheral </em>)peripheral
{</p>

<pre><code>// スキャンの停止
[self.cm stopScan];

// Peripheralのサービスを検索
[self.connectedPeripheral discoverServices:nil];
</code></pre>

<p>}
```</p>

<p>電池の消耗を防ぐために、接続が確立された後はPeripheralのスキャンを停止します。<br/>
<code>discoverServices</code>メソッドでPeripheralのサービスを検索します。<br/>
引数には検索したいサービスのUUIDの配列を指定可能です。<br/>
nilにした場合は全てのサービスを検索します。こちらもnilの指定は非推奨とされています。</p>

<p>サービスが見つかると、<code>didDiscoverServices:</code>メソッドが呼び出されます。<br/>
そこでさらに、サービスが持っているキャラクタリスティックを検索します。</p>

<p>```objective-c</p>

<h1>pragma mark &ndash; CBPeripheralDelegate</h1>

<p>// Servicesが見つかったときに呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverServices:(NSError </em>)error
{</p>

<pre><code>NSArray *services = peripheral.services;

for(CBService *service in services) {
    NSLog(@"Service UUID: %@", service.UUID);
    // Characteristicsの検索
    [peripheral discoverCharacteristics:nil forService:service];
}
</code></pre>

<p>}
```</p>

<p>キャラクタリスティックの検索は<code>discoverCharacteristics:</code>メソッドを使います。<br/>
例によって、引数の<code>characteristicUUIDs</code>はnilを指定することで、全てのキャラクタリスティックを検索しています。<br/>
もちろんnilは非推奨とされています。</p>

<p>今回は取得できた全てのサービスに対して、全てのキャラクタリスティックを検索するため、上記のようにfor文を使っています。</p>

<p>キャラクタリスティックが見つかると、<code>didDiscoverCharacteristicsForService:</code>メソッドが呼び出されます。</p>

<p>```objective-c
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverCharacteristicsForService:(CBService </em>)service error:(NSError *)error
{</p>

<pre><code>for(CBCharacteristic *characteristic in service.characteristics) {
    // 値が変わったときに通知を受けたい場合に実行
    [peripheral setNotifyValue:YES forCharacteristic:characteristic];
    // キャラクタリステックのvalueを知りたい場合に実行
    [peripheral readValueForCharacteristic:characteristic];
}
</code></pre>

<p>}
```</p>

<p><code>setNotifyValue</code>はキャラクタリステックの値が変わったときに<code>didUpdateNotificationStateForCharacteristic:error:</code>を呼び出すために<code>YES</code>で設定しています。<br/>
<code>readValueForCharacteristic:</code>メソッドは検索して見つかったキャラクタリステックの値を読むために実行しています。</p>

<p>因みに、<code>CBCharacteristic</code>クラスはプロパティに<code>properties</code>を持っています。<br/>
これは、そのデータが <strong>Read Only</strong> なのか <strong>Read and Write</strong> なのかを判別するために利用します。<br/>
REBL600FRの場合、characteristicsをNSLogでログ出力してみると、</p>

<p>```
// Read Onlyの例
characteristic: &lt;CBCharacteristic: 0x175744d0 UUID = Manufacturer Name String, Value = (null), Properties = 0x2, Notifying = NO, Broadcasting = NO></p>

<p>// Read and Writeの例
characteristic: &lt;CBCharacteristic: 0x17572690 UUID = 569A2010-B87F-490C-92CB-11BA5EA5167C, Value = (null), Properties = 0xA, Notifying = NO, Broadcasting = NO>
```</p>

<p>となりました。<br/>
<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCharacteristic_Class/index.html#//apple_ref/occ/instp/CBCharacteristic/properties">CBCharacteristic Class Reference</a>を見ると、<code>0x2</code>は<code>CBCharacteristicPropertyRead</code>とされていますが、<code>0xA</code>は該当するものが記載されていませんでした。</p>

<p>キャラクタリステックの値の取得が完了すると、<code>didUpdateValueForCharacteristic:error:</code>メソッドが呼ばれます。</p>

<p>```objective-c
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didUpdateValueForCharacteristic:(CBCharacteristic </em>)characteristic error:(NSError *)error
{</p>

<pre><code>NSString *value = [[NSString alloc] initWithData:characteristic.value encoding:NSUTF8StringEncoding];
NSLog(@"value: %@", value);
</code></pre>

<p>}</p>

<p>```</p>

<p>これで各パラメータの値が確認できました。<br/>
気をつけたいのは、major, minor, Tx PowerなどはUTF8でエンコードをかけると文字化けしたログを吐くので、どんな値か見たい場合はエンコードせずにNSDataの値のまま見てみましょう。</p>

<p>う〜ん。今回は時間切れですね&hellip;。<br/>
次回はREBL600FRのパラメータをiPhoneから書き換えることにチャレンジしたいと思います。</p>

<p>といったところで本日はここまで。<br/>
ソースはパラメータの書き換えが完了したタイミングでGitHubにアップしたいと思います。</p>

<p>参考:<br/>
<a href="http://qiita.com/rnamiki/items/ea912393c4fb58e7a9b9">CoreBluetoothで出来る事</a><br/>
<a href="http://qiita.com/miyatay/items/4d4ce4ccd7905ddc0144">Bluetooth Low Energy（BLE）/ iBeaconとは</a><br/>
<a href="http://reinforce-lab.github.io/blog/2013/01/25/CBCentralManagerClassReference_jp/">Reinforce-Lab&rsquo;s Blog</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
