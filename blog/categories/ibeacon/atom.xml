<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iBeacon | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ibeacon/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-02-08T16:49:39+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[REBL600FRをiBeaconとして検知してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/07/bl600sample/"/>
    <updated>2015-02-07T23:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/07/bl600sample</id>
    <content type="html"><![CDATA[<h4>REBL600FRとFRISK</h4>

<p>今日は<a href="http://www.runele.com/ca1/24/">ランニングエレクトロニクス</a>さんから購入したREBL600FRを使って遊んでみたいと思います。<br/>
早速、REBL600FRを1個注文して、先日、家に届きました。</p>

<p><img src="/images/REBL600FR_1.jpg" alt="REBL600FRが届いた！" /></p>

<!-- more -->


<p>REBL600FRの売りがFRISKのケースに入るサイズとのことなので、FRISKを購入しました。</p>

<p><img src="/images/FRISK_1.jpg" alt="FRISK2つ購入しました" /></p>

<p>なぜ2つ購入したかって？<br/>
FRISKを購入しても、すぐにはREBL600FRをケースに入れられませんよね？<br/>
FRISKが入っているのだから。</p>

<p>なので、FRISKのケースを空けました。</p>

<p><img src="/images/FRISK_2.jpg" alt="FRISKケースを空にします" /></p>

<p>おぉ、空になった&hellip;かと思いきや、この状態ではFRISKで満帆となったケースが閉まらない&hellip;。<br/>
閉まるように余分な分を除けてみたところ、</p>

<p><img src="/images/FRISK_3.jpg" alt="FRISKケースが閉まるように少し除けます" /></p>

<p>11粒を戻すこととなりました。良かった。11粒くらいなら一気に食べられます笑。<br/>
また、何とか閉めたFRISKケースがこちら。</p>

<p><img src="/images/FRISK_4.jpg" alt="FRISKケースが閉められた" /></p>

<p>ちょっと浮いてますね&hellip;。</p>

<p>ま、何はともあれこれでREBL600FRをFRISKケースに入れれば準備完了です！</p>

<p><img src="/images/REBL600FR_2.jpg" alt="REBL600FRの準備完了" /></p>

<h4>REBL600FRのiBeaconを検知してみる</h4>

<p>さて、早速、iBeaconとしての動作を見ていくことにしましょう。<br/>
iBeaconの信号をキャッチするCentral側のアプリとして、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使うことにしました。<br/>
理由は、UUIDに何が設定されているのかわからないためです。</p>

<p>では、REBL600FRのスイッチをONにして、LightBlueで見てみましょう。<br/>
すると、このように <strong>Laird iBeacon</strong> というものを発見します。</p>

<p><img src="/images/lightblue_1.png" alt="LightBlueの画面" /></p>

<p>これを選択してみると、iBeaconとの接続を試みる処理が走ります。</p>

<p><img src="/images/lightblue_2.png" alt="LightBlueが接続試みる" /></p>

<p>接続後は詳細画面に遷移します。</p>

<p><img src="/images/lightblue_3.png" alt="LightBlueでLaird iBeaconの詳細を見る" /></p>

<p>その中で表示される画面の一部を紹介します。</p>

<p><img src="/images/lightblue_4.png" alt="LightBlueでLaird iBeaconの詳細を見る2" /></p>

<p>ここでぜひお知らせしたいのが、REBL600FRは送信出力をアプリから設定できるんです。<br/>
それが先ほどの写真でお見せした <strong>Tx Power Level</strong> という項目です。<br/>
これをタップすると、下記の画面に進みます。</p>

<p><img src="/images/lightblue_5.png" alt="Tx Power Levelの画面" /></p>

<p>初期状態では <strong>0x04</strong> となっており、4 [dBm] であることを示しています。<br/>
MAXの送信出力が4 [dBm] のようなので、それ以下(負の値も含む)の値を16進数で設定します。<br/>
10進数と16進数の相互変換は<a href="http://hogehoge.tk/tool/number.html">こちらのツール</a>からできます。</p>

<p><strong>Write new Value</strong> をタップ ⇒ 数値を設定 ⇒ Doneをタップ<br/>
これでスイッチのON / OFFを切り替えなくとも送信出力を変更することができます。<br/>
※ REBL600FRのスイッチをONにしてから約1分の間に接続しないといけないようです。<br/>
(少し時間が経ってしまうと接続できませんでした。)</p>

<p>実際に、iBeacon検知用のアプリ<a href="https://itunes.apple.com/jp/app/locate-beacon/id738709014?mt=8">Locate Beacon</a>で確認してみると、初期状態に比べて <strong>unknown</strong> と表示される距離が変わるはずです。</p>

<p>時間があるときに各種パラメータの値を変更可能なiOSアプリを作成したいと思います。</p>

<p>ということで、今日はここまで。</p>

<p>参考:<br/>
<a href="http://eguchi.jp/blog/?p=461">Kazuyuki Eguchi Factory スマホでiBeaconのパラメータを変更できるアプリを作りました！（REBL600FR向け）</a><br/>
<a href="http://todotani.cocolog-nifty.com/blog/2014/05/rbbl600fribeaco.html">Todotaniのはやり物Log</a><br/>
<a href="http://support.tetrastyle.net/bl600-ibeacon/">TETRASTYLE: Support (BL600) iBeacon サンプルを使ってみる</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftを使って、iBeaconのCentralアプリを作ろう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/"/>
    <updated>2014-09-29T00:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift</id>
    <content type="html"><![CDATA[<h3>Swiftを使ってみよう</h3>

<p>さて、本日はSwiftの勉強を兼ねて、iBeaconのCentralアプリを開発してみようと思います。もちろんiOS8に対応したアプリを開発します。<br/>
これまで、筆者はまともにSwiftを触ってきませんでした。しかし、今後の動向を考えるに、Objective-Cだけでなく、Swiftでの開発もできるようになっておかないと技術者として危険な気がするのです。もし、数年後にXcode上でObjective-Cのサポートを終了するということになったら、途端にiPhoneアプリが開発できない技術者となってしまいます。</p>

<p>とは言え、何もなしに書き方を勉強しようとしても辛いものがあります。なので、これまでObjective-Cで開発してきたアプリをSwiftに移行するという方法でSwiftを学んでいくこととしました。<br/>
では、早速、開発を進めていきましょう！</p>

<p>本ブログでは、Objective-CとSwiftでの書き方を比較しながら進めていきます。<br/>
Objective-Cとの比較が不要な方は<strong>Swiftの場合</strong>の項目のみを読んでください。</p>

<!--more-->


<h4>ライブラリのimport</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.hファイル</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>```</p>

<p>```objective-c
// ViewController.mファイル</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p><code>
// ViewController.swiftファイル
import UIKit
import CoreLocation
</code></p>

<h3>インスタンス変数の宣言</h3>

<ul>
<li>Objective-Cの場合
Objective-Cの場合は<code>import</code>のすぐ下のinterface内で書きます。</li>
</ul>


<p>```objective-c
// ViewController.mファイル
@interface ViewController ()</p>

<p>@property (strong, nonatomic) IBOutlet CLLocationManager <em>locationManager;
@property (strong, nonatomic) IBOutlet NSUUID </em>proximityUUID;
@property (strong, nonatomic) IBOutlet CLBeaconRegion <em>beaconRegion;
@property (strong, nonatomic) IBOutlet CLBeacon </em>nearestBeacon;
@property (strong, nonatomic) IBOutlet NSString *str;</p>

<p>@end
```</p>

<ul>
<li>Swiftの場合<br/>
Swiftの場合は<code>class ViewController</code>に全体が囲まれる書式になるため、<code>class ViewController</code>のすぐ下に書きます。</li>
</ul>


<p>```
class ViewController: UIViewController {</p>

<pre><code>@IBOutlet var locationManager:CLLocationManager?
@IBOutlet var proximityUUID:NSUUID?
@IBOutlet var beaconRegion:CLBeaconRegion?
@IBOutlet var nearestBeacon:CLBeacon?
@IBOutlet var str:NSString?

.....
</code></pre>

<p>}
```</p>

<h3>Delegate Protocolの宣言</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
@interface ViewController() &lt;CLLocationManagerDelegate, UIAlertViewDelegate> {</p>

<pre><code>.....
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
class ViewController: UIViewController, CLLocationManagerDelegate, UIAlertViewDelegate {</p>

<pre><code>.....
</code></pre>

<p>}
```</p>

<h3>viewDidLoadメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];

if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion class]]) {
    self.locationManager = [[CLLocationManager alloc] init];
    self.locationManager.delegate = self;

    self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@"UUID文字列を指定"];
    self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID identifier:@"Objective-C iBeacon"];

    if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {
        [self.locationManager requestAlwaysAuthorization];
    } else {
        [self.locationManager startMonitoringForRegion: self.beaconRegion];
    }
} else {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"確認" message:@"お使いの端末ではiBeaconを利用できません。" delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
    [alert show];

}
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

if(CLLocationManager.isMonitoringAvailableForClass(CLCircularRegion)) {
    self.locationManager = CLLocationManager()
    self.locationManager?.delegate = self

    self.proximityUUID = NSUUID(UUIDString: "UUID文字列を指定")
    self.beaconRegion = CLBeaconRegion(proximityUUID: self.proximityUUID, identifier: "Swift iBeacon")

    if((self.locationManager?.respondsToSelector("requestAlwaysAuthorization")) != nil) {
        self.locationManager?.requestAlwaysAuthorization()
    } else {
        self.locationManager?.startMonitoringForRegion(self.beaconRegion)
    }
} else {
    var alert:UIAlertView? = UIAlertView(title: "確認",message: "お使いの端末ではiBeaconを利用できません。", delegate: self, cancelButtonTitle: nil, otherButtonTitles: "OK")
    alert?.show()
}
</code></pre>

<p>}
```</p>

<h3>自作メソッドの定義</h3>

<p>ここではローカルプッシュを送信するメソッドを定義します。</p>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
&ndash; (void)sendLocalNotificationForMessage:(NSString *)message
{</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
localNotification.soundName = UILocalNotificationDefaultSoundName;
[[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
func sendLocalNotificationForMessage(message: NSString!) {</p>

<pre><code>var localNotification:UILocalNotification = UILocalNotification()
localNotification.alertBody = message
localNotification.fireDate = NSDate.date()
localNotification.soundName = UILocalNotificationDefaultSoundName
UIApplication.sharedApplication().scheduleLocalNotification(localNotification)
</code></pre>

<p>}
```</p>

<h3>CLLocationManagerのDelegateメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
// 領域計測が開始した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didStartMonitoringForRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Start Monitoring Region"];
</code></pre>

<p>}</p>

<p>// 領域に侵入した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didEnterRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Enter Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager startRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 領域から退出した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didExitRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager stopRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 領域内にいるかいないかの判断
&ndash;(void)locationManager:(CLLocationManager <em>)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion </em>)region{</p>

<pre><code>switch (state) {
    case CLRegionStateInside:
        if([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]){
            NSLog(@"Enter %@",region.identifier);
            //Beacon の範囲内に入った時に行う処理を記述する
            [self sendLocalNotificationForMessage:@"Already Entering"];
        }
        break;

    case CLRegionStateOutside:
    case CLRegionStateUnknown:
    default:
        break;
}
</code></pre>

<p>}</p>

<p>// 距離計測
&ndash; (void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region
{</p>

<pre><code>if (beacons.count &gt; 0) {
    //CLBeacon *nearestBeacon = beacons.firstObject;
    self.nearestBeacon = beacons.firstObject;

    NSString *rangeMessage;

    switch (self.nearestBeacon.proximity) {
        case CLProximityImmediate:
            rangeMessage = @"Range Immediate";
            break;
        case CLProximityNear:
            rangeMessage = @"Range Near";
            break;
        case CLProximityFar:
            rangeMessage = @"Range Far";
            break;
        default:
            rangeMessage = @"Range Unknown";
            break;
    }

    self.str = [[NSString alloc] initWithFormat:@"%f [m]", self.nearestBeacon.accuracy];
    [self sendLocalNotificationForMessage:self.str];
}
</code></pre>

<p>}</p>

<p>// 領域観測に失敗した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager monitoringDidFailForRegion:(CLRegion </em>)region withError:(NSError *)error
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];
</code></pre>

<p>}</p>

<p>// 位置情報の許可設定
&ndash; (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{</p>

<pre><code>if (status == kCLAuthorizationStatusNotDetermined) {
} else if(status == kCLAuthorizationStatusAuthorizedAlways) {
    [self.locationManager startMonitoringForRegion: self.beaconRegion];
} else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
    [self.locationManager startRangingBeaconsInRegion:self.beaconRegion];
}
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
// 領域観測が開始した場合
func locationManager(manager: CLLocationManager!, didStartMonitoringForRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Start Monitoring Region")
</code></pre>

<p>}</p>

<p>// 領域に侵入した場合
func locationManager(manager: CLLocationManager!, didEnterRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Enter Region")

if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
    self.locationManager?.startRangingBeaconsInRegion(region as CLBeaconRegion)
}
</code></pre>

<p>}</p>

<p>// 領域から退出した場合
func locationManager(manager: CLLocationManager!, didExitRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Enter Region")

if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
    self.locationManager?.stopRangingBeaconsInRegion(region as CLBeaconRegion)
}
</code></pre>

<p>}</p>

<p>// 領域内にいるかどうかの判断
func locationManager(manager: CLLocationManager!, didDetermineState state: CLRegionState, forRegion region: CLRegion!) {</p>

<pre><code>switch(state) {
case .Inside:
    if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
        self.locationManager?.startRangingBeaconsInRegion(region as CLBeaconRegion)
    }
    break
case .Outside:
    break
case .Unknown:
    break
default:
    break
}
</code></pre>

<p>}</p>

<p>// 距離計測
func locationManager(manager: CLLocationManager!, didRangeBeacons beacons: [AnyObject]!, inRegion region: CLBeaconRegion!) {</p>

<pre><code>if(beacons.count &gt; 0) {
    self.nearestBeacon = beacons[0] as? CLBeacon

    var proximity:CLProximity! = self.nearestBeacon?.proximity
    var bAccuracy:CLLocationAccuracy! = self.nearestBeacon?.accuracy
    var rangeMessage:NSString

    if(proximity == CLProximity.Immediate) {
        rangeMessage = "Range Immediate"
    } else if(proximity == CLProximity.Near) {
        rangeMessage = "Range Near"
    } else if(proximity == CLProximity.Far) {
        rangeMessage = "Range Far"
    } else if(proximity == CLProximity.Unknown) {
        rangeMessage = "Range Unknown"
    }

    self.str = "\(bAccuracy) [m]"
    self.sendLocalNotificationForMessage(self.str)
}
</code></pre>

<p>}</p>

<p>// 領域観測に失敗した場合
func locationManager(manager: CLLocationManager!, monitoringDidFailForRegion region: CLRegion!, withError error: NSError!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Exit Region")
</code></pre>

<p>}</p>

<p>// 位置情報の許可設定
func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {</p>

<pre><code>if(status == .NotDetermined) {
} else if(status == .Authorized) {
    self.locationManager?.startMonitoringForRegion(self.beaconRegion)
} else if(status == .AuthorizedWhenInUse) {
    self.locationManager?.startRangingBeaconsInRegion(self.beaconRegion)
}
</code></pre>

<p>}
```</p>

<p>以上でコーディング終了です。Objective-Cのときと同様にSwiftでもBeaconを検知することができるようになりました。<br/>
Swiftの勉強がてら、こういった取り組みを進めていこうと思います。<br/>
本日はここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/oggata/items/5de43d71692d1abcff7c">SwiftとiBeaconを使ってお母さんが自分の部屋に近づいて来た事を警告するアプリをつくる</a><br/>
<a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8でiBeaconを試してみよう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon/"/>
    <updated>2014-09-22T21:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/22/ios8-de-ibeacon</id>
    <content type="html"><![CDATA[<h3>iOS8になって気をつけるべきところについて</h3>

<p>本日はiOS8端末でiBeaconを利用するときの注意点について書きたいと思います。<br/>
iOS8ではユーザの位置情報に関する許可の選択肢が増えました。それは、<strong>『許可しない』/『このAppの使用中のみ許可』/『常に許可』</strong>の3つです。(これまでは単純にON/OFFに切替のみでした。)もちろん、ユーザの選択肢が増えたということは開発者側でも新たな対応が必要になるということです。</p>

<p><img src="/images/ios8_location_1.png" alt="iOS8端末での位置情報の許可選択画面" /></p>

<!--more-->


<p>具体的な対応としては、<strong>ユーザに許可を求めるメソッドを実装する</strong>というものです。</p>

<p>下記にViewController.mファイルのソースを記載します。<br/>
```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) IBOutlet CLLocationManager <em>locationManager;
@property (strong, nonatomic) IBOutlet NSUUID </em>proximityUUID;
@property (strong, nonatomic) IBOutlet CLBeaconRegion <em>beaconRegion;
@property (strong, nonatomic) IBOutlet CLBeacon </em>nearestBeacon;
@property (strong, nonatomic) IBOutlet NSString *str;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<p>&lt;省略></p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion class]]) {
      self.locationManager = [[CLLocationManager alloc] init];
      self.locationManager.delegate = self;</p>

<pre><code>  self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@"8D4DB809-032F-4771-96F3-99BD5C25F924"];
  self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID
                                                         identifier:@"com.kato.ibeaconSample"];

  if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {
      // requestAlwaysAuthorizationメソッドが利用できる場合(iOS8以上の場合)
      // 位置情報の取得許可を求めるメソッド
      [self.locationManager requestAlwaysAuthorization];
  } else {
      // requestAlwaysAuthorizationメソッドが利用できない場合(iOS8未満の場合)
      [self.locationManager startMonitoringForRegion: self.beaconRegion];
  }
</code></pre>

<p>  } else {
      // iBeaconが利用できない端末の場合
      NSLog(@&ldquo;iBeaconを利用できません。&rdquo;);
  }
}</p></li>
</ul>


<p>// ユーザの位置情報の許可状態を確認するメソッド
&ndash; (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{</p>

<pre><code>if (status == kCLAuthorizationStatusNotDetermined) {
    // ユーザが位置情報の使用を許可していない
} else if(status == kCLAuthorizationStatusAuthorizedAlways) {
    // ユーザが位置情報の使用を常に許可している場合
    [self.locationManager startMonitoringForRegion: self.beaconRegion];
} else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
    // ユーザが位置情報の使用を使用中のみ許可している場合
    [self.locationManager startMonitoringForRegion: self.beaconRegion];
}
</code></pre>

<p>}</p>

<p>// 領域計測が開始した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didStartMonitoringForRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Start Monitoring Region"];
</code></pre>

<p>}</p>

<p>// 指定した領域に入った場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didEnterRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Enter Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager startRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 指定した領域から出た場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didExitRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager stopRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 領域内にいるかどうかを確認する処理
&ndash;(void)locationManager:(CLLocationManager <em>)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion </em>)region{</p>

<pre><code>switch (state) {
    case CLRegionStateInside:
        if([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]){
            NSLog(@"Enter %@",region.identifier);
            //Beacon の範囲内に入った時に行う処理を記述する
            [self sendLocalNotificationForMessage:@"Already Entering"];
        }
        break;

    case CLRegionStateOutside:
    case CLRegionStateUnknown:
    default:
        break;
}
</code></pre>

<p>}</p>

<p>// Beacon信号を検出した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region
{</p>

<pre><code>if (beacons.count &gt; 0) {
    self.nearestBeacon = beacons.firstObject;
    self.str = [[NSString alloc] initWithFormat:@"%f [m]", self.nearestBeacon.accuracy];
    NSLog(@"%@", self.str);
    [self sendLocalNotificationForMessage:self.str];
}
</code></pre>

<p>}</p>

<p>// ローカルプッシュ処理
&ndash; (void)sendLocalNotificationForMessage:(NSString *)message
{</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
localNotification.soundName = UILocalNotificationDefaultSoundName;
[UIApplication sharedApplication] scheduleLocalNotification:localNotification];]
</code></pre>

<p>}</p>

<p>```</p>

<p>これにより、アプリを起動した際に、ユーザへ位置情報の使用を求めるアラートを表示することができます。<br/>
<img src="/images/ios8_location_2.png" alt="ユーザへのアラート" /></p>

<p>気をつけたいのが、iOS8からは<strong>Info.plistファイルに位置情報を使用する理由</strong>を記載する必要があります。<br/>
Info.plistにNSLocationWhenInUseUsageDescriptionまたはNSLocationAlwaysUsageDescriptionを設定する必要があります。<br/>
ただし、Info.plistでAdd Rowしようとしても、候補に表示されないので、手打ちで設定しましょう。</p>

<h3>iOS8でWhenInUseとAlwaysの挙動の違い</h3>

<p>続いて、iOS8から追加されたWhenInUse(このAppの使用中のみ許可)とAlways(常に許可)でiBeaconの挙動にどういった差が出るか調べてみたいと思います。<br/>
まずは、Always(常に許可)から説明します。<br/>
こちらは、領域観測(didEnterRegion/didDetermineState/didExitRegion)と距離計測(didRangeBeacons)の両方を実行できます。<br/>
※基本的にはiOS7.1.xと同じ挙動と言えます。</p>

<p>一方でWhenInUseを見てみると、距離計測のみが可能でした。<br/>
領域観測ができないため、startRangingBeaconsInRegionメソッドを実行するタイミングをミスらないように注意が必要です。<br/>
例えば、<strong>didEnterRegion</strong> Delegateメソッドの中でstartRangingBeaconsInRegionメソッドを実行とすると、WhenInUseではiBeaconを一切検知できないようになってしまいます。<br/>
アプリをフォアグラウンドに起動したときだけ、iBeaconの機能を利用したいのであれば、確かにWhenInUseで十分だと思います。</p>

<h3>ローカルプッシュの補足</h3>

<p>因みに、筆者は上記の動作を確認するためにローカルプッシュ処理を組み込んだのですが、そこでハマりました。なぜかというと、iOS8ではローカルプッシュがうまくいかなかったからです。<br/>
いろいろと調べた結果、iOS8からは<strong>ローカルプッシュの設定を記載する</strong>必要があるとのことでした。</p>

<p>以下のようにAppDelegate.mファイルに記載すれば、ローカルプッシュが利用可能になります。<br/>
```objective-c
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>&lt;省略&gt;

if ([UIApplication instancesRespondToSelector:@selector(registerUserNotificationSettings:)]) {
    [[UIApplication sharedApplication] registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeSound categories:nil]];
}

return YES;
</code></pre>

<p>}
```</p>

<p>一先ず、ここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/koogawa/items/6ec24ca3201977e9642b">iOS8から位置情報を取得する方法が変わるよ</a><br/>
<a href="http://im-sei.tumblr.com/post/91824653043/ios-8">iOS8の位置情報のプライバシー設定に対応する</a><br/>
<a href="http://qiita.com/caesar_cat/items/08018ab22bea27b55443">iOS8からローカル通知が保存されなくなった？</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AplixのMyBeaconを使ってみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/03/aplix-mybeacon/"/>
    <updated>2014-05-03T22:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/03/aplix-mybeacon</id>
    <content type="html"><![CDATA[<h3>AplixのUSB給電型Beacon発信機 MyBeaconを使ってみた</h3>

<p>先日、Aplix社が発売を開始したMyBeaconを早速購入して試してみました。<br/>
まずはAplix社の提供している専用のiOSアプリケーションをダウンロードしてみましょう。<br/>
<a href="https://itunes.apple.com/jp/app/mybeacon-tool/id848908053?mt=8&uo=4&at=11lpfc" target="itunes_store">MyBeacon Tool &ndash; Aplix</a></p>

<p>次にMyBeaconの送付物の中に同封されていた紙に書かれている<a href="http://www.aplix.co.jp/beacon/mb001_support/">URL先</a>にアクセスしてみましょう。<br/>
すると、下記の画面が表示されます。<br/>
<img src="/images/aplix_mybeacon_1.png" alt="Aplix社のMyBeacon用の画面" /></p>

<!--more-->


<p>ここで<strong>管理者情報確認</strong>を選択しましょう。<br/>
遷移先画面では<strong>メールアドレス</strong>と<strong>プロダクトキー</strong>の入力が求められます。ここには先ほどと同じ同封された紙に書かれた<strong>お客様情報</strong>と<strong>プロダクトキー</strong>を入力してください。<br/>
<img src="/images/aplix_mybeacon_2.png" alt="Aplix社のMyBeacon用の画面2" /></p>

<p>結果、<strong>Proximity UUID</strong>と<strong>MyBeaconToolアプリで使用するPassword</strong>を知ることができます。<br/>
<img src="/images/aplix_mybeacon_3.png" alt="Aplix社のMyBeacon用の画面3" /></p>

<p>さて、ここまでわかったところでMyBeaconToolアプリを起動してみましょう。すると、MyBeaconIDとパスワードの入力を求められます。<br/>
<img src="/images/aplix_mybeacon_4.png" alt="Aplix社のMyBeacon用の画面4" /></p>

<p>入力が終わったら、MyBeaconのサーチが開始できます。MyBeaconをコンセントに刺してセットしてから、<strong>サーチ開始</strong>してみましょう。すると、ひっかかったMyBeaconの情報が表示されます。<br/>
<img src="/images/aplix_mybeacon_5.png" alt="Aplix社のMyBeacon用の画面5" /></p>

<p>以上で、<strong>Proximity UUID</strong>，<strong>Major</strong>，<strong>Minor</strong>の値が判明しました。<br/>
実際にBeacon機はMyBeaconを使えば良いので、<strong>Proximity UUID</strong>さえわかれば問題ありません。<br/>
自作アプリ内のソースでは下記のように<strong>Proximity UUID</strong>に設定しましょう。<br/>
<code>objective-c
NSUUID *proximityUUID = [[NSUUID alloc] initWithUUIDString:@"ここにProximity UUIDを書きましょう。ハイフン含めて下さい"];
</code></p>

<p>結果、距離を測ったりできました。<br/>
<img src="/images/aplix_mybeacon_6.png" alt="自作アプリで距離を計測できました" /></p>

<p>これで簡単にiBeaconの自作アプリが作れますね。皆さん、安価ですし、この機会にMyBeaconを買ってみてはいかがでしょうか。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[噂のiOS7.1でiBeaconを試してみよう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon/"/>
    <updated>2014-04-12T23:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/04/12/io7-dot-1-de-ibeacon</id>
    <content type="html"><![CDATA[<h3>iOS7.1ならアプリのBackground起動も必要なし！？</h3>

<p>さて、本日は最近いろいろなところで取り上げられているiOS7.1でのiBeaconについて実際に試してみました。<br/>
iOS7から導入されたiBeaconですが、これまではアプリをBackgroundで起動していなければBeaconを検知することができませんでした。しかし、iOS7.1からアプリをBackgroundで起動していなくてもBeaconを検知できるようになったとビッグニュースになりました。でも、本当にそうなんでしょうか？と疑問に思った筆者はSampleアプリで試してみました。</p>

<!--more-->


<p>下記がソースです。<br/>
まずはBeacon機器としてiPadを用いるためにPeripheralソースから書きます。<br/>
とりあえずProject作成の手順は<br/>
1: BeaconPeripheralという名称で新規Project作成<br/>
2: UIViewControllerを追加(ViewControllerという名称で作成しました)<br/>
3: CoreBluetoothとCoreLocationライブラリを追加<br/>
として下さい。</p>

<p>ViewController.hのソース
```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;CoreBluetooth/CoreBluetooth.h></h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>@interface ViewController : UIViewController<CBPeripheralManagerDelegate></p>

<p>@end
<code>
ViewController.mのソース  
</code>objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) IBOutlet CBPeripheralManager <em>peripheralManager;
@property (strong, nonatomic) IBOutlet NSUUID </em>proximityUUID;</p>

<p>@end</p>

<p>// 省略</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  self.title = @&ldquo;Peipheral&rdquo;;</p>

<p>  self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@&ldquo;8D4DB809-032F-4771-96F3-99BD5C25F924&rdquo;];
  self.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self queue:nil options:nil];
  if (self.peripheralManager.state == CBPeripheralManagerStatePoweredOn) {
      [self startAdvertising];
  }
}</p></li>
<li><p>(void)startAdvertising
{
  CLBeaconRegion <em>beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID
                                                                         major:1
                                                                         minor:2
                                                                    identifier:@&ldquo;com.test.ibeaconSample&rdquo;];
  NSDictionary </em>beaconPeripheralData = [beaconRegion peripheralDataWithMeasuredPower:nil];
  [self.peripheralManager startAdvertising:beaconPeripheralData];
}
```</p></li>
</ul>


<p>次に、Beaconを検知するCentralのソースを書きます。<br/>
Projectの作成手順はPeripheralとほぼ同じで、<br/>
1: BeaconCentralという名称で新規Project作成<br/>
2: UIViewControllerを追加(ViewControllerという名称で作成しました)<br/>
3: CoreLocationライブラリを追加<br/>
として下さい。</p>

<p>ViewController.hのソース<br/>
```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>@interface ViewController : UIViewController<CLLocationManagerDelegate></p>

<p>@end
```</p>

<p>ViewController.mのソース<br/>
```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) IBOutlet CLLocationManager <em>locationManager;
@property (strong, nonatomic) IBOutlet NSUUID </em>proximityUUID;
@property (strong, nonatomic) IBOutlet CLBeaconRegion <em>beaconRegion;
@property (strong, nonatomic) IBOutlet CLBeacon </em>nearestBeacon;</p>

<p>@end</p>

<p>// initWithNibNameは省略</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion class]]) {
      self.locationManager = [CLLocationManager alloc] init];]
      self.locationManager.delegate = self;</p>

<pre><code>  self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@"8D4DB809-032F-4771-96F3-99BD5C25F924"];
  self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID identifier:@"com.test.ibeaconSample"];
  [self.locationManager startMonitoringForRegion: self.beaconRegion];
</code></pre>

<p>  } else {
      NSLog(@&ldquo;お使いの端末ではiBeaconを利用できません。&rdquo;);
  }
}</p></li>
</ul>


<p>// 領域計測が開始した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didStartMonitoringForRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Start Monitoring Region"];
</code></pre>

<p>}</p>

<p>// 指定した領域に入った場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didEnterRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Enter Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager startRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 指定した領域から出た場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didExitRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager stopRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// Beacon信号を検出した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region
{</p>

<pre><code>if (beacons.count &gt; 0) {
    self.nearestBeacon = beacons.firstObject;
    NSString *rangeMessage;

    switch (self.nearestBeacon.proximity) {
        case CLProximityImmediate:
            rangeMessage = @"Range Immediate";
            break;
        case CLProximityNear:
            rangeMessage = @"Range Near";
            break;
        case CLProximityFar:
            rangeMessage = @"Range Far";
            break;
        default:
            rangeMessage = @"Range Unknown";
            break;
    }

    NSString *msg = [[NSString alloc] initWithFormat:@"%f [m]", self.nearestBeacon.accuracy];
    [self sendLocalNotificationForMessage:msg];
}
</code></pre>

<p>}</p>

<p>// 領域観測に失敗した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager monitoringDidFailForRegion:(CLRegion </em>)region withError:(NSError *)error
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];
</code></pre>

<p>}</p>

<p>// ローカルプッシュの処理
&ndash; (void)sendLocalNotificationForMessage:(NSString *)message
{</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
localNotification.soundName = UILocalNotificationDefaultSoundName;
[[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}
```</p>

<p>これでソースは完了です。<br/>
ソースを下記にアップしましたのでダウンロードしたい方はぜひ&hellip;。<br/>
<a href="https://github.com/grandbig/ibeaconCentralSample">Centralソース</a><br/>
<a href="https://github.com/grandbig/ibeaconPeripheralSample">Peripheralソース</a><br/>
まずはアプリをBackgroundで起動させているときの動作を見てみてください。<br/>
動作確認時には必ずCentralを先に起動する必要があります。約5秒後にPeripheralを起動して下さい。Centralの方にローカルプッシュが届くはずです。</p>

<p>続いて、アプリがBackground起動していない場合を見てみましょう。PeripheralアプリとCentralのアプリの両方を停止状態にします。(先ほどの状態から続けて実験する場合は、必ずCentralアプリ側に<strong>Exit Region</strong>というメッセージでローカルプッシュが届いてからにしてください。)<br/>
さて、Peripheralアプリを起動しましょう。しばらくするとCentralアプリを起動していないにも関わらず、ローカルプッシュが届くはずです。そして、Beacon間の距離がどんどんローカルプッシュされてくることでしょう。<br/>
<img src="/images/ibeacon_ios71_1.png" alt="Centralアプリを起動していない状態でローカルプッシュが届く" /><br/>
その後、Peripheralアプリを停止してみましょう。しばらくするとCentralアプリに<strong>Exit Region</strong>というローカルプッシュが届くはずです。それを最後にローカルプッシュは来なくなります。<br/>
<img src="/images/ibeacon_ios71_2.png" alt="Beaconの検知終了" /></p>

<p>このように、確かにアプリをBackgroundで起動していなくてもBeaconを検知するようです。因みに、このときアプリがBackground起動しているのか確認したのですが、起動はしてないんですね〜。というかホームボタン2回タップでBackground起動しているアプリが見れるはずなのに、そこに出てないんですね〜。う〜ん。どういうことなんでしょうか？？</p>

<p>まぁ、何はともあれ、iOS7.1からiBeaconの扱いが劇的に変わるってことは間違いないようです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
