<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: realm | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/realm/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-02-11T21:34:35+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RealmSwiftでdistinctしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/swift3-realm-2/"/>
    <updated>2017-06-11T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/swift3-realm-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">RealmSwift</a>に関するメモ書きです。<br/>
<code>RealmSwift</code>を使って保存したデータを<code>distinct</code>したいときがあったのですが、<code>RealmSwift</code>内で定義されているわけではなさそうなので迷いました。<br/>
よく考えてみれば、なんてことはなく<code>Swift</code>に標準で用意されたものを使えばよかったのでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>distinctする方法</h3>

<p>さて、具体的な方法を見てみましょう。<br/>
例として<code>RealmSwift</code>で保存するオブジェクトを下記のように定義します。</p>

<p>```objective-c
// Footprint.swift
import Foundation
import RealmSwift</p>

<p>/<em>*
 足跡
 </em>/
class Footprint: Object {
  dynamic var id: Int = 0
  dynamic var title: String = &ldquo;&rdquo;
  dynamic var latitude: Double = 0.0
  dynamic var longitude: Double = 0.0
  dynamic var speed: Double = 0.0
  dynamic var direction: Double = 0.0
  dynamic var created: Double = Date().timeIntervalSince1970</p>

<p>  // プライマリーキーの設定
  override static func primaryKey() &ndash;> String? {</p>

<pre><code>return "id"
</code></pre>

<p>  }</p>

<p>  // インデックスの設定
  override static func indexedProperties() &ndash;> [String] {</p>

<pre><code>return ["title"]
</code></pre>

<p>  }
}
```</p>

<p><code>RealmSwift</code>で保存していくと、下記のような結果になるでしょう。</p>

<p><img src="/images/realmswift_distinct_1.png" alt="RealmSwiftブラウザで結果を見てみる" /></p>

<p>もし、これらのデータから<code>title</code>を<code>distinct</code>して取得したい場合があったとしましょう。<br/>
その場合は下記のように取得します。</p>

<p>```objective-c
// FootprintManager.swift
/**
  保存した足跡タイトルを取得する処理</p>

<ul>
<li>returns: [タイトル]の配列
*/
func distinctByTitle() &ndash;> [String] {
let realm = try! Realm()
let distinctTitles = Set(realm.objects(Footprint.self).value(forKey: &ldquo;title&rdquo;) as! [String])</li>
</ul>


<p>  return distinctTitles
}
```</p>

<p>実はSwiftでは<code>Set</code>という重複を許さない集合体を定義するための型が用意されています。<br/>
なので、<code>RealmSwift</code>から単に取得してきた値を<code>Set</code>型に変換することで<code>distinct</code>と同じ結果が得られるということになります。</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか。<br/>
<code>distinct</code>は決して負荷の軽い処理ではありませんが、様々な場面で求められることでしょう。<br/>
使い方を知っておいて損はありません。<br/>
ということで今回はメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickでSwiftコードのUnitテストをしよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/06/quick-2/"/>
    <updated>2017-05-06T19:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/06/quick-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は久しぶりに<code>Quick</code>を使ったSwiftコードでのUnitテストについて見ていきたいと思います。<br/>
<a href="https://grandbig.github.io/blog/2016/01/16/quick/">前回</a>記事を書いてから実に1年以上経過しました。<br/>
当時、筆者はテスト駆動型での開発を業務で実行することがありませんでした。
最近は当たり前に単体テストを書かずにコードを書くことがありえないという開発環境になってきました。<br/>
しかし、それはWEBの世界に閉じており、iOSの世界では未だ、単体テストを書く工数が見合わないといった話が議論されていたりします。<br/>
言わんとすることはわからんでもないものの、WEBの世界でもテスト駆動型開発が広まるまではきっと同じような話をしていたのではないかと思ったりしています。<br/>
つまり、今後はiOSでも単体テストを書かないなんてありえないといった世界になるのでは？と期待しているのです。</p>

<p>そんな期待を抱きつつ、本記事を書いていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>テスト内容</h3>

<p>今回テスト内容として<code>Realm</code>に関わる処理を取り上げたいと思います。<br/>
狙いとしてはSpring BootでWEBアプリケーションを開発したときで言うところの<code>Repository</code>に関するテストといったイメージになります。</p>

<h3>テスト対象処理</h3>

<p>さて、具体的なテストの対象となる処理を書きます。</p>

<p>```objective-c
// ViewController.swift
import UIKit
import RealmSwift</p>

<p>class ViewController: UIViewController {
  &lt;省略></p>

<p>  // IDからデータを検索
  func searchEngineerById(_ id: Int) &ndash;> Engineer? {</p>

<pre><code>let realm = try! Realm()
let engineers = realm.objects(Engineer.self).filter("id == \(id)")
if engineers.count &gt; 0 {
  return engineers[0]
}
return nil
</code></pre>

<p>  }</p>

<p>  // 名前からデータを検索
  func searchEngineerByName(_ name: String) &ndash;> Results<Engineer>? {</p>

<pre><code>let realm = try! Realm()
let engineers = realm.objects(Engineer.self).filter("name == '\(name)'")
if engineers.count &gt; 0 {
  return engineers
}
return nil
</code></pre>

<p>  }</p>

<p>  // 保存しているデータ数を取得
  func countEngineer() &ndash;> Int {</p>

<pre><code>let realm = try! Realm()
return realm.objects(Engineer.self).count
</code></pre>

<p>  }</p>

<p>  // 新規データ作成
  func createEngineer(name: String, level: Int, skills: [String]) {</p>

<pre><code>if searchEngineerByName(name) != nil {
  // 既に検索結果がある場合は処理を終了
  return
}

// 検索結果がない場合は処理を継続
let skillList = List&lt;Skill&gt;()
for skill in skills {
  let newSkill = Skill()
  newSkill.name = skill
  skillList.append(newSkill)
}

let engineer = Engineer()
engineer.id = countEngineer()
engineer.name = name
engineer.level = level
engineer.skills.append(objectsIn: skillList)
let realm = try! Realm()

try! realm.write {
  realm.create(Engineer.self, value: engineer, update: false)
}
</code></pre>

<p>  }</p>

<p>  // IDを元にレベルを更新
  func updateEngineerLevelById(_ id: Int, level: Int) &ndash;> Bool {</p>

<pre><code>if let engineer = searchEngineerById(id) {
  // 検索結果がある場合は処理を継続
  let realm = try! Realm()
  try! realm.write {
    engineer.level = level
  }
  return true
}

// 検索結果がない場合は処理を終了
return false
</code></pre>

<p>  }</p>

<p>  // IDを元にスキルを更新
  func updateEngineerSkillById(_ id: Int, skills: [String]) &ndash;> Bool {</p>

<pre><code>if let engineer = searchEngineerById(id) {
  // 検索結果がある場合は処理を継続
  let realm = try! Realm()
  try! realm.write {
    for skill in skills {
      let newSkill = Skill()
      newSkill.name = skill
      engineer.skills.append(newSkill)
    }
  }
  return true
}

// 検索結果がない場合は処理を終了
return false
</code></pre>

<p>  }
}
```</p>

<h3>Quickの導入方法</h3>

<p>Swift3になっていることもあるので、念のためQuickの導入方法を書いておきたいと思います。<br/>
(<code>Realm</code>も使っていることに注意してください。)</p>

<p><code>CocoaPods</code>にて導入します。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;QuickTestSample&rdquo; do
  # Normal libraries
  pod &lsquo;RealmSwift&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "QuickTestSampleTests"
target "QuickTestSampleUITests"

pod 'Quick'
pod 'Nimble'
</code></pre>

<p>  end
end</p>

<p>post_install do |installer|
  installer.pods_project.targets.each do |target|</p>

<pre><code>target.build_configurations.each do |config|
  config.build_settings['SWIFT_VERSION'] = '3.0'
end
</code></pre>

<p>  end
end
```</p>

<h3>Quickでのテストコードの実装</h3>

<p>早速、Quickでのテストコードを実装していきましょう。</p>

<h4>Quickでテスト実行するための準備</h4>

<p>Quickでテストを実行するためには、テスト用に用意されたファイルのクラスを変更する必要があります。</p>

<p>```objective-c
// QuickTestSampleTests
import XCTest
import Quick
import Nimble
@testable import QuickTestSample</p>

<p>class QuickTestSampleTests: QuickSpec {
  override func spec() {</p>

<pre><code>...
</code></pre>

<p>  }
}
```</p>

<h4>テスト用データの作成について</h4>

<p>今回、<code>Realm</code>関連の処理を実装するにあたって悩んだのが、モック用のデータをどうするかという問題です。<br/>
今回取り上げている処理がかなりシンプルな処理であるため、<strong>manual mocking</strong> で作成するのも微妙です。</p>

<p>結果、下記のように実装しました。</p>

<p>```objective-c
// QuickTestSampleTests
import XCTest
import Quick
import Nimble
import RealmSwift   // 追加
@testable import QuickTestSample</p>

<p>class QuickTestSampleTests: QuickSpec {</p>

<p>  override func spec() {</p>

<pre><code>describe("Realm Database") {
  // テスト用のRealmデータ保存ファイルを作成
  // 保存場所はdefault.realmと同じでファイル名のみtest.realmに変更
  var config = Realm.Configuration()
  config.fileURL = config.fileURL!.deletingLastPathComponent().appendingPathComponent("test.realm")
  Realm.Configuration.defaultConfiguration = config
  // 上記の設定情報を利用してRealmを扱う
  let realm = try! Realm(configuration: config)

  beforeEach {
    // テスト用にモックデータを追加
    let engineer = Engineer()
    engineer.name = "mock_name"
    engineer.level = 1
    let skill = Skill()
    skill.name = "mock_skill_name"
    engineer.skills.append(skill)

    try! realm.write {
      realm.create(Engineer.self, value: engineer, update: false)
    }

    expect(engineer).notTo(beNil())
  }

  &lt;省略&gt;

  afterEach {
    // テスト終了後にデータを全て削除
    try! realm.write {
      realm.deleteAll()
    }
  }
}
</code></pre>

<p>  }<br/>
}
```</p>

<p>このように、最低限必要なモックデータをテスト用の<code>Realm</code>のデータベースに作成してみました。<br/>
<code>Realm</code>の使い方さえ間違えなければ、こちらでテストしたい独自処理には影響を与えないはずです。</p>

<p>上記のソースコードにコメントとして書いていますが、ポイントとしては下記の通りです。</p>

<ul>
<li>実際のアプリで利用する<code>Realm</code>ファイルとは別のテスト用の<code>Realm</code>ファイルを利用する</li>
<li>テスト実行前にテスト用のモックデータを作成する</li>
<li>テスト実行後はテスト用のモックデータを全て削除する</li>
</ul>


<h4>テストの記載箇所</h4>

<p>さて、実際にテストを実装すると下記のようになります。</p>

<p>```objective-c
// QuickTestSampleTests
&lt;省略></p>

<p>override func spec() {
  var subject: ViewController!
  describe(&ldquo;Realm Database&rdquo;) {</p>

<pre><code>beforeEach {
  &lt;省略&gt;
}

describe("searchEngineerById") {
  it("find realm data by id") {
    let engineer = subject.searchEngineerById(0)
    expect(engineer).notTo(beNil())
    expect(engineer?.name).to(equal("mock_name"))
  }
}

afterEach {
  &lt;省略&gt;
}
</code></pre>

<p>  }
}</p>

<p>&lt;省略>
```</p>

<p>ポイント次の通りです。</p>

<ul>
<li>テストの内容は<code>beforeEach</code>と<code>afterEach</code>の間に書く</li>
<li>メソッドごとにテストを記載していることをわかりやすくするために、<code>describe</code>でメソッドごとにくくる</li>
<li>テストで確かめたい内容次第で<code>notTo</code> / <code>to</code> / <code>equal</code> などを使い分ける</li>
</ul>


<h4>テストの内容</h4>

<p>では、テスト内容の詳細を個別に見ていきたいと思います。</p>

<h5>searchEngineerByIdのテスト</h5>

<p>まずは、<code>searchEngineerById</code>のテストを書きます。<br/>
このメソッドは検索成功時に<code>Engineer</code>型のオブジェクトを返し、検索失敗時には<code>nil</code>を返します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>検索成功：取得内容の整合性をチェック</li>
<li>検索失敗：<code>nil</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<p>```objective-c
// QuickTestSampleTests
describe(&ldquo;searchEngineerById&rdquo;) {
  // 取得内容の整合性チェック
  it(&ldquo;find realm data by id&rdquo;) {</p>

<pre><code>let engineer = subject.searchEngineerById(0)
expect(engineer).notTo(beNil())
expect(engineer?.name).to(equal("mock_name"))
expect(engineer?.skills[0].name).to(equal("mock_skill_name"))
</code></pre>

<p>  }</p>

<p>  // nilであることのチェック
  it(&ldquo;cannot find realm data by id&rdquo;) {</p>

<pre><code>let engineer = subject.searchEngineerById(1)
expect(engineer).to(beNil())
</code></pre>

<p>  }
}
```</p>

<h5>searchEngineerByNameのテスト</h5>

<p>続いて、<code>searchEngineerByName</code>のテストを書きます。<br/>
このメソッドは検索成功時に<code>List&lt;Engineer&gt;</code>型のオブジェクトを返し、検索失敗時には<code>nil</code>を返します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>検索成功：取得内容の整合性およびカウント数のチェック</li>
<li>検索失敗：<code>nil</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<p>```objective-c
describe(&ldquo;searchEngineerByName&rdquo;) {
  // 取得内容の整合性およびカウント数のチェック
  it(&ldquo;find realm data by name&rdquo;) {</p>

<pre><code>let engineers = subject.searchEngineerByName("mock_name")
expect(engineers).notTo(beNil())
expect(engineers?.count).to(equal(1))
expect(engineers?[0].name).to(equal("mock_name"))
expect(engineers?[0].skills[0].name).to(equal("mock_skill_name"))
</code></pre>

<p>  }</p>

<p>  // nilであることのチェック
  it(&ldquo;cannot find realm data by name&rdquo;) {</p>

<pre><code>let engineers = subject.searchEngineerByName("mock_mistake_name")
expect(engineers).to(beNil())
</code></pre>

<p>  }
}
```</p>

<h5>countEngineerのテスト</h5>

<p>次は<code>countEngineer</code>のテストを書きます。<br/>
このメソッドは検索成功時にデータのレコード数を返却します。<br/>
検索失敗時の処理は独自実装していないため成功時のテストのみ書きます。</p>

<p>```objective-c
describe(&ldquo;countEngineer&rdquo;) {
  // カウント数のチェック
  it(&ldquo;count realm data&rdquo;) {</p>

<pre><code>let count = subject.countEngineer()
expect(count).to(equal(1))
</code></pre>

<p>  }
}
```</p>

<h5>createEngineerのテスト</h5>

<p>今度は<code>createEngineer</code>のテストを書きます。<br/>
このメソッドは同名の<code>Engineer</code>オブジェクトが保存されている場合は、新規オブジェクトを作成しないということがポイントです。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>新規<code>Engineer</code>オブジェクト作成が成功した場合：取得内容の整合性およびカウント数のチェック</li>
<li>新規<code>Engineer</code>オブジェクト作成が失敗した場合：カウント数が変わっていないことをチェック</li>
</ul>


<p>を書くことになります。</p>

<p>```objective-c
describe(&ldquo;createEngineer&rdquo;) {
  // カウント数が変わっていないことのチェック
  it(&ldquo;cannot create engineer&rdquo;) {</p>

<pre><code>subject.createEngineer(name: "mock_name", level: 1, skills: ["swift"])
let engineers = subject.searchEngineerByName("mock_name")
expect(engineers).notTo(beNil())
expect(engineers?.count).to(equal(1))
</code></pre>

<p>  }</p>

<p>  // 取得内容の整合性およびカウント数のチェック
  it(&ldquo;create new engineer&rdquo;) {</p>

<pre><code>subject.createEngineer(name: "takahiro", level: 1, skills: ["swift", "spring boot", "react.js"])
let engineers = subject.searchEngineerByName("takahiro")
expect(engineers).notTo(beNil())
expect(engineers?.count).to(equal(1))
expect(engineers?[0].name).to(equal("takahiro"))
expect(engineers?[0].skills.count).to(equal(3))
expect(engineers?[0].skills[0].name).to(equal("swift"))
expect(engineers?[0].skills[1].name).to(equal("spring boot"))
expect(engineers?[0].skills[2].name).to(equal("react.js"))
</code></pre>

<p>  }
}
```</p>

<h5>updateEngineerLevelByIdのテスト</h5>

<p><code>updateEngineerLevelById</code>のテストを書きます。<br/>
このメソッドは成功可否に応じて<code>true / false</code>を返却します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>更新成功：<code>true</code>であることをチェック</li>
<li>更新失敗：<code>false</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<p>```objective-c
describe(&ldquo;updateEngineerLevelById&rdquo;) {
  // trueであることをチェック
  it(&ldquo;update level for realm data by id&rdquo;) {</p>

<pre><code>let updated = subject.updateEngineerLevelById(0, level: 2)
let engineer = subject.searchEngineerById(0)
expect(updated).to(beTrue())
expect(engineer?.level).to(equal(2))
</code></pre>

<p>  }</p>

<p>  // falseであることをチェック
  it(&ldquo;cannot update level for realm data by id&rdquo;) {</p>

<pre><code>let updated = subject.updateEngineerLevelById(2, level: 2)
expect(updated).to(beFalse())
</code></pre>

<p>  }
}
```</p>

<h5>updateEngineerSkillByIdのテスト</h5>

<p><code>updateEngineerSkillById</code>のテストを書きます。<br/>
このメソッドは成功可否に応じて<code>true / false</code>を返却します。</p>

<p>そのため、このメソッドに対するテストとしては、</p>

<ul>
<li>更新成功：<code>true</code>であることをチェック</li>
<li>更新失敗：<code>false</code>であることをチェック</li>
</ul>


<p>を書くことになります。</p>

<p>```objective-c
describe(&ldquo;updateEngineerSkillById&rdquo;) {
  // trueであることをチェック
  it(&ldquo;update skill for realm data by id&rdquo;) {</p>

<pre><code>let updated = subject.updateEngineerSkillById(0, skills: ["mock_skill_name_2"])
let engineer = subject.searchEngineerById(0)
expect(updated).to(beTrue())
expect(engineer?.skills.count).to(equal(2))
expect(engineer?.skills[0].name).to(equal("mock_skill_name"))
expect(engineer?.skills[1].name).to(equal("mock_skill_name_2"))
</code></pre>

<p>  }</p>

<p>  // falseであることをチェック
  it(&ldquo;cannot update skill for realm data by id&rdquo;) {</p>

<pre><code>let updated = subject.updateEngineerSkillById(2, skills: ["mock_skill_name_2"])
expect(updated).to(beFalse())
</code></pre>

<p>  }
}
```</p>

<h3>Quickでのテストコードの書式</h3>

<p>今回新たに出た書式についてまとめておきます。</p>

<h4>notTo</h4>

<p>対象と異なることを期待するときに利用します。</p>

<ul>
<li>書式例：<code>expect(engineer).notTo(beNil())</code></li>
<li>期待値：<code>engineer</code>オブジェクトが<code>nil</code>でない</li>
</ul>


<h4>to</h4>

<p>対象と一致することを期待するときに利用します。</p>

<h5>equalと組み合わせた場合</h5>

<ul>
<li>書式例：<code>expect(engineer?.name).to(equal("mock_name"))</code></li>
<li>期待値：<code>engineer</code>オブジェクトの<code>name</code>プロパティが<code>mock_name</code>と一致すること</li>
</ul>


<h5>beTrue / beFalseと組み合わせた場合</h5>

<ul>
<li>書式例：<code>expect(updated).to(beTrue())</code></li>
<li>期待値：<code>updated</code>の値が<code>true</code>と一致すること</li>
</ul>


<h4>beNil / equal / beTrue / beFalse</h4>

<p>それぞれ、</p>

<ul>
<li>beNil()：<code>nil</code>であること</li>
<li>equal()：引数の値であること(数字や文字列などを引数に設定します)</li>
<li>beTrue()：<code>true</code>であること</li>
<li>beFalse()：<code>false</code>であること</li>
</ul>


<p>を意味します。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。<br/>
今回は最近の経験を元にiOSでテスト駆動型の開発をするなら&hellip;をイメージして書いてみました。<br/>
次はもっと複雑なパターンのテストを試しに書いてみても良いかなと思いつつ、本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://realm.io/jp/docs/swift/latest/#realm-3">Realm公式ドキュメント</a></li>
<li><a href="https://news.realm.io/jp/news/rachel-bobbins-testing-view-controllers-quick/">Quickを使ってビューコントローラをテストする</a></li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/ja/ConfiguringQuick.md">Quickの挙動をカスタマイズしましょう</a></li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/ja/QuickExamplesAndGroups.md">QuickのExamplesとExample Groupsで、たくさんのテストでも整理整頓</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift3でRealmSwiftを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/06/swift3-realm/"/>
    <updated>2017-05-06T02:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/06/swift3-realm</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>約2年前に画期的なモバイルデータベースとして<a href="https://realm.io/jp/">Realm</a>について紹介させて頂きました。<br/>
当時はSwift専用のものがなかったため、Objective-C用のものをブリッジヘッダーファイルを作成することで利用していました。<br/>
現在はかなり多くのアプリでも利用され、広く浸透していると共に、<code>SwiftRealm</code>が作られ、Swift専用化しています。</p>

<p>今回は、以前、筆者が書いた<a href="http://grandbig.github.io/blog/2015/06/07/swift-realm/">SwiftでRealmを使ってみよう！</a>を<code>SwiftRealm</code>で書き直す形でSwift3での<code>Realm</code>の使い方を見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>RealmSwiftの導入方法</h3>

<p><code>CocoaPods</code>を利用して導入してみます。<br/>
(<code>Carthage</code>での利用方法も公式サイトにて紹介されています。)</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;RealmSwiftSample&rdquo; do
  # Normal libraries
  pod &lsquo;RealmSwift&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "RealmSwiftSampleTests"
target "RealmSwiftSampleUITests"
</code></pre>

<p>  end
end</p>

<p>post_install do |installer|
  installer.pods_project.targets.each do |target|</p>

<pre><code>target.build_configurations.each do |config|
  config.build_settings['SWIFT_VERSION'] = '3.0'
end
</code></pre>

<p>  end
end
```</p>

<p>因みに、<code>abstract_target</code>は複数targetにまたがって利用したいライブラリがある場合に利用します。<br/>
(上記の例はテストでのみ利用するライブラリがある場合に利用する書式です。)<br/>
また、<code>post_install do |installer|</code>〜<code>end</code>までの書式はSwiftのバージョンを指定するために追加します。</p>

<p><code>Podfile</code>ができたら<code>pod install</code>を実行して<code>xcworkspace</code>ファイルを開きましょう。</p>

<h3>保存オブジェクトの生成</h3>

<p>Objective-C用のときは<code>RLMObject</code>型のクラスを作成していましたが、<code>RealmSwift</code>では単に<code>Object</code>型のクラスを作成します。</p>

<p>```objective-c
// Engineer.swift</p>

<p>import Foundation
import RealmSwift</p>

<p>// Skillクラス
class Skill: Object {</p>

<pre><code>dynamic var name: String = ""
</code></pre>

<p>}</p>

<p>// Engineerクラス
class Engineer: Object {</p>

<pre><code>dynamic var id: Int = 0
dynamic var name: String = ""
dynamic var level: Int = 0
let skills = List&lt;Skill&gt;()
dynamic var created: Double = Date().timeIntervalSince1970
dynamic var updated: Double = Date().timeIntervalSince1970

// プライマリーキーの設定
override static func primaryKey() -&gt; String? {
    return "id"
}

// インデックスの設定
override static func indexedProperties() -&gt; [String] {
    return ["level"]
}
</code></pre>

<p>}
```</p>

<p>Objective-C用の<code>Realm</code>では<code>RLMArray</code>型として<code>skills</code>を作成していましたが、<code>RealmSwift</code>では<code>List&lt;Skill&gt;</code>型として作成できます。<br/>
こちらの方が直感的でわかりやすいですね。<br/>
因みに、<code>dynamic var skills = List&lt;Skill&gt;()</code>と書くとエラーが発生するので<code>List</code>を利用する場合は<code>let</code>にしましょう。</p>

<h3>オブジェクトのインサート/アップデート</h3>

<p>先程作成したオブジェクトを保存する方法について紹介しましょう。</p>

<p>```objective-c
// ViewController.swift
import UIKit
import RealmSwift</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()
    // 新規オブジェクトをインサート
    createEngineer(name: "test1", level: 1, skills: ["swift", "objective-c"])
}

&lt;省略&gt;

func createEngineer(name: String, level: Int, skills: [String]) {
    // Skill型オブジェクトに変換してList&lt;Skill&gt;に格納
    let skillList = List&lt;Skill&gt;()
    for skill in skills {
        let newSkill = Skill()
        newSkill.name = skill
        skillList.append(newSkill)
    }

    let realm = try! Realm()

    // Engineer型オブジェクトの作成
    let engineer = Engineer()
    engineer.id = realm.objects(Engineer.self).count
    engineer.name = name
    engineer.level = level
    engineer.skills.append(objectsIn: skillList)

    // Realmへのオブジェクトの書き込み
    try! realm.write {
        realm.add(engineer)
    }
}
</code></pre>

<p>}
```</p>

<p>Objective-Cの際は<code>realm.beginWriteTransaction()</code>や<code>realm.commitWriteTransaction()</code>などわざわざ書いていたものの、<code>RealmSwift</code>では非常にコンパクトに書けますね。<br/>
因みに、アップデートであれば、</p>

<p><code>objective-c
try! realm write {
  engineer.name = "takahiro"
}
</code></p>

<p>のようにすれば良さそうです。</p>

<h3>データの確認</h3>

<p>今は、Mac App Storeから<code>Realm Browser</code>アプリをインストールすることで簡単にデータ確認が可能になっています。</p>

<p>手順は以下の通りです。<br/>
１．<code>Realm Browser</code>を起動する<br/>
２．<code>Realm</code>ファイルを選択して開く</p>

<p>そうすることで、下記のようにデータを確認することができます。</p>

<p><img src="/images/swift3-realm1.png" alt="Realm BrowserでEngineerオブジェクトを確認" /><br/>
<img src="/images/swift3-realm2.png" alt="Realm BrowserでSkillオブジェクトを確認" /></p>

<p>注意すべきこととしては、シミュレータだと<code>realm</code>ファイルを探すのに骨が折れるかもくらいでしょうか&hellip;<br/>
<code>/Users/&lt;username&gt;/Library/Developer/CoreSimulator/Devices/&lt;simulator-uuid&gt;/data/Containers/Data/Application/&lt;application-uuid&gt;/Documents/default.realm</code>にありますので該当するファイルを検索するなどして探しましょう。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか。<br/>
筆者は久しぶりに<code>Realm</code>を触ったため、以前利用していたときよりも『だいぶ変わったな』と正直思いました。<br/>
ですが、<code>RealmSwift</code>になったことで、より<code>Swift</code>らしい書き方ができると思いますし、単純に記述量も少なく書けるような気がしています。<br/>
今後も多くのアプリで利用されることでしょうし、知っておいて損は絶対になさそうですね。<br/>
ということで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/shu223/items/e9d0145a2087da0d6d46">CocoaPods でビルド設定を追加する</a></li>
<li><a href="https://guides.cocoapods.org/using/the-podfile.html">CocoaPods公式サイトでの説明</a></li>
<li><a href="http://stackoverflow.com/questions/28465706/how-to-find-my-realm-file/28465803#28465803">stackoverflow &ndash; How to find my realm file?</a></li>
<li><a href="https://realm.io/jp/docs/swift/latest/">Realm公式ドキュメント</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでRealmを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/07/swift-realm/"/>
    <updated>2015-06-07T16:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/07/swift-realm</id>
    <content type="html"><![CDATA[<h4>Realmをプロジェクトに追加しよう</h4>

<p>本日は最近、流行っているRealmについて遊んでみたいと思います。<br/>
まずは導入の仕方から見て行きましょう！</p>

<h5>Realmの導入方法</h5>

<p>下記のPodfileを作成しましょう。<br/>
本記事のSwiftプロジェクトとして、<code>SwiftRealm.xcodeproj</code>を作成します。</p>

<p>```objective-c
// Podfile
platform :ios, &lsquo;8.0&rsquo;
source &lsquo;<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>&rsquo;</p>

<p>target &lsquo;SwiftRealm&rsquo;, exclusive: true do</p>

<pre><code>pod 'Realm'
</code></pre>

<p>end</p>

<p>target &lsquo;SwiftRealmTests&rsquo;, exclusive: true do</p>

<pre><code>pod 'Realm/Headers'
</code></pre>

<p>end
```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>あとは<code>pod install</code>しましょう。<br/>
すると、<code>SwiftRealm.xcworkspace</code>が作成されるので、Xcodeで起動しましょう。</p>

<p><img src="/images/swift-realm.png" alt="Realmを追加した結果" /></p>

<p>なんと、Objective-C++で書かれていますね！
Swiftで利用するためにはBridging-Headerファイルの設定を行う必要があります。</p>

<p>SwiftRealm-Bridging-Header.hを作成します。<br/>
<img src="/images/swift-realm2.png" alt="ヘッダーファイルの作成" /></p>

<p>TARGETS > SwiftRealm > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Header にパスを設定します。<br/>
<img src="/images/swift-realm3.png" alt="パスの設定" /></p>

<p>SwiftRealm-Bridging-Header.hの中身を書きます。</p>

<p>```objective-c</p>

<h1>ifndef SwiftRealm_SwiftRealm_Bridging_Header_h</h1>

<h1>define SwiftRealm_SwiftRealm_Bridging_Header_h</h1>

<h1>import &lt;Realm/Realm.h></h1>

<h1>endif</h1>

<p>```</p>

<p>これでRealmを利用する準備が整いました。<br/>
実際にコードを書いていきましょう。</p>

<h5>保存オブジェクトの生成</h5>

<p>Realmでは保存する対象を<code>RLMObject</code>として作成します。<br/>
SQLiteでいうところのテーブルを生成しているイメージでしょうか。</p>

<p>今回は練習として<code>Engineer.swift</code>内で<code>Engineer</code>クラスを作ってみました。</p>

<p>```objective-c
// Engineer.swift</p>

<p>// Engineerクラス
class Engineer:RLMObject {</p>

<pre><code>// プロパティと初期値の設定
dynamic var id:Int = 0
dynamic var level:Int = 0
dynamic var businessTitle:String = ""
dynamic var skills = RLMArray(objectClassName: "Skills")
dynamic var created:Double = 0
dynamic var updated:Double = 0

// プライマリーキーの設定
override class func primaryKey() -&gt; String? {
    return "id"
}

// インデックスの設定
override class func indexedProperties() -&gt; [AnyObject]? {
    return ["level"]
}
</code></pre>

<p>}</p>

<p>// Skillsクラス
class Skills: RLMObject {</p>

<pre><code>    dynamic var skill:String = ""
</code></pre>

<p>}
```</p>

<p>ポイントとしては、<code>skills</code>のように配列の形で1つの要素に複数の値を割り当てたい場合は、それ単体で別に<code>RLMObject</code>の拡張クラスを作成する必要があります。<br/>
<code>RLMArray</code>を初期化することは許可されていないためです。</p>

<h5>オブジェクトのインサート/アップデート</h5>

<p>続いて、先ほど生成したオブジェクトをインサート/アップデートしてみましょう。</p>

<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    // id=0のオブジェクトを検索
    if let engineer = Engineer(forPrimaryKey: 0) {
        // 検索結果がある場合
        println("既にエンジニアが１人います。\(engineer)")

        // アップデート
        let realm = RLMRealm.defaultRealm()
        // 書込みの開始
        realm.beginWriteTransaction()
        // Skillsクラスをインスタンス化
        let skills = Skills()
        // 要素を設定
        skills.skill = "Objective-C"
        // 既存のデータに要素を追加
        engineer.skills.addObject(skills)
        engineer.updated = NSDate().timeIntervalSince1970
        // データのアップデート処理
        realm.addOrUpdateObject(engineer)
        // 書込みの終了
        realm.commitWriteTransaction()
    } else {
        // 検索結果がない場合
        // Engineerクラスをインスタンス化
        let newEngineer = Engineer()
        newEngineer.id = 0
        newEngineer.level = 0
        newEngineer.businessTitle = "新米エンジニア"
        // Skillsクラスをインスタンス化
        let skills = Skills()
        skills.skill = "Swift"
        newEngineer.skills.addObject(skills)
        newEngineer.created = NSDate().timeIntervalSince1970

        // データの新規作成
        let realm = RLMRealm.defaultRealm()
        // 書込みの開始
        realm.beginWriteTransaction()
        // データのインサート処理
        realm.addObject(newEngineer)
        // 書込みの終了
        realm.commitWriteTransaction()
    }
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}
</code></pre>

<p>}
```</p>

<p>ここでは、<code>id=0</code>のデータを検索して、見つからない場合は新規データをインサートし、見つかった場合はデータのアップデートをしています。<br/>
書込みにはトランザクションブロックを使った方法もあるようですが、今回は<code>beginWriteTransaction</code>と<code>commitWriteTransaction</code>を利用しました。</p>

<h5>データの確認</h5>

<p>では、データを作成した後に、そのデータを確認したい場合はどうすれば良いのでしょうか？<br/>
実はMac専用のアプリが提供されています。</p>

<p><a href="https://realm.io/jp/docs/java/latest/">こちらのサイト</a>の <strong>Realm Browser</strong> の項目からインストールしましょう。</p>

<p>Realm Browserを使えば、下記のようにデータを見ることができます。</p>

<p><img src="/images/swift-realm4.png" alt="Realm Browserで確認１" /><br/>
<img src="/images/swift-realm5.png" alt="Realm Browserで確認２" /></p>

<p>これからSQLiteよりもRealmの方がスタンダートな保存方法となることでしょう。<br/>
どんどん使い方を勉強していかなくては！！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
