<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-01-01T15:46:07+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(3)]]></title>
    <link href="http://grandbig.github.io/blog/2017/01/01/redux-base-3/"/>
    <updated>2017-01-01T14:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/01/01/redux-base-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回の<a href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/">iOSエンジニアが苦しんだReduxの基礎(2)</a>で素のReactと素のReduxを組み合わせたExampleについて見ていきました。<br/>
今回は<code>connect()</code>を使ったReact&amp;ReduxによるWebサイトの実装について見ていきたいと思います。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Counterサンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter</strong> を見ていきましょう。<br/>
本来は素のReactと素のReduxを使ったExampleではあるのですが、今回の説明のために改変します。<br/>
実装するWebサイトは下図の通りです。</p>

<p><img src="/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>前回と異なるのはReactとReduxの連携に <strong>connect()</strong> を利用しているという点です。<br/>
では1つ1つ見ていきましょう。</p>

<h4>フォルダ構成</h4>

<p>まずはフォルダ構成を見ていきます。<br/>
(説明のために一部変更を加えています。)</p>

<p>```javascript
counter
├── public
│     └── index.html
└── src</p>

<pre><code> ├── index.js
 ├── actions
 │     └── index.js
 ├── reducers
 │     └── index.js
 ├── components
 │     └── Counter.js
 └── node_modules
</code></pre>

<p>```</p>

<h4>素の連携とconnect()による連携の比較</h4>

<p><code>Actions</code>, <code>Reducers</code>, <code>Components</code>に関しては、<a href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/">前回</a>と同じなので割愛します。<br/>
前回は、ReactとReduxの連携部分を下記のように書いていました。</p>

<p>```javascript
// src/index.js
import React from &lsquo;react&rsquo;
import ReactDOM from &lsquo;react-dom&rsquo;
import { createStore } from &lsquo;redux&rsquo;
import Counter from &lsquo;./components/Counter&rsquo;
import counter from &lsquo;./reducers&rsquo;
import { increment, decrement } from &lsquo;./actions&rsquo;</p>

<p>const store = createStore(counter)
const rootEl = document.getElementById(&lsquo;root&rsquo;)</p>

<p>const render = () => ReactDOM.render(
  &lt;Counter</p>

<pre><code>value={store.getState()}
onIncrement={() =&gt; store.dispatch(increment())}
onDecrement={() =&gt; store.dispatch(decrement())}
</code></pre>

<p>  />,
  rootEl
)</p>

<p>render()
store.subscribe(render)
```</p>

<p>今回はこの連携を<code>connect()</code>を利用して実装します。</p>

<p>まずは、必要なモジュールを追加しましょう。</p>

<p><code>javascript
// src/index.js
import React from 'react'
import ReactDOM from 'react-dom'
import { createStore } from 'redux'
// Providerとconnectを追加
import { Provider, connect } from 'react-redux'
import Counter from './components/Counter'
import { increment, decrement } from './actions/index'
import counter from './reducers'
</code></p>

<p><code>connect()</code>で連携します。</p>

<p>```javascript
// src/index.js
function mapStateToProps (state) {
  return { value: state }
}</p>

<p>function mapDispatchToProps (dispatch) {
  return {</p>

<pre><code>onIncrement: () =&gt; dispatch(increment()),
onDecrement: () =&gt; dispatch(decrement())
</code></pre>

<p>  }
}</p>

<p>let AppContainer = connect(
  mapStateToProps,
  mapDispatchToProps
)(Counter)</p>

<p>const render = () => ReactDOM.render(
  <Provider store={store}></p>

<pre><code>&lt;AppContainer /&gt;
</code></pre>

<p>  </Provider>,
  rootEl
)
render()
```</p>

<p>1つ1つ見ていきましょう。<br/>
<code>connect()</code>は4つの引数をセットできるのですが、中でも重要なのが次の2つです。</p>

<ol>
<li><code>mapStateToProps</code></li>
<li><code>mapDispatchToProps</code></li>
</ol>


<p>です。<br/>
全ては<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md">react-reduxのReadme</a>に書かれているのですが、ソースと合わせて見ていきます。<br/>
まずは、<code>mapStateToProps</code>からです。<br/>
Readmeには、</p>

<blockquote><p>If specified, the component will subscribe to Redux store updates. Any time it updates, mapStateToProps will be called. Its result must be a plain object*, and it will be merged into the component’s props. If you omit it, the component will not be subscribed to the Redux store.</p></blockquote>

<p>と書かれていますね。<br/>
これはソースで比較しても明らかです。<br/>
前回までは、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ために下記のようにしていました。</p>

<p><code>javascript
// subscribeの第一引数にrenderメソッドを指定
store.subscribe(render)
</code></p>

<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>State</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されていました。<br/>
今回は<code>connect()</code>を利用しているので<code>store.subscribe</code>が書かれていないことがわかると思います。</p>

<p>```javascript
// src/index.js
function mapStateToProps (state) {
  return { value: state }
}</p>

<p>// connectメソッドの第一引数は「stateを引数に持つメソッド」
// connectメソッドの第一引数にmapStateToPropsを設定
let AppContainer = connect(
  mapStateToProps,
  mapDispatchToProps
)(Counter)
```</p>

<p>ですが、やっていることは同じで『Stateが変更されてStoreにそれが伝えられたときに <strong>mapStateToPropsは毎回実行</strong> されます。』
もし、<code>mapStateToProps</code>を<code>connect()</code>の第一引数に指定しなかった場合、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ことができません。</p>

<p>また、<code>return { value: state }</code>をすることで<code>Counter Component</code>の<code>propTypes</code>である<code>value</code>に値を渡しています。</p>

<p>続いて、<code>mapDispatchToProps</code>を見ていきます。<br/>
Readmeには、</p>

<blockquote><p>If an object is passed, each function inside it will be assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a dispatch call so they may be invoked directly, will be merged into the component’s props. If a function is passed, it will be given dispatch.</p></blockquote>

<p>と書かれていますね。<br/>
これは少々わかりづらいのですが、<code>Counter Component</code>がクリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment</code>や<code>decrement</code>で作成した<code>Actions</code>を渡せるように実装することを実現しています。<br/>
前回までは、『 <strong>StoreにStateの変更を知らせる</strong> 』ために下記のようにしていました。</p>

<p>```javascript
// src/index.js
const render = () => ReactDOM.render(
  &lt;Counter</p>

<pre><code>value={store.getState()}
onIncrement={() =&gt; store.dispatch(increment())}
onDecrement={() =&gt; store.dispatch(decrement())}
</code></pre>

<p>  />,
  rootEl
)
```</p>

<p>このように直接<code>Counter Component</code>に<code>onIncrement</code>および<code>onDecrement</code>を渡していました。<br/>
<code>connect()</code>を利用すると、第二引数の<code>mapDispatchToProps</code>の戻り値として<code>Action Creators</code>を設定することで実現できます。<br/>
これにより、<code>Counter Component</code>の<code>propTypes</code>である<code>onIncrement</code>と<code>onDecrement</code>に値を渡すことができます。</p>

<p>```javascript
// src/index.js
function mapDispatchToProps (dispatch) {
  return {</p>

<pre><code>onIncrement: () =&gt; dispatch(increment()),
onDecrement: () =&gt; dispatch(decrement())
</code></pre>

<p>  }
}</p>

<p>// connectメソッドの第二引数は「dispatchを引数に持つメソッド」
// connectメソッドの第二引数にmapDispatchToPropsを設定
let AppContainer = connect(
  mapStateToProps,
  mapDispatchToProps
)(Counter)
```</p>

<h3>まとめ</h3>

<p>これで<code>connect()</code>が何をしているのかが少しは見えてきました。<br/>
実行している処理内容がわかってくると、</p>

<ul>
<li><code>connect()</code>: ReactとReduxを<code>connect</code>(接続)する</li>
<li><code>mapStateToProps</code>: <code>State</code>を<code>Props</code>に<code>map</code>(マッピング)する</li>
<li><code>mapDispatchToProps</code>: <code>Dispatch</code>を<code>Props</code>に<code>map</code>(マッピング)する</li>
</ul>


<p>のように名称がそのものを表していたことが改めてわかります。<br/>
(理解促進してくれるような名称になっていますね。)</p>

<p>次回はさらに処理を簡略化して書くのに使われる<code>redux-actions</code>を利用した実装について見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(2)]]></title>
    <link href="http://grandbig.github.io/blog/2017/01/01/redux-base-2/"/>
    <updated>2017-01-01T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/01/01/redux-base-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>早くも2017年になってしまいましたね。<br/>
本年もよろしくお願い致します。</p>

<p>今回は<a href="http://grandbig.github.io/blog/2016/12/31/redux-base-1/">iOSエンジニアが苦しんだReduxの基礎(1)</a>の続きを書いていきたいと思います。<br/>
前回はReduxのみを利用したWebサイトの実装について話をしましたが、今回はReactと組み合わせて行きたいと思います。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Counterサンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter</strong> を見ていきましょう。<br/>
実現するWebサイトは <strong>Counter Vanilla</strong> と同じで下図のようになります。</p>

<p><img src="/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>前回と異なるのはViewに <strong>React</strong> を利用しているという点です。<br/>
では1つ1つ見ていきましょう。</p>

<h4>フォルダ構成</h4>

<p>まずはフォルダ構成を見ていきます。<br/>
(説明のために一部変更を加えています。)</p>

<p>```javascript
counter
├── public
│     └── index.html
└── src</p>

<pre><code> ├── index.js
 ├── actions
 │     └── index.js
 ├── reducers
 │     └── index.js
 ├── components
 │     └── Counter.js
 └── node_modules
</code></pre>

<p>```</p>

<h4>Actions</h4>

<p>今回<code>Actions</code>は<code>actions/index.js</code>にまとめています。<br/>
<code>Actions</code>と<code>Action Creators</code>について復習しておきます。</p>

<ul>
<li><code>Actions</code>

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>
</li>
<li><code>Action Creators</code>

<ul>
<li><code>Action</code>を作成するメソッド</li>
</ul>
</li>
</ul>


<p>```javascript
// actions/index.js
const INCREMENT = { type: &lsquo;INCREMENT&rsquo; }
const DECREMENT = { type: &lsquo;DECREMENT&rsquo; }</p>

<p>export function increment() {
  return INCREMENT;
}
export function decrement() {
  return DECREMENT;
}
```</p>

<h4>Reducers</h4>

<p>今回<code>Reducers</code>は<code>reducers/index.js</code>にまとめています。<br/>
<code>Reducers</code>についても復習しておきます。</p>

<ul>
<li><code>Action</code>と<code>State</code>から新たな<code>State</code>を作成して返す</li>
<li>ポイントは<code>State</code>を更新するのではなく、 新しく作成した<code>State</code> を返すということ</li>
</ul>


<p>```javascript
// reducers/index.js
export default (state = 0, action) => {
  // stateの初期値を0に設定
  switch (action.type) {</p>

<pre><code>case 'INCREMENT':
  return state + 1
case 'DECREMENT':
  return state - 1
default:
  return state
</code></pre>

<p>  }
}
```</p>

<h4>Components</h4>

<p>今回は<code>React</code>を利用するので、描画部分を表現する<code>Components</code>を作成する必要があります。<br/>
<code>Components</code>には<code>Presentational Component</code>と<code>Container Component</code>の2種類が存在します。</p>

<ul>
<li><code>Presentational Component</code>

<ul>
<li>画面の描画を担当する<code>Component</code></li>
</ul>
</li>
<li><code>Container Component</code>

<ul>
<li><code>Presentational Component</code>にデータやコールバックを渡す<code>Component</code></li>
</ul>
</li>
</ul>


<p>本記事のExampleは簡単なため、<code>Presentational Component</code>のみ利用しています。<br/>
<code>Presentational Component</code>は<code>components/Counter.js</code>が該当します。<br/>
ソースコードは下記の通りです。</p>

<p>```javascript
// components/Counter.js
import React, { Component, PropTypes } from &lsquo;react&rsquo;</p>

<p>class Counter extends Component {
  static propTypes = {</p>

<pre><code>value: PropTypes.number.isRequired,
onIncrement: PropTypes.func.isRequired,
onDecrement: PropTypes.func.isRequired
</code></pre>

<p>  }</p>

<p>  incrementIfOdd = () => {</p>

<pre><code>if (this.props.value % 2 !== 0) {
  // valueが奇数の場合のみonIncrementを実行
  this.props.onIncrement()
}
</code></pre>

<p>  }</p>

<p>  incrementAsync = () => {</p>

<pre><code>// 1秒後にonIncrementを実行
setTimeout(this.props.onIncrement, 1000)
</code></pre>

<p>  }</p>

<p>  render() {</p>

<pre><code>// 描画処理
const { value, onIncrement, onDecrement } = this.props
return (
  &lt;p&gt;
    Clicked: {value} times
    {' '}
    &lt;button onClick={onIncrement}&gt;
      +
    &lt;/button&gt;
    {' '}
    &lt;button onClick={onDecrement}&gt;
      -
    &lt;/button&gt;
    {' '}
    &lt;button onClick={this.incrementIfOdd}&gt;
      Increment if odd
    &lt;/button&gt;
    {' '}
    &lt;button onClick={this.incrementAsync}&gt;
      Increment async
    &lt;/button&gt;
  &lt;/p&gt;
)
</code></pre>

<p>  }
}</p>

<p>export default Counter
```</p>

<p><code>Counter Component</code>で最も重要なポイントは、<br/>
『描画には<code>value</code>, <code>onIncrement</code>, <code>onDecrement</code>の3つが必須』という点です。</p>

<h3>Store</h3>

<p>今回<code>Store</code>は<code>src/index.js</code>にまとめられています。<br/>
<code>Store</code>についても復習しておきましょう。</p>

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li><code>State</code>を更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることで<code>Store</code>に<code>State</code>の変更を知らせられる</li>
</ul>
</li>
<li><code>State</code>の状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることで<code>listener</code>は<code>getState</code>を通して<code>State</code>の状態を取得できる</li>
</ul>
</li>
</ul>


<p>```javascript
// src/index.js
import React from &lsquo;react&rsquo;
import ReactDOM from &lsquo;react-dom&rsquo;
import { createStore } from &lsquo;redux&rsquo;
import Counter from &lsquo;./components/Counter&rsquo;
import counter from &lsquo;./reducers&rsquo;
import { increment, decrement } from &lsquo;./actions&rsquo;</p>

<p>const store = createStore(counter)
const rootEl = document.getElementById(&lsquo;root&rsquo;)</p>

<p>const render = () => ReactDOM.render(
  &lt;Counter</p>

<pre><code>value={store.getState()}
onIncrement={() =&gt; store.dispatch(increment())}
onDecrement={() =&gt; store.dispatch(decrement())}
</code></pre>

<p>  />,
  rootEl
)</p>

<p>render()
store.subscribe(render)
```</p>

<p>少し詳しくポイントを見ていきましょう。<br/>
冒頭で必要なモジュールを読み込んでいます。</p>

<p><code>javascript
import React from 'react'
import ReactDOM from 'react-dom'
import { createStore } from 'redux'
import Counter from './components/Counter'        // Component
import counter from './reducers'                  // Reducer
import { increment, decrement } from './actions'  // Action
</code></p>

<p>そして、下記のように<code>store</code>を作成しています。</p>

<p><code>javascript
// カウントアップ・ダウンのReducerを引数にStoreを生成
const store = createStore(counter)
</code></p>

<p>また、前回は<code>HTML</code>に全て構成を書いていましたが、今回は<code>React</code>を利用していますので、下記のように描画をしています。</p>

<p>```javascript
// id=&ldquo;root"のDOMを取得
const rootEl = document.getElementById(&lsquo;root&rsquo;)</p>

<p>// 描画メソッド
const render = () => ReactDOM.render(
  {/<em> Counter Componentの呼び出し </em>/}
  &lt;Counter</p>

<pre><code>value={store.getState()}
onIncrement={() =&gt; store.dispatch(increment)}
onDecrement={() =&gt; store.dispatch(decrement)}
</code></pre>

<p>  />,
  rootEl
)</p>

<p>// 初期描画処理
render()
```</p>

<p><code>Counter Component</code>の3つの必須<code>propTypes</code>に下記を渡しています。</p>

<ul>
<li>value: <code>State</code>の値(<code>store.getState()</code>)</li>
<li>onIncrement: <code>Store</code>に<code>State</code>の増加を通知(<code>() =&gt; store.dispatch(increment)</code>)</li>
<li>onDecrement: <code>Store</code>に<code>State</code>の減少を通知(<code>() =&gt; store.dispatch(decrement)</code>)</li>
</ul>


<p>上記のようにすることで、<br/>
クリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment</code>および<code>decrement</code>で作成した<code>Actions</code>を渡せるようになりました。<br/>
これにより、『 <strong>StoreにStateの変更を知らせる</strong> 』ことができます。</p>

<p>その後、<code>render()</code>で描画処理を実行しています。</p>

<p>最後に、<code>listener</code>処理です。</p>

<p><code>javascript
// subscribeの第一引数にrenderメソッドを指定
store.subscribe(render)
</code></p>

<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>State</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されることになります。<br/>
こうすることで、『 <strong>Stateの変更結果として描画に反映させる</strong> 』ことができます。</p>

<h3>まとめ</h3>

<p>さて、前回の素のReduxから、『ReactとReduxをそれぞれ素で利用する』ところまで進んできました。<br/>
ここまで割りとすんなり理解できたのであれば、<code>connect()</code>を利用したReact&amp;Reduxの実装の理解までもう少しだと思います。<br/>
Reduxの理解を促進する上で重要なのは、</p>

<ul>
<li>ユーザの操作結果を<code>Store</code>に伝えること</li>
<li><code>Store</code>の変更に応じて画面を再描画すること</li>
</ul>


<p>だと思っています。<br/>
ここまでの流れさえ理解できてしまえば、応用的な内容も躓かずに理解できるはずです。<br/>
さて次回はいよいよ<code>connect()</code>を利用したReact&amp;Reduxの実装について見ていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎(1)]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/31/redux-base-1/"/>
    <updated>2016-12-31T01:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/31/redux-base-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今年も残すところ1日となりましたね。<br/>
筆者にとって2016年は新しいことだらけの1年となりました。<br/>
技術的にもこれまで触ってこなかったものに挑戦する機会を得ることができました。<br/>
その1つは本日のお題である <strong>Redux</strong> です。<br/>
実は現在進行系で理解に苦しんでいる途中なので、休暇中に理解を促進する意味も込めて記事を書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Reduxは難しい！？</h3>

<p>ここ最近、iOSエンジニアとして活動してきた筆者にとって <strong>なぜReduxが難しいと感じたのか</strong> について語りたいと思います。<br/>
結論から言うと、 <strong>ReactとReduxを組み合わせた場合の実装から入ったため</strong> 難しく感じたのではないかと思っています。<br/>
具体的には、ReactとReduxの公式ページや様々な紹介ページを読むと必ず出てくる <strong>connect()</strong> がかなり難しいと感じました。</p>

<p>プロジェクトに参画するタイミングによっては悠長に勉強をしている場合ではないと思いますが、<br/>
まずは素のReduxを理解することが最も近道だと実体験として感じました。</p>

<p>では、素のReduxはどうやって学べば良いのでしょうか？<br/>
Reduxで検索をしてもほとんどの場合、Reactと一緒に使われている記事しか出てこないと思います。<br/>
答えは簡単です！<br/>
(当たり前ではあるのですが、)公式のExampleを勉強すれば良いのです。</p>

<h3>Counter Vanilla サンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter Vanilla</strong> を見ていきましょう。<br/>
ソースコードは下記のようになっています。<br/>
(少々、Reduxの原則と照らし合わせられるようにソースコードを改変しています。)</p>

<p>```javascript</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Redux basic example&lt;/title&gt;
&lt;script src="https://unpkg.com/redux@latest/dist/redux.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div&gt;
  &lt;p&gt;
    Clicked: &lt;span id="value"&gt;0&lt;/span&gt; times
    &lt;button id="increment"&gt;+&lt;/button&gt;
    &lt;button id="decrement"&gt;-&lt;/button&gt;
    &lt;button id="incrementIfOdd"&gt;Increment if odd&lt;/button&gt;
    &lt;button id="incrementAsync"&gt;Increment async&lt;/button&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
  const INCREMENT = { type: 'INCREMENT' };
  const DECREMENT = { type: 'DECREMENT' };

  function increment() {
    return INCREMENT;
  }
  function decrement() {
    return DECREMENT;
  }

  function counter(state, action) {
    if (typeof state === 'undefined') {
      return 0
    }

    switch (action.type) {
      case 'INCREMENT':
        return state + 1
      case 'DECREMENT':
        return state - 1
      default:
        return state
    }
  }

  var store = Redux.createStore(counter)
  var valueEl = document.getElementById('value')

  function render() {
    valueEl.innerHTML = store.getState().toString()
  }

  render()
  store.subscribe(render)

  document.getElementById('increment')
    .addEventListener('click', function () {
      store.dispatch(increment())
    })

  document.getElementById('decrement')
    .addEventListener('click', function () {
      store.dispatch(decrement())
    })

  document.getElementById('incrementIfOdd')
    .addEventListener('click', function () {
      if (store.getState() % 2 !== 0) {
        store.dispatch(increment())
      }
    })

  document.getElementById('incrementAsync')
    .addEventListener('click', function () {
      setTimeout(function () {
        store.dispatch(increment())
      }, 1000)
    })
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>ブラウザに表示される画面は下記のようになります。<br/>
<img src="/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>これだけを見せられても実装内容がよくわからない(かもしれない)ですよね？<br/>
そこで1つ1つReduxの原則と照らし合わせつつ見ていきましょう。</p>

<h4>Actions</h4>

<p><code>Actions</code>とは</p>

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<p><code>javascript
const INCREMENT = { type: 'INCREMENT' }
const DECREMENT = { type: 'DECREMENT' }
</code></p>

<h4>Action Creators</h4>

<p><code>Action Creators</code>とは</p>

<ul>
<li><code>Action</code>を作成するメソッド</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<p><code>javascript
function increment() {
  return INCREMENT
}
function decrement() {
  return DECREMENT
}
</code></p>

<h4>Reducers</h4>

<p><code>Reducers</code>とは</p>

<ul>
<li><code>Action</code>と<code>State</code>から新たな<code>State</code>を作成して返す</li>
<li>ポイントは<code>State</code>を更新するのではなく、 新しく作成した<code>State</code> を返すということ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。<br/>
※Counter Exampleのため、<code>state</code>は <strong>カウント数</strong> を表します。</p>

<p>```javascript
function counter(state, action) {
  if (typeof state === &lsquo;undefined&rsquo;) {</p>

<pre><code>// 初期値は0として返却する
return 0
</code></pre>

<p>  }</p>

<p>  switch (action.type) {</p>

<pre><code>case 'INCREMENT':
  return state + 1
case 'DECREMENT':
  return state - 1
default:
  return state
</code></pre>

<p>  }
}
```</p>

<h4>Store</h4>

<p><code>Store</code>とは</p>

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li><code>State</code>を更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることで<code>Store</code>に<code>State</code>の変更を知らせられる</li>
</ul>
</li>
<li><code>State</code>の状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることで<code>listener</code>は<code>getState</code>を通して<code>State</code>の状態を取得できる</li>
</ul>
</li>
</ul>


<p>です。<br/>
Exampleでは下記のように<code>store</code>を作成しています。</p>

<p><code>javascript
// Storeを作成するためのcreateStoreメソッドの第一引数にReducerを渡す
var store = Redux.createStore(counter)
</code></p>

<p>今回はCounter Exampleであるため、</p>

<ul>
<li>「+」ボタンを選択したら「+1」された結果が表示される</li>
<li>「-」ボタンを選択したら「-1」された結果が表示される</li>
</ul>


<p>ようになっています。<br/>
よって、「+ / -」ボタンをクリックしたタイミングで</p>

<ul>
<li>Storeに<code>state</code>の変更を知らせる</li>
<li><code>state</code>の変更を結果として描画に反映させる</li>
</ul>


<p>必要があります。<br/>
これはStore項目の冒頭で書いた<code>dispatch</code>と<code>listener</code>を利用することで達成できます。</p>

<p>まずは<code>dispatch</code>から見ていきましょう。</p>

<p>```javascript
// 「+」ボタンを選択した場合
document.getElementById(&lsquo;increment&rsquo;)
  .addEventListener(&lsquo;click&rsquo;, function () {</p>

<pre><code>store.dispatch(increment())
</code></pre>

<p>  })</p>

<p>// 「-」ボタンを選択した場合
document.getElementById(&lsquo;decrement&rsquo;)
  .addEventListener(&lsquo;click&rsquo;, function () {</p>

<pre><code>store.dispatch(decrement())
</code></pre>

<p>  })
```</p>

<p>上記のようにクリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment()</code>および<code>decrement()</code>で作成した<code>Actions</code>を渡しています。<br/>
こうすることで、『 <strong>Storeにstateの変更を知らせる</strong> 』ことができます。</p>

<p>次に<code>listener</code>から見ていきましょう。</p>

<p><code>javascript
// Click数を示すDOMの取得
var valueEl = document.getElementById('value')
// 最新のstateの状態をClick数に反映するメソッド
function render() {
  valueEl.innerHTML = store.getState().toString()
}
// 初期状態を表示するために実行
render()
// subscribeの第一引数にrenderメソッドを指定
store.subscribe(render)
</code></p>

<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>state</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されることになります。<br/>
こうすることで、『 <strong>stateの変更結果として描画に反映させる</strong> 』ことができます。<br/>
<code>subscribe</code>は<code>state</code>の状態を監視する役割を持っていることがわかると思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はReduxの本質を理解するために、あえてReactを利用するExampleは選択しませんでした。<br/>
「React&amp;Reduxが全然わからん！！」という方はゆっくりと時間をとってReduxからチャレンジしてみることをオススメします。<br/>
次回はReactとの組み合わせを見ていきたいと思います。</p>

<p>参考:</p>

<ul>
<li><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a></li>
<li><a href="http://grandbig.github.io/blog/2016/12/06/reswift-2/">ReSwiftを勉強してみよう(2)</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsでrouterモジュールでルーティング！]]></title>
    <link href="http://grandbig.github.io/blog/2016/10/30/node-router/"/>
    <updated>2016-10-30T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/10/30/node-router</id>
    <content type="html"><![CDATA[<h3>Expressなしで簡単にルーティングしよう！</h3>

<p>さて、久しぶりにNode.jsについて書きます。<br/>
筆者が本格的にNode.jsを利用していたのは3〜4年前だったため、Expressをよく利用していました。<br/>
その後、Expressを利用するほどのリッチな機能を必要としない、簡易的なデモ用のサーバサイドの仕組みを作るのにバリバリ自作ルーティングをしていました。<br/>
しかし、ここにきてExpressを利用するでもなく、かと言って自作でルーティング処理を書くのも若干面倒だと感じるとき果たしてどうすれば良いのかふと気になりました。<br/>
「きっと今の世の中なら何らかのモジュールが出ているはず！」と思った筆者は早速探してみることに&hellip;</p>

<p>そこで見つけたのが<a href="https://github.com/pillarjs/router">router</a>です。<br/>
このモジュールを利用すれば、次のように簡単にルーティングを実装することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<p>```javascript
// server.js
var http = require(&ldquo;http&rdquo;);
var Router = require(&ldquo;router&rdquo;);
var finalhandler = require(&lsquo;finalhandler&rsquo;);
var bodyParser   = require(&lsquo;body-parser&rsquo;);</p>

<p>function start(route) {</p>

<pre><code>var opts = { mergeParams: true }
var router = Router(opts);
var server = http.createServer(function onRequest(req, res) {
    router(req, res, finalhandler(req, res));
});

// GETリクエストのハンドリング
var user = Router(opts);
router.use('/users/:path', user);

user.get('/', function (req, res) {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain; charset=utf-8')
    res.end(req.params.path + '\n')
});

// POSTリクエストのハンドリング
var users = Router();
router.use('/users', users);
users.use(bodyParser.json());

users.post('/', function (req, res) {
    if (req.body.value) {
        res.statusCode = 200;
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.end(req.body.value + '\n');
    } else {
        res.statusCode = 400;
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.end('Invalid API Syntax\n');
    }
});

server.listen(8888);
console.log("server has started.");
</code></pre>

<p>}</p>

<p>exports.start = start;
```</p>

<p>因みに、 <code>server.js</code> はモジュールとして切り出しています。<br/>
実際には <code>app.js</code> で呼び出すようにしています。</p>

<p><code>javascript
// app.js
var server = require("./server");
server.start();
</code></p>

<p>ただ、今後たくさんのリクエストを捌くことを考えると、もう少しリクエスト内容ごとにファイルを分けた方が良いですよね&hellip;<br/>
と言うことで少々修正します。</p>

<p>```javascript
// server.js
var http = require(&ldquo;http&rdquo;);
var Router = require(&ldquo;router&rdquo;);
var finalhandler = require(&lsquo;finalhandler&rsquo;);
var bodyParser   = require(&lsquo;body-parser&rsquo;);
var users = require(&ldquo;./users&rdquo;);</p>

<p>/<em>*
 *  サーバ起動処理
 </em>/
function start() {</p>

<pre><code>var opts = { mergeParams: true };
var router = Router(opts);
var server = http.createServer(function onRequest(req, res) {
    router(req, res, finalhandler(req, res));
});

router.use(bodyParser.json());
router.use('/users/:path', users);  // GETリクエスト
router.use('/users', users);        // POST, PUT, DELETEリクエスト

server.listen(8888);
console.log("server has started.");
</code></pre>

<p>}</p>

<p>exports.start = start;</p>

<p>```</p>

<p>上記のように<code>server.js</code>はサーバ起動だけに絞りました。<br/>
そしてリクエストを受け付けたあとの処理は下記のように<code>users.js</code>に書きます。</p>

<p>```javascript
// users.js
var Router = require(&ldquo;router&rdquo;);
var opts = { mergeParams: true };
var router = Router(opts);</p>

<p>router.get(&ldquo;/&rdquo;, function(req, res) {</p>

<pre><code>res.statusCode = 200;
res.setHeader("Content-Type", "text/plain; charset=utf-8");
res.end(req.params.path + "\n");
</code></pre>

<p>});</p>

<p>router.post(&ldquo;/&rdquo;, function(req, res) {</p>

<pre><code>if (req.body.value) {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end(req.body.value + '\n');
} else {
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Invalid API Syntax\n');
}
</code></pre>

<p>});</p>

<p>module.exports = router;</p>

<p>```</p>

<p>このようにまとめることで可読性高くなるので、ルーティングの意味も出てくるというものですね。<br/>
因みに、GETとPOSTリクエストを送れば下記のような結果が得られます。</p>

<p>```
// GETリクエスト
curl <a href="http://localhost:8888/users/20161029">http://localhost:8888/users/20161029</a>
// 結果
20161029</p>

<p>// POSTリクエスト
curl <a href="http://localhost:8888/users">http://localhost:8888/users</a> -X POST -H &ldquo;Content-Type: application/json&rdquo; -d &lsquo;{&ldquo;value&rdquo;:&ldquo;Sample&rdquo;}&rsquo;
// 結果
Sample
```</p>

<h3>Node.jsでデバッグ</h3>

<p>筆者はこれまで <code>node-inspector</code> を利用していたのですが、何とv6.3.0からデバッグ機能が標準装備されているらしいですね！<br/>
早速ですが使ってみました。</p>

<p>```
// Node.jsでデバッグ起動
node &mdash;inspect app.js
Debugger listening on port 9229.
Warning: This is an experimental feature and could change at any time.
To start debugging, open the following URL in Chrome:</p>

<pre><code>chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/f1478fd8-33f2-4bca-8ab4-4ac9be3515cb
</code></pre>

<p>server has started.
Debugger attached.
```</p>

<p>出力される <code>chrome-devtools://devtools/remote/serve_file/@....</code> の部分をChromeのアドレスバーに貼りましょう！<br/>
<code>node-inspcetor</code> さながらのデバッグができるはずです。</p>

<p>因みに、起動時のオプションとして <code>--debug-brk</code> をつけると必ず1行目でデバッグが停止します。<br/>
一度停めたい場合はオプションを使いましょう。</p>

<h3>まとめ</h3>

<p>今回はNode.jsに触る機会があったため、どうすれば簡単にルーティングが実装できるのか調べてみました。<br/>
Expressを使っても良かったのですが、極力不要なモジュールを取り込みたくない気持ちがあったので割りと最低限にできて良かったなと思いました。<br/>
Node.jsは少しずつリハビリしながら思い出していくことにしようかな。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昔関わったNode.jsを思い出してみる]]></title>
    <link href="http://grandbig.github.io/blog/2016/07/09/remember-node-js/"/>
    <updated>2016-07-09T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/07/09/remember-node-js</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は久しぶりにNode.jsについて書きたいと思います。<br/>
筆者が本格的にNode.jsを触っていたのは、3〜4年ほど前で、当時は今ほど存在が浸透してはいませんでした。<br/>
それが今やサーバサイドの処理作成の選択肢の1つとして普通に検討される時代になりました。<br/>
正直なところ、最新のNode.jsを追えているわけではないのですが、<br/>
その本質は今も昔も大きくは変わっていないだろうと思いつつ、筆者の経験を元にNode.jsを見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Node.jsとは</h3>

<p>Node.jsは2009年にライアン・ダールによって作成された『JavaScriptをサーバサイドで実行可能にしてくれるプログラム』です。<br/>
JavaScriptエンジンは <strong>Google V8 JavaScript エンジン</strong> を使っています。<br/>
因みに、 <strong>Google V8 JavaScript エンジン</strong> とは、</p>

<ul>
<li>ECMAScript5に準拠</li>
<li>C++で記述されている</li>
<li>スタンドアローンで動作可能</li>
<li>Google Chromeでも使われている</li>
</ul>


<p>というものです。<br/>
これを見ただけでも何となくすごいな〜と思ってしまいますね笑。</p>

<p>Node.jsの公式サイトは<a href="https://nodejs.org/en/">こちら</a>です。<br/>
日本ユーザグループサイトもありますが、今は活動的に更新されていません。</p>

<h3>Node.jsの特徴</h3>

<p>続いて、Node.jsの特徴を見ていきましょう。<br/>
Node.jsの特徴は、何と言っても</p>

<ul>
<li>イベントループモデル</li>
<li>Non-blocking I/O</li>
<li>シングルスレッド</li>
</ul>


<p>ではないでしょうか。<br/>
筆者がNode.jsを触っていた時は正直全く理解していなかったのですが、<br/>
これらこそがNode.jsの本質でしょう。</p>

<h4>イベントループモデル</h4>

<p>イベントループモデルと一言聞くと、「なんぞや！？」となってしまいそうですが、</p>

<ul>
<li>イベントの発火を常に監視しているループ</li>
<li>イベントの発火を受け付けると、イベントキューに格納される</li>
<li>受付順にイベントを処理していく</li>
</ul>


<p>という方式のことです。</p>

<h4>Non-blocking I/O</h4>

<p>I/O処理を受け付けた場合、I/O処理が完了するまで待つ(Blockされる)のが通常です。<br/>
Node.jsではI/O処理を投げつけた間、他にやるべき処理があれば進んで実行してくれます。<br/>
よって <strong>Non-blocking I/O</strong> と呼ばれています。</p>

<h4>シングルスレッド</h4>

<p>言葉のとおりですが、複数のリクエストを1つのスレッドで実行するということです。<br/>
複数スレッドを生成するわけではないため、メモリ消費を抑えることができると言われています。</p>

<h3>Node.jsのメリット/デメリット</h3>

<p>Node.jsが全てのアプリケーションに最適なのかと言うとそんなことは当然ありません。<br/>
Node.jsのメリット/デメリットを理解した上で、採用を検討する必要があるのです。</p>

<h4>Node.jsのメリット</h4>

<p>まずはメリットを見ていきましょう。</p>

<ol>
<li>大量の軽量な同時リクエストを捌くのが得意</li>
<li>NoSQLとの親和性が高い</li>
<li>JavaScriptで書ける</li>
<li>充実したライブラリが存在している</li>
</ol>


<p>筆者の経験に基づくメリットを4つ上げさせて頂きました。</p>

<p>1つ目の <strong>大量の軽量な同時リクエストを捌くのが得意</strong> というメリットですが、<br/>
これはNode.jsの特徴で上げたことが関わってきます。<br/>
Non-blocking I/Oなので、I/Oブロックしないとは言うものの、Node.jsはシングルスレッドなんです。<br/>
なので、1つのイベント処理の中に非常に時間のかかる処理が含まれていると、そこがネックとなってしまい大量のリクエストを待たせてしまいます。<br/>
場合によってはクライアント側で設定したタイムアウト時間を上回り期待した結果をユーザが得られなくなるでしょう。</p>

<p>なので1つのイベント(1回のリクエスト)で非常に重い処理を実行させなくてはならない仕様が求められるサービスには向きません。<br/>
逆に、細かくイベントを分割できて、複数回のリクエストをクライアントから送っても問題のない仕様のサービスには適切と言えます。</p>

<p>2つ目の <strong>NoSQLとの親和性が高い</strong> というメリットですが、<br/>
筆者は主に <strong>MongoDB</strong> と一緒に利用してきました。<br/>
MongoDBはドキュメント指向データベースであるため、JSON型のデータをそのまま突っ込めるため非常に使いやすいのです。<br/>
スキーマレスかつスケールアウトの特徴を存分に活かしたい場合はNoSQLを選択すると思いますが、<br/>
そこから遡ってNode.jsを選択しても良いでしょう。</p>

<p>3つ目と4つ目のメリットですが、<br/>
フロントエンドエンジニアであれば、基本的にはJavaScriptを扱えるという人もたくさんいるかと思います。<br/>
であれば同じ言語のJavaScriptで書けるNode.jsを採用しない手はないでしょう。<br/>
また、MongoDBもNode.jsもJavaScriptにも言えることですが、初心者を割りとすんなり受け入れてくれる土台が整っているため、<br/>
1人でサービス提案時のモック作成をしなくてはならないときなどに最適です。<br/>
(誤解されたくないのが、どの技術も極めるにはかなり大変ということに変わりはないということです。)</p>

<h4>Node.jsのデメリット</h4>

<p>続いてデメリットを見ていきましょう。</p>

<ol>
<li>重いリクエストを捌くのが苦手</li>
<li>コールバック地獄</li>
</ol>


<p>1つ目のデメリットはメリットで書いた内容です。<br/>
2つ目はまさに筆者が3〜4年前に感じていたデメリットです。<br/>
Non-blocking I/Oの特徴を持つ代わりにソースコードを書いた際に複数回ネストすることが少なくありません。<br/>
(サーバダウンを防ぐために<code>try-catch</code>を入れようものなら尚更です。)</p>

<p>ただし、v0.12から<code>yield</code>が追加されましたし、<br/>
今やWebに限らずスマホネイティブの世界でも<code>Promise</code>の利用が珍しくはないため、最早デメリットとも言えなくなったと思われます。</p>

<p>また、筆者的には<br/>
HTML, CSS, JavaScriptや画像などの静的ファイルを返却するようなWebサーバとしての役割はNginxやApacheに任せてしまって良いという感覚です。<br/>
むか〜し、計測したイメージが強く残っているからかもしれませんが&hellip;</p>

<h3>Nodeモジュール</h3>

<p>今も忘れない当時使っていた or 助けられたNodeモジュールについて紹介します。</p>

<h4>Express</h4>

<p>これは最も有名なNodeモジュールではないでしょうか？<br/>
( <strong>Express</strong> の公式サイトは<a href="http://expressjs.com/">こちら</a>です。)</p>

<p><strong>Express</strong> はWebアプリケションフレームワークであり、Webアプリケーションを作成するために必要な機能を提供してくれます。<br/>
このモジュールがあるため、サーバサイドを非常に簡単に作成することができるのです。<br/>
(玄人になればなるほどアンチExpressが多い気もしますが&hellip;)</p>

<h4>node-inspector</h4>

<p>続いて、こちらも使わない人の方が少ないのでは？と思うくらい重要な <strong>node-inspector</strong> について紹介します。<br/>
(GitHubは<a href="https://github.com/node-inspector/node-inspector">こちら</a>です。)</p>

<p>サーバサイドエンジニアはeclipse, IntelliJなどのIDEを利用して開発すると思います。<br/>
IDEを利用する理由は様々ですが、その中の1つにデバッグ機能があります。<br/>
<strong>node-inspector</strong> はまるでフロントエンドを開発しているかのごとく、ブラウザ上でデバッグ機能を提供してくれます。</p>

<h4>forever</h4>

<p>次は、 <strong>forever</strong> の紹介です。<br/>
Node.jsでは想定外のエラーが発生した際にサーバがダウンしてしまいます。<br/>
サーバがダウンし、イベントループが停止してしまうと、クライアント側からのリクエストを受け付けることができません。<br/>
そのため、サーバを再起動する必要があるのですが、これを自動的に実行してくれるモジュールが <strong>forever</strong> です。<br/>
(GitHubは<a href="https://github.com/foreverjs/forever">こちら</a>です。)</p>

<h4>log4js-node</h4>

<p>先ほども説明した通り、プログラムは所詮、人間が作り上げたものなので、想定外なことは起こりえます。<br/>
それに対処するためにエンジニアとしては失敗をただの失敗として放置するのではなく、経験として蓄積し、次に活かすのです。<br/>
その手助けとなるのがログです。</p>

<p><strong>log4js-node</strong> を利用することで、<code>info</code>, <code>debug</code>, <code>warn</code>, <code>error</code>など各種ログを仕込むことが可能となります。</p>

<h4>async</h4>

<p>実は筆者が最も思い出深いモジュールがこの <strong>async</strong> です。<br/>
Node.jsのデメリットで紹介しましたが、筆者がNode.jsをメインで触っていた3〜4年前はまさにコールバック地獄でした。<br/>
また、1回のイベント発火内で非同期処理を繰り返し順番に実行したい要望があり、非常に手を焼きました。<br/>
これを救ってくれたのが <strong>async</strong> なのです。</p>

<p>特に、<code>async.waterfall</code>, <code>async.parallel</code>, <code>async.series</code>, <code>async.eachSeries</code>は必見の価値ありです。<br/>
(GitHubは<a href="https://github.com/caolan/async">こちら</a>です。)</p>

<h4>その他</h4>

<p>その他にも便利なものがたくさん用意されているので必要に応じて利用すると良いでしょう。</p>

<ul>
<li><a href="https://github.com/mochajs/mocha">mocha</a>: Node.jsのためのテストフレームワーク</li>
<li><a href="http://socket.io/">socket.io</a>: WebSocket機能を実装できるモジュール</li>
<li><a href="http://mongoosejs.com/">mongoose</a>: Node.jsからMongoDBを利用するためのモジュール</li>
<li><a href="https://github.com/mysqljs/mysql">mysql</a>: Node.jsからMySQLを利用するためのモジュール</li>
<li><a href="https://github.com/balderdashy/sails">sails</a>: Ruby on RailsライクなMVCフレームワーク</li>
</ul>


<h3>Node.jsを勉強するための近道</h3>

<p>最後にNode.jsの勉強方法について紹介したいと思います。<br/>
筆者的には、まずは <strong>JavaScript</strong> をきちんと学ぶことが必要だと思います。<br/>
クライアントサイドから始めても、サーバサイドから始めても構わないのですが、クライアントサイドからの方が始めやすいのではないでしょうか。</p>

<p>また、サーバサイドでNode.jsというものが何かを学ぶのであれば、<br/>
<a href="http://www.nodebeginner.org/index-jp.html">Nodeビギナーズブック</a>を1回は読んでおくことをオススメします。<br/>
市販されている本を読むよりも本質的な部分を理解できると思います。<br/>
(あと、未だにNode.js関連の本って全然ないので&hellip;。)</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
Node.jsはまだまだ新しい技術ですし、これからもっと学ぶべきことが増えてくることでしょう。<br/>
筆者も極力最新を追えるように精進したいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1103/23/news101_2.html">naveでNode.jsのバージョン管理＆イベントループ詳説 </a></li>
<li><a href="http://www.slideshare.net/shigeki_ohtsu/processnext-tick-nodejs">そうだったのか！ よくわかる process.nextTick() node.jsのイベントループを理解する</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
