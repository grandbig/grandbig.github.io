<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-06-19T00:48:06+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwiftとJava8とJavaScriptでreduce / filter / map / flatMap]]></title>
    <link href="http://grandbig.github.io/blog/2016/06/12/filter-map/"/>
    <updated>2016-06-12T21:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/06/12/filter-map</id>
    <content type="html"><![CDATA[<h4>SwiftとJava8とJavaScriptを比較してみよう！</h4>

<p>本日は前々から気になっていた『SwiftとJava8とJavaScript』の比較をしてみたいと思います。<br/>
と言っても難しいことをやるわけではなく、今回はreduce, filter, map, flatMapメソッドの書き方を比較してみます。</p>

<p>筆者個人としては、どうしてもSwiftやJava8から書き方やメソッドの意味の理解を始めようとすると時間がかかってしまいます。<br/>
なので、JavaScriptから入って比較することで理解が促進することがあるのです。</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>reduceメソッド</h4>

<p>まずは<code>reduce</code>メソッドです。</p>

<h5>JavaScript</h5>

<p>```javascript
var array = [1, 2, 3, 4, 5];
var reduced = array.reduce(function(previus, current) {</p>

<pre><code>return previous + current;
</code></pre>

<p>}, 0);</p>

<p>// 結果 &ndash;> 15
```</p>

<h5>Swift</h5>

<p>```objective-c
let array = [1, 2, 3, 4, 5]
let reduced = array.reduce(0) { (previous, current) &ndash;> Int in</p>

<pre><code>previous + current
</code></pre>

<p>}</p>

<p>// 結果 &ndash;> 15
```</p>

<h5>Java8</h5>

<p>```java
List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5);
Optional<Integer> sum = list.stream().reduce((previous, current) &ndash;> previous + current);</p>

<p>// 結果 &ndash;> 15
```</p>

<h4>filterメソッド</h4>

<p>次に<code>filter</code>メソッドです。</p>

<h5>JavaScript</h5>

<p>```javascript
var array = [1, 50, 800, 3, 44];
var filtered = array.filter(function(elem) {</p>

<pre><code>return elem &gt;= 10;
</code></pre>

<p>});</p>

<p>// 結果 &ndash;> [50, 800, 44]
```</p>

<h5>Swift</h5>

<p>```objective-c
let array = [1, 50, 800, 3, 44]
var filtered = array.filter { (elem) &ndash;> Bool in</p>

<pre><code>elem &gt;= 10
</code></pre>

<p>}</p>

<p>// 結果 &ndash;> [50, 800, 44]
```</p>

<h5>Java8</h5>

<p>```java
List<Integer> list = Arrays.asList(1, 50, 800, 3, 44);
List<Integer> filteredList = new ArrayList<Integer>();
list.stream().filter(elem &ndash;> elem >= 10).forEach(elem &ndash;> filteredList.add(elem));</p>

<p>// 結果 &ndash;> [50, 800, 44]
```</p>

<h4>mapメソッド</h4>

<p>続いて<code>map</code>メソッドです。</p>

<h5>JavaScript</h5>

<p>```javascript
var array = [1, 2, 3, 4, 5];
var mapped = array.map(function(elem) {</p>

<pre><code>return elem * elem;
</code></pre>

<p>});</p>

<p>// 結果 &ndash;> [1, 4, 9, 16, 25]
```</p>

<h5>Swift</h5>

<p>```objective-c
let array = [1, 2, 3, 4, 5]
var mapped = array.map { (elem) &ndash;> Int in</p>

<pre><code>elem * elem
</code></pre>

<p>}</p>

<p>// 結果 &ndash;> [1, 4, 9, 16, 25]
```</p>

<h5>Java8</h5>

<p>```java
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> mappedList = new ArrayList<Integer>();
list.stream().map(elem &ndash;> elem * elem).forEach(elem &ndash;> mappedList.add(elem));</p>

<p>// 結果 &ndash;> [1, 4, 9, 16, 25]
```</p>

<h4>flatMapメソッド</h4>

<p>最後に<code>flatMap</code>メソッドです。<br/>
(と言いつつ、処理の意味的には<code>flatten</code>しか入っていませんね&hellip;)</p>

<h5>JavaScript</h5>

<p>JavaScriptでは標準で<code>flatMap</code>メソッドは実装されていません。<br/>
自作するしかないわけですが、<code>flatMap = flatten + map</code>なので下記のように書けます。</p>

<p>```javascript
var listArrayList = [[1, 2], [3], [4, 5]]
var flatMappedList = Array.prototype.concat.apply([], listArrayList).map(function(elem) {</p>

<pre><code>return elem;
</code></pre>

<p>});</p>

<p>// 結果 &ndash;> [1, 2, 3, 4, 5]
```</p>

<h5>Swift</h5>

<p>```objective-c
var listArrayList:[Int]] = []
let list1: [Int] = [1, 2]
let list2: [Int] = [3]
let list3: [Int] = [4, 5]
listArrayList.append(list1)
listArrayList.append(list2)
listArrayList.append(list3)</p>

<p>let flatMappedList = listArrayList.flatMap { (elem) &ndash;> [Int] in</p>

<pre><code>return elem
</code></pre>

<p>}</p>

<p>// 結果 &ndash;> [1, 2, 3, 4, 5]
```</p>

<h5>Java8</h5>

<p>```java
List&lt;List<Integer>> listArrayList = new ArrayList&lt;List<Integer>>();
List<Integer> list1 = Arrays.asList(1, 2);
List<Integer> list2 = Arrays.asList(3);
List<Integer> list3 = Arrays.asList(4, 5);
listArrayList.add(list1);
listArrayList.add(list2);
listArrayList.add(list3);
List<Integer> flatMappedList = new ArrayList<Integer>();
listArrayList.stream().flatMap(elem &ndash;> elem.stream()).forEach(elem &ndash;> flatMappedList.add(elem));</p>

<p>// 結果 &ndash;> [1, 2, 3, 4, 5]
```</p>

<p>さていかがでしたでしょうか？<br/>
1つの言語を極めれば、何となく他の言語でも書き方がわかるという話を聞いたりすると思うのですが、こういったことの延長戦にある話なんだろうなと思ったりました。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
