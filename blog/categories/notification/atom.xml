<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notification | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/notification/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2020-02-22T17:33:08+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS13におけるプッシュ通知に必要なデバイストークンの取得方法]]></title>
    <link href="http://grandbig.github.io/blog/2019/09/28/ios-devicetoken-2/"/>
    <updated>2019-09-28T16:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/09/28/ios-devicetoken-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はiOS13のプッシュ通知用デバイストークンについて見ていきたいと思います。<br/>
<code>Swift</code> に関して言えば、歴史的変遷から、問題のない現場が多いと思うのですが、<br/>
<code>Objective-C</code> を中心に活用している現場では注意が必要かもしれません。</p>

<p>具体的には後述しますが、<br/>
<code>description</code> を利用してデバイストークンを取得する方式は <code>iOS13</code> から見直す必要がありそうです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>プッシュ通知の受信処理の実装</h3>

<p>折角なので、基本的な設定についても説明していきます。</p>

<h4>Xcode11の設定</h4>

<p>まずは、Xcode11上で下図の状態まで設定します。</p>

<p><strong>▼確認観点</strong><br/>
* <code>Team ID</code> が利用想定のものであること<br/>
* <code>Bundle Identifier</code> が利用想定のものであること<br/>
* <code>Signing Certificate</code> が利用想定のものであること<br/>
* <code>Provisioning Profile</code> の <code>Capabilities</code> に <code>Push Notifications</code> が含まれている<br/>
* <code>Capability</code> として <code>Push Notifications</code> が追加すること</p>

<p><img src="/images/ios-devicetoken-2_1.png" alt="Signing &amp; Capabilities" /></p>

<h4>AppDelegateの実装</h4>

<p>続いて、 <code>AppDelegate.swift</code> 上の実装です。</p>

<p>基本的なステップは4つです。</p>

<p>① プッシュ通知の利用許可のリクエストを送信します<br/>
② 利用許可を得た場合に、プッシュ通知の利用登録を実行します<br/>
③ プッシュ通知の利用登録が成功したことをキャッチする <code>Delegate</code> メソッドを書きます<br/>
④ プッシュ通知の利用登録が失敗したことをキャッチする <code>Delegate</code> メソッドを書きます</p>

<p>```objective-c
import UIKit
import UserNotifications</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<pre><code>func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    // Override point for customization after application launch.

    // ① プッシュ通知の利用許可のリクエスト送信
    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
        guard granted else { return }

        DispatchQueue.main.async {
            // ② プッシュ通知利用の登録
            UIApplication.shared.registerForRemoteNotifications()
        }
    }

    return true
}
...
</code></pre>

<p>}</p>

<p>extension AppDelegate {</p>

<pre><code>// ③ プッシュ通知の利用登録が成功した場合
func application(_ application: UIApplication,
                 didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    let token = deviceToken.map { String(format: "%.2hhx", $0) }.joined()
    print("Device token: \(token)")
}

// ④ プッシュ通知の利用登録が失敗した場合
func application(_ application: UIApplication,
                 didFailToRegisterForRemoteNotificationsWithError error: Error) {
    print("Failed to register to APNs: \(error)")
}
</code></pre>

<p>}
```</p>

<h3>旧来のデバイストークンの取得方法</h3>

<p>さて本題に入ります。<br/>
<code>Objective-C</code> 時代に主流と言われていたデバイストークンの取得方法は、以下のような <code>description</code> を利用した手法でした。</p>

<p>```objective-c
NSString *token = [[[[deviceToken description] stringByReplacingOccurrencesOfString:@&ldquo;&lt;"withString:@&rdquo;&ldquo;]</p>

<pre><code>               stringByReplacingOccurrencesOfString:@"&gt;" withString:@""]
               stringByReplacingOccurrencesOfString: @" " withString: @""];
</code></pre>

<p>```</p>

<p>これは、 <code>[deviceToken description]</code> で取得される値が、<br/>
<code>&lt;7097978d 1e438923 ... 6fdbf111&gt;</code> というような先頭と末尾を <code>&lt;&gt;</code> で括られていたためです。<br/>
そして、1文で書けるというのも当時から魅力的だったのかもしれません。</p>

<p><code>Swift</code> に言語が変わってからも、上記手法が多くの場面で使われてきたことと思います。<br/>
しかし、 <code>Swift3</code> になったタイミングで、状況が変わりました。</p>

<p>プッシュ通知の利用登録成功時の <code>Delegate</code> メソッドの <code>deviceToken</code> が <code>NSData</code> 型から <code>Data</code> 型に変わったことで、この手法が利用できなくなったのです。</p>

<p>この時点で</p>

<p><code>objective-c
let token = deviceToken.map { String(format: "%.2hhx", $0) }.joined()
</code></p>

<p>という書き方がデバイストークン取得の主流に完全に取って代わったと思います。</p>

<p>もしかしたら、 <code>Data</code> 型を <code>NSData</code> 型に変換することで、<br/>
引き続き旧来の手法を利用している現場があるかもしれませんが、<br/>
その場合は、即刻デバイストークンの取得方法を見直しましょう。</p>

<p>これはあくまでも <code>Swift</code> におけるデバイストークンの取得の変遷であって、<br/>
<code>Objective-C</code> は何ら変わることがなかったため、<br/>
旧来の書き方が続いている現場がまだまだ多い気がしています。</p>

<p>しかし、 <code>iOS13</code> からはどうやら見直しが必須になったようです。<br/>
というのも、 <code>description</code> を利用すると</p>

<p><code>
{ length = 32, bytes = 7097978d 1e438923 ... 6fdbf111 }
</code></p>

<p>のような形で返ってきてしまうため、<br/>
<code>&lt;&gt;</code> を除去することでデバイストークンを取得することができなくなったようなんです。</p>

<ul>
<li><a href="https://forums.developer.apple.com/thread/117545">Apple Developer Forums: iOS13 PKPushCredentials broken</a></li>
<li><a href="https://forums.developer.apple.com/thread/119111">Apple Developer Forums: NSData description and NSString stringWithFormat have different return results when compiled with Xcode 11 versus Xcode 10</a></li>
</ul>


<p>では、 <code>Swift</code> は先程書いた通り1行で書けますが、<br/>
<code>Objective-C</code> ではどう書いていくべきなのでしょうか。<br/>
安心してください。 <code>Facebook</code> が1つの解を示してくれています。</p>

<p>```objective-c
// ↓ dataにDelegateメソッドに渡ってきたdeviceTokenを渡します
(NSString <em>)hexadecimalStringFromData:(NSData </em>)data<br/>
{</p>

<pre><code>NSUInteger dataLength = data.length;  
if (dataLength == 0) {  
    return nil;  
}  

const unsigned char *dataBuffer = data.bytes;  
NSMutableString *hexString  = [NSMutableString stringWithCapacity:(dataLength * 2)];  
for (int i = 0; i &lt; dataLength; ++i) {  
    [hexString appendFormat:@"%02x", dataBuffer[i]];  
}  
return [hexString copy];  
</code></pre>

<p>}
```</p>

<p>流石に1行で済ませることは難しいですが、<br/>
これで <code>Objective-C</code> でも正しくデバイストークンを取得できるようになりました。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。<br/>
iOS13は細かいところも含めて様々な変更が入っているため、日々最新情報をキャッチしつつ、自身でも積極的に使い倒していく必要がありますね。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プッシュ通知をnode-apnで送ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/node-apn/"/>
    <updated>2017-09-18T20:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/node-apn</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p><a href="https://grandbig.github.io/blog/2017/09/18/firebase-notification/">前回</a>はFirebaseを利用してiOSにRemote Notificationを送信することについて書きました。<br/>
今後は自作せずにFirebaseを利用するプロダクトが増えてくると思うことに変わりはないのですが、ふと昔利用していた<a href="https://github.com/node-apn/node-apn">node-apn</a>が気になりました。<br/>
折角の機会なので、この<code>node-apn</code>を利用してRemote Notificationを送信してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>プロジェクトの用意</h3>

<p>ベースプロジェクトは<a href="https://github.com/expressjs/express">Express</a>を使ってしまいましょう。<br/>
今回の各種バージョンは下記の通りです。</p>

<p><code>javascript
Node.js:  v7.3.0
npm:      v3.10.10
Express:  v4.15.0
nodebrew: v0.9.6
</code></p>

<p>① Expressコマンドで<code>pushtest</code>プロジェクトの生成</p>

<p><code>javascript
$ express -t ejs pushtest
</code></p>

<p>すると下記のプロジェクト構成が出来上がります。</p>

<p><code>javascript
pushtest
├── app.js
├── bin
│    └── www
├── package.json
├── public
├── routes
│    ├── index.js
│    └── users.js
└── views
</code></p>

<p>因みに、<code>express</code>コマンドを打つには<code>express</code>と<code>express-generator</code>のインストールが必要です。<br/>
また、グローバルインストールした<code>node_modules</code>へのパスを<code>.bash_profile</code>に通しておきましょう。</p>

<p><code>javascript
export PATH=$HOME/.nodebrew/current/bin:$PATH
export NODE_PATH=$HOME/.nodebrew/current/lib/node_modules
</code></p>

<p><code>source ~/.bash_profile</code>で最新状況を読み込むのを忘れずに。</p>

<p>② <code>node-apn</code>のインストール</p>

<p><code>javascript
$ npm install node-apn --save
</code></p>

<p>因みに、必要なモジュールをインストールしたつもりでも、何度も<code>Cannot find module xxx</code>と出てしまうようであれば、<code>app.js</code>と同じ階層下で<code>npm install -d</code>を実行しましょう。</p>

<h3>処理を実装</h3>

<p>プロジェクトが用意できたので、処理を実装していきましょう。<br/>
今回は簡単のため要件としては下記のみとします。</p>

<p>・特定の端末のデバイストークンを指定<br/>
・GETリクエスト</p>

<p>① <code>app.js</code>に処理を実装<br/>
まずはGETリクエストの受け口を<code>app.js</code>に用意します。</p>

<p>```javascript
var express = require(&lsquo;express&rsquo;);
var path = require(&lsquo;path&rsquo;);
var favicon = require(&lsquo;serve-favicon&rsquo;);
var logger = require(&lsquo;morgan&rsquo;);
var cookieParser = require(&lsquo;cookie-parser&rsquo;);
var bodyParser = require(&lsquo;body-parser&rsquo;);</p>

<p>var index = require(&lsquo;./routes/index&rsquo;);
var users = require(&lsquo;./routes/users&rsquo;);
var apns = require(&lsquo;./routes/apns&rsquo;);// apns.jsは④で作成しますが、既にある体で追記</p>

<p>var app = express();</p>

<p>// 省略</p>

<p>app.use(&lsquo;/&rsquo;, index);
app.use(&lsquo;/users&rsquo;, users);
app.use(&lsquo;/apns&rsquo;, apns);// GETリクエストを受けられるように追記</p>

<p>// 省略
```</p>

<p>② <code>routes/apns.js</code>を作成</p>

<p>最後にメインとなる処理を書いていきます。<br/>
専用の<code>routes/apns.js</code>を作成し、その内部に<code>node-apn</code>を利用した処理を書いていきます。<br/>
推奨されている<code>APNS Key</code>を利用するため、別途<code>AuthKey_xxxxxxxxxx.p8</code>を用意しましょう。</p>

<p>その結果、プロジェクト構成としては下記のようになります。</p>

<p><code>javascript
pushtest
├── app.js
├── bin
│    └── www
├── key
│    └── AuthKey_xxxxxxxxxx.p8
├── package.json
├── public
├── routes
│    ├── apns.js
│    ├── index.js
│    └── users.js
└── views
</code></p>

<p>続いて具体的な処理です。<br/>
昔よりもシンプルに書けるようになっているイメージです。</p>

<p>```javascript
var express = require(&lsquo;express&rsquo;);
var apn = require(&lsquo;apn&rsquo;);
var qs = require(&lsquo;qs&rsquo;);
var router = express.Router();</p>

<p>router.get(&lsquo;/&rsquo;, function(req, res, next) {
  // GETパラメータからトークンを取得
  var arr = req.url.split(&ldquo;?&rdquo;);
  var obj = qs.parse(arr[1]);
  var deviceToken = obj.token;</p>

<p>  // プッシュ通知の設定
  var options = {</p>

<pre><code>token: {
  key: "./keys/AuthKey_xxxxxxxxxx.p8",
  keyId: "xxxxxxxxxx",
  teamId: "xxxxxxxxxx"
},
production: false
</code></pre>

<p>  };</p>

<p>  var apnProvider = new apn.Provider(options);
  var note = new apn.Notification();</p>

<p>  note.expiry = Math.floor(Date.now() / 1000) + 3600;
  note.badge = 3;
  note.sound = &ldquo;ping.aiff&rdquo;;
  note.alert = &ldquo;プッシュ通知が届きましたよ！&rdquo;;
  note.topic = &ldquo;com.xxx.NotificationSample&rdquo;;</p>

<p>  // プッシュ送信
  apnProvider.send(note, deviceToken).then( (result) => {</p>

<pre><code>res.send("respond with a resource");
</code></pre>

<p>  });
});</p>

<p>module.exports = router;
```</p>

<h3>プッシュ通知を送信</h3>

<p>準備ができたのでプッシュ通知を送ってみましょう。</p>

<p>① <code>Node</code>を起動</p>

<p>デバッグしながら起動するために下記を実行します。</p>

<p><code>javascript
$ node --inspect --debug-brk bin/www
</code></p>

<p>すると、下記出力がされるのでChromeでアクセスしましょう。</p>

<p>```javascript
Debugger listening on port 9229.
Warning: This is an experimental feature and could change at any time.
To start debugging, open the following URL in Chrome:</p>

<pre><code>chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
</code></pre>

<p>```</p>

<p>② プッシュ通知を送る</p>

<p>下記URLにアクセスしてGETリクエストを投げましょう。</p>

<p><code>javascript
http://localhost:3000/apns?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></p>

<p>たったこれだけで下図のようにプッシュ通知が届きました。</p>

<p><img src="/images/node-apn_1.png" alt="node-apnで送ったプッシュ通知" /></p>

<h3>まとめ</h3>

<p>さて今回は<code>node-apn</code>でのプッシュ通知について書きました。<br/>
3年以上前に<a href="https://grandbig.github.io/blog/2014/02/22/silentremotenotification/">Silent Remote Notificationを試そう！</a>で利用したりしていたのですが、今見るといろいろと変わっているなと改めて感じました。<br/>
今更ではありますが、これも一つ勉強になったと思い、<code>Firebase</code>に没頭していこうかなと&hellip;笑<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silent Remote Notificationを試そう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/22/silentremotenotification/"/>
    <updated>2014-02-22T00:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/22/silentremotenotification</id>
    <content type="html"><![CDATA[<h3>iOS7で新たに追加されたSilent Remote Notificationを使ってみよう！！</h3>

<p>本日はiOS7から新たに追加された<strong>Silent Remote Notification</strong>について紹介します。<br/>
iOS6までで利用できたRemote Notificationと何が違うのかと言いますと、<strong>ユーザ端末のロック画面に表示させることなく</strong>通知することができるんです。<br/>
つまり、<br/>
Remote Notification: ユーザに何かを気づかせるためにプッシュする<br/>
Silent Remote Notification: ユーザに気づかせることなくプッシュする<br/>
ということです。</p>

<p>これを見ると、『Silent Remote Notificationって使い道あるの？？』なんて思ってしまいそうですよね。これが意外とありそうなんです。<br/>
例えば、<br/>
・ユーザに気づかれずにアプリ内の情報を最新に更新する<br/>
・ユーザに気づかれずにアプリ内のユーザ情報を取得する<br/>
ことなどが考えられます。<br/>
後者はユーザ視点からすると気になるかもしれませんが、『アプリの有用性をユーザに最大限に感じてもらうための方法』と考えて頂ければとても大切なことであると伝わるでしょうか。</p>

<p>そんな様々な使い道がありそうなSilent Remote Notificationについて早速説明していきます。</p>

<!--more-->


<h4>ネイティブソースとXcode5の設定について</h4>

<p>まずは、ネイティブソースとXcode5の設定から説明します。Xcode5でプロジェクトを作成したら、TARGETS > Capabilities > Background Modes > Remote notificationsにチェックを入れます。<br/>
<img src="/images/xcode-silent-notifications1.png" alt="Xcode5での設定方法" /><br/>
続いてはネイティブソースでプッシュの受取り口を作りましょう。</p>

<p>```c
// AppDelegate.hファイル
@interfase AppDelegate : NSObject<UIApplicationDelegate> {</p>

<pre><code>NSString *token;
</code></pre>

<p>}
<code>
</code>c
// AppDelegate.mファイル
// ①トークン値の取得
&ndash; (void)application:(UIApplication <em>)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData </em>)devToken
{</p>

<pre><code>//デバイストークンから'&lt;','&gt;',' 'を削除して変数に保存
self.token = [[[[devToken description] stringByReplacingOccurrencesOfString:@"&lt;"withString:@""]
                        stringByReplacingOccurrencesOfString:@"&gt;" withString:@""]
                        stringByReplacingOccurrencesOfString: @" " withString: @""];

NSLog(@"deviceToken: %@", self.token);
</code></pre>

<p>}</p>

<p>// ②通常のRemote Notificationが届いたときに通る処理
&ndash; (void)application:(UIApplication <em>)application didReceiveRemoteNotification:(NSDictionary </em>)userInfo
{</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>// ③Silent Remote Notificationが届いたときに通る処理
&ndash; (void)application:(UIApplication <em>)application
 didReceiveRemoteNotification:(NSDictionary </em>)userInfo
  fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{</p>

<pre><code>...
</code></pre>

<p>}
```
プッシュ通知を受け取ったとき、上記に書いたdidReceiveRemoteNotification処理が実行されます。コメントアウトにも書いていますが、③がSilent Remote Notificationが届いたときに通る処理です。<br/>
ただし、Silent Remote NotificationはiOS7以上でないと対応していないのでiOS6の場合は通常のRemote Notification, Silent Remote Notificationに関わらず②のdidReceiveRemoteNotificationを通りますので、ご注意ください。<br/>
あとは③に実行させたい処理を書けば、Silent Remote Notificationの実装は完了です。</p>

<h4>動作確認用に簡単にプッシュ通知を送る処理を書こう</h4>

<p>さて、ネイティブ側の実装はできましたが、本当にこれで送れるのか確認したいですよね？Node.jsのnode-apnモジュールを使えば驚くほど簡単に用意することができます。<br/>
より簡単に作成するためにExpressモジュールを使って説明します。Expressモジュールの用意については<a href="https://gihyo.jp/dev/serial/01/nodejs/0003">第3回 Express.jsを使ったWebアプリケーションを構築</a>を参照ください。</p>

<p>それではpushtestという名前のWebアプリの雛形を作成しましょう。<br/>
<code>bash
express -t ejs pushtest
</code>
次にpushtest配下で<br/>
<code>bash
npm install
</code>
を実行して必要なモジュールをインストールしましょう。さらに、node-apnモジュールもインストールしましょう。また後ほど利用するquerystringモジュールもインストールしておきましょう。<br/>
<code>bash
npm install apn
npm install qs
</code>
これでモジュールが揃ったので、app.jsを編集しましょう。<br/>
pushtest/routes/apns.jsを作成しておきます。(デフォルトで作成されるindex.jsかuser.jsをコピーしてファイル名を変更すればOKです)
```js
var express = require(&lsquo;express&rsquo;);
var routes = require(&lsquo;./routes&rsquo;);
var user = require(&lsquo;./routes/user&rsquo;);
var apns = require(&lsquo;./routes/apns&rsquo;);// apns.jsの読み込みを追加
var http = require(&lsquo;http&rsquo;);
var path = require(&lsquo;path&rsquo;);</p>

<p>var app = express();
&hellip;
app.get(&lsquo;/apns&rsquo;, apns.push);// GETリクエストを想定
&hellip;
```</p>

<p>そしてお待ちかねのプッシュメイン処理をapns.jsに書いていきます。<br/>
```js
var apns = require(&lsquo;apn&rsquo;);
var qs = require(&lsquo;qs&rsquo;);</p>

<p>exports.push = function(req, res){</p>

<pre><code>// ① GETパラメータからトークンを取得
var arr = req.url.split("?");
var obj = qs.parse(arr[1]);
var token = obj.token;

// ② プッシュ通知の設定
var options = {
    "cert": "./keys/cert.pem",
    "key": "./keys/key.pem",
    "gateway": "gateway.sandbox.push.apple.com"
};
var myDevice = apns.Device(token);
var apnConnection = new apns.Connection(options);

var note = new apns.Notification();
note.contentAvailable = 1;

apnConnection.pushNotification(note, myDevice);

res.send("respond with a resource");
</code></pre>

<p>}
```
先ほどインストールしたqsはGETパラメータをオブジェクト化してくれる便りなモジュールです。詳しくは<a href="http://nodejs.org/api/querystring.html">Node.js Manual&amp;Documents</a>を参照してください。<br/>
まず、①のようにトークン値を取得します。<br/>
次に②のようにプッシュ通知を送るための設定を書きます。<a href="https://github.com/argon/node-apn">GitHubで公開されているReference</a>をほぼそのまま書くだけなので簡単です。<br/>
注意しておきたいのはSilent Remote Notificationの場合は<strong>note.contentAvailable=1(note.newsstandAvailable=1でも可)</strong>を設定する必要があります。逆にbadge, alert, soundは不要です。これらを入れてもプッシュ通知ができないわけではないのですが、冒頭に述べた<strong>ユーザに気づかれずに</strong>という要件を満たせなくなります。</p>

<p>因みに, optionsで設定しているcertとkeyは証明書の保存場所です。上記ソースで設定している場所はapp.jsと同じ階層にkeyフォルダがあることを指します。また、gatewayにはsandboxをつけることを忘れずに。(商用の場合はsandboxは不要です。develop用ではsandboxを設定するんです。)<br/>
証明書(cert.pemとkey.pem)の作成は多くのサイトで説明されているのでここでは割愛します。</p>

<p>ここまで準備ができたら、<br/>
<code>bash
node app.js
</code>
でWeb&amp;APサーバをローカルに起動しましょう。<br/>
そして、『localhost:3000?token=トークン値』をブラウザのアドレス部分に打って、Silent Remote Notificationを送りましょう!!<br/>
トークン値はネイティブソース内のdidRegisterForRemoteNotificationsWithDeviceToken関数でLogとして出力しているはずなので、コピーしましょう。</p>

<p>届きましたでしょうか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はっきりさせよう！iOSのデバイストークン]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/"/>
    <updated>2013-09-24T22:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/24/ios-devicetoken</id>
    <content type="html"><![CDATA[<h3>iOSのデバイストークンを理解しよう！</h3>

<p>今回はプッシュ通知をユーザに送る機能を備えたiPhoneアプリを開発したことがあるエンジニアであれば周知の事実であろう『iOSのデバイストークン』について改めて勉強したいと思います。<br/>
筆者は正直、今日まで全くの勘違いをしていました&hellip;。デバイストークンとはアプリ毎に異なるのだと思い込んでいたのです。</p>

<!--more-->


<h4>公式ドキュメントを読もう！</h4>

<p>まずは何と言っても<a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/RemoteNotificationsPG.pdf" title="Local Notificationおよび
Push Notificationプログラミングガイド">Appleの公式ドキュメント</a>から理解してみよう！ということです。<br/>
ドキュメントには『<em>APNsが初めてデバイスに接続したときに、APNsからそのデバイスに渡される不透過なデバイス識別子です。(たとえて言えば、デバイストークンは通知先を識別するための電話番号と同じ機能を果たします)</em>』とあります。ここからわかることはデバイストークンとは個人を特定できるユニークなものだということです。<br/>
次に読み進めていくと、『<em>APNsは、TLSのピアツーピア認証を利用して、接続してきたデバイスの認証を行います</em>』、『<em>プロバイダとAPNs間の接続信頼も、TLSのピアツーピア認証を利用して確立されます。</em>』と書かれています。何だかふ〜んと言った感じで読み飛ばしてしまいそうですが、実はここは結構重要でした。
このTLS接続は『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行う</em>』ことで確立させます。<br/>
最低限ここまで抜粋できれば良しとしましょう笑</p>

<h4>実際に取得してみた結果は？</h4>

<p>百聞は一見にしかずということで、実際に自分の目で確かめてみることにしました。</p>

<p>手順は省き、結果を言うと『デバイストークンは端末ごとにユニークなもの』です。</p>

<p>アプリごとにユニークではない、１端末につき１つのデバイストークンということがポイントです！<br/>
それではアプリAにプッシュを送ろうとすると、アプリBにプッシュが届くのではないか？と思うかもしれません。私も昨日まで完全にそう思っていました。が、ここで先ほど述べた</p>

<p>『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行うことでTLS接続を確立する</em>』</p>

<p>が意味を成すのです。<br/>
そう、秘密鍵と証明書を使用してTLS接続を確立している時点でアプリAへの依頼なのかアプリBへの依頼なのか決まっているのです。</p>

<h4>因みに&hellip;</h4>

<p>因みに、そもそも私がデバイストークンとは端末のアプリごとに異なると思っていた理由を紹介しましょう。<br/>
先ほどの説明の中でデバイストークンは１端末につき１つのデバイストークンと言いましたが、それをいきなり覆します！<br/>
実はDevelopment版とProduction版でデバイストークンは異なるんです！<br/>
これに私は完全に翻弄されてしまったのです(汗)<br/>
そして、プッシュの証明書が異なれば(つまりはアプリごと)デバイストークンは異なるのだと思いこんでしまったのです&hellip;。</p>

<p>ではなぜDevelopment版とProduction版でデバイストークンは異なるのでしょうか？完全なる答えはわかりませんが、<br/>
Development版はプロバイダアプリケーションの初版の開発とテストに使用されるサンドボックス環境であり、アクセス先として『<em>gateway.sandbox.push.apple.com</em>』を設定します。<br/>
一方でProduction版のアクセス先はsandboxを外した『<em>gateway.push.apple.com</em>』を設定します。<br/>
なるほど、アクセス先が違うのでデバイストークンが変わりそうな気がします&hellip;<br/>
参考までにサイトのページを載せておきます。<br/>
<img src="/images/apple_developer_site1.png" alt="Apple Developer サイト" /></p>

<p>ここまで説明した内容は全てiOS6.1以前のものであり、iOS7は含みません。<a href="http://blog.katty.in/4162" title="iOS7でプッシュ通知のデバイストークンに大きな変更">iOS7からはアプリごとに異なるといった記事</a>も見られるので、またのちほど実験していくつもりです。</p>

<p>皆さんもぜひ自分の眼でお試しあれ<br/>
しかし、今回は全部、文字になってしまったな〜。気が向いたらもう少しわかりやすく編集し直します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 広告2 -->


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
