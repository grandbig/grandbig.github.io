<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-04-20T11:50:27+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Geocoding APIとDirections APIを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/google-maps-api/"/>
    <updated>2017-07-17T22:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/google-maps-api</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はGoogleが提供している<a href="https://developers.google.com/maps/documentation/geocoding/intro?hl=ja">Geocoding API</a>と<a href="https://developers.google.com/maps/documentation/directions/?hl=ja">Directions API</a>をiOSで使ってみた話を書きます。</p>

<p>まずは、Google Cloud Platform > API Managerから <strong>Geocoding API</strong> と <strong>Directions API</strong> を有効にしましょう。</p>

<p><img src="/images/google_api_1.png" alt="API Manager" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geocoding APIの利用</h3>

<p>Googleから提供されたAPIを利用し、それがJSON形式が返却されるため、<code>Alamofire</code>と<code>SwiftyJSON</code>をあわせて利用します。</p>

<p>因みに、APIキーは<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>で説明した通り<code>key.plist</code>に記載することでGitHubにアップすることを避けています。</p>

<p>今回実装する処理は <strong>住所を緯度/経度に変換する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Geocoding {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/geocode/json?language=ja">https://maps.googleapis.com/maps/api/geocode/json?language=ja</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   ジオコーディング</p>

<ul>
<li> parameter address: 住所</li>
<li><p> parameter completion: 緯度/経度を返すcallback
*/
func geocoding(address: String, completion: @escaping ((CLLocationCoordinate2D) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
Alamofire.request(requestURL, method: .get, parameters: [&ldquo;address&rdquo;: address], encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)</p>

<p>  guard let latitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lat&rdquo;].double else {
    return
  }</p>

<p>  guard let longitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lng&rdquo;].double else {
    return
  }</p>

<p>  completion(CLLocationCoordinate2D.init(latitude: latitude, longitude: longitude))
}
}<br/>
}
```</p></li>
</ul>


<h3>Directions APIの利用</h3>

<p>ここで実装する処理は <strong>開始地点から終了地点までの道順を取得する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Direction {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking">https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   目的地までの道順を取得</p>

<ul>
<li> parameter from: 開始地点</li>
<li> parameter to: 終了地点</li>
<li><p> parameter completion: 道順を返すcallback
*/
func getRoutes(from: CLLocationCoordinate2D, to: CLLocationCoordinate2D, completion: @escaping ((JSON) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
let parameters = [&ldquo;origin&rdquo;: &ldquo;(from.latitude),(from.longitude)&rdquo;, &ldquo;destination&rdquo;: &ldquo;(to.latitude),(to.longitude)&rdquo;]
Alamofire.request(requestURL, method: .get, parameters: parameters, encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)
  let steps = json[&ldquo;routes&rdquo;][0][&ldquo;legs&rdquo;][0][&ldquo;steps&rdquo;]</p>

<p>  completion(steps)
}
}
}
```</p></li>
</ul>


<h3>まとめ</h3>

<p>今回はGoogleが提供している <strong>Geocoding API</strong> と <strong>Directions API</strong> について見てみました。<br/>
Google Mapを利用するサービスを考えると案外必要となる場面が多いんですよね。<br/>
知っておいて損はないかと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking2.xでWeb-APIを叩いてみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/12/afnetworking/"/>
    <updated>2015-02-12T00:01:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/12/afnetworking</id>
    <content type="html"><![CDATA[<h3>AFNetworking2.x</h3>

<p>さて、本日は今更ながら超有名ライブラリである <strong>AFNetworking</strong> を使ってみたいと思います。<br/>
ただ、単に使い方を説明するのであれば、他のサイトにお任せすれば良いので、Web-APIを使ってみる形で書きたいと思います。</p>

<p>今回は、<br/>
GETリクエスト: <strong>OpenWeatherMap API</strong><br/>
POSTリクエスト: <strong>VoiceText Web API</strong><br/>
を試してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>　</p>

<p><strong>AFNetworking</strong> を使うためにはCocoaPodsでライブラリをインストールして、<br/>
ViewController.mで<code>#import "AFNetworking.h"</code>を書きましょう。</p>

<p>まずは、OpenWeatherMap APIを使って、GETリクエストを投げてみました。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;AFNetworking.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  // AFHTTPSessionManagerをインスタンス化
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</p>

<p>  // OpenWeatherMap APIを利用
  [manager GET:@&ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;
    parameters:nil
       success:^(NSURLSessionDataTask <em>task, id responseObject) {
           NSLog(@&ldquo;response: %@&rdquo;, responseObject);
       } failure:^(NSURLSessionDataTask </em>task, NSError *error) {
           NSLog(@&ldquo;error: %@&rdquo;, error);
       }
}
```</p></li>
</ul>


<p>きちんと値が返ってきました。</p>

<p>続いて、<a href="https://cloud.voicetext.jp/webapi">VoiceText Web API</a>を使って、POSTリクエストを投げてみました。<br/>
VoiceText Web APIは無料利用に登録が必要なので、さくっと登録しましょう。<br/>
すぐに登録したメールにAPIキーが来ます。<br/>
これを使って、POSTリクエストを投げてみました。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;AFNetworking.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  // AFHTTPSessionManagerをインスタンス化
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</p>

<p>  // APIキーをセット
  NSString *apiKey = @&ldquo;&lt;メールで届いたAPIキー>&rdquo;;
  [manager.requestSerializer setAuthorizationHeaderFieldWithUsername:apiKey password:nil];</p>

<p>  // リクエストパラメータをセット
  NSMutableDictionary <em>params = [NSMutableDictionary alloc] init];
  NSString </em>text = @&ldquo;おはようございます。&rdquo;;
  [params setObject:text forKey:@&ldquo;text&rdquo;];
  [params setObject:@&ldquo;show&rdquo; forKey:@&ldquo;speaker&rdquo;];
  [params setObject:@&ldquo;ogg&rdquo; forKey:@&ldquo;format&rdquo;];]</p>

<p>  // Content-Typeをセット
  [manager setResponseSerializer:[AFHTTPResponseSerializer serializer]];
  manager.responseSerializer.acceptableContentTypes = [NSSet setWithObject:@&ldquo;audio/ogg&rdquo;];</p>

<p>  // OpenWeatherMap APIを利用
  [manager POST:@&ldquo;<a href="https://api.voicetext.jp/v1/tts">https://api.voicetext.jp/v1/tts</a>&rdquo;
     parameters:params
        success:^(NSURLSessionDataTask <em>task, id responseObject) {
            NSLog(@&ldquo;response: %@&rdquo;, responseObject);
        } failure:^(NSURLSessionDataTask </em>task, NSError *error) {
            NSLog(@&ldquo;error: %@&rdquo;, error);
        }
}
```</p></li>
</ul>


<p>注意点は下記です。</p>

<ul>
<li>APIキーの設定
VoiceText Web APIではAPIキーを利用する必要があるので、<code>requestSerializer</code>の<code>authorization</code>にユーザネームとしてAPIキーを設定しましょう。</li>
<li><code>Content-Type</code>の設定
<code>audio/ogg</code>でレスポンスを受け取る必要があるので、<code>responseSerializer</code>を設定しましょう。</li>
</ul>


<p>あとは通常の<code>NSURLSession</code>や<code>NSURLConnection</code>のPOSTリクエストと同様にリクエストパラメータをセットすれば良いのです。
正しく値が返ってきますね。</p>

<p>AFNetworkingの良いところはエラーでも値が返ってくるところでしょうか。<br/>
<code>Content-Type</code>が対応していないので<code>success</code>を通らないということが一目瞭然でした。</p>

<p>今後は、この便利なライブラリを積極的に使っていこうかと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリで使おう様々なWeb-API]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/16/xcode-api/"/>
    <updated>2013-10-16T22:03:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/16/xcode-api</id>
    <content type="html"><![CDATA[<h3>Web-APIを使ってJSON形式でデータを取得したい！</h3>

<p>iPhoneアプリをいざ作ろう！となったとき◯◯のデータを使って、▼▲なアプリが作れたらな〜なんて思うことはないでしょうか？<br/>
でもいざ作ろうとすると膨大なデータを自分で作ることもできないし、作り方もわからない…。あ〜作れない〜てなことになるでしょう。そんなときは既にどこかの誰かが作った<strong>API</strong>を使えばいいわけです。世の中にはとても便利なAPIが溢れています(たぶん&hellip;)<br/>
しかし、気をつけておきたいのはそれが無料なのか、商用フリーなのかということです。</p>

<!--more-->


<h4>Web-APIの例</h4>

<p>どのくらい無料&amp;商用フリーで使えるAPIがあるのか探してみました。<br/>
※商用フリーでもライセンス表記など条件があるかもしれないので十分ご注意下さい。<br/>
・OpenStreetMap：Map情報の取得<br/>
　<a href="http://www.openstreetmap.org/">OpenStreetMap公式ページ</a><br/>
・OpenWeatherMap：天気情報の取得<br/>
　<a href="http://openweathermap.org/">OpenWeatherMap公式ページ</a><br/>
・HeartRails Geo API：Map情報の取得<br/>
　<a href="http://geoapi.heartrails.com/api.html">HeartRails Geo API公式ページ</a><br/>
・HeartRails Express API：鉄道・路線情報の取得<br/>
　<a href="http://express.heartrails.com/api.html">HeartRails Express API公式ページ</a><br/>
・detectFace();：顔認識情報の取得<br/>
　<a href="http://detectface.com/">detectFace();公式ページ</a></p>

<p>因みに筆者はどれも使ったことがありません&hellip;。Google Maps APIは使ったことがあるって程度です。</p>

<h4>XcodeでJSON形式を扱うためには</h4>

<p>さて、APIを利用すると、xmlまたはjsonのどちらかを指定して下さいといったことがあります。私はjsonを扱うことが多いため(というか、xmlは使ったことがないので&hellip;)ここではjson形式を扱うことについてご紹介致します。<br/>
恐らく、ほとんどの方々が<strong>SBJson</strong>を利用されているのではないでしょうか？ネットで調べても真っ先に出てくると思います。<br/>
ライセンスも修正BSDライセンス(New BSD License)なので商用でも非常に使いやすいです。<br/>
使うための準備としては<br/>
1: <a href="https://github.com/stig/json-framework/">公式ページ</a>に上がっているのでダウンロード<br/>
2: json-framework-master/src/main/objc/直下のファイルを全てコピー<br/>
3: 追加したいXcodeプロジェクトに追加(SBJsonなどフォルダを作って、その配下に置いた方が見やすいでしょう)<br/>
4: JSONを扱いたいファイルで<strong>#import &ldquo;SBJson.h&rdquo;</strong>と表記<br/>
となります。<br/>
<img src="/images/xcode_sbjson_add.png" alt="XcodeにSBJsonを追加" /></p>

<p>準備ができたら後は簡単です。<br/>
参考までに今回は<strong>OpenWeatherMap API</strong>を利用したサンプルを作成します。</p>

<p>作成するサンプルは日本の東京の天候を取得して、ラベルに表示するというものです。<br/>
では例によってViewController.m, ViewController.h, ViewController.xibファイルを追加するところまで作成して下さい。<br/>
で、ViewController.mファイルのViewDidLoad関数に以下を書きます。<br/>
```
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// ①
NSString *url = @"http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp";
// ②
NSString *urlEscapeStr = [[NSString  stringWithString:url] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
// ③
NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:urlEscapeStr] cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:15];
// ④
 NSData *responseData = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];
// ⑤
SBJsonParser* parser = [[SBJsonParser alloc]init];
// ⑥
NSDictionary *result = [parser objectWithData:responseData];
// ⑦
NSArray *main = [result valueForKeyPath:@"weather.main"];
NSString *weather = main[0];
label1.text = weather;
</code></pre>

<p>```</p>

<p>① OpenWeatherMap APIのリクエストURLをセット<br/>
② リクエストURLをUTF8でエンコード※stringByAddingPercentEscapesUsingEncodingを使うとAPIでよく使われる<strong>&amp;</strong>はエスケープされません。<br/>
③ 通信するためにNSMutableURLRequest型のrequestを作成<br/>
④ 通信<br/>
⑤ ここからSBJsonを利用します。まずはSBJsonを初期化<br/>
⑥ JSON形式で来たデータをNSDictionary型に格納<br/>
⑦ weather.mainの値を抽出してラベルに表示<br/>
※ label1はViewController.xibでセットしたラベルになります。</p>

<p>その結果がこれ↓<br/>
<img src="/images/xcode_openweathermap_sample.png" alt="OpenWeatherMapで天気を取得してラベルに表示してみた" /></p>

<p>こんな簡単にAPIを使えるなら、やらない手はないですよね？<br/>
筆者もAPIを使ったアプリの開発をこれから考えようと思います。<br/>
ってことで今日は以上です。</p>
]]></content>
  </entry>
  
</feed>
