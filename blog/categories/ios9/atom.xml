<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios9 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ios9/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-09-22T00:20:39+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS9 App Transport Securityについて]]></title>
    <link href="http://grandbig.github.io/blog/2015/08/31/ios9-ats/"/>
    <updated>2015-08-31T22:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/08/31/ios9-ats</id>
    <content type="html"><![CDATA[<h4>iOS9のApp Transport Securityについて調べてみた</h4>

<p>さて、今月、最終日になんとかブログ更新です。<br/>
来週、新型iPhoneの発表が期待される中、開発者間で話題となっているApp Transport Security(以下、ATS)について調べてみました。</p>

<p>ATSの詳細は<a href="http://qiita.com/yanayanalte/items/e6d83c12af77fa238a58">iOS9 ATS問題</a>などで既に詳しく書かれていますので、割愛します。<br/>
どちらかと言うと実開発よりで話をしたいと思います。</p>

<p>これまで筆者はiOSアプリを作り続けてきたわけなんですが、実は会社では所謂ハイブリッドアプリと呼ばれる、 <strong>WebViewを用いたアプリ</strong> の開発をすることが多く、古くからあるUIWebViewはもちろんのことWKWebViewも利用してきました。<br/>
正直、これまで特別な場合を覗いて、 <strong>HTTPS</strong> を意識することはありませんでした。<br/>
しかし、昨今のセキュリティ問題から周りの考え方も変わりつつあります。<br/>
それをさらに一押したのが、iOS9のATSではないかと考えています。<br/>
今後は、グローバルに空いているサーバに対しては <strong>HTTPS</strong> しか許されないことになることでしょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>iOS8でのWKWebViewにおける自己証明書について</h5>

<p>iOS9の具体的な話に入る前に一言だけ。<br/>
周知のことかもしれませんが、iOS8のWKWebViewでは自己証明書を利用したサーバの <strong>https</strong> から始まるURLを指定することはできません。<br/>
指定したとしても、表示することができません。<br/>
これは<a href="http://stackoverflow.com/questions/27100540/allow-unverified-ssl-certificates-in-wkwebview">stackoverflow &ndash; Allow unverified ssl certificates in WKWebView</a>に書かれている通り、WKNavigationDelegate Protocolである <strong>didReceiveAuthenticationChallenge</strong> メソッドが呼ばれないためです。</p>

<p>iOS8が登場した当初はバグでは？と騒がれていましたが、iOS9での <strong>HTTPS</strong> 推奨の流れから見るに、わざとだったのでは？とも勘ぐれますね&hellip;。</p>

<h5>iOS9でのWKWebViewにおける自己証明書について</h5>

<p>iOS9からは <strong>didReceiveAuthenticationChallenge</strong> メソッドを通るらしく、コードを書くことで、自己証明書を利用したHTTPS通信が可能なようです。<br/>
<a href="http://qiita.com/niwatako/items/9ae602cb173625b4530a">iOS9からWKWebViewのSSL/TLS接続はコードで制御する</a>を参照のこと。<br/>
確かに、問題なく、実行できることを確認しました。</p>

<h5>iOS9でのHTTP通信許可方法について</h5>

<p>Info.plistに下記の設定を入れることで、全てのHTTP通信を許可できます。</p>

<p>```objective-c
<key>NSAppTransportSecurity</key>
<dict></p>

<pre><code>&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;
&lt;true/&gt;
</code></pre>

<p></dict>
```</p>

<p>流石に全てを許可するのははばかられるといった場合にはHTTP通信を許可するドメインを指定することもできます。</p>

<p>```objective-c
<key>NSAppTransportSecurity</key>
<dict></p>

<pre><code>&lt;key&gt;NSExceptionDomains&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;xxx.com&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
        &lt;true/&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
</code></pre>

<p></dict>
```</p>

<p>しかし、これには注意が必要です。<br/>
もしも、指定したドメインアクセス時に呼び出されるHTMLファイルの中に、外部ドメインから取得しているJavaScriptファイルがあった場合、それらもInfo.plistに指定する必要があります。<br/>
これまで、WebソースはAppleの審査を介さずとも変更が可能な範疇でしたが、HTTP通信として設定を必要とする場合が出てくるため、十分に注意が必要です。<br/>
HTTP, HTTPSのどちらでもソースが取得できる場合は、Info.plistにHTTP通信用のドメインとして登録するのではなく、下記のように <strong>https</strong> からパスを指定した方が良いでしょう。</p>

<p>```html</p>

<script type="text/javascript" src="https://〜"></script>


<p>```</p>

<p>本日は試してみたことをパパっと書きましたが、時間があるときにもっと探ってみようと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
