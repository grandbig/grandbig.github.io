<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-17T21:00:39+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring BootでHello Worldをしてみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/17/hello-world-spring-boot/"/>
    <updated>2016-04-17T01:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/17/hello-world-spring-boot</id>
    <content type="html"><![CDATA[<h4>Spring BootでHello World</h4>

<p>引き続きSpring Bootの練習です。<br/>
前回、Spring Boot用のプロジェクトを作成して、起動してみるところまでやってみました。<br/>
今回はHello Worldアプリケーションを作成してみます。<br/>
(Node.jsのExpressとは異なりますが、結構簡単にできました。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まずは、下記が前回のフォルダ構成です。</p>

<p>```java
firstApp
  ┣━━ build.gradle
  ┣━━ gradlew
  ┣━━ gradlew.bat
  ┣━━ gradle
  ┃    ┗━━ wrapper
  ┃          ┣━━ gradle-wrapper.jar
  ┃          ┗━━ gradle-wrapper.properties
  ┗━━ src</p>

<pre><code>   ┣━━ main
   ┃    ┣━━ java
   ┃    ┃    ┗━━ com
   ┃    ┃         ┗━━ example
   ┃    ┃               ┗━━ FirstAppApplication.java
   ┃    ┗━━ resources
   ┃         ┗━━ application.properties
   ┗━━ test
        ┗━━ java
             ┗━━ com
                  ┗━━ example
                        ┗━━ FirstAppApplicationTests.java
</code></pre>

<p>```</p>

<p>今回はWebアプリケーションを作成するので、<code>build.gradle</code>を修正する必要があります。</p>

<p>```java
// build.gradle
dependencies {</p>

<pre><code>compile 'org.springframework.boot:spring-boot-starter-web'
testCompile('org.springframework.boot:spring-boot-starter-test')
</code></pre>

<p>}
```</p>

<p>コンパイル対象のSpring Bootのモジュールを変更しています。<br/>
(元はcompile(&lsquo;org.springframework.boot:spring-boot-starter&rsquo;)でした。)</p>

<p>次に、上記のフォルダ構成の<code>FirstApplication.java</code>と同階層に<code>HelloController.java</code>を作成します。</p>

<p>```java
// HelloController.java
package com.example;</p>

<p>import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;</p>

<p>@RestController
@RequestMapping(&ldquo;/hello-world&rdquo;)
public class HelloController {</p>

<pre><code>@RequestMapping(method=RequestMethod.GET)
public String hello() {
    return "Hello Spring MVC";
}
</code></pre>

<p>}
```</p>

<p><code>HelloController.java</code>の処理について説明すると</p>

<ul>
<li><code>@RestController</code>: WebAPIのエントリポイントクラスを指定</li>
<li><code>@RequestMapping</code>: パスやHTTPメソッド(GET, POST, PUT, DELETEなど)のマッピングを指定

<ul>
<li><code>@RequestMapping("/hello-world")</code>で<code>HelloController</code>クラスにパスをマッピング</li>
<li><code>@RequestMapping(method=RequestMethod.GET)</code>で<code>hello</code>メソッドにHTTPメソッドをマッピング</li>
</ul>
</li>
</ul>


<p>そして、<code>application.properties</code>にポート番号を指定します。</p>

<p><code>java
// application.properties
server.port=9000
</code>
あとは、ターミナルから<code>gradle bootRun</code>を実行するだけです。<br/>
そして、Chromeで<code>http://localhost:9000/hello-world</code>にアクセスしてみましょう。<br/>
下記のような結果が得られるはずです。</p>

<p><img src="/images/hello-world-spring-boot1.png" alt="Hello World" /></p>

<p>もろもろの問題はあるけれど、後回しにして、引き続き勉強を進めます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Bootを使い始めよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/04/16/start-spring-boot/"/>
    <updated>2016-04-16T14:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/04/16/start-spring-boot</id>
    <content type="html"><![CDATA[<h4>Spring Bootとは</h4>

<p>本日はこれまでと全く趣向を変えて、 <strong>Spring Boot</strong> について書きたいと思います。<br/>
<a href="http://projects.spring.io/spring-boot/">Spring Boot</a>とはSpringプロジェクトが提供している多くのFrameworkを統合した、<br/>
簡単にWebアプリケーションを作成できるように設計されたFrameworkです。</p>

<p>開発者はSpringプロジェクト内で用意された様々なFrameworkを意識する必要がありません。<br/>
Spring Bootとは長年ブラッシュアップされ、肥大化してきたSpringプロジェクトへの参入ハードルを劇的に下げるものと言えるでしょう。</p>

<p>なんて言いつつも、<br/>
筆者はJavaによるWebアプリケーション開発はほとんどやったことがありません。</p>

<p>何はともあれ、まずは触れてみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Spring BootによるWeb Application Projectを作成しよう！</h4>

<p>最も簡単な方法について説明します。</p>

<p>1．<a href="https://start.spring.io/">Spring Initializr</a>にアクセス<br/>
Projectの自動生成ツールサイトがあるので、アクセスして各種項目を設定しましょう。</p>

<ul>
<li>Project: GradleおよびMavenから選択できます</li>
<li>Spring Boot: バージョンを選択できます</li>
<li>Group: パッケージ名を指定できます</li>
<li>Artifact: メインファイル名を指定できます</li>
<li>Dependencies: 初期状態で追加されるdependenciesを指定できます</li>
</ul>


<p>筆者は下記のように指定しました。</p>

<p><img src="/images/start-spring-boot1.png" alt="Spring Initializr" /></p>

<p>2．Generate Projectボタンをクリック<br/>
下記のようなProjectが生成されます。<br/>
(下記は筆者が指定した設定項目で生成されたProjectです。)</p>

<p>```java
firstApp
  ┣━━ build.gradle
  ┣━━ gradlew
  ┣━━ gradlew.bat
  ┣━━ gradle
  ┃    ┗━━ wrapper
  ┃          ┣━━ gradle-wrapper.jar
  ┃          ┗━━ gradle-wrapper.properties
  ┗━━ src</p>

<pre><code>   ┣━━ main
   ┃    ┣━━ java
   ┃    ┃    ┗━━ com
   ┃    ┃         ┗━━ example
   ┃    ┃               ┗━━ FirstAppApplication.java
   ┃    ┗━━ resources
   ┃         ┗━━ application.properties
   ┗━━ test
        ┗━━ java
             ┗━━ com
                  ┗━━ example
                        ┗━━ FirstAppApplicationTests.java
</code></pre>

<p>```</p>

<p>3．<code>gradle bootRun</code>コマンドを実行<br/>
firstApp直下で<code>gradle bootRun</code>コマンドを実行します。<br/>
下記のような実行結果が出るはずです。</p>

<p><img src="/images/start-spring-boot2.png" alt="実行結果" /></p>

<p>これは生成されたメインファイルでのソースが下記のようになっているためです。<br/>
<code>main</code>メソッド内で実行している処理はたったの1行で、<br/>
これはSpring Bootによるアプリケーションを起動する処理となっています。</p>

<p>ここで設定している<code>@SpringBootApplication</code>アノテーションは<br/>
<code>@Configuration</code>, <code>@EnableAutoConfiguration</code>, <code>@ComponentScan</code>の3つの設定と同義になります。</p>

<ul>
<li><code>@Configuration</code>: Beanを含むJavaConfig用のクラスに付与する</li>
<li><code>@EnableAutoConfiguration</code>: 様々な設定を自動で有効にする</li>
<li><code>@ComponentScan</code>: クラスの自動スキャンを可能にする</li>
</ul>


<p>```java
package com.example;</p>

<p>import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;</p>

<p>@SpringBootApplication
public class FirstAppApplication {</p>

<pre><code>public static void main(String[] args) {
    SpringApplication.run(FirstAppApplication.class, args);
}
</code></pre>

<p>}
```</p>

<p>因みに、初期状態で<code>sourceCompatibility</code>および<code>targetCompatibility</code>が <strong>1.8</strong> となっています。<br/>
よって、実行するためにはJDKバージョン <strong>1.8</strong> が必要になります。<br/>
(インストールは<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">こちら</a>から)</p>

<p>まずは最も簡単な導入が完了したようです。</p>

<h4>IntelliJ IDEAにimportしてみよう</h4>

<p>ターミナルからプロジェクトの開発を続けても良いのですが、<br/>
ターミナルに慣れていない方は統合開発環境ツールで開きたいかもしれませんね。<br/>
複雑なプロジェクトになればなるほど、ターミナルでの開発は辛くなるかもしれません。</p>

<p>ということでIntelliJ IDEAに先ほどのプロジェクトをimportしてみましょう。</p>

<p>1．IntelliJ IDEAを起動して、importを選択<br/>
<img src="/images/start-spring-boot3.png" alt="import" /></p>

<p>2．importしたいDirectoryを選択<br/>
<img src="/images/start-spring-boot4.png" alt="Directoryの選択" /></p>

<p>3．Createの方を選択<br/>
<img src="/images/start-spring-boot5.png" alt="Createの方を選択" /></p>

<p>4．Project名と保存場所を確認<br/>
<img src="/images/start-spring-boot6.png" alt="Project名と保存場所を確認" /></p>

<p>5．流れに任せてNextを続ける<br/>
<img src="/images/start-spring-boot7.png" alt="ソースファイル一覧" /></p>

<p><img src="/images/start-spring-boot8.png" alt="ライブラリの確認" /></p>

<p><img src="/images/start-spring-boot9.png" alt="ライブラリの確認" /></p>

<p><img src="/images/start-spring-boot10.png" alt="JDKを選択" /></p>

<p>6．一通り作業が終わったらFinishを選択<br/>
<img src="/images/start-spring-boot11.png" alt="Finishを選択" /></p>

<p>7．Intellij IDEAのターミナルで<code>gradle bootRun</code>を実行<br/>
<img src="/images/start-spring-boot12.png" alt="コマンドを実行" /></p>

<p>続いて、最も簡単なIntelliJ IDEA上での実行が完了しました。</p>

<p>引き続きSpring Bootを見ていきますが、本記事は一旦ここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TableLayoutを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/11/android-tablelayout/"/>
    <updated>2016-02-11T15:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/11/android-tablelayout</id>
    <content type="html"><![CDATA[<h4>TableLayoutとは</h4>

<p><code>TabLayout</code>に続いて、本日は、<code>TableLayout</code>を使った画面作成をしたいと思います。<br/>
Androidでの<code>TableLayout</code>はHTMLで言うところの<code>&lt;table&gt;</code>タグに当たり、<br/>
iOSで言うところの<code>UITableView</code>が使いどころとしては近いと思います。</p>

<p>筆者が思うに<code>TableLayout</code>は決まったレイアウトの実装には向いていますが、<br/>
複雑かつオリジナリティの高い画面を作成する際に使うには難しいのかなと感じています。<br/>
何はともあれ、実装に入っていきましょう。</p>

<p>本記事で利用しているAndroid Studioは <strong>Android Studio 2.0 Beta 3</strong> になります。<br/>
(Android Studio 1.5 以上であれば基本的に同じだと思います。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>TableLayoutを使ってみよう！</h4>

<p>順を追って説明していきます。<br/>
目標として、下図のような画面作成を目指したいと思います。</p>

<p><img src="/images/android-tablelayout.png" alt="TableLayoutを使った画面" /></p>

<p>これは1行目と4行目は1つのカラムで、2行目と3行目は2つのカラムで構成しています。</p>

<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tablelayoutapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tablelayoutapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tablelayoutapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2．<code>content_main.xml</code>に<code>TableLayout</code>を追加<br/>
続いて、<code>TableLayout</code>をレイアウトファイルに実装していきましょう。</p>

<p>```java
// content_main.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="0dp"
android:paddingLeft="0dp"
android:paddingRight="0dp"
android:paddingTop="0dp"
android:background="#efeff4"
app:layout_behavior="@string/appbar_scrolling_view_behavior"
tools:context="com.example.ec_dev.tablelayoutapplication.MainActivity"
tools:showIn="@layout/activity_main"&gt;

&lt;!-- 構成要素が多くなる場合を踏まえて、画面スクロールを可能にしておく --&gt;
&lt;ScrollView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/scrollView"&gt;

    &lt;TableLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:stretchColumns="0"&gt;

        &lt;!-- 1行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?android:attr/textAppearanceLarge"
                android:text="@string/top_message"
                android:layout_span="2"
                android:id="@+id/textView"
                android:textSize="18sp"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;!-- 2行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#ffffff"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="44dp"
                android:text="@string/androidText"
                android:id="@+id/textView2"
                android:textSize="20sp"
                android:gravity="center_vertical"
                android:paddingRight="8dp"
                android:paddingLeft="@dimen/8dp"/&gt;

            &lt;ImageButton
                android:layout_width="44dp"
                android:layout_height="44dp"
                android:id="@+id/imageButton"
                android:src="@drawable/ic_android_white_18dp"
                android:background="@color/colorAccent"
                android:layout_marginRight="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;-- 3行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#ffffff"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="44dp"
                android:text="@string/animalText"
                android:id="@+id/textView2"
                android:textSize="20sp"
                android:gravity="center_vertical"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;

            &lt;ImageButton
                android:layout_width="44dp"
                android:layout_height="44dp"
                android:id="@+id/imageButton"
                android:src="@drawable/ic_pets_white_18dp"
                android:background="@color/colorAccent"
                android:layout_marginRight="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;!-- 4行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?android:attr/textAppearanceLarge"
                android:text="@string/last_message"
                android:layout_span="2"
                android:id="@+id/textView"
                android:textSize="18sp"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;
        &lt;/TableRow&gt;
    &lt;/TableLayout&gt;
&lt;/ScrollView&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>ポイントは下記です。</p>

<ul>
<li><code>TableLayout</code>に<code>android:stretchColumns="0"</code>を設定して、0番目のカラム幅を極力大きくする</li>
<li>1行目と4行目<code>TableRow</code>の<code>TextView</code>は<code>android:layout_span="2"</code>を設定して、カラム2つ分とする</li>
</ul>


<p>その他、必要なケースに合わせてデザインを整えましょう。</p>

<p>因みに、<code>activity_main.xml</code>は以下にしています。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:fitsSystemWindows="true"
tools:context="com.example.takahiro.tablelayoutapplication.MainActivity"&gt;

&lt;android.support.design.widget.AppBarLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:theme="@style/AppTheme.AppBarOverlay"&gt;

    &lt;android.support.v7.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        app:popupTheme="@style/AppTheme.PopupOverlay" /&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include layout="@layout/content_main" /&gt;
</code></pre>

<p>&lt;/android.support.design.widget.CoordinatorLayout>
```</p>

<p>デフォルトでは<code>FloatingActionButton</code>が作成されますが、不要なので削除しています。</p>

<p>合わせて、<code>strings.xml</code>も編集しています。</p>

<p>```java
<resources></p>

<pre><code>&lt;string name="app_name"&gt;TableLayoutApplication&lt;/string&gt;
&lt;string name="action_settings"&gt;Settings&lt;/string&gt;
&lt;string name="top_message"&gt;Congratulation!!&lt;/string&gt;
&lt;string name="androidText"&gt;Android&lt;/string&gt;
&lt;string name="animalText"&gt;Animals&lt;/string&gt;
&lt;string name="last_message"&gt;
    - this page is simple sample.\n- this app is simple sample application.\n- GO! GO!
&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>レイアウトを作成している途中、レイアウトが想定していない形になったり、崩れてしまったりすることがあるかもしれません。<br/>
そんなときはレイアウトファイル上でリフレッシュボタンをクリックして更新しましょう。</p>

<p><img src="/images/android-tablelayout-2.png" alt="レイアウトのリフレッシュ" /></p>

<p>さて、如何だったでしょうか？
今回の記事で紹介したProjectのソースは<a href="https://github.com/grandbig/TableLayoutSample">GitHub grandbig/TableLayoutSample</a>に載せてあります。<br/>
ご自由にご利用ください。</p>

<p>因みに、今回はレイアウトの作成に注目して記事を書きました。<br/>
そのため、ボタンアクションなど必要な場合は<code>MainActivity.java</code>に処理を追加してください。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabLayoutを使ってTabを画面最下部に配置しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/11/android-tablayout-2/"/>
    <updated>2016-02-11T14:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/11/android-tablayout-2</id>
    <content type="html"><![CDATA[<h4>Tabを最下部に配置する方法について</h4>

<p>さて、本日は簡単な話なのですが、案外ハマったので、メモ代わりに書いておきたいと思います。<br/>
以前、<a href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a>でTabLayoutを使ったTabデザインの実装方法について紹介させて頂きました。<br/>
そのときはTabをToolbarのすぐ下に配置していましたが、画面最下部に配置したいことも出てくることでしょう。<br/>
その方法について書きたいと思います。</p>

<p>TabLayoutの配置は<code>content_main.xml</code>に下記のように書きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```java
// content_main.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
app:layout_behavior="@string/appbar_scrolling_view_behavior"
tools:context="com.example.takahiro.tablayoutsample2.MainActivity"
tools:showIn="@layout/activity_main"&gt;

&lt;android.support.v4.view.ViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_above="@+id/tabs"/&gt;

&lt;android.support.design.widget.TabLayout
    android:id="@+id/tabs"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/colorPrimary"
    app:tabSelectedTextColor="@color/colorAccent"
    app:tabTextColor="#ffffff"
    android:layout_alignParentBottom="true"
    android:layout_alignParentLeft="true"
    android:layout_alignParentStart="true"/&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>ポイントは、</p>

<ul>
<li><code>android.support.v4.view.ViewPager</code>に<code>android:layout_above="@+id/tabs"</code>設定</li>
<li><code>android.support.design.widget.TabLayout</code>に<code>android:layout_alignParentBottom</code>, <code>android:layout_alignParentLeft</code>, <code>android:layout_alignParentStart</code>の3つをtrueで設定</li>
</ul>


<p>です。<br/>
これにより、下図のような配置ができているはずです。</p>

<p><img src="/images/android-tablayout-2.png" alt="Tabを最下部配置" /></p>

<p>なんてことはない単純な話なのですが、<strong>Android Design Support Library</strong> に惑わされてしまいました。  <br/>
もっとAndroidアプリの特にUI・UX周りの開発に精進したいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioでの初回作成Activityから考えるログイン画面]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/07/android-login-activity/"/>
    <updated>2016-02-07T22:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/07/android-login-activity</id>
    <content type="html"><![CDATA[<h4>Androidアプリでのログイン画面を考えてみる</h4>

<p>筆者はこれまでAndroidアプリでログイン画面を作成するとき、</p>

<ul>
<li>Person Name / E-mail / Phone などの必須入力項目用のText Fields</li>
<li>Password / Password(Numeric) のパスワード入力用のText Fields</li>
<li>ログインするためのアクション用のButton</li>
</ul>


<p>のみを配置することを考えていました。<br/>
今回はAndroid Studioで初回プロジェクト作成時に<code>Login Activity</code>を選択することで、<br/>
Google側の意図を読み取ってみようと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Login画面のレイアウト</h4>

<p>では、早速、Android Studioを起動して<code>Login Activity</code>を選択したプロジェクトを作成しましょう。<br/>
(本ブログでは <strong>Android Studio 2.0 Beta2</strong> を利用しています。)</p>

<p>プロジェクト作成時に<code>Add an Activity to Mobile</code>のところで<code>Login Activity</code>を選択してみましょう。</p>

<p><img src="/images/login-activity-1.png" alt="Login Activityを選択する" /></p>

<p>すると、下記のようなレイアウトファイルが作成されます。</p>

<p>```java
// activity_login.xml
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
...
tools:context="com.example.takahiro.loginapplicationsample.LoginActivity"&gt;

&lt;!-- Login progress --&gt;
&lt;ProgressBar
    android:id="@+id/login_progress"
    style="?android:attr/progressBarStyleLarge"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginBottom="8dp"
    android:visibility="gone" /&gt;

&lt;ScrollView
    android:id="@+id/login_form"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;LinearLayout
        android:id="@+id/email_login_form"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;

        &lt;android.support.design.widget.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;AutoCompleteTextView
                android:id="@+id/email"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/prompt_email"
                android:inputType="textEmailAddress"
                android:maxLines="1"
                android:singleLine="true" /&gt;

        &lt;/android.support.design.widget.TextInputLayout&gt;

        &lt;android.support.design.widget.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;EditText
                android:id="@+id/password"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/prompt_password"
                android:imeActionId="@+id/login"
                android:imeActionLabel="@string/action_sign_in_short"
                android:imeOptions="actionUnspecified"
                android:inputType="textPassword"
                android:maxLines="1"
                android:singleLine="true" /&gt;

        &lt;/android.support.design.widget.TextInputLayout&gt;

        &lt;Button
            android:id="@+id/email_sign_in_button"
            style="?android:textAppearanceSmall"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/action_sign_in"
            android:textStyle="bold" /&gt;

    &lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>実際に画面はこのようになっています。<br/>
<img src="/images/login-activity-2.png" alt="ログイン画面" /></p>

<p>その成り立ちを見てみましょう。</p>

<h5>ProgressBarが配置されている</h5>

<p>まず、目についたのは<code>ProgressBar</code>です。<br/>
ログインボタンをタップした後に、サーバへの問い合わせをすることが通常だと思います。<br/>
サーバ通信後、データを受け取るまでにはそれなりに時間がかかる可能性があります。<br/>
なので、ユーザにロード中であることを知らせる<code>ProgressBar</code>は必要であるということなのでしょう。</p>

<h5>ScrollViewが配置されている</h5>

<p>続いて、<code>ScrollView</code>に着目しました。<br/>
デフォルトでは、EmailとPasswordに加えて、ログインボタンが設置されているのみですが、<br/>
場合によってはユーザ名, 電話番号, 住所, クレジットカード番号などなど必要とされる項目が多くなる可能性があります。<br/>
初めからそういったことを想定した作りになっているということでしょう。</p>

<h5>TextInputLayoutが配置されている</h5>

<p>そして、何と言っても、<code>android.support.design.widget.TextInputLayout</code>は目立つのではないでしょうか？<br/>
これは <strong>Android Design Support Library</strong> に含まれるマテリアルデザインを体現したパーツとなります。<br/>
<code>TextView</code>等を囲むことで、ユーザの入力アクションに合わせて、入力項目タイトルがスムーズに移動するデザインを実装することができます。<br/>
いわゆる<a href="https://www.google.com/design/spec/components/text-fields.html#">Floating Label</a>というものですね。</p>

<h5>AutoCompleteTextViewが使われている</h5>

<p>今回はEmailの入力が必要とのことで、<code>AutoCompleteTextView</code>によるユーザ補助機能がついています。<br/>
もちろん、<code>AutoCompleteTextView</code>をレイアウト上で設定しても補助機能を実装することはできず、<br/>
<code>AndroidManifest.xml</code>で設定が必要です。</p>

<p>```java
// AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.loginapplicationsample"&gt;

&lt;!-- To auto-complete the email text field in the login form with the user's emails --&gt;
&lt;uses-permission android:name="android.permission.GET_ACCOUNTS" /&gt;
&lt;uses-permission android:name="android.permission.READ_PROFILE" /&gt;
&lt;uses-permission android:name="android.permission.READ_CONTACTS" /&gt;

...
</code></pre>

<p></manifest>
```</p>

<p>このように<code>GET_ACCOUNTS</code>, <code>READ_PROFILE</code>, <code>READ_CONTACTS</code>の3つのパーミッションを設定します。<br/>
これによって、下図のようにアプリ起動後に連絡先へのアクセス許可を求めるアラートを表示することができます。</p>

<p><img src="/images/login-activity-3.png" alt="連絡先へのアクセス許可アラート" /></p>

<h4>LoginActivityについて</h4>

<p>続いて、<code>LoginActivity</code>はどのようになっているのか見ていきましょう。</p>

<h5>LoaderManagerを利用</h5>

<p><code>LoginActivity</code>では<code>LoaderManager</code>を利用しています。</p>

<p>```java
// LoginActivity.java
public class LoginActivity extends AppCompatActivity implements LoaderCallbacks<Cursor> {</p>

<pre><code>...
@Override
public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {
    return new CursorLoader(this,
        // Retrieve data rows for the device user's 'profile' contact.
        Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
            ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,

        // Select only email addresses.
        ContactsContract.Contacts.Data.MIMETYPE +
            " = ?", new String[]{ContactsContract.CommonDataKinds.Email
        .CONTENT_ITEM_TYPE},

        // Show primary email addresses first. Note that there won't be
        // a primary email address if the user hasn't specified one.
        ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");
}

@Override
public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {
    List&lt;String&gt; emails = new ArrayList&lt;&gt;();
    cursor.moveToFirst();
    while (!cursor.isAfterLast()) {
        emails.add(cursor.getString(ProfileQuery.ADDRESS));
        cursor.moveToNext();
    }

    addEmailsToAutoComplete(emails);
}

@Override
public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {

}
...
</code></pre>

<p>}
```</p>

<p><code>LoaderCallbacks&lt;Cursor&gt;</code>を <strong>implements</strong> しているのは、<br/>
<code>onCreateLoader</code>, <code>onLoadFinished</code>でEmailのオートコンプリート機能を実装するためです。</p>

<h5>showProgressメソッドの実装</h5>

<p>レイアウトで実装した<code>ProgressBar</code>のアニメーションまで実装されています。<br/>
また、AndroidのOSバージョンに合わせて適切な処理分けもされています。</p>

<p>```java
// LoginActivity.java
@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
private void showProgress(final boolean show) {</p>

<pre><code>// On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
// for very easy animations. If available, use these APIs to fade-in
// the progress spinner.
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {
    int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
    mLoginFormView.animate().setDuration(shortAnimTime).alpha(
            show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
        @Override
        public void onAnimationEnd(Animator animation) {
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    });

    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
    mProgressView.animate().setDuration(shortAnimTime).alpha(
            show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
        @Override
        public void onAnimationEnd(Animator animation) {
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
        }
    });
} else {
    // The ViewPropertyAnimator APIs are not available, so simply show
    // and hide the relevant UI components.
    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
}
</code></pre>

<p>}
```</p>

<h5>非同期通信処理の実装</h5>

<p>ログイン処理は通常、必ずサーバ通信を伴います。<br/>
そのため、バックグラウンドでの通信処理が必要となるんですが、それが既に側だけ実装されています。</p>

<p>```java
// LoginActivity.java
public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean> {</p>

<pre><code>private final String mEmail;
private final String mPassword;

UserLoginTask(String email, String password) {
    mEmail = email;
    mPassword = password;
}

@Override
protected Boolean doInBackground(Void... params) {
    // TODO: attempt authentication against a network service.

    try {
        // Simulate network access.
        Thread.sleep(2000);
    } catch (InterruptedException e) {
        return false;
    }

    for (String credential : DUMMY_CREDENTIALS) {
        String[] pieces = credential.split(":");
        if (pieces[0].equals(mEmail)) {
            // Account exists, return true if the password matches.
            return pieces[1].equals(mPassword);
        }
    }

    // TODO: register the new account here.
    return true;
}
</code></pre>

<p>}
```</p>

<p>さて、いかがだったでしょうか？<br/>
レイアウトはまだしも、オートコンプリートの実装まで必要な場合は、自作するよりも、Android Studioでデフォルト実装してくれる<code>LoginActivity</code>の方が工数省略ができそうですよね！
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
