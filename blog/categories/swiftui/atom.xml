<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swiftui | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swiftui/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2020-11-01T14:32:02+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwiftUIの基礎を理解しよう！(1)〜簡単な装飾とボタンアクション〜]]></title>
    <link href="http://grandbig.github.io/blog/2020/02/22/swiftui-1/"/>
    <updated>2020-02-22T17:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2020/02/22/swiftui-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、本日はXcode11から新規似追加された <code>SwiftUI</code> によるiOSアプリ開発について勉強していきたいと思います。</p>

<p>筆者がぱっと見る限り、 <code>SwiftUI</code> は、</p>

<ul>
<li>ホットリロードによる手動ビルドの手間の改善</li>
<li><code>xib</code> や <code>storyboard</code> によるUI実装のレビューの難しさの解消</li>
</ul>


<p>に一役買っていると感じました。</p>

<p>また、 <code>SwiftUI</code> での書き方自体は、<br/>
これまでのiOSアプリの書き方に慣れている人にとっては、やはりそれなりの準備期間は必要になりそうです。<br/>
( <code>RxSwift</code> 使いの方々にとっては比較的とっかかりやすいという話もあります。 )</p>

<p>ということもあり、<br/>
実際の業務にて <code>SwiftUI</code> を利用するシーンはまだそこまで増えることはないかもしれませんが、<br/>
iOSアプリ開発の実装方法の幅を増やすに越したことはないでしょう。</p>

<p>では、少しずつ <code>SwiftUI</code> について勉強していきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Hello World!</h3>

<p>さて、まずは新規に <code>SwiftUI</code> プロジェクトを作成した場合、</p>

<p>```objective-c
// ContentView.swift
import SwiftUI</p>

<p>struct ContentView: View {</p>

<pre><code>var body: some View {
    Text("Hello, World!")
}
</code></pre>

<p>}</p>

<p>struct ContentView_Previews: PreviewProvider {</p>

<pre><code>static var previews: some View {
    ContentView()
}
</code></pre>

<p>}
```</p>

<p>といった形で <code>Hello World!</code> プロジェクトが作成されます。</p>

<p>シミュレータを起動することなく、ホットリロードしながら開発するには、<br/>
<code>Resume</code> ボタンをクリックします。</p>

<p><img src="/images/swiftui-1_1.png" alt="ホットリロードによる開発のためにResumeを実行する" /></p>

<p>その結果、以下のように、あたかもシミュレータが起動したかのような状態で開発を進めることができます。</p>

<p><img src="/images/swiftui-1_2.png" alt="ホットリロード状態での開発" /></p>

<h3>UIの作成方法</h3>

<p>具体的に <code>SwiftUI</code> でどのようにUIを作成するのでしょうか。</p>

<p>慣れれば、コードベースで全て書き上げることができると思いますが、<br/>
慣れないうちは、GUIと併用して実装するのが良いかと思います。</p>

<h4>bodyプロパティ</h4>

<p><code>SwiftUI</code> で実装する上で最も基本的かつ重要なことは、 <code>body</code> プロパティです。<br/>
<code>body</code> プロパティは 計算型の <code>View</code> 型プロパティです。<br/>
この <code>body</code> に各種パーツを設定した <code>View</code> をセットすることでUIを表現します。</p>

<p>言い換えると、『 <code>body</code> には様々なパーツを包括した1つの <code>View</code> をセットする』ということです。</p>

<p>例えば、</p>

<p>```objective-c
struct ContentView: View {</p>

<pre><code>var body: some View {
    Text("hoge")
    Text("fuga")
}
</code></pre>

<p>}
```</p>

<p>といったことはできず、</p>

<p>```objective-c
struct ContentView: View {</p>

<pre><code>var body: some View {
    VStack {
      Text("hoge")
      Text("fuga")
    }
}
</code></pre>

<p>}
```</p>

<p>のように <code>VStack</code> , <code>HStack</code> , <code>Group</code> など <code>View</code> を包括するパーツを利用してまとめる必要があります。</p>

<p>先程記載した通り、コードベースで直接 <code>VStack</code> で囲っても良いですし、<br/>
慣れないうちは <code>Command</code> キーを押しながら <code>Text</code> をクリックしメニューを表示させます。</p>

<p><img src="/images/swiftui-1_3.png" alt="VStackなどを追加するためのメニュー" /></p>

<p>ここから <code>Embed in VStack</code> を選択すれば、コードに <code>VStack</code> を挿入してくれます。</p>

<h4>Textの装飾</h4>

<p>続いて、パーツの装飾方法について見ていきます。<br/>
今回は最もシンプルな例として、 <code>Text</code> を扱います。</p>

<p>GUIから編集する方法はシンプルで、</p>

<ol>
<li>コード上で対象パーツにカーソルをあわせる</li>
<li>プレビュー上で対象パーツを選択する</li>
</ol>


<p>のどちらかを実行することで、右メニューで編集が可能になります。</p>

<p><img src="/images/swiftui-1_4.png" alt="右メニューでTextの装飾" /></p>

<p>右メニューから、</p>

<ul>
<li>Textの文言</li>
<li>フォントの各種設定</li>
<li>Padding</li>
<li>Frame (Width / Height)</li>
</ul>


<p>がデフォルトで用意されており変更が可能です。</p>

<p>また、 <code>Add Modifier</code> から多種多様なプロパティ設定を追加することができます。<br/>
(単純な装飾に限らないようですが。。。)</p>

<p><img src="/images/swiftui-1_5.png" alt="Textに各種プロパティを設定" /></p>

<p>因みに、GUIから各種設定を追加すると、<br/>
<code>.foregroundColor(Color.blue)</code> のように省略なしの表記でコードに挿入される場合がありますが、<br/>
<code>.foregroundColor(.blue)</code> とすることも、もちろん可能です。</p>

<p>```objective-c
// こんな感じで省略表記は可能です。
Text(&ldquo;Hello, World!&rdquo;)</p>

<pre><code>.font(.largeTitle)
.fontWeight(.heavy)
.foregroundColor(.blue)
.padding(.all, 20.0)
.background(.black)
</code></pre>

<p>```</p>

<h4>Buttonアクション</h4>

<p>最後にボタンをタップシた際のアクションの実装について簡単に触れておきましょう。<br/>
今回は、サンプルとして、「ボタンをタップした際にアラートを表示する」ことを試してみます。</p>

<p>実装は次の通りです。</p>

<p>```objective-c
struct ContentView: View {</p>

<pre><code>/// アラートの表示フラグ
@State private var isShown = true

var body: some View {
    VStack(spacing: 20.0) {
        Text("Hello, World!")
        Button(action: {
            // ボタンをタップすると、表示に切り替え
            self.isShown = true
        }) {
            Text("Button")
        }
        // isPresentedがtrueになった場合にアラートを表示する
        .alert(isPresented: $isShown) {
            Alert(title: Text("Tapped Button"))
        }
    }
}
</code></pre>

<p>}
```</p>

<p>冒頭で <code>@State</code> 属性を用いて <code>isShown</code> フラグを定義することで、<br/>
<code>View</code> 内で扱うことが可能となり、そのプロパティの状態に従って描画を実行できるようになります。</p>

<p>ここでは、ボタンタップ時に発火される <code>Button(action: { ... })</code> で、<br/>
<code>isShown</code> フラグを切り替えます。<br/>
そして後続の <code>alert</code> で <code>isPresented</code> に <code>isShown</code> フラグを判定として利用することでアラートを表示します。</p>

<h3>まとめ</h3>

<p>さて、まずは、ほんの少しの表面だけ <code>SwiftUI</code> に触れてみました。<br/>
まだまだ複雑なアプリを開発するには練習が全然足りないため、継続して学びつつブログに書き起こせていければと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
