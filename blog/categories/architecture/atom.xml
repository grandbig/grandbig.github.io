<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-10-03T22:13:03+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初心者だけしゃない！『iOSアプリ設計パターン入門』へのススメ]]></title>
    <link href="http://grandbig.github.io/blog/2019/02/11/ios-architecture-impression/"/>
    <updated>2019-02-11T15:28:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/02/11/ios-architecture-impression</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は、<a href="https://peaks.cc/iOS_architecture">iOSアプリ設計パターン入門</a>という書籍を紹介したいと思います。</p>

<div class="peaks_widget" style="overflow:hidden; padding:20px; border:2px solid #ccc;"><div class="peaks_widget__image" style="float:left; margin-right:15px; line-height:0;"><a target="_blank" id="purchase" href="https://peaks.cc/grand_big/iOS_architecture"><img alt="iOSアプリ設計パターン入門" style="border:none; max-width:140px;" src="https://s3-ap-northeast-1.amazonaws.com/peaks-images/ios_architecture_project_cover_alpha.png"></a></div><div class="peaks_widget__info"><p style="margin:0 0 3px 0; font-size:110%; font-weight:bold;"><a target="_blank" id="purchase" href="http://peaks.cc/grand_big/iOS_architecture">iOSアプリ設計パターン入門</a></p><ul style="margin:0; padding:0;">
<li style="font-size:90%; list-style:none;"><span>著者：</span>
<span>関 義隆,</span><span>史 翔新,</span><span>田中 賢治,</span><span>松館 大輝,</span><span>鈴木 大貴,</span><span>杉上 洋平,</span><span>加藤 寛人,</span></li>
<li style="font-size:90%; list-style:none;">製本版,電子版</li>
<li style="font-size:90%; list-style:none;"><a target="_blank" id="purchase" style="text-decoration:underline; color:#1DA1F2;" href="http://peaks.cc/grand_big/iOS_architecture">PEAKSで購入する</a></li></ul></div></div>


<p></p>

<p>こちらの書籍は<a href="https://peaks.cc/">PEAKS</a>というクラウドファンディングの技術書版サービス内で成立したプロジェクトから生み出されたものです。</p>

<p>以前、<a href="https://peaks.cc/books/architecture_patterns">Android アプリ設計パターン入門</a>という書籍が執筆されていたのですが、<br/>
個人的には『iOS版もあれば絶対売れるのに&hellip;』と思っていました。<br/>
その後、ふとPEAKSのサイトを見た時に、待ちに待った <code>iOS版</code> が執筆のための応援を募っていることに気づき、その場で応援を即決したことを昨日のように覚えています。</p>

<p>そしてリリースされた書籍を手に取り読み込んでいくうちに、<br/>
予想通りの良書であったと再認識しました。<br/>
そんな想いを少しでも共有したいと思い、本記事を書いていこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>対象読者について</h3>

<p>PEAKSのページを見ると、対象読者は下記のように記されています。</p>

<p><code>
◆ アプリをどんなアーキテクチャで作るか迷っている方
◆ ViewController, ViewModelがすぐに肥大してしまう方
◆ 今後もメンテナンスし続けるアプリを作る方
◆ アーキテクチャ変遷の歴史を知りたい方
◆ そもそも設計って何？という方
</code></p>

<p>書籍のタイトルに『入門』というワードが入っているため、初心者向けのように思われるかもしれませんが、<br/>
上記の対象者を見て頂くとわかる通り、所謂 <code>Tech Lead</code> 人材にとっても役立つ書籍と言えるかと思います。</p>

<h3>内容について</h3>

<p>では、実際にどのような内容が書かれているのでしょうか。<br/>
まずは目次から見ていきましょう。</p>

<h4>目次</h4>

<p>```
第Ⅰ部：設計を知る
 ├── 第１章：設計するということ
 ├── 第２章：設計にパターンを適用する前に
 ├── 第３章：Swiftらしく設計する
 └── 第４章：アーキテクチャのパターンを鳥瞰する
第Ⅱ部：iOSアプリのための設計パターン
 ├── 第５章：MVC
 ├── 第６章：MVP
 ├── 第７章：MVVM
 ├── 第８章：Flux
 ├── 第９章：Redux
 ├── 第１０章：Clean Architecture
 ├── 第１１章：アプリの起動経路 &ndash; Application Coordinator の導入
 ├── 第１２章：画面遷移のパターン &ndash; Router の導入
 └── 第１３章：第2部まとめ &ndash; アーキテクチャの選定基準
 第Ⅲ部：設計をサービスに導入する
 ├── 第１４章：Flux の導入例
 └── 第１５章：Redux の導入例 &ndash; 大規模アプリケーションに Redux を導入する</p>

<p> ※細部は省略
```</p>

<p>続いて筆者が思う各部それぞれのポイントについて紹介します。</p>

<h4>第Ⅰ部：設計を知る</h4>

<p>第Ⅰ部は、</p>

<ol>
<li>「設計とは何か？/なぜ設計をするのか？」の説明</li>
<li>設計をする上で知っておくべき&amp;身につけておくべき知識</li>
<li>設計原則をSwiftでどう実現させるのか</li>
<li>アーキテクチャの変遷(iOSならではの話を含む)</li>
</ol>


<p>などについて語られています。<br/>
1や2, 4に関しては、iOSに閉じない話も含まれているため、アーキテクチャ自体の読み物としても面白いと思います。</p>

<p>3で記載した通り、具体的なコードベースで設計原理のSwiftでの実現手法が書かれているため、<br/>
設計本でありがちな思想の提示に留まらないところに本書籍の価値があると感じました。</p>

<p>要は、『 <strong>言いたいことはわかるけど、どう書けば良いの？</strong> 』という読者の問いに答えられる書籍になっているということです。</p>

<h4>第Ⅱ部：iOSアプリのための設計パターン</h4>

<p>第Ⅱ部は、</p>

<ol>
<li>各種設計パターンの説明と具体例の提示</li>
<li>画面遷移の複雑さをどう解決するかの紹介</li>
<li>アーキテクチャを選定する難しさ</li>
</ol>


<p>などについて語られています。</p>

<p>1にある通り、概念の図式はもちろんのこと、具体的にコードを用いて説明されているため、<br/>
どんなアーキテクチャがあるのか知らないという方でも理解が進むように感じられます。</p>

<p>「書籍で読まずとも、ネットでググれば大抵理解できるのでは？」と思われる方もいるかもしれません。<br/>
その意見に対する見解としては、<br/>
『 <strong>各種アーキテクチャのスタンダードな理解/共通理解を持つための拠り所としての価値</strong> 』<br/>
だと思っています。</p>

<p>つまり、<br/>
ネット上には、各種アーキテクチャを説明する記事が多数見つかりますが、<br/>
物によってはオレオレ要素が含まれているため、<br/>
記事によって差異が見られ、『何が正しいの？』と思ってしまうことがあるということです。</p>

<p>また、チーム開発をする際に、人によって信じる依代が異なると、<br/>
コミュニケーションコストが増大する可能性もあります。</p>

<p>この書籍が必ずしもアーキテクチャ選定時の拠り所にすべきとは言いませんが、<br/>
1つの選択肢として与えられることは一読者として非常にありがたいと感じています。</p>

<p>2に関しては、ネイティブアプリ特有の課題に突っ込んだ内容となっています。<br/>
プロジェクトアサイン時に、キャッチアップのためソースコードを読むと思うのですが、<br/>
画面遷移処理がキレイにまとめられているとそれだけで立ち上がりコストがぐっと楽になると思います。</p>

<p>また、各種アーキテクチャでアプリ構築を始めたところ、<br/>
「画面遷移処理はどうしよう？」と思うこともあったりするので、ありがたいナレッジの共有だと感じました。</p>

<p>そして非常に共感したのが、3のアーキテクチャ選定に関する話です。<br/>
『 <strong>モダン開発に対する魅力がアーキテクチャの必要可否に勝って選定されることが本当に正しいのか？</strong> 』
ということを考えるのに良い内容だと感じています。</p>

<p>個人的にも、「流行りこそ正義」みたいな考え方が先行して失敗してしまった苦い思い出があるので、ぜひ読んで頂きたい章です。<br/>
(ホント、なかなか難しいんですよね&hellip;。プロダクトやチームにとってベターなアーキテクチャ選定って&hellip;)</p>

<h4>第Ⅲ部：設計をサービスに導入する</h4>

<p>第Ⅲ部は、</p>

<ol>
<li><code>Flux</code> や <code>Redux</code> を実開発で利用するための追加説明</li>
<li>開発だけでなく、テストに目を向けた説明</li>
</ol>


<p>などについて語られています。</p>

<p>入門系の技術書籍を読んだ後に思いがちな<br/>
『基本はわかったけど、応用に生かせない』というもどかしさ<br/>
を読者が埋めやすくするようなサポートだと感じています。</p>

<p><code>Flux</code> と <code>Redux</code> の2パターンに限った話ではありますが、<br/>
エラーハンドリング/テスト/DIなどの汎用的な内容も含まれているため、<br/>
一読の価値があると思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
個人的には、iOS関連の書籍に持続可能性を持たせることは非常に難しいと思っていたため、<br/>
本書に出会った時はとても感動しました。<br/>
今この時だけでなく、長期に渡って一助となる可能性を感じることができました。<br/>
これから繰り返し読み込んで理解を深めたいと思いますし、実業務に活かせるポイントを多分に含んでいると感じています。</p>

<p>とは言え、百聞は一見に如かずということで、実際に一読を考えてみてはいかがでしょうか？</p>

<p>と言ったところで本日はここまで。</p>

<div class="peaks_widget" style="overflow:hidden; padding:20px; border:2px solid #ccc;"><div class="peaks_widget__image" style="float:left; margin-right:15px; line-height:0;"><a target="_blank" id="purchase" href="https://peaks.cc/grand_big/iOS_architecture"><img alt="iOSアプリ設計パターン入門" style="border:none; max-width:140px;" src="https://s3-ap-northeast-1.amazonaws.com/peaks-images/ios_architecture_project_cover_alpha.png"></a></div><div class="peaks_widget__info"><p style="margin:0 0 3px 0; font-size:110%; font-weight:bold;"><a target="_blank" id="purchase" href="http://peaks.cc/grand_big/iOS_architecture">iOSアプリ設計パターン入門</a></p><ul style="margin:0; padding:0;">
<li style="font-size:90%; list-style:none;"><span>著者：</span>
<span>関 義隆,</span><span>史 翔新,</span><span>田中 賢治,</span><span>松館 大輝,</span><span>鈴木 大貴,</span><span>杉上 洋平,</span><span>加藤 寛人,</span></li>
<li style="font-size:90%; list-style:none;">製本版,電子版</li>
<li style="font-size:90%; list-style:none;"><a target="_blank" id="purchase" style="text-decoration:underline; color:#1DA1F2;" href="http://peaks.cc/grand_big/iOS_architecture">PEAKSで購入する</a></li></ul></div></div>


<p></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アーキテクチャの選定ポエム〜選定って難しい〜]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/22/team-develop/"/>
    <updated>2018-12-22T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/22/team-develop</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは<a href="https://qiita.com/advent-calendar/2018/poem">技術的ポエム Advent Calendar 2018</a>の22日目の記事です。<br/>
今回はここ最近、感じている <strong>『アーキテクチャの選定の難しさ』</strong> について書いていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アーキテクチャ選定について</h3>

<p>新規プロダクトの開発をする時に、当然、アーキテクチャを選定する必要があります。</p>

<p>では、アーキテクチャはどのように選定すべきなのでしょうか？<br/>
筆者が振り返って今感じる、選定時に考えるべきポイントを紹介したいと思います。</p>

<p>個人的に大事だと思うポイントは下記の4つになります。</p>

<p>【ポイント】</p>

<ul>
<li>プロダクトの規模感</li>
<li>単発的なサービスか長期的に育てていくサービスか</li>
<li>チームメンバーのスキルセットの把握とマインドの統一</li>
<li>QCDの優先順位</li>
</ul>


<p>順を追って1つずつ説明していきましょう。</p>

<h3>プロダクトの規模感</h3>

<p>例えば、画面数が3〜4個でロジックが簡易なアプリに <code>Clean Architecture</code> を適用するのが本当に正しいのかという話です。<br/>
とは言え、『 <code>Testability</code> を高めた設計にしたい』という想いや、『新しい設計思想で開発したい』という想いも技術者なら持ち合わせて然るべきです。</p>

<p>なので、筆者個人としては、他ポイントと合わせた上で、結論を出すべきだと思っています。</p>

<h3>単発的なサービスか長期的に育てていくサービスか</h3>

<p>CM用の一時的なサービスであれば、そこまで運用を考えすぎずに、技術者の裁量で決めてしまっても良いように思えます。<br/>
もちろん、CMを打つタイミングでサービスが完成していないといった状況は避けるべきではありますが&hellip;</p>

<p>一方で長期的に育てていくサービスはどうすべきなのでしょうか？</p>

<p>筆者個人としては、下記理由から、現状よりも一段階上のレベルの挑戦をするのが適切だと思っています。</p>

<p>① 現時点でレガシーすぎる技術を使うと、 <strong>今後の採用に響く</strong> 可能性がある<br/>
② <strong>早くサービスを世に出す</strong> ということも事業として大切である<br/>
③ 挑戦が <strong>メンバーやチームを成長させる</strong></p>

<p>①は技術者であれば割と受け入れやすい、わかりやすい理由ではないかと思います。<br/>
②は技術への興味が強すぎると忘れ去られがちなこともありますが、<br/>
これを軽視してしまうと『誰の/何のためにサービスを作っているのか』などのゴールを見失う可能性があると思っています。</p>

<p>とは言え、③の観点は非常に重要だと思っています。<br/>
ただし、既に開発プロセスや利用ツールや、何らかのルールなど多分に新しい挑戦が組み込まれている場合は注意が必要です。<br/>
なぜなら、それらも <strong>異なる側面での挑戦である</strong> ことに他ならないからです。</p>

<p>挑戦は楽しい一方で、それなりに負担でもあるため、一度に多くの挑戦を組み込むと、デスマーチに近づく可能性が高くなることでしょう。</p>

<h3>チームメンバーのスキルセットの把握とマインドの統一</h3>

<p>アーキテクチャを選考するにあたって切っても切り離せないのが、チームメンバーのスキルセットとマインドだと筆者は考えています。<br/>
どういうことかと言うと、</p>

<p>もし、納期の厳しいスピードを最優先とされるプロジェクトにアサインされたとして、<br/>
誰も利用経験のないアーキテクチャを採用するかどうか</p>

<p>ということです。</p>

<p>基本的には、 <strong>チームを先導できるレベルの技術者がいない状況</strong> では、ハードルが高いなと思っています。<br/>
ただし、『利用経験のない』とは必ずしも、業務での利用経験とイコールと捉えなくとも良い気はしています。</p>

<p>なぜなら、これを許容しないと、誰も新しいことに挑戦できない世の中になるからです。<br/>
(世の中から挑戦が一切なくなると、創造性もなくなり&hellip;みたいな話にもなるのかもしれませんね。)</p>

<p>そして開発を始める前に必ずやらなければならないことが『マインドの統一』です。<br/>
事前にこれをしておかないと、技術的な問題にぶつかった際に、チームが崩壊するリスクも備えています。</p>

<p>筆者としては、チームメンバーに方針を納得してもらった上で一緒に開発を進めたいと思っています。<br/>
最低でも <strong>『なぜ / 今回 / このアーキテクチャを採用するのか』</strong> は説明し、納得してもらう必要があるでしょう。<br/>
欲を言えば、チームで意見交換をした上でアーキテクチャを選定したくはありますが、<br/>
チームのスキルセットや外部要因に影響されることでもあるため、次のレベルかなと思ったりします。</p>

<h3>QCDの優先順位</h3>

<p>プロジェクトを進める上で業務上設定される <code>QCD</code> の優先順位が存在するかと思います。<br/>
これはアーキテクチャを選定する上で最も影響のあるポイントと言っても過言ではないかもしれません。</p>

<p>他のポイントを説明する際にも「納期の厳しいスピードを最優先とされる」といった形で引用しましたが、特に技術者が気にするポイントは<code>Delivery</code>(納期)ではないでしょうか。<br/>
基本的に、サービスを世に送り出すことにおいて、<code>Delivery</code>が軽視されることは稀かと思います。<br/>
大抵の場合、<code>Quality</code>(品質)と同等かそれ以上に優先度が設定されることがあります。</p>

<p>また、<code>Quality</code> > <code>Delivery</code> > <code>Cost</code> の順番で優先度を設定したプロジェクトだったとしても、<br/>
途中で <code>Quality</code> を優先するために <code>Delivery</code> を変更することは至難の業である場合が多いと思います。<br/>
(何のための優先順位決めなのかと議論になることもありますが、ここでは論点がずれるため触れないこととします。)</p>

<p>筆者も上記のような経験を何度かしてきました。<br/>
その結果、アーキテクチャを決める上で厳しくシビアに判定しなければいけないポイントだと思うようになりました。</p>

<p>つまり、誤解を恐れずに言えば、<br/>
圧倒的に <code>Delivery</code> が優先される現場においては、他のポイントを考えるまでもなくアーキテクチャが決まると言うことです。</p>

<p>しかしながら、この <code>Delivery</code> の <code>MUST</code> 性はもう少し分解することが可能です。</p>

<p>極端な例で言えば、<br/>
『毎年決まった時期にリリースしているサービス』で『特定の層のほとんどが認知して利用しているサービス』<br/>
と<br/>
『今回初めてリリースするため、リリース後に徐々に広告を増やしてアピールしていくサービス』<br/>
では、<code>Delivery</code> 最優先と設定されたとしても、遅れた場合に生じる企業へのダメージは明らかに異なるでしょう。</p>

<p>よって、 <code>Delivery</code> が優先度高であるとは言っても、 <strong>本当に最上なのか</strong> はきちんと判断すると良いかと思います。</p>

<h3>まとめ</h3>

<p>さて、今回は、筆者がアーキテクチャ選定する時に大事だと思う4つの観点について説明しました。<br/>
文章で書くのは簡単ですが、実践は相当に難しいと思います。<br/>
何が難しいかで言うと、多面的かつ複合的に考える必要がある上に経験に頼る部分も大きくなるからです。</p>

<p>筆者も正直、上記4点から最良のアーキテクチャ選定ができたなと思える経験はなかなかありません。<br/>
失敗の方が圧倒的に多いです。</p>

<p>それでも、アーキテクチャ選定は今後も逃れることのできない、技術者が考えなくてはならない事柄だと思います。<br/>
そして恐らく完璧な答えなどない世界なんだと思います。<br/>
でも、だからこそ、責任のある重要な仕事であり、やりがいのある仕事なのではないでしょうか。</p>

<p>筆者自身も今後の経験で考え方が変わる可能性も十分にありますし、<br/>
この記事が最良だとも思っていませんが、<br/>
自身がまたアーキテクチャ設計に関わる時に思い出したり、誰かの役に少しでも立つのであれば幸いかなと思います。</p>

<p>と言ったところで本日はここまで。<br/>
ポエムでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
