<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redux | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/redux/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-12-31T03:32:15+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSエンジニアが苦しんだReduxの基礎（１）]]></title>
    <link href="http://grandbig.github.io/blog/2016/12/31/redux-base-1/"/>
    <updated>2016-12-31T01:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/12/31/redux-base-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今年も残すところ1日となりましたね。<br/>
筆者にとって2016年は新しいことだらけの1年となりました。<br/>
技術的にもこれまで触ってこなかったものに挑戦する機会を得ることができました。<br/>
その1つは本日のお題である <strong>Redux</strong> です。<br/>
実は現在進行系で理解に苦しんでいる途中なので、休暇中に理解を促進する意味も込めて記事を書きたいと思います。</p>

<!-- more -->


<h3>Reduxは難しい！？</h3>

<p>ここ最近、iOSエンジニアとして活動してきた筆者にとって <strong>なぜReduxが難しいと感じたのか</strong> について語りたいと思います。<br/>
結論から言うと、 <strong>ReactとReduxを組み合わせた場合の実装から入ったため</strong> 難しく感じたのではないかと思っています。<br/>
具体的には、ReactとReduxの公式ページや様々な紹介ページを読むと必ず出てくる <strong>connect()</strong> がかなり難しいと感じました。</p>

<p>プロジェクトに参画するタイミングによっては悠長に勉強をしている場合ではないと思いますが、<br/>
まずは素のReduxを理解することが最も近道だと実体験として感じました。</p>

<p>では、素のReduxはどうやって学べば良いのでしょうか？<br/>
Reduxで検索をしてもほとんどの場合、Reactと一緒に使われている記事しか出てこないと思います。<br/>
答えは簡単です！<br/>
(当たり前ではあるのですが、)公式のExampleを勉強すれば良いのです。</p>

<h3>Counter Vanilla サンプルで学ぼう！</h3>

<p><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a>の先頭に書かれている <strong>Counter Vanilla</strong> を見ていきましょう。<br/>
ソースコードは下記のようになっています。<br/>
(少々、Reduxの原則と照らし合わせられるようにソースコードを改変しています。)</p>

<p>```javascript</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Redux basic example&lt;/title&gt;
&lt;script src="https://unpkg.com/redux@latest/dist/redux.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div&gt;
  &lt;p&gt;
    Clicked: &lt;span id="value"&gt;0&lt;/span&gt; times
    &lt;button id="increment"&gt;+&lt;/button&gt;
    &lt;button id="decrement"&gt;-&lt;/button&gt;
    &lt;button id="incrementIfOdd"&gt;Increment if odd&lt;/button&gt;
    &lt;button id="incrementAsync"&gt;Increment async&lt;/button&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
  const INCREMENT = { type: 'INCREMENT' };
  const DECREMENT = { type: 'DECREMENT' };

  function increment() {
    return INCREMENT;
  }
  function decrement() {
    return DECREMENT;
  }

  function counter(state, action) {
    if (typeof state === 'undefined') {
      return 0
    }

    switch (action.type) {
      case 'INCREMENT':
        return state + 1
      case 'DECREMENT':
        return state - 1
      default:
        return state
    }
  }

  var store = Redux.createStore(counter)
  var valueEl = document.getElementById('value')

  function render() {
    valueEl.innerHTML = store.getState().toString()
  }

  render()
  store.subscribe(render)

  document.getElementById('increment')
    .addEventListener('click', function () {
      store.dispatch(increment())
    })

  document.getElementById('decrement')
    .addEventListener('click', function () {
      store.dispatch(decrement())
    })

  document.getElementById('incrementIfOdd')
    .addEventListener('click', function () {
      if (store.getState() % 2 !== 0) {
        store.dispatch(increment())
      }
    })

  document.getElementById('incrementAsync')
    .addEventListener('click', function () {
      setTimeout(function () {
        store.dispatch(increment())
      }, 1000)
    })
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>ブラウザに表示される画面は下記のようになります。<br/>
<img src="/images/redux_base_1.png" alt="Counter Example画面" /></p>

<p>実装されている機能としては下記の4つになります。</p>

<ul>
<li>「+」ボタンを選択するとClick数が+1される</li>
<li>「-」ボタンを選択するとClick数が-1される</li>
<li>「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される</li>
<li>「Increment async」ボタンを選択すると1秒後にClick数が+1される</li>
</ul>


<p>これだけを見せられても実装内容がよくわからない(かもしれない)ですよね？<br/>
そこで1つ1つReduxの原則と照らし合わせつつ見ていきましょう。</p>

<h4>Actions</h4>

<p><code>Actions</code>とは</p>

<ul>
<li>何をするアクションなのかを表すオブジェクト</li>
<li><code>type</code>プロパティを必ず持つ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<p><code>javascript
const INCREMENT = { type: 'INCREMENT' }
const DECREMENT = { type: 'DECREMENT' }
</code></p>

<h4>Action Creators</h4>

<p><code>Action Creators</code>とは</p>

<ul>
<li><code>Action</code>を作成するメソッド</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。</p>

<p><code>javascript
function increment() {
  return INCREMENT
}
function decrement() {
  return DECREMENT
}
</code></p>

<h4>Reducers</h4>

<p><code>Reducers</code>とは</p>

<ul>
<li><code>Action</code>と<code>State</code>から新たな<code>State</code>を作成して返す</li>
<li>ポイントは<code>State</code>を更新するのではなく、 新しく作成した<code>State</code> を返すということ</li>
</ul>


<p>です。<br/>
Exampleでは、下記に当たります。<br/>
※Counter Exampleのため、<code>state</code>は <strong>カウント数</strong> を表します。</p>

<p>```javascript
function counter(state, action) {
  if (typeof state === &lsquo;undefined&rsquo;) {</p>

<pre><code>// 初期値は0として返却する
return 0
</code></pre>

<p>  }</p>

<p>  switch (action.type) {</p>

<pre><code>case 'INCREMENT':
  return state + 1
case 'DECREMENT':
  return state - 1
default:
  return state
</code></pre>

<p>  }
}
```</p>

<h4>Store</h4>

<p><code>Store</code>とは</p>

<ul>
<li>アプリ内で必ず1つの存在</li>
<li>アプリの状態を管理する</li>
<li><code>State</code>を更新するための<code>dispatch</code>を提供する

<ul>
<li>言い換えれば<code>dispatch(action)</code>をすることで<code>Store</code>に<code>State</code>の変更を知らせられる</li>
</ul>
</li>
<li><code>State</code>の状態を追えるように<code>subscribe</code>を提供する

<ul>
<li>言い換えれば<code>subscribe(listener)</code>をすることで<code>listener</code>は<code>getState</code>を通して<code>State</code>の状態を取得できる</li>
</ul>
</li>
</ul>


<p>です。<br/>
Exampleでは下記のように<code>store</code>を作成しています。</p>

<p><code>javascript
// Storeを作成するためのcreateStoreメソッドの第一引数にReducerを渡す
var store = Redux.createStore(counter)
</code></p>

<p>今回はCounter Exampleであるため、</p>

<ul>
<li>「+」ボタンを選択したら「+1」された結果が表示される</li>
<li>「-」ボタンを選択したら「-1」された結果が表示される</li>
</ul>


<p>ようになっています。<br/>
よって、「+ / -」ボタンをクリックしたタイミングで</p>

<ul>
<li>Storeに<code>state</code>の変更を知らせる</li>
<li><code>state</code>の変更を結果として描画に反映させる</li>
</ul>


<p>必要があります。<br/>
これはStore項目の冒頭で書いた<code>dispatch</code>と<code>listener</code>を利用することで達成できます。</p>

<p>まずは<code>dispatch</code>から見ていきましょう。</p>

<p>```javascript
// 「+」ボタンを選択した場合
document.getElementById(&lsquo;increment&rsquo;)
  .addEventListener(&lsquo;click&rsquo;, function () {</p>

<pre><code>store.dispatch(increment())
</code></pre>

<p>  })</p>

<p>// 「-」ボタンを選択した場合
document.getElementById(&lsquo;decrement&rsquo;)
  .addEventListener(&lsquo;click&rsquo;, function () {</p>

<pre><code>store.dispatch(decrement())
</code></pre>

<p>  })
```</p>

<p>上記のようにクリックしたタイミングで<code>store.dispatch</code>に<code>Action Creators</code>である<code>increment()</code>および<code>decrement()</code>で作成した<code>Actions</code>を渡しています。<br/>
こうすることで、『 <strong>Storeにstateの変更を知らせる</strong> 』ことができます。</p>

<p>次に<code>listener</code>から見ていきましょう。</p>

<p><code>javascript
// Click数を示すDOMの取得
var valueEl = document.getElementById('value')
// 最新のstateの状態をClick数に反映するメソッド
function render() {
  valueEl.innerHTML = store.getState().toString()
}
// 初期状態を表示するために実行
render()
// subscribeの第一引数にrenderメソッドを指定
store.subscribe(render)
</code></p>

<p>上記のように、<code>store.subscribe</code>に<code>render</code>メソッドを渡すことで、<code>dispatch</code>実行して<code>state</code>の状態が変化したときに、毎回<code>render</code>メソッドが実行されることになります。<br/>
こうすることで、『 <strong>stateの変更結果として描画に反映させる</strong> 』ことができます。<br/>
<code>subscribe</code>は<code>state</code>の状態を監視する役割を持っていることがわかると思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はReduxの本質を理解するために、あえてReactを利用するExampleは選択しませんでした。<br/>
「React&amp;Reduxが全然わからん！！」という方はゆっくりと時間をとってReduxからチャレンジしてみることをオススメします。<br/>
次回はReactとの組み合わせを見ていきたいと思います。</p>

<p>参考:</p>

<ul>
<li><a href="http://redux.js.org/docs/introduction/Examples.html">公式ReduxページのExample</a></li>
<li><a href="http://grandbig.github.io/blog/2016/12/06/reswift-2/">ReSwiftを勉強してみよう(2)</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
