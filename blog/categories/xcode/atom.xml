<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-07-15T17:32:31+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcodeの環境変数を有効に利用しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2019/07/15/xcode-env/"/>
    <updated>2019-07-15T16:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/07/15/xcode-env</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>iOSアプリを開発する中で避けて通れないのが <code>Xcode</code> 周りの扱いです。<br/>
とは言え、個人でのアプリ開発であれば、そこまで工夫せずともビルド待ち時間に困ったりすることはないかもしれません。<br/>
ですが、業務で扱うような大規模なアプリ開発となると、やはり様々な工夫が必要になることでしょう。</p>

<p>その中の一つに『 <code>Xcode</code> の環境変数を有効に利用すること』が上げられます。<br/>
今回はその『 <code>Xcode</code> の環境変数』に関するメモ書きを残しておこうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Xcodeプロジェクトの環境変数を調べる方法</h3>

<p><code>Xcode</code> の環境変数と一言で言っても、種類はかなりの数に上ります。<br/>
<a href="https://help.apple.com/xcode/mac/10.2/#/itcaec37c2a6">Xcode Help > Build settings reference</a>に一覧があるので、ざっと見てみるのも良いかと思います。<br/>
ただ、毎回、「あの環境変数はどんな名称だったっけ&hellip;？」という時にリファレンスを見るのも手間がかかります。<br/>
そこで、<code>Xcode</code> で用意されている、「環境変数を確認するためのコマンド」を積極的に利用しましょう。</p>

<p>使い方はシンプルで下記のようになります。</p>

<p><code>.xcodeproj</code> ファイルと同階層に移動して、以下コマンドを叩きます。</p>

<p><code>objective-c
$ xcodebuild -showBuildSettings
</code></p>

<p>すると、</p>

<p>```objective-c
Build settings for action build and target &lt;プロジェクト名>:</p>

<pre><code>ACTION = build
AD_HOC_CODE_SIGNING_ALLOWED = NO
ALTERNATE_GROUP = staff
...
YACC = yacc
arch = arm64
diagnostic_message_length = 199
variant = normal
</code></pre>

<p>```</p>

<p>のように結果が表示されます。<br/>
思ったよりも大量に出力されるため、初めから探したいものが決まっている場合は <code>grep</code> コマンドを利用して出力させて見るのが良いでしょう。</p>

<p>例えば、</p>

<p><code>objective-c
$ xcodebuild -showBuildSettings | grep "PODS"
</code></p>

<p>のような感じで&hellip;。</p>

<h3>Xcodeの環境変数の利用実践例</h3>

<p>環境変数の調べ方がわかったところで、実践例を紹介しておきたいと思います。</p>

<h4>環境変数の実践利用①</h4>

<p>例えば <code>SwiftLint</code> を利用して静的解析をかける場合、常に <code>SwiftLint</code> を実行する必要はありません。<br/>
手元での開発時や、社内展開時のCI/CDツールにかける時に実行する場合が多くなるかと思います。</p>

<p>そんな時には、 <code>Build Phases</code> で下記のように設定することでしょう。</p>

<p><code>objective-c
if ["${CONFIGURATION}" = "Debug"] &amp;&amp; which swiftlint &gt;/dev/null; then
swiftlint
else
echo "Configuration is not Debug or SwiftLint does not exist, download from https://github.com/realm/SwiftLint"
fi
</code></p>

<h4>環境変数の実践利用②</h4>

<p>例えば、 <code>Carthage</code> でOSSライブラリを管理している場合、 <code>Debug</code> 時と <code>Release</code> 時で利用する/利用しないライブラリが別れていることがあるかもしれません。 <br/>
その場合は、 <code>Build Phases</code> の <code>Input File Lists</code> と <code>Output File Lists</code> で指定するファイルのパスを工夫する必要があります。</p>

<p>まずは下記のように、 <code>Input File Lists</code> と <code>Output File Lists</code> 用のファイルを格納する構造をプロジェクト内に作ります。</p>

<p><code>objective-c
SampleApp
├── SampleApp
│    ├── inputXcfilelist
│    │    ├── SampleApp-Debug.xcfilelist
│    │    └── SampleApp-Release.xcfilelist
│    ├── outputXcfilelist
│    │    ├── SampleApp-Debug.xcfilelist
│    │    └── SampleApp-Release.xcfilelist
│    ...
├── SampleAppTests
├── SampleAppUITests
...
</code></p>

<p>続いて、 <code>Carthage</code> 利用時に指定する <code>Build Phases &gt; Run Script</code> 内の <code>Input File Lists</code> と <code>Output File Lists</code> にそれぞれパスを指定するだけです。</p>

<p>```objective-c
// Input File Lists Path
${SRCROOT}/SampleApp/inputXcfilelist/SampleApp-${CONFIGURATION}.xcfilelist</p>

<p>// Output File Lists Path
${SRCROOT}/SampleApp/outputXcfilelist/SampleApp-${CONFIGURATION}.xcfilelist
```</p>

<p>因みに、 <code>Input File Lists</code> や <code>Output File Lists</code> を使わずとも、実践例①と同様にシェルスクリプト内で <code>${CONFIGURATION}</code> を利用する方法もあるのでは？と思われるかもしれません。<br/>
確かに、その方法でも問題なく成立する場合もありますが、</p>

<ul>
<li>変更時にファイルの <code>diff</code> として確認ができるので、レビューしやすい</li>
<li><code>Xcode10</code> からの新ビルドシステムが厳密なビルドを実行するため、エラーが出るパターンがある</li>
</ul>


<p>ことから <code>Input File Lists</code> や <code>Output File Lists</code> を利用することを筆者はおすすめしたいと思います。<br/>
(後者でうまくいかないパターンは、 <code>CONFIGURATION</code> を変えると、複数のターゲット間で <code>Input/Output</code> するモジュールが入れ替わる場合などです。 )</p>

<h3>まとめ</h3>

<p>さて、最近、 <code>Xcode</code> の環境変数周りを触る機会が久しぶりにあったためメモ書き程度に書き記しました。<br/>
忘れがちなので心に留めておきたいですね。<br/>
と言うことで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発時に注意したい色空間(Generic RGB vs sRGB)]]></title>
    <link href="http://grandbig.github.io/blog/2019/03/16/srgb/"/>
    <updated>2019-03-16T19:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/03/16/srgb</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、iOSアプリ開発をしている際に、</p>

<p><strong>デザイナーさんが指定している色をXcode上で指定しているにも関わらず、</strong><br/>
<strong>iPhoneで見た時に、デザイナーさんが指定した色になっていない</strong></p>

<p>といった話が出ました。<br/>
結論から言えば、</p>

<p>デザイナーさんが利用しているツール(PhotoshopやXdなど)と、<br/>
エンジニアが利用しているXcodeとで、<br/>
指定している <strong>色空間が異なる</strong> ことが原因でした。</p>

<p>筆者は過去に同様の問題に直面した経験があったため、すぐに理由の予測がついたのですが、<br/>
ふと『元々こういった話って開発時に出てきていただろうか？』と疑問に思いました。</p>

<p>そこでXcodeでの色空間について触りを見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Xcodeの色空間について</h3>

<p>Xcodeでは様々な方法で色を定義・設定することができます。<br/>
しかしながら筆者が見る限り、デフォルトの色空間の指定は、色の設定方法次第で異なっているようです。</p>

<p>では、1つずつ見ていきましょう。<br/>
※ Xcodeのバージョンは <code>Version 10.1 (10B61)</code> です。</p>

<h4>Xcode Interface Builderの場合</h4>

<p>Interface Builder(以降、IB)の場合を見ていきます。<br/>
IBでは色空間がデフォルトで <code>Generic RGB</code> が指定されています。</p>

<p><img src="/images/srgb_1.png" alt="IBで色を指定する場合、デフォルト色空間はGeneric RGB" /></p>

<p>デザイナーとエンジニア間での色の違いが問題に上がる際は、だいたいIB周りで発生していることが多いと思います。</p>

<h4>コードで指定する場合</h4>

<p>コードでの指定方法は幾つかありますので、その一部を例に見ていきましょう。</p>

<h5>UIColorを初期化して設定する場合</h5>

<p>まずは、 <code>UIColor</code> を初期化して設定する場合です。</p>

<p>```objective-c
// sRGBで指定する場合
label.backgroundColor = UIColor(red: 245/255.0, green: 84/255.0, blue: 45/255.0, alpha: 1.0)</p>

<p>//Display P3で指定する場合
label.backgroundColor = UIColor(displayP3Red: 245/255.0, green: 84/255.0, blue: 45/255.0, alpha: 1.0)
```</p>

<p><code>Display P3</code> の場合は引数名の <code>displayP3Red</code> から自明なのでわかりやすいかと思います。<br/>
注意したいのは、前者の初期化方法です。こちらはメソッド名からはわからないものの、実際には <code>sRGB</code> になっています。</p>

<h5>Color Literalを利用して設定する場合</h5>

<p>Xcode8から <code>Color Literal</code> が導入され、コード上で色がある程度わかるようになりました。<br/>
※「ある程度わかる」 = 「色の傾向はわかるものの、肉眼では色空間の指定まではわからない」 ということです。</p>

<p><code>Color Literal</code> でも、もちろん色空間を設定できます。<br/>
実際に色を指定する際に見てみると、デフォルトで <code>sRGB</code> が指定されていることがわかります。</p>

<p><img src="/images/srgb_2.png" alt="Color Literalで指定する場合、デフォルト色空間はsRGB" /></p>

<h4>AssetCatalogのColorSetで設定する場合</h4>

<p>Xcode9から <code>AssetCatalog</code> から <code>ColorSet</code> を定義できるようになりました。</p>

<p>設定方法は簡単で、Xcodeプロジェクト内の <code>Assets.xcassets</code> を開きます。<br/>
そして <code>New Color Set</code> を追加すれば良いだけです。</p>

<p><code>AssetCatalog</code> で <code>ColorSet</code> を設定する際には、下図のようにデフォルトで <code>sRGB</code> が色空間として指定されています。</p>

<p><img src="/images/srgb_3.png" alt="AssetCatalogで指定する場合、デフォルト色空間はsRGB" /></p>

<p>先程、IBでは色空間の指定に注意しなければならないと書きましたが、<br/>
もしも、色のテーマが決まっているようであれば、<br/>
<code>AssetCatalog</code> で <code>ColorSet</code> を定義し、それをIBで利用すれば、<br/>
毎回個別に <code>sRGB</code> を指定するといったことも起こらなくなるでしょう。</p>

<p><code>AssetCatalog</code> で <code>ColorSet</code> を定義してしまえば、コード上でもその名称の色を呼び出すだけなので、IBと定義がずれる可能性も低くなることでしょう。</p>

<h3>なぜsRGBが多く利用されるのか</h3>

<p>ところで、なぜ <code>sRGB</code> が多く利用されているのでしょうか。</p>

<p>そもそも <code>sRGB</code> とは、ヒューレット・パッカード社とマイクロソフト社が提案し、<br/>
IEC（国際電気標準会議）で審議され、1991年にRGB色空間の国際規格として標準化されました。</p>

<p>これによって様々な製品間のやりとりで個別に色空間の定義が異なれば、<br/>
結果的に思っていたものと異なる色の製品ができ上がるという問題を解決するに至ったようですね。</p>

<p>そういう経緯もあり、今では <code>sRGB</code> はパソコンやデジカメなど多くの製品で利用されています。</p>

<p>よって、デザイナーさんがデザインするときには <code>sRGB</code> を利用していることが多いのでしょう。<br/>
※場合によっては <code>Adobe RGB</code> でデザインされている可能性もあるため、基本的には開発時に色空間の設定を認識合わせすると良いでしょう。</p>

<h3>P3ディスプレイについて</h3>

<p>おまけですが、<code>P3</code>ディスプレイについても触れておきたいと思います。<br/>
<code>P3</code>ディスプレイとは <code>sRGB</code> を超える色域である <code>DCI-P3</code> という色空間で表現された色を表現できるディスプレイです。</p>

<p>iPhoneではiPhone7以降が対応しており、iPhoneXでは更に上級なOLEDディスプレイが採用されています。<br/>
もちろんiPhoneは従来の <code>sRGB</code> も対応していますし、 <code>DCI-P3</code> にも対応しています。<br/>
そしてその色空間の切り替えは必要性に応じてiOSが自動で行なってくれるため、<br/>
作り手側が本来見せたい意図を伝えられる可能性が高いとも言えるかもしれません。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
一言で『色の指定』と言っても、注意しなければいけないことが多々ありますよね。</p>

<p>以上をまとめます。</p>

<ul>
<li>エンジニアとデザイナーで開発前に色空間の認識を合わせることは重要</li>
<li>IBではデフォルト <code>Generic RGB</code> で、他はデフォルト <code>sRGB</code> で指定されている</li>
<li><code>AssetCatalog</code> で <code>ColorSet</code> を定義することでプロジェクト内での色空間の齟齬を少なくできる</li>
</ul>


<p>では最後にそれぞれの色指定方法を比較した画面を掲載しておきたいと思います。</p>

<p><img src="/images/srgb_4.png" alt="各色指定方法を比較した画面" /></p>

<p>すべて <code>RGB</code> に指定した値は同じですが、色空間によって微妙に色が異なっていることがわかると思います。<br/>
※色の指定方法が異なるだけで色空間が同じものは、もちろん同じ色になっています。</p>

<p>ということで本日はここまで。</p>

<p>参考URL</p>

<ul>
<li><a href="https://omoide-photo.jp/blog/srgb/#sRGB1999">sRGBとは、現在カメラやモニター等で共通で使われている標準色空間</a></li>
<li><a href="https://dev.classmethod.jp/smartphone/iphone/xcode-9-asset-catalogs-support-named-colors/">Asset Catalogで色を定義できるようになりました</a></li>
<li><a href="http://appleengine.hatenablog.com/entry/2016/10/24/182852">Apple Engine iPhone と Display P3</a></li>
<li><a href="https://dev.classmethod.jp/smartphone/iphone/xcode-8-image-and-color-literals/">Xcode8の新機能！画像と色のリテラル、画像のコード補完</a></li>
<li><a href="https://www.gizmodo.jp/2017/12/why-every-smartphone-screen-looks-different.html">スマホのディスプレイの色味が端末によって違う理由</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeが正常かチェックしましょう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/23/check-xcode/"/>
    <updated>2015-09-23T13:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/23/check-xcode</id>
    <content type="html"><![CDATA[<h4>今、話題のXcodeGhostってなに！？</h4>

<p>中国で出回っている改ざんされたXcodeのことだそうです。<br/>
App Storeから一般公開向けのXcodeをダウンロードしたり、Apple DeveloperサイトからDeveloper向けの最新版をダウンロードするのであれば、特に何の問題もないでしょう。<br/>
『いや、実はどこどこから&hellip;』なんて方がいたら、早速チェックしてみましょう。</p>

<p>ユーザとして気をつけるのは、怪しいアプリはもちろんのこと、話題として上っているアプリはきちんと対応が完了しているのか確認してみるくらいでしょうか。<br/>
Appleも感染アプリの削除に全力で取り組んでいるでしょうし、様子を見るしかなさそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Xcodeの正常チェックの方法</h4>

<p>さて、本日、Appleから以下の内容のメールが飛んできました。</p>

<p>We recently removed apps from the App Store that were built with a counterfeit version of Xcode which had the potential to cause harm to customers. You should always download Xcode directly from the Mac App Store, or from the Apple Developer website, and leave Gatekeeper enabled on all your systems to protect against tampered software.</p>

<p>When you download Xcode from the Mac App Store, OS X automatically checks the code signature for Xcode and validates that it is code signed by Apple. When you download Xcode from the Apple Developer website, the code signature is also automatically checked and validated by default as long as you have not disabled Gatekeeper.</p>

<p>Whether you downloaded Xcode from Apple or received Xcode from another source, such as a USB or Thunderbolt disk, or over a local network, you can easily verify the integrity of your copy of Xcode. Learn more.</p>

<p>で、最後の <strong>Learn more</strong> をクリックすることで専用サイトで方法を教えてくれます。</p>

<p>コマンドは下記です。<br/>
<code>spctl --assess --verbose /Applications/Xcode.app</code></p>

<p>実行してから完了までに数分かかりますが、問題なければ、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Mac App Store
</code></p>

<p>もしくは、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Apple
</code></p>

<p>あるいは、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Apple System
</code></p>

<p>といった結果が得られるはずです。<br/>
App Storeからダウンロードしたか、AppleのDeveloperサイトからダウンロードしたかで異なります。</p>

<p>因みに、通常、正規のルートでダウンロードしてきた場合は、自動的にGatekeeperがチェックしているそうです。<br/>
意図的にGatekeeperをdisableにしていない限り。</p>

<p>Gatekeeperは『システム環境設定 > セキュリティとプライバシー > 一般 > ダウンロードしたアプリケーションの実行許可』から変更できるそうです。<br/>
それがGatekeeperとか意識したことなかったですけど&hellip;。<br/>
(ここで、すべてのアプリケーションを許可しているとGatekeeperがOFFだとか&hellip;。)</p>

<p>筆者は念のため、調べて問題ないことを確認しましたが、気になる方は試してみてはいかがでしょうか。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6で様々な画面サイズに対応しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/07/xcode6-preview/"/>
    <updated>2014-10-07T23:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/07/xcode6-preview</id>
    <content type="html"><![CDATA[<h3>Xcode6でAuto Layoutを使おう！</h3>

<p>昨今はiPhone5, iPhone6, iPhone6 PlusなどiOSアプリでも様々な画面サイズに対応する必要性が出てきました。<br/>
これまでは2画面の対応だけを考えていれば良かったのに、大きな変化ですよね？<br/>
では、この対応をどうすれば良いのかというと、『Auto Layoutを使いましょう』ってことです。</p>

<p>では早速説明していきましょう。<br/>
StoryBoard上で右下にある<strong>Auto Layout</strong>ボタンをクリックします。<br/>
<img src="/images/xcode6_autolayout1.png" alt="Auto Layout" /></p>

<!--more-->


<p>ここはXcode5と同じようなんですが、Xcode5と何やら様子が異なることに気づきます。<br/>
それは、<strong>左右のConstraintが0</strong>にも関わらず、StoryBoard上では<strong>左右に間隔があいています</strong>。<br/>
Xcode6で慣れれば良い話なのかもしれませんが、気になるのであれば、下記の箇所から変更できます。</p>

<p><img src="/images/xcode6_autolayout2.png" alt="Constraint Margin" /></p>

<p>左右のConstraintsを選択した状態で、上図の箇所を確認してみましょう。<br/>
Second Itemに<strong>Relative to margin</strong>が紐付けられています。このチェックを外しましょう！
すると、marginがなくなるので、Constraintが0だと下図のようになります。<br/>
<img src="/images/xcode6_autolayout3.png" alt="marginなし" /></p>

<p>ここで<strong>Constraintを10</strong>にするなど、あけたい間隔を設定しましょう。</p>

<p>さて、ここでポイントなのが、TextFieldにはWidthの設定をつけていないことです。<br/>
これにより、左右のConstraintが適用されるので各画面に対応できます。</p>

<p>本当に対応できているのか、シミュレータや実機で確認する前にプレビューを見てみましょう。<br/>
確認方法としては、<br/>
1: Xcode6右上の<strong>Show the Assistant editor</strong>をクリック<br/>
2: Manual, Automatic, Top Level Objects, Localization, Previewとあるので、<strong>Preview</strong>をクリック</p>

<p><img src="/images/xcode6_autolayout4.png" alt="Previewの確認方法" /></p>

<p>すると、4インチサイズのPreviewがデフォルトで表示されます。<br/>
<img src="/images/xcode6_autolayout5.png" alt="デフォルトのPreview画面" /></p>

<p>4.7インチや5.5インチなどを追加する場合は、Previewの左下にある<strong>+ボタン</strong>をクリックして、追加したいディスプレイサイズを選択します。<br/>
これにより、下図のように複数のディスプレイサイズでレイアウトを確認することができます。</p>

<p><img src="/images/xcode6_autolayout6.png" alt="複数画面" /></p>

<p>いかがでしたでしょうか？<br/>
これからはiPhone6, iPhone6 Plusにも最適化したアプリを開発する必要がありますし、たいへんですが、頑張って行きたいですね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6でSingle View Applicationにチャレンジ]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/"/>
    <updated>2014-09-20T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard</id>
    <content type="html"><![CDATA[<h3>Xcode6でプロジェクトを作成しよう</h3>

<p>さて、先日、一般ユーザ向けにXcode6のバージョンアップが解放されました。<br/>
それに合わせて、今回はXcode6の基本的な使い方を確認していきたいと思います。</p>

<p>それでは早速、Xcode6を起動してみましょう。<br/>
<img src="/images/xcode6_1.png" alt="Xcode6起動後の初期ウィンドウ" /></p>

<!--more-->


<p>さて、 <strong>Get started with a playground</strong> が先頭に来ている以外はあまり気になりませんね。<br/>
SwiftやPlaygroundの話は別の機会にということで、 <strong>Create a new Xcode project</strong> を選択してみましょう。</p>

<p>すると、次のようなウィンドウが表示されます。<br/>
<img src="/images/xcode6_2.png" alt="Xcode6でCreate a new Xcode projectを選択後に表示されるウィンドウ" /></p>

<p>筆者はここで、『あれ！？いつも使っていた <strong>Empty Application</strong> がない&hellip;.』と気づきました。<br/>
まさかと思い、あれやこれやと探し、『OtherにEmptyってのがある。これって前からあったっけ？』と思いつつEmptyでプロジェクトを作成してみると&hellip;.<br/>
<img src="/images/xcode6_3.png" alt="OtherにEmpty..." /><br/>
<img src="/images/xcode6_4.png" alt="超Empty...何もないよ..." /><br/>
TARGETもなければ、ソースも何もない。超Empty&hellip;..(泣)</p>

<p>この瞬間、時代は次に進んでいるのだと諦めて、筆者はこれまで使ってこなかったSingle View Applicationに手を伸ばすことにしました。<br/>
最大の障壁となるのが、今更ながら <strong>Storyboardを使ったことがない</strong> ということでした。<br/>
これを機に覚えよう＆Xcode6でも基本操作は変わっていないよ(たぶん)と証明するために先に進み始めました。</p>

<p>下記の手順でプロジェクトを作成します。<br/>
1. Single View Applicationを選択<br/>
2. ProductNameにStoryboardExampleと入力<br/>
3. DevicesはiPhoneを選択</p>

<p>そうして作成されたプロジェクトが下記になります。<br/>
<img src="/images/xcode6_5.png" alt="StoryboardExample" /></p>

<p>Main.storyboardを見てみると、『何の画面サイズ？？』といったViewControllerが表示されています。<br/>
今回はiPhoneのみに対応したアプリということで、サイズを変更したいと思います。<br/>
サイズは下記の手順で変更ができます。</p>

<ol>
<li>左ウィンドウでView Controllerを選択</li>
<li>右ウィンドウのメニューの右から3つ目の項目を選択</li>
<li>Simulated MetricksのSizeから変更したいiPhoneのサイズを選択</li>
</ol>


<p><img src="/images/xcode6_6.png" alt="サイズ変更方法" /></p>

<p>筆者の場合はせっかくなので、iPhone6のサイズである <strong>iPhone 4.7-inch</strong> に変更しました。<br/>
<img src="/images/xcode6_7.png" alt="4.7inchのViewController" /></p>

<h3>StoryboardでUINavigationControllerを使おう</h3>

<p>筆者がよく使っていたUINavigationControllerを使ってみようと思います。先ほどのView ControllerにはNavigationBarらしきものが見当たりません。これはUINavigationControllerが付与されていないためです。では、UINavigationControllerを付与しましょう。</p>

<p>XcodeメニューバーのEditor > Embed in > Navigation Controllerを選択してください。<br/>
<img src="/images/xcode6_8.png" alt="Navigation Controllerを追加する" /></p>

<p>すると、下記のようにNavigation Controllerが追加されます。(下図は見やすさのため表示倍率を変更しています。表示倍率はViewが配置されているウィンドウで右クリックするとサイズを選択可能なウィンドウが表示されます。)<br/>
<img src="/images/xcode6_9.png" alt="Navigation Controllerを追加した" /><br/>
また、初めからStoryboard上に表示されていたView ControllerにNavigationBarが表示されたことがわかります。<br/>
Navigation Controllerの大きさも先ほどと同じ手順で変えてしまいましょう。(変えなくてもコーディング上は問題ありませんが&hellip;.)</p>

<p>NavigationBarの良い所は画面遷移後に前の画面に戻るボタンを作らなくて良いということですね。</p>

<p>続いて、Storyboard上での画面遷移の実装方法について見て行きましょう。<br/>
画面遷移をするためには当然ながら画面が必要となるので、View Controllerを追加しましょう。また、画面遷移のアクションを起こすボタンを追加しましょう。<br/>
<img src="/images/xcode6_10.png" alt="View Controllerとボタンを追加" /></p>

<p>そして、画面遷移の実装は、<br/>
1. NEXTボタンを右クリックして遷移後の画面にドラッグ＆ドロップ<br/>
2. 表示されるウィンドウから <strong>show</strong> を選択<br/>
と超簡単にできます。<br/>
その証拠に遷移後の画面にも先ほどまでなかったNavigationBarが付与されています。</p>

<p><img src="/images/xcode6_11.png" alt="NEXTボタンからドラッグ＆ドロップ" /><br/>
<img src="/images/xcode6_12.png" alt="showを選択" /><br/>
<img src="/images/xcode6_13.png" alt="画面遷移が実装完了" /></p>

<p>さて、ここまで対応が完了したら、シミュレータで表示してみましょう。<br/>
利用するシミュレータはもちろんiPhone6です。<br/>
<img src="/images/xcode6_14.png" alt="シミュレータで表示" /></p>

<p>上記のような表示ができましたでしょうか？<br/>
Storyboardの使い方は案外簡単ですね！まだまだ触り程度の話ですが、これから使い込んでいこうかと思います。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
