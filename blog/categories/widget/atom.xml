<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: widget | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/widget/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2020-11-01T14:32:02+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Push通知の受信起因でWidgetを更新しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2020/11/01/widget-and-push/"/>
    <updated>2020-11-01T13:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2020/11/01/widget-and-push</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は、iOS14から導入された<a href="https://developer.apple.com/jp/widgets/">Widget</a>を題材として扱いたいと思います。</p>

<p>既に様々なところで <code>Widget</code> の導入について説明されていますが、筆者が気になったのは、
『プッシュ通知の受信起因で <code>Widget</code> を更新することができるかどうか 』<br/>
です。</p>

<p>簡単にサンプルを作成して試してみた結果を備忘録として載せておきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Widgetの更新方法</h3>

<p>まず、 <code>Widget</code> の更新方法ですが、これは大きく分けて2種類あります。</p>

<ul>
<li><code>Widget</code> 自体に定義した更新タイミングで更新する</li>
<li>アプリなどから任意のタイミングで更新する</li>
</ul>


<p>前者の『 <code>Widget</code> 自体に定義した更新タイミングで更新する』は、<br/>
<code>Widget</code> ソース内の <code>getTimeline</code> メソッドが該当します。</p>

<p>例えば、1時間ごとに更新したいと思った場合には、</p>

<p>```objective-c
import WidgetKit
import SwiftUI
import Intents</p>

<p>struct Provider: IntentTimelineProvider {
  &hellip;
  func getTimeline(for configuration: ConfigurationIntent, in context: Context, completion: @escaping (Timeline<Entry>) &ndash;> ()) {</p>

<pre><code>  var entries: [SimpleEntry] = []

  // Generate a timeline consisting of five entries an hour apart, starting from the current date.
  let currentDate = Date()
  for hourOffset in 0 ..&lt; 5 {
      let entryDate = Calendar.current.date(byAdding: .hour, value: hourOffset, to: currentDate)!
      let entry = SimpleEntry(date: entryDate, randomNumber: Int.random(in: 1 ... 10), configuration: configuration)
      entries.append(entry)
  }

  let timeline = Timeline(entries: entries, policy: .atEnd)
  completion(timeline)
</code></pre>

<p>  }
  &hellip;
}</p>

<p>struct SimpleEntry: TimelineEntry {
  let date: Date
  let randomNumber: Int
  let configuration: ConfigurationIntent
}
```</p>

<p>のように定義することで実現できます。</p>

<p>続いて後者の『アプリなどから任意のタイミングで更新する』は、<br/>
任意のタイミングで、</p>

<p><code>objective-c
WidgetCenter.shared.reloadAllTimelines()
</code></p>

<p>を呼び出してやれば良いだけです。</p>

<p>では、プッシュ通知の受信起因で <code>Widget</code> を更新するためには、どうすれば良いのでしょうか？</p>

<h3>プッシュ受信契機でWidgetを更新する</h3>

<p>答えは、 <code>NotificationService Extension</code> を利用する方法です。</p>

<p><code>NotificationService Extension</code> はプッシュ通知受信時に条件次第で通知内容を変更したい場合などに利用されます。</p>

<p><code>NotificationService Extension</code> は下記のようにプッシュ通知の受信を検知してロジックを組み込むことができます。</p>

<p>```objective-c
import UserNotifications
import WidgetKit</p>

<p>class NotificationService: UNNotificationServiceExtension {</p>

<pre><code>var contentHandler: ((UNNotificationContent) -&gt; Void)?
var bestAttemptContent: UNMutableNotificationContent?

// プッシュ通知を受信したら、ココを通ります。
override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -&gt; Void) {
    self.contentHandler = contentHandler
    bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)

    if let bestAttemptContent = bestAttemptContent {
        // Modify the notification content here...
        bestAttemptContent.title = "\(bestAttemptContent.title) [modified]"

        contentHandler(bestAttemptContent)
    }
}

override func serviceExtensionTimeWillExpire() {
    if let contentHandler = contentHandler, let bestAttemptContent =  bestAttemptContent {
        contentHandler(bestAttemptContent)
    }
}
</code></pre>

<p>}
```</p>

<p>この <code>didReceive(_:withContentHandler:)</code> 内で <code>WidgetCenter.shared.reloadAllTimelines()</code> を実行してやれば <code>Widget</code> が更新できます。</p>

<h3>(補足)プッシュ通知を簡単に検証する方法について</h3>

<p>今回の検証では、<a href="https://github.com/node-apn/node-apn">node-apn</a>を利用しました。<br/>
<code>node-apn</code> を使えば、プッシュ通知に必要な <code>AuthKey</code> を用意し、多少の実装をするだけ簡単にプッシュ通知を検証できるのでオススメです。</p>

<p>実装は、<a href="https://grandbig.github.io/blog/2017/09/18/node-apn/">プッシュ通知をnode-apnで送ってみよう！</a>で詳しく説明していますので、ご参照ください。<br/>
※ <code>NotificationService Extension</code> を利用するので、ペイロードに <code>"mutable-content": 1</code> が必要になることだけ注意してください。</p>

<p><code>javascript
var note = new apn.Notification();
note.badge = 3;
note.sound = "ping.aiff";
note.alert = "プッシュ通知が届きましたよ！";
note.topic = "com.xxxx.WidgetSample";
note.mutableContent = 1 // ココで "mutable-content": 1 を指定しています。
</code></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
<code>Widget</code> はiOS14から導入され、ホーム画面に多大な影響を与える期待の新機能ですので、<br/>
ユーザに更なる利便性を与えるためにも積極的に導入していきたいですね。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
