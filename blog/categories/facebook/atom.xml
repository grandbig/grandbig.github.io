<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2018-08-11T15:10:31+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FacebookのGraph API v3から分離されたuser_genderについて見てみる]]></title>
    <link href="http://grandbig.github.io/blog/2018/06/23/facebook-graph-api-v3/"/>
    <updated>2018-06-23T11:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/06/23/facebook-graph-api-v3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、いろいろと個人情報の話が取り沙汰されていますが、Facebookが <code>Graph API v3</code> を発表しましたね！<br/>
Facebookログインを利用して会員登録の簡略化をするなんて、今や当たり前の時代に、個人情報の保護強化のために情報取得のハードルが少々引き上げられました。</p>

<p>また、これまでFacebookログインを利用していたサービスはFacebookの再審査を受けることが義務化されました。<br/>
今回新たに審査が必要となる項目も追加され、Facebook社のより一層の個人情報強化の意志を感じさせますね。<br/>
因みに、新規にパーミションが必要となった項目は、</p>

<ul>
<li><code>user_link</code></li>
<li><code>user_age_range</code></li>
<li><code>user_gender</code></li>
</ul>


<p>の3つになります。<br/>
本記事では、中でも <code>user_gender</code> に焦点を当てて見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>user_genderとは</h3>

<p>フィールド名から分かる通り、値としては、ユーザの <code>性別</code> を取得するものになります。<br/>
これは、新たにパーミッションが必要になった項目ということですが、<br/>
もちろんこれまでも取得できる項目でした。</p>

<p>どうやって取得していたかと言うと、Facebook上でユーザの基本情報としてまとめられていた <code>public_profile</code> に <code>gender</code> として含まれていました。<br/>
v3.0での変更でこれが独立したということになります。</p>

<h3>パーミッション画面での変更</h3>

<p>続いて、<code>public_profile</code> と <code>user_gender</code> を利用した場合でそれぞれユーザに表示するパーミッション画面はどのように変わるのでしょうか？<br/>
実際に見ていきましょう。</p>

<p>まずは、これまでの <code>public_profile</code> を利用した場合の画面は<br/>
<img src="/images/facebook_graph_api_v3_1.png" alt="public_profileのみ指定した場合のパーミッション画面" /></p>

<p>続いて、 <code>user_gender</code> を指定した場合の画面は<br/>
<img src="/images/facebook_graph_api_v3_2.png" alt="user_genderも指定した場合のパーミッション画面" /></p>

<p>となります。<br/>
今後どうなるかはわからないものの、今のところは <code>public_profile</code> の中に <code>gender</code> が含まれており、プラスで <code>user_gender</code> も指定できるという状況になっています。</p>

<h3>パーミッション指定の処理</h3>

<p>参考までに今回試したソースコードを記載しておきます。</p>

<p>```objective-c
// FacebookManager.swift
import Foundation
import PromiseKit
import FacebookCore
import FacebookLogin</p>

<p>public enum Gender: Int {</p>

<pre><code>case male
case female
</code></pre>

<p>}</p>

<p>public struct FacebookUserProfile: Codable {</p>

<pre><code>public var id: String
public var email: String?
public var gender: Gender

private enum CodingKeys: String, CodingKey {
    case id
    case email
    case gender
}

public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: CodingKeys.self)
    self.id = try values.decode(String.self, forKey: .id)
    self.email = try values.decodeIfPresent(String.self, forKey: .email)
    let genderString = try values.decode(String.self, forKey: .gender)
    if genderString == "male" {
        self.gender = .male
    } else {
        self.gender = .female
    }
}

public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(id, forKey: .id)
    try container.encodeIfPresent(email, forKey: .email)

    if gender == .male {
        try container.encode("male", forKey: .gender)
    } else {
        try container.encode("female", forKey: .gender)
    }
}
</code></pre>

<p>}</p>

<p>public final class FacebookManager {</p>

<pre><code>public static let shared = FacebookManager()
private init() {
}

enum FacebookError: Error {
    case cancel
    case apiError
    case decodeError
}

public enum FacebookPermission: String {
    case email = "email"
    case publicProfile = "public_profile"
    case userGender = "user_gender"       // 新規パーミッションを指定
}

public func application(_ application: UIApplication, didFinishLaunchingWithOptions: [UIApplicationLaunchOptionsKey: Any]?) {

    SDKApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: didFinishLaunchingWithOptions)
}

public func application(_ app: UIApplication,
                        open url: URL,
                        options: [UIApplicationOpenURLOptionsKey: Any] = [:]) -&gt; Bool {

    return SDKApplicationDelegate.shared.application(app, open: url, options: options)
}

public func isLoggedIn() -&gt; Bool {
    return AccessToken.current != nil
}

public func login(_ viewController: UIViewController,
                  permissions: [FacebookPermission] = [.email, .publicProfile, .userGender]) -&gt; Promise&lt;String&gt; {

    if isLoggedIn() {
        logout()
    }

    let promise = Promise&lt;String&gt; { fulfill, reject in
        var readPermissions = [ReadPermission]()
        permissions.forEach {
            readPermissions.append(ReadPermission.custom($0.rawValue))
        }

        LoginManager().logIn(readPermissions: readPermissions,
                             viewController: viewController,
                             completion: { result in

                                switch result {
                                case .success(_, _, let accessToken):
                                    _ = fulfill(accessToken.authenticationToken)
                                case .cancelled:
                                    let error = FacebookError.cancel
                                    _ = reject(error)
                                case .failed(let error):
                                    _ = reject(error)
                                }
        })
    }

    return promise
}

public func logout() {
    LoginManager().logOut()
}
</code></pre>

<p>}</p>

<p>extension JSONDecoder {</p>

<pre><code>// Any型をdecode可能なメソッドを追加
public func decode&lt;T: Decodable&gt;(_ type: T.Type,
                                 withJSONObject object: Any,
                                 options opt: JSONSerialization.WritingOptions = []) throws -&gt; T {

    let data = try JSONSerialization.data(withJSONObject: object, options: opt)
    return try decode(T.self, from: data)
}
</code></pre>

<p>}
```</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今後移行期間がどうなるのか、イマイチ見えない状況ではありますが、取り急ぎ8/1までにFacebookの再審査を受けて大事に備えておくべきでしょう。<br/>
といったところで本日はここまで。</p>

<h4>参考</h4>

<ul>
<li><a href="https://developers.facebook.com/docs/graph-api/changelog/version3.0">Facebook Graph API v3.0</a></li>
<li><a href="https://damelog.com/sns/facebook/facebook-graph-api-v3_0-released-and-app-review-restored/">FACEBOOK GRAPH API V3.0 リリースと同時にログイン審査がリニューアルされた件</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook APIで試すCodable]]></title>
    <link href="http://grandbig.github.io/blog/2017/12/03/facebook-and-codable/"/>
    <updated>2017-12-03T15:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/12/03/facebook-and-codable</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>こちらは <a href="https://qiita.com/advent-calendar/2017/swift2">Swift その2 Advent Calendar 2017</a> の3日目の記事です。<br/>
今年の後半戦から久々に業務にてiOSアプリを開発することが決まっていたため、実に1年半ぶりにSwiftを扱うことになりました。</p>

<p>Swift4を積極的に利用していた際に、便利と名高い <code>Codable</code> に触れる機会があったため、<br/>
本記事では実際に使ってみた <code>Codable</code> の例を書きたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Codableとは</h3>

<p>これまで <code>JSON</code> をパースするためには、<br/>
<code>JSONSerialization</code> や <code>SwiftyJSON</code> などのOSSライブラリを利用して値を取り出す形で書いていたことと思います。</p>

<p>```objective-c
// これまでの例</p>

<p>import SwiftyJSON</p>

<p>// レスポンスデータ用の構造体
struct Restaurant {</p>

<pre><code>var id: String
var name: String
var latitude: Double
var longitude: Double
</code></pre>

<p>}</p>

<p>// データ取得クラス
class HogeHoge {</p>

<pre><code>func fetchData() {

  // 省略 (API等でデータを取得)

  do {
      let json = try JSON(data: response.data)

      // APIから返却されたjsonデータが以下だったとします。
      // {
      //    "id": "1"
      //    "name": "hogehoge"
      //    "latitude": "37"
      //    "longitude": "135"
      // }

      let id = json["id"].string ?? "ID不明"
      let name = json["name"].string ?? "ショップ名不明"
      let latitude = json["latitude"].string ?? "0"
      let longitude = json["longitude"].string ?? "0"
      let restaurant = Restaurant(id: id, name: name, latitude: latitude, longitude: longitude)
  } catch {
      ...
  }
}
</code></pre>

<p>}
```</p>

<p>上記のように、 <code>SwiftyJSON</code> を利用して <code>JSON</code> 化したオブジェクトから、<br/>
<code>let id = json["id"].string</code> や <code>let name = json["name"].string</code> のように返却レスポンスである <code>Restaurant</code> に自身でマッピングする必要がありました。
これがなんと、 <code>Codable</code> を利用することで、毎回のように書いていたマッピング処理が簡素化されるようです。</p>

<h3>実際の利用例</h3>

<p>今回はFacebookログインによる認証処理が機能の1つとして必要でした。<br/>
また、Facebookの <code>Graph API</code> を叩いて幾つかのプロフィール情報を取得するのですが、<br/>
その中で <code>gender</code> の項目のみ「Facebookが返却する値」と「こちらのシステムが担保する <code>gender</code> の値」が異なっていました。</p>

<p>形式の違いは以下の通りです。<br/>
まずは、Facebookが返却するgenderの値です。</p>

<p><code>objective-c
男性の場合 → "male"
女性の場合 → "female"
</code></p>

<p>続いて必要だった形式です。</p>

<p><code>objective-c
男性の場合 → 0
女性の場合 → 1
</code></p>

<p>もちろん上記違いがあったとしても <code>Codable</code> は利用可能ですので、実際に書いてみました。<br/>
※ Facebookログインを利用するための前準備は <a href="http://grandbig.github.io/blog/2016/05/14/facebook-login-for-swift/">SwiftでFacebookログインを始めよう！</a> を参考にしてください。</p>

<h4>システム固有の性別のEnumの定義</h4>

<p>```objective-c
// 性別のEnum定義
public enum Gender: Int {</p>

<pre><code>case male
case female
</code></pre>

<p>}
```</p>

<h4>Codableに準拠する構造体の定義</h4>

<p>```objective-c
// Facebookから取得するユーザ情報の構造体 (Codableに準拠)
public struct FacebookUserProfile: Codable {</p>

<pre><code>public var id: String     // FacebookID
public var email: String? // Facebookに登録されているメールアドレス
public var gender: Gender // Facebookに登録されている性別

// APIとアプリ間でありがちなプロパティ名の違いをココで吸収できる
// 今回は全て同じなので問題なし
private enum CodingKeys: String, CodingKey {
    case id = "id"
    case email
    case gender
}

// デコード処理をカスタマイズ
public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: CodingKeys.self)
    self.id = try values.decode(String.self, forKey: .id)
    self.email = try values.decodeIfPresent(String.self, forKey: .email)

    // APIから取得した性別の値をこちらのシステムの形式に変更する
    let genderString = try values.decode(String.self, forKey: .gender)
    if genderString == "male" {
        self.gender = .male
    } else {
        self.gender = .female
    }
}

// エンコード処理をカスタマイズ
public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(id, forKey: .id)
    try container.encodeIfPresent(email, forKey: .email)

    // システム固有の形式をAPIから取得した形式に戻す
    if gender == .male {
        try container.encode("male", forKey: .gender)
    } else {
        try container.encode("female", forKey: .gender)
    }
}
</code></pre>

<p>}
```</p>

<h4>JSONDecoderの拡張定義</h4>

<p>少々困ったのが、Facebookの <code>Graph API</code> から返却される <code>response</code> を <code>data</code> 型に変換するメソッドが予め用意されていないことでした。<br/>
毎回、 <code>JSONSerialization</code> を利用する処理を1行加えるのも手間なので、以下のように拡張メソッドを用意することにしました。</p>

<p>```objective-c
extension JSONDecoder {</p>

<pre><code>// Any型をdecode可能なメソッドを追加
public func decode&lt;T: Decodable&gt;(_ type: T.Type,
                                 withJSONObject object: Any,
                                 options opt: JSONSerialization.WritingOptions = []) throws -&gt; T {

    let data = try JSONSerialization.data(withJSONObject: object, options: opt)
    return try decode(T.self, from: data)
}
</code></pre>

<p>}
```</p>

<h4>Facebook Graph APIによるプロフィール情報取得処理</h4>

<p>準備は整ったので、実際に <code>Graph API</code> を叩く部分の処理を実装します。</p>

<p>```objective-c
import Foundation
import PromiseKit
import FacebookCore
import FacebookLogin</p>

<p>public final class FacebookManager {</p>

<pre><code>public static let shared = FacebookManager()
private init() {
}

enum FacebookError: Error {
    case cancel       // Facebook認証をキャンセルした場合
    case apiError     // APIからエラーが返却された場合
    case decodeError  // デコード処理に失敗した場合
}

public enum FacebookUserField: String {
    case id = "id"
    case email = "email"
    case gender = "gender"
}

/// Facebookからユーザのプロフィール情報を取得する
///
/// - Parameter facebookUserFields: 取得するプロフィール情報の指定
/// - Returns: ユーザのプロフィール情報
public func getUserProfile(facebookUserFields: [FacebookUserField] = [.id, .email, .gender]) -&gt; Promise&lt;FacebookUserProfile&gt; {

    let promise = Promise&lt;FacebookUserProfile&gt; { fulfill, reject in
        let fields = facebookUserFields.map { $0.rawValue }
        let field = fields.joined(separator: ",")

        GraphRequest(graphPath: "me",
                     parameters: ["fields": field],
                     accessToken: AccessToken.current,
                     httpMethod: .GET,
                     apiVersion: .defaultVersion).start { response, result in

                        switch result {
                        case .success(let response):
                            do {
                                let decoder = JSONDecoder()
                                let profile = try decoder.decode(FacebookUserProfile.self,
                                                                 withJSONObject: response.dictionaryValue as Any)
                                _ = fulfill(profile)
                            } catch {
                                _ = reject(FacebookError.decodeError)
                            }
                        case .failed(let error):
                            print(error.localizedDescription)
                            _ = reject(FacebookError.apiError)
                        }
        }
    }

    return promise
}
</code></pre>

<p>}
```</p>

<p>上記の通り、 <code>let profile = try decoder.decode(...)</code> だけで済んでいますね。<br/>
今回は1つのメソッドしか書いていませんが同様のレスポンスを持つ複数メソッドを定義する必要がある場合などにより効力を発揮しそうな気がします。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
<code>Codable</code> は今後更なる進化も予定されていると聞きますし、楽しみな機能の1つですね。<br/>
筆者も引き続き積極的にSwift4の機能を利用していきたいと思います。</p>

<p>最後にソースコード全体を載せておきます。<br/>
(説明上、関係のないところは割愛していたので&hellip;)</p>

<p>```objective-c
import Foundation
import PromiseKit
import FacebookCore
import FacebookLogin</p>

<p>public enum Gender: Int {</p>

<pre><code>case male
case female
</code></pre>

<p>}</p>

<p>public struct FacebookUserProfile: Codable {</p>

<pre><code>public var id: String
public var email: String?
public var gender: Gender

private enum CodingKeys: String, CodingKey {
    case id
    case email
    case gender
}

public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: CodingKeys.self)
    self.id = try values.decode(String.self, forKey: .id)
    self.email = try values.decodeIfPresent(String.self, forKey: .email)
    let genderString = try values.decode(String.self, forKey: .gender)
    if genderString == "male" {
        self.gender = .male
    } else {
        self.gender = .female
    }
}

public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(id, forKey: .id)
    try container.encodeIfPresent(email, forKey: .email)

    if gender == .male {
        try container.encode("male", forKey: .gender)
    } else {
        try container.encode("female", forKey: .gender)
    }
}
</code></pre>

<p>}</p>

<p>public final class FacebookManager {</p>

<pre><code>public static let shared = FacebookManager()
private init() {
}

enum FacebookError: Error {
    case cancel
    case apiError
    case decodeError
}

public enum FacebookPermission: String {
    case email = "email"
    case publicProfile = "public_profile"
}

public enum FacebookUserField: String {
    case id = "id"
    case email = "email"
    case gender = "gender"
}

public func application(_ application: UIApplication, didFinishLaunchingWithOptions: [UIApplicationLaunchOptionsKey: Any]?) {

    SDKApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: didFinishLaunchingWithOptions)
}

public func application(_ app: UIApplication,
                        open url: URL,
                        options: [UIApplicationOpenURLOptionsKey: Any] = [:]) -&gt; Bool {

    return SDKApplicationDelegate.shared.application(app, open: url, options: options)
}

public func isLoggedIn() -&gt; Bool {
    return AccessToken.current != nil
}

public func login(_ viewController: UIViewController,
                  permissions: [FacebookPermission] = [.email, .publicProfile]) -&gt; Promise&lt;String&gt; {

    if isLoggedIn() {
        logout()
    }

    let promise = Promise&lt;String&gt; { fulfill, reject in
        var readPermissions = [ReadPermission]()
        permissions.forEach {
            readPermissions.append(ReadPermission.custom($0.rawValue))
        }

        LoginManager().logIn(readPermissions: readPermissions,
                             viewController: viewController,
                             completion: { result in

                                switch result {
                                case .success(_, _, let accessToken):
                                    _ = fulfill(accessToken.authenticationToken)
                                case .cancelled:
                                    let error = FacebookError.cancel
                                    _ = reject(error)
                                case .failed(let error):
                                    _ = reject(error)
                                }
        })
    }

    return promise
}

public func logout() {
    LoginManager().logOut()
}

/// Facebookからユーザのプロフィール情報を取得する
///
/// - Parameter facebookUserFields: 取得するプロフィール情報の指定
/// - Returns: ユーザのプロフィール情報
public func getUserProfile(facebookUserFields: [FacebookUserField] = [.id, .email, .gender]) -&gt; Promise&lt;FacebookUserProfile&gt; {

    let promise = Promise&lt;FacebookUserProfile&gt; { fulfill, reject in
        let fields = facebookUserFields.map { $0.rawValue }
        let field = fields.joined(separator: ",")

        GraphRequest(graphPath: "me",
                     parameters: ["fields": field],
                     accessToken: AccessToken.current,
                     httpMethod: .GET,
                     apiVersion: .defaultVersion).start { response, result in

                        switch result {
                        case .success(let response):
                            do {
                                let decoder = JSONDecoder()
                                let profile = try decoder.decode(FacebookUserProfile.self,
                                                                 withJSONObject: response.dictionaryValue as Any)
                                _ = fulfill(profile)
                            } catch {
                                _ = reject(FacebookError.decodeError)
                            }
                        case .failed(let error):
                            print(error.localizedDescription)
                            _ = reject(FacebookError.apiError)
                        }
        }
    }

    return promise
}
</code></pre>

<p>}</p>

<p>extension JSONDecoder {</p>

<pre><code>// Any型をdecode可能なメソッドを追加
public func decode&lt;T: Decodable&gt;(_ type: T.Type,
                                 withJSONObject object: Any,
                                 options opt: JSONSerialization.WritingOptions = []) throws -&gt; T {

    let data = try JSONSerialization.data(withJSONObject: object, options: opt)
    return try decode(T.self, from: data)
}
</code></pre>

<p>}
```</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Bootで簡単Facebook接続]]></title>
    <link href="http://grandbig.github.io/blog/2017/04/16/spring-boot-facebook-login/"/>
    <updated>2017-04-16T14:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/04/16/spring-boot-facebook-login</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、久しぶりに<code>Spring Boot</code>で遊んでみました。<br/>
と言ってもほとんどコードを書く必要のないFacebook認証についてです。<br/>
(本当は<code>Spring Social</code>を利用したFacebookログインまで書こうかと思ったのですが、一旦簡単なところまで&hellip;)</p>

<h3>Facebookアプリを新規作成</h3>

<p>まずはFacebook認証などをするために、Facebook Developersサイトでアプリを登録しましょう。</p>

<p>１．<a href="https://developers.facebook.com/">facebook developers</a>に遷移<br/>
トップページから新規アプリを追加しましょう。<br/>
<img src="/images/web_facebook_login_1.png" alt="facebook developersトップページ" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>２．必要項目を入力</p>

<p><img src="/images/web_facebook_login_2.png" alt="ポップアップに必要事項を入力します" /></p>

<p>３．セキュリティチェックをパス</p>

<p><img src="/images/web_facebook_login_3.png" alt="セキュリティモーダルの解決" /></p>

<p>４．利用機能の選択</p>

<p><img src="/images/web_facebook_login_4.png" alt="Facebookの利用機能を選択します" /></p>

<p>５．アプリの設定からプラットフォームを追加</p>

<p>左メニューから設定を選択して、下図の画面を出します。<br/>
<img src="/images/web_facebook_login_5.png" alt="プラットフォームを追加します" /></p>

<p>プラットフォームとして『ウェブサイト』を追加します。<br/>
<img src="/images/web_facebook_login_6.png" alt="ウェブサイトをプラットフォームとして追加します" /></p>

<p>サイトURLやドメインなど必要事項を入力します。<br/>
<img src="/images/web_facebook_login_7.png" alt="必要事項を入力します" /></p>

<p>６．Facebookログインの設定</p>

<p>Facebook認証後に返されるリダイレクトURIを設定します。<br/>
<img src="/images/web_facebook_login_8.png" alt="リダイレクトURIを設定します" /></p>

<h3>Spring Bootプロジェクトの新規作成</h3>

<p>さて事前準備は完了したので、Spring BootプロジェクトをIntelliJで新規作成しましょう。</p>

<p>１．IntelliJを起動して、Spring Boot用にベースとなる形式を選択</p>

<p><img src="/images/web_facebook_login_9.png" alt="Spring Initializerを選択します" /></p>

<p>２．ビルドツールとして<code>Gradle</code>を選択</p>

<p><img src="/images/web_facebook_login_10.png" alt="Gradleをビルドツールとして選択します" /></p>

<p>３．必要なモジュールを選択</p>

<p>今回は <code>Security</code>, <code>Web</code>, <code>Thymeleaf</code>を利用します。<br/>
<img src="/images/web_facebook_login_11.png" alt="必要なモジュールを選択します" /></p>

<h3>Facebook認証処理を実装</h3>

<p>では、実装していきましょう。</p>

<h4>Spring Security周りの修正</h4>

<p>まず、<code>Spring Security</code>はデフォルトBasic認証が有効となっているため、一旦、認証不要箇所などを設定します。</p>

<p>```java
// SecurityConfig.java
package com.example.config;</p>

<p>import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</p>

<p>@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>

<pre><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http
            .authorizeRequests()
            .antMatchers("/", "/complete", "/api/**").permitAll()
            .anyRequest().authenticated();
    http.formLogin();
}
</code></pre>

<p>}
```</p>

<p>上記ソースでは<code>/</code>と<code>/complete</code>と<code>/api/**</code>のアクセスを許可しています。<br/>
それぞれ、</p>

<ul>
<li><code>/</code>: トップぺージ</li>
<li><code>/complete</code>: Facebook認証後に表示する画面<br/>
ここで許可すると認証しなくても表示されてしまいますが、簡単のため</li>
<li><code>/api/**</code>: Facebook認証を実行するためのAPI用</li>
</ul>


<p>という意図です。</p>

<h4>HTMLページの表示</h4>

<p>続いて、単体HTMLページ表示用の処理です。</p>

<h5>Controllerの処理</h5>

<p><code>Controller</code>は下記の通り。</p>

<p>```java
// TopController.java
package com.example.controller;</p>

<p>import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;</p>

<p>@RestController
@RequestMapping(&ldquo;/&rdquo;)
public class TopController {</p>

<pre><code>// ログイン画面
@RequestMapping("")
public ModelAndView index(ModelAndView mav) {
    mav.setViewName("index");
    return mav;
}

// 認証完了後に表示する
@RequestMapping("/complete")
public ModelAndView complete(ModelAndView mav) {
    mav.setViewName("complete");
    return mav;
}
</code></pre>

<p>}
```</p>

<h5>HTMLの処理</h5>

<p>そして、HTMLファイルは下記の通り。</p>

<p>```html</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html lang="en" xmlns="http://www.thymeleaf.org">
<head>
  &lt;meta</p>

<pre><code>http-equiv="Content-Type"
content="text/html"
charset="UTF-8"/&gt;
</code></pre>

<p>  <title>Facebook Login Sample</title>
</head>
<body></p>

<div>これはFacebookログインのためのサンプルトップ画面です。</div>


<p><form action="/api/login" method="get">
  <input type="submit" value="Facebookでログイン"/>
</form>
</body>
</html>
```</p>

<p>```html</p>

<!-- complete.html -->


<p>&lt;!DOCTYPE html>
<html lang="en" xmlns="http://www.thymeleaf.org">
<head>
  &lt;meta</p>

<pre><code>http-equiv="Content-Type"
content="text/html"
charset="UTF-8"/&gt;
</code></pre>

<p>  <title>ログイン完了画面</title>
</head>
<body></p>

<div>ログイン完了しました！！</div>


<p></body>
</html>
```</p>

<h4>環境変数の設定</h4>

<p>FacebookのアプリIDや認証リクエストを送るURLなどの環境変数を書き出します。</p>

<p><code>java
// application.properties
server.port=9000
spring.social.facebook.appId=xxxxxxxxx
sampleApp.urls.facebookLogin=https://www.facebook.com/v2.8/dialog/oauth?client_id=xxxxxxxxx&amp;scope=public_profile,email
sampleApp.urls.oAuthCallback=http://localhost:9000/api/callback
</code></p>

<p>ここで書いた環境変数を他のJavaファイルで利用したいので、<br/>
新たに<code>MyBean.java</code>と<code>MyProperties.java</code>を新規作成します。</p>

<p>```java
// MyBean.java
package com.example.config.bean;</p>

<p>public class MyBean {</p>

<pre><code>public String facebookLogin;

public String oAuthCallback;

public void setFacebookLogin(String facebookLogin) {
    this.facebookLogin = facebookLogin;
}

public void setoAuthCallback(String oAuthCallback) {
    this.oAuthCallback = oAuthCallback;
}
</code></pre>

<p>}
```</p>

<p>```java
// MyProperties
package com.example.config.properties;</p>

<p>import com.example.config.bean.MyBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;</p>

<p>@Configuration
@PropertySource(value = {&ldquo;classpath:application.properties&rdquo;})
public class MyProperties {</p>

<pre><code>@Autowired
private Environment env;

@Bean
public MyBean myBean() {
    MyBean myBean = new MyBean();
    myBean.setFacebookLogin(env.getProperty("sampleApp.urls.facebookLogin"));
    myBean.setoAuthCallback(env.getProperty("sampleApp.urls.oAuthCallback"));
    return myBean;
}
</code></pre>

<p>}
```</p>

<h4>Facebook認証周りの処理</h4>

<p>後はFacebook認証先にURLを送るだけです。</p>

<p>```javascript
package com.example.controller;</p>

<p>import com.example.config.bean.MyBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;</p>

<p>@Controller
@RequestMapping(&ldquo;/api&rdquo;)
public class FacebookLoginController {</p>

<pre><code>private static final String REDIRECT_URI_PARAMETER = "redirect_uri";

@Autowired
private MyBean myBean;

@RequestMapping("/login")
public String facebookLogin() {
    StringBuilder sb = new StringBuilder();
    sb.append(myBean.facebookLogin);
    sb.append("&amp;").append(REDIRECT_URI_PARAMETER).append("=");
    sb.append(myBean.oAuthCallback);

    return "redirect:" + sb.toString();
}

@RequestMapping("/callback")
public String callback() {
    return "redirect:/complete";
}
</code></pre>

<p>}
```</p>

<h3>動作確認</h3>

<p>ここまで実装ができたので動作確認をしてみましょう。</p>

<p><img src="/images/web_facebook_login_12.png" alt="ログイン画面" /></p>

<p><img src="/images/web_facebook_login_13.png" alt="Facebookログイン画面" /></p>

<p><img src="/images/web_facebook_login_14.png" alt="アプリ許可画面" /></p>

<p><img src="/images/web_facebook_login_15.png" alt="ログイン完了後" /></p>

<h3>まとめ</h3>

<p>今回は本当に簡易的な部分しか書けませんでした<br/>
本当は<code>Spring Social</code>を使いこなして、もっといろいろと書こうかと思ったのですが、また次の機会ということで&hellip;</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのモバイルチューニングの極意を読んで...]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/11/facebook-tuning/"/>
    <updated>2015-03-11T15:33:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/11/facebook-tuning</id>
    <content type="html"><![CDATA[<h4>発展途上国への提供を見据えたモバイルチューニング技術について</h4>

<p>さて、今回は少し趣向を変えた内容を書いてみようと思います。<br/>
以前の記事、<a href="http://grandbig.github.io/blog/2015/02/14/ios-allstars-study/">iOS オールスターズ勉強会に参加しました！</a>で通信のパフォーマンス改善の話を聞いたと書きました。<br/>
その話の中で紹介されていた、<a href="http://urx.nu/ijSD">Facebook が語るモバイル･チューニングの極意：これで途上国のインターネットも OK！</a>を読んでみて、それを自分なりにまとめてみましたので、載せたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まず、アメリカと発展途上国を比較して、3Gの普及率とレイテンシは下図のようになっているそうです。<br/>
<img src="/images/facebook_mobile_tuning_1.png" alt="3Gの普及率とレイテンシ" /></p>

<p>この世の中の現状に対して、Facebookアプリにダウンロードされるバイト数の大半の割合を <strong>画像</strong> が占めています。<br/>
Androidアプリで言うと、実にFacebookアプリが85%, メッセンジャーが65%の割合になるようです。</p>

<p>ということは、 <strong>イメージサイズを削減すれば</strong> 、高レイテンシなネットワークであったとしても、高品質なユーザ体験を提供することができると言えます。</p>

<p>では、イメージサイズを削減するにはどんな方法があるのでしょうか？</p>

<ul>
<li>クライアント側での画像のリサイズはNG(クライアント側で必要なサイズにサーバ側で事前に変換しておくこと)</li>
<li>ユーザに提供する画像はサムネイルと小さいプレビュー用のもので十分(ほとんどの欲求をカバーできる)</li>
<li>デバイスサイズよりも大きな画像を提供する必要はない</li>
</ul>


<p>これは当然と言えば、当然の話ですよね。</p>

<p>Facebookは特に工夫していることとして、 <strong>webp</strong> の活用を上げています。<br/>
<img src="/images/facebook_mobile_tuning_3.png" alt="webpのメリット" /></p>

<p>※詳しい、画像圧縮の方式については<a href="https://html5experts.jp/jxck/2550/">WebP – Webを速くするためにGoogleがやっていること </a>を参照してください。</p>

<p>また、Facebookはサーバから <strong>レスポンス時のHTTPヘッダー内でRTT(Round-Trip Time)</strong> を提供しています。<br/>
その中で、Facebookは通信品質を下記の4段階に区分けしています。</p>

<p><img src="/images/facebook_mobile_tuning_4.png" alt="通信品質の表" /></p>

<p>上記を見極めた上で、</p>

<ul>
<li>画像の圧縮比を増減</li>
<li>並列ネットワークリクエストの増減</li>
<li>ビデオ自動再生のON / OFF</li>
<li>コンテンツのプリフェッチ量の増減</li>
</ul>


<p>といった対応を取っているとのことです。</p>

<p>今回の件は、日本だけでなく、発展途上国へのサービスの提供を考えたときの参考になると感じました。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
