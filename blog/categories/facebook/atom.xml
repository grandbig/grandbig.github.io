<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-05-06T00:25:22+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Bootで簡単Facebook接続]]></title>
    <link href="http://grandbig.github.io/blog/2017/04/16/spring-boot-facebook-login/"/>
    <updated>2017-04-16T14:52:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/04/16/spring-boot-facebook-login</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、久しぶりに<code>Spring Boot</code>で遊んでみました。<br/>
と言ってもほとんどコードを書く必要のないFacebook認証についてです。<br/>
(本当は<code>Spring Social</code>を利用したFacebookログインまで書こうかと思ったのですが、一旦簡単なところまで&hellip;)</p>

<h3>Facebookアプリを新規作成</h3>

<p>まずはFacebook認証などをするために、Facebook Developersサイトでアプリを登録しましょう。</p>

<p>１．<a href="https://developers.facebook.com/">facebook developers</a>に遷移<br/>
トップページから新規アプリを追加しましょう。<br/>
<img src="/images/web_facebook_login_1.png" alt="facebook developersトップページ" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>２．必要項目を入力</p>

<p><img src="/images/web_facebook_login_2.png" alt="ポップアップに必要事項を入力します" /></p>

<p>３．セキュリティチェックをパス</p>

<p><img src="/images/web_facebook_login_3.png" alt="セキュリティモーダルの解決" /></p>

<p>４．利用機能の選択</p>

<p><img src="/images/web_facebook_login_4.png" alt="Facebookの利用機能を選択します" /></p>

<p>５．アプリの設定からプラットフォームを追加</p>

<p>左メニューから設定を選択して、下図の画面を出します。<br/>
<img src="/images/web_facebook_login_5.png" alt="プラットフォームを追加します" /></p>

<p>プラットフォームとして『ウェブサイト』を追加します。<br/>
<img src="/images/web_facebook_login_6.png" alt="ウェブサイトをプラットフォームとして追加します" /></p>

<p>サイトURLやドメインなど必要事項を入力します。<br/>
<img src="/images/web_facebook_login_7.png" alt="必要事項を入力します" /></p>

<p>６．Facebookログインの設定</p>

<p>Facebook認証後に返されるリダイレクトURIを設定します。<br/>
<img src="/images/web_facebook_login_8.png" alt="リダイレクトURIを設定します" /></p>

<h3>Spring Bootプロジェクトの新規作成</h3>

<p>さて事前準備は完了したので、Spring BootプロジェクトをIntelliJで新規作成しましょう。</p>

<p>１．IntelliJを起動して、Spring Boot用にベースとなる形式を選択</p>

<p><img src="/images/web_facebook_login_9.png" alt="Spring Initializerを選択します" /></p>

<p>２．ビルドツールとして<code>Gradle</code>を選択</p>

<p><img src="/images/web_facebook_login_10.png" alt="Gradleをビルドツールとして選択します" /></p>

<p>３．必要なモジュールを選択</p>

<p>今回は <code>Security</code>, <code>Web</code>, <code>Thymeleaf</code>を利用します。<br/>
<img src="/images/web_facebook_login_11.png" alt="必要なモジュールを選択します" /></p>

<h3>Facebook認証処理を実装</h3>

<p>では、実装していきましょう。</p>

<h4>Spring Security周りの修正</h4>

<p>まず、<code>Spring Security</code>はデフォルトBasic認証が有効となっているため、一旦、認証不要箇所などを設定します。</p>

<p>```java
// SecurityConfig.java
package com.example.config;</p>

<p>import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</p>

<p>@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>

<pre><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http
            .authorizeRequests()
            .antMatchers("/", "/complete", "/api/**").permitAll()
            .anyRequest().authenticated();
    http.formLogin();
}
</code></pre>

<p>}
```</p>

<p>上記ソースでは<code>/</code>と<code>/complete</code>と<code>/api/**</code>のアクセスを許可しています。<br/>
それぞれ、</p>

<ul>
<li><code>/</code>: トップぺージ</li>
<li><code>/complete</code>: Facebook認証後に表示する画面<br/>
ここで許可すると認証しなくても表示されてしまいますが、簡単のため</li>
<li><code>/api/**</code>: Facebook認証を実行するためのAPI用</li>
</ul>


<p>という意図です。</p>

<h4>HTMLページの表示</h4>

<p>続いて、単体HTMLページ表示用の処理です。</p>

<h5>Controllerの処理</h5>

<p><code>Controller</code>は下記の通り。</p>

<p>```java
// TopController.java
package com.example.controller;</p>

<p>import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;</p>

<p>@RestController
@RequestMapping(&ldquo;/&rdquo;)
public class TopController {</p>

<pre><code>// ログイン画面
@RequestMapping("")
public ModelAndView index(ModelAndView mav) {
    mav.setViewName("index");
    return mav;
}

// 認証完了後に表示する
@RequestMapping("/complete")
public ModelAndView complete(ModelAndView mav) {
    mav.setViewName("complete");
    return mav;
}
</code></pre>

<p>}
```</p>

<h5>HTMLの処理</h5>

<p>そして、HTMLファイルは下記の通り。</p>

<p>```html</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html lang="en" xmlns="http://www.thymeleaf.org">
<head>
  &lt;meta</p>

<pre><code>http-equiv="Content-Type"
content="text/html"
charset="UTF-8"/&gt;
</code></pre>

<p>  <title>Facebook Login Sample</title>
</head>
<body></p>

<div>これはFacebookログインのためのサンプルトップ画面です。</div>


<p><form action="/api/login" method="get">
  <input type="submit" value="Facebookでログイン"/>
</form>
</body>
</html>
```</p>

<p>```html</p>

<!-- complete.html -->


<p>&lt;!DOCTYPE html>
<html lang="en" xmlns="http://www.thymeleaf.org">
<head>
  &lt;meta</p>

<pre><code>http-equiv="Content-Type"
content="text/html"
charset="UTF-8"/&gt;
</code></pre>

<p>  <title>ログイン完了画面</title>
</head>
<body></p>

<div>ログイン完了しました！！</div>


<p></body>
</html>
```</p>

<h4>環境変数の設定</h4>

<p>FacebookのアプリIDや認証リクエストを送るURLなどの環境変数を書き出します。</p>

<p><code>java
// application.properties
server.port=9000
spring.social.facebook.appId=xxxxxxxxx
sampleApp.urls.facebookLogin=https://www.facebook.com/v2.8/dialog/oauth?client_id=xxxxxxxxx&amp;scope=public_profile,email
sampleApp.urls.oAuthCallback=http://localhost:9000/api/callback
</code></p>

<p>ここで書いた環境変数を他のJavaファイルで利用したいので、<br/>
新たに<code>MyBean.java</code>と<code>MyProperties.java</code>を新規作成します。</p>

<p>```java
// MyBean.java
package com.example.config.bean;</p>

<p>public class MyBean {</p>

<pre><code>public String facebookLogin;

public String oAuthCallback;

public void setFacebookLogin(String facebookLogin) {
    this.facebookLogin = facebookLogin;
}

public void setoAuthCallback(String oAuthCallback) {
    this.oAuthCallback = oAuthCallback;
}
</code></pre>

<p>}
```</p>

<p>```java
// MyProperties
package com.example.config.properties;</p>

<p>import com.example.config.bean.MyBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;</p>

<p>@Configuration
@PropertySource(value = {&ldquo;classpath:application.properties&rdquo;})
public class MyProperties {</p>

<pre><code>@Autowired
private Environment env;

@Bean
public MyBean myBean() {
    MyBean myBean = new MyBean();
    myBean.setFacebookLogin(env.getProperty("sampleApp.urls.facebookLogin"));
    myBean.setoAuthCallback(env.getProperty("sampleApp.urls.oAuthCallback"));
    return myBean;
}
</code></pre>

<p>}
```</p>

<h4>Facebook認証周りの処理</h4>

<p>後はFacebook認証先にURLを送るだけです。</p>

<p>```javascript
package com.example.controller;</p>

<p>import com.example.config.bean.MyBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;</p>

<p>@Controller
@RequestMapping(&ldquo;/api&rdquo;)
public class FacebookLoginController {</p>

<pre><code>private static final String REDIRECT_URI_PARAMETER = "redirect_uri";

@Autowired
private MyBean myBean;

@RequestMapping("/login")
public String facebookLogin() {
    StringBuilder sb = new StringBuilder();
    sb.append(myBean.facebookLogin);
    sb.append("&amp;").append(REDIRECT_URI_PARAMETER).append("=");
    sb.append(myBean.oAuthCallback);

    return "redirect:" + sb.toString();
}

@RequestMapping("/callback")
public String callback() {
    return "redirect:/complete";
}
</code></pre>

<p>}
```</p>

<h3>動作確認</h3>

<p>ここまで実装ができたので動作確認をしてみましょう。</p>

<p><img src="/images/web_facebook_login_12.png" alt="ログイン画面" /></p>

<p><img src="/images/web_facebook_login_13.png" alt="Facebookログイン画面" /></p>

<p><img src="/images/web_facebook_login_14.png" alt="アプリ許可画面" /></p>

<p><img src="/images/web_facebook_login_15.png" alt="ログイン完了後" /></p>

<h3>まとめ</h3>

<p>今回は本当に簡易的な部分しか書けませんでした<br/>
本当は<code>Spring Social</code>を使いこなして、もっといろいろと書こうかと思ったのですが、また次の機会ということで&hellip;</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのモバイルチューニングの極意を読んで...]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/11/facebook-tuning/"/>
    <updated>2015-03-11T15:33:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/11/facebook-tuning</id>
    <content type="html"><![CDATA[<h4>発展途上国への提供を見据えたモバイルチューニング技術について</h4>

<p>さて、今回は少し趣向を変えた内容を書いてみようと思います。<br/>
以前の記事、<a href="http://grandbig.github.io/blog/2015/02/14/ios-allstars-study/">iOS オールスターズ勉強会に参加しました！</a>で通信のパフォーマンス改善の話を聞いたと書きました。<br/>
その話の中で紹介されていた、<a href="http://urx.nu/ijSD">Facebook が語るモバイル･チューニングの極意：これで途上国のインターネットも OK！</a>を読んでみて、それを自分なりにまとめてみましたので、載せたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>まず、アメリカと発展途上国を比較して、3Gの普及率とレイテンシは下図のようになっているそうです。<br/>
<img src="/images/facebook_mobile_tuning_1.png" alt="3Gの普及率とレイテンシ" /></p>

<p>この世の中の現状に対して、Facebookアプリにダウンロードされるバイト数の大半の割合を <strong>画像</strong> が占めています。<br/>
Androidアプリで言うと、実にFacebookアプリが85%, メッセンジャーが65%の割合になるようです。</p>

<p>ということは、 <strong>イメージサイズを削減すれば</strong> 、高レイテンシなネットワークであったとしても、高品質なユーザ体験を提供することができると言えます。</p>

<p>では、イメージサイズを削減するにはどんな方法があるのでしょうか？</p>

<ul>
<li>クライアント側での画像のリサイズはNG(クライアント側で必要なサイズにサーバ側で事前に変換しておくこと)</li>
<li>ユーザに提供する画像はサムネイルと小さいプレビュー用のもので十分(ほとんどの欲求をカバーできる)</li>
<li>デバイスサイズよりも大きな画像を提供する必要はない</li>
</ul>


<p>これは当然と言えば、当然の話ですよね。</p>

<p>Facebookは特に工夫していることとして、 <strong>webp</strong> の活用を上げています。<br/>
<img src="/images/facebook_mobile_tuning_3.png" alt="webpのメリット" /></p>

<p>※詳しい、画像圧縮の方式については<a href="https://html5experts.jp/jxck/2550/">WebP – Webを速くするためにGoogleがやっていること </a>を参照してください。</p>

<p>また、Facebookはサーバから <strong>レスポンス時のHTTPヘッダー内でRTT(Round-Trip Time)</strong> を提供しています。<br/>
その中で、Facebookは通信品質を下記の4段階に区分けしています。</p>

<p><img src="/images/facebook_mobile_tuning_4.png" alt="通信品質の表" /></p>

<p>上記を見極めた上で、</p>

<ul>
<li>画像の圧縮比を増減</li>
<li>並列ネットワークリクエストの増減</li>
<li>ビデオ自動再生のON / OFF</li>
<li>コンテンツのプリフェッチ量の増減</li>
</ul>


<p>といった対応を取っているとのことです。</p>

<p>今回の件は、日本だけでなく、発展途上国へのサービスの提供を考えたときの参考になると感じました。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
