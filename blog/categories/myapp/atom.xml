<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MyApp | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/myapp/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-06-29T22:21:55+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5年前に初めて個人開発したアプリを再構築している話]]></title>
    <link href="http://grandbig.github.io/blog/2018/12/12/personal-develop-footstepmeter/"/>
    <updated>2018-12-12T00:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/12/12/personal-develop-footstepmeter</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今年もやってきましたAdvent Calendarの季節！<br/>
こちらは<a href="https://qiita.com/advent-calendar/2018/private-developmen2">個人開発 #2 Advent Calendar 2018</a>の12日目の記事です。</p>

<p>今年は、5年前に初めて個人開発したアプリを再構築している話を思い出を交えながら書こうと思います。<br/>
とは言え、絶賛再構築中なので、恐らく本記事公開日までに作り終わらないと思うのですが、それも一興ということで大目に見て頂ければと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>5年前になぜ個人開発をしようと思ったのか</h3>

<p>まずは筆者がなぜ個人開発を始めようと思ったのかについて話したいと思います。<br/>
当時の筆者の状況やスキルを思い出してみます。</p>

<h4>状況</h4>

<ul>
<li>社会人3年目</li>
<li>当然、役職も重い責任も何もないぺーぺー</li>
<li>プロジェクトを1〜2個経験(内の1つは大炎上を経験)</li>
</ul>


<h4>スキル</h4>

<ul>
<li><code>HTML5, CSS3, jQuery</code>を利用したWEBフロントエンドの開発</li>
<li><code>iOS, Android</code>アプリの開発</li>
<li><code>Node.js, MongoDB</code>を用いたサーバサイドの開発</li>
</ul>


<h4>状況とスキルを見た振り返り</h4>

<p>一見、スキルを見ると凄そうに見えるかもしれませんが、<br/>
<code>iOS, Android</code>アプリの中身は<code>WebView</code>を利用しており、ネイティブコードは位置情報の取得やプッシュ通知などのごく一部でした。</p>

<p>また、当時、非常に新しかった<code>Node.js</code>や<code>MongoDB</code>も訳が分からず利用しており、<br/>
その知識やスキル不足からプロジェクトを大炎上させてしまいました。</p>

<p>その時に学んだ重要なことは、</p>

<ul>
<li>メモリ消費を考えて、何でもかんでも <code>DB</code> からデータを引っ張ってくるのは辞めよう</li>
<li>CPU消費を考えて、大量データを永遠と<code>for</code>ループ回すのは辞めよう</li>
</ul>


<p>といったエンジニアとしては『当たり前 &amp; これができなかったらごめんなさいで済まされないレベル』の話でした。</p>

<h4>個人開発を始めた理由</h4>

<p>そんな状態の私がなぜ個人開発を始めたのかというと&hellip;</p>

<ol>
<li>技術的な強みを1つ持ちたかった</li>
<li>エンジニアとしての将来が不安で悶々としていた</li>
</ol>


<p>という2つが大きな理由です。</p>

<p>理由2を満たすために、手始めに技術ブログを開設したのですが、<br/>
『どうせなら理由1も満たしたい！』という想いから、<br/>
当時最も興味のあった <code>iOS</code> アプリの開発を勉強しながら始めることにしました。<br/>
※ <code>iOS</code> ネイティブアプリの開発ができるようになるというのが当面の目標でした。<br/>
( <code>WebView</code>ではなく、ネイティブアプリの開発です。 )</p>

<h3>足跡計について</h3>

<p>初めのうちは基本的なXcodeの使い方などを試してブログに書いたりしていたのですが、<br/>
折角なので、1つアプリを完成させて世にリリースしたいという想いが強くなりました。<br/>
そうして完成した個人開発の第一段階アプリが『<a href="https://itunes.apple.com/jp/app/%E8%B6%B3%E8%B7%A1%E8%A8%88/id725412788?mt=8">足跡計</a>』です。</p>

<h4>足跡計の機能</h4>

<p>このアプリには、次のような機能を持たせました。</p>

<ul>
<li>様々な精度で歩行ルートを記録可能</li>
<li>複数の歩行ルートを記録可能</li>
<li>歩行ルート履歴をいつでも閲覧可能</li>
<li>歩行ルート記録をメールで送信可能</li>
<li>不要になった歩行ルート記録は削除可能</li>
</ul>


<p>このアプリを開発しようと思った理由は、<br/>
当時、業務にて位置情報を扱ったアプリ内 <code>WebView</code> のアプリを開発・運用しており、<br/>
位置情報機能は私にとって非常に扱いやすかったためです。</p>

<p>【足跡計のスクリーンショット】<br/>
<img src="/images/personal_development_footprintmeter_1.png" alt="足跡計のスクリーンショット" /></p>

<h4>今回再構築をしようと思った理由</h4>

<p>さて、ここまでは5年前の個人でのアプリ開発に至るまでの話をしてきました。<br/>
ここからが本題で、今回、筆者は思い切って、足跡計アプリを再構築しようと考えました。</p>

<p>その理由は、</p>

<ol>
<li>iPhoneXの画面にアプリが対応できておらず、格好悪い(上下の黒帯の幅が長い)</li>
<li>ホームアイコンとアプリ画面の色合いを統一させたい</li>
<li><code>MVVM</code> アーキテクチャを用いたアプリ開発を試したい</li>
</ol>


<p>という3つの想いがあったためです。</p>

<p>特に『3』に関しては、<br/>
筆者が業務で昨年から今年の春先にかけて <code>Clean Swift</code> アーキテクチャでのiOSアプリ開発に挑戦し、改めてiOSアプリのアーキテクチャのあり方に悩んだことが元となっています。</p>

<p>具体的に悩んだ内容に関しては後日別途書こうと思いますが、<br/>
上記経緯より、現在最も頻繁に採用されているであろう <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> を用いた <code>MVVM</code> アーキテクチャ設計をきちんと勉強しておきたいと思わずにはいられなかったのです。</p>

<p>では、前段はここまでとして、ここから先は、</p>

<ul>
<li>どのように設計を変更したのか(プロジェクト構成の話)</li>
<li><code>RxSwift</code> を用いた <code>MVVM</code> アーキテクチャで構成されたメインロジックの説明</li>
<li>その上で躓いたこと / ハマったこと</li>
</ul>


<p>を中心に説明し、最後に今後の展望とリリース時期を説明して終了にしたいと思います。</p>

<h3>足跡計の再構築について</h3>

<p>では、再構築について一つずつ説明してきましょう。</p>

<h4>プロジェクト構成の変更</h4>

<p>まずはアーキテクチャの変更によって生じたプロジェクト構成の変更について説明します。<br/>
これまでは <code>MVC</code> アーキテクチャを採用していたため、下記のようなプロジェクト構成になっていました。</p>

<p><code>objective-c
// 再構築前のMVCアーキテクチャでのプロジェクト構成
footStepMeter
├── Enum
│    └── LocationAccuracy.swift
├── Model
│    ├── CustomAnnotation.swift
│    ├── Footprint.swift
│    ├── FootprintManager.swift
│    ├── Location.swift
│    └── UIImage+Extension.swift
├── View
│    └── PickerView.swift
├── Main.storyboard
├── AppDelegate.swift
├── ViewController.swift
├── SettingViewController.swift
...
</code></p>

<p>一応、フォルダ分けして責務を見やすくしようとした形跡がありますが、<br/>
下記観点が全然ダメだなと今振り返って思います。</p>

<ul>
<li><code>Model</code> の責務がカオスになりかけている

<ul>
<li><code>UIImage+Extension</code> は <code>Model</code> 配下でなくても良いはず</li>
</ul>
</li>
<li><code>ViewController</code> がフォルダ分けされておらず、ただ並んでいる

<ul>
<li>今後、画面が増えてきた時に <code>ViewController</code> も増えるので視認性が悪くなる</li>
</ul>
</li>
</ul>


<p>今回は、 <code>MVVM</code> アーキテクチャを採用し、プロジェクト構成も見直しています。</p>

<p><code>objective-c
footStepMeter
├── Enum
│    ├── AlertActionType.swift
│    ├── LocationAccuracy.swift
│    └── TabBarItemTag.swift
├── Model
│    ├── CustomAnnotation.swift
│    ├── Footprint.swift
│    └── RealmManager.swift
├── View
│    ├── Parts
│    │    ├── CustomTableViewCell
│    │    └── PickerView
│    ├── Map
│    │    ├── MapViewController.swift
│    │    └── MapViewController.xib
│    ├── Setting
│    ...
├── ViewModel
│    ├── MapViewModel.swift
│    ├── SettingViewModel.swift
│    ...
├── Protocol
│    └── Injectable.swift
├── Extensions
│    ├── UIImage+Extension.swift
│    ├── UIViewController+Rx.swift
│    ...
├── AppDelegate.swift
...
</code></p>

<p>変更点としては、</p>

<ul>
<li><code>MVVM</code> なので、 <code>View</code> / <code>Model</code> / <code>ViewModel</code> フォルダを作る</li>
<li><code>Extension</code> 系は <code>Extensions</code> フォルダを作ってまとめる</li>
<li>疎結合の肝となる <code>Protocol</code> も専用に <code>Protocol</code> フォルダを作る</li>
<li><code>Storyboard</code> を廃止し、 <code>xib</code> を採用</li>
</ul>


<p>となります。<br/>
設計思想的な面で変更している部分はあるものの、以前に比べれば視認性は上がったと思っています。<br/>
(もう少し改善の余地はあるなと思いつつ&hellip;)</p>

<h4>RxSwiftを用いたMVVMアーキテクチャでの構成</h4>

<p>続いて、 <code>RxSwift</code> を用いた <code>MVVM</code> アーキテクチャで具体的に何をどのように書いているのか紹介したいと思います。<br/>
全ては紹介しきれないため、メイン画面であるマップ画面を元に一部を説明したいと思います。</p>

<h5>マップ画面の機能</h5>

<p>具体的にスクショを交えながら、機能を紹介します。</p>

<p><img src="/images/personal_development_footprintmeter_2.png" alt="歩行ルートの保存開始機能" /></p>

<p><img src="/images/personal_development_footprintmeter_3.png" alt="歩行ルートの保存終了機能" /></p>

<p><img src="/images/personal_development_footprintmeter_4.png" alt="歩行ルートの表示/非表示切替機能" /></p>

<p>さて、ここからはソースコードベースで実装について説明したいと思います。</p>

<h5>View / Model / ViewModelそれぞれの責務</h5>

<p>先程スクショベースでお見せした機能をロジックベースで言語化すると、</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
<li><code>Realm</code> から保存した位置情報を取得する</li>
</ul>


<p>のように言い換えられます。</p>

<p>では、 <code>View</code> / <code>Model</code> / <code>ViewModel</code> それぞれどんな責務を持たせれば良いのでしょうか。<br/>
下記にそれぞれの責務を簡単に書き出してみました。</p>

<ul>
<li><code>Model</code>

<ul>
<li>いわゆるビジネスロジックを担当する</li>
<li>例) API関連、ローカルDBを扱い関連など</li>
</ul>
</li>
<li><code>View</code>

<ul>
<li>ユーザアクションのキャッチ</li>
<li>画面の描画</li>
</ul>
</li>
<li><code>ViewModel</code>

<ul>
<li><code>View</code> と <code>Model</code> を繋ぐ</li>
<li><code>View</code> からの処理依頼を受けて、<code>Model</code>を介して必要な情報を取得し、<code>View</code>に特定の描画司令を出す</li>
</ul>
</li>
</ul>


<p>続いて、具体的に上記を実現する方法について説明します。</p>

<h5>Modelの説明</h5>

<p>まずは <code>Model</code> に関する実装から説明します。<br/>
本アプリの肝となる『計測した位置情報の <code>Realm</code> への保存』を実装するために、<br/>
<code>Realm</code> を管理する <code>RealmManager</code> を定義します。</p>

<p>また、 <code>Realm</code> に保存する形式を先に決める必要があるため、 <code>Footprint</code> という <code>Model</code> を作成します。</p>

<p>以下、 <code>Footprint</code> のソースコードです。<br/>
書式は <code>Realm</code> の使い方そのままなので詳細は省きます。</p>

<p>```objective-c
// Model/Footprint.swift
import RealmSwift</p>

<p>/// 足跡
class Footprint: Object {</p>

<pre><code>// ID
@objc dynamic var id: Int = 0
// 保存した歩行ルートのタイトル
@objc dynamic var title: String = ""
// 緯度
@objc dynamic var latitude: Double = 0.0
// 軽度
@objc dynamic var longitude: Double = 0.0
// 位置の精度
@objc dynamic var accuracy: Double = 0.0
// 歩行速度
@objc dynamic var speed: Double = 0.0
// 歩行方向
@objc dynamic var direction: Double = 0.0
// データの生成日時
@objc dynamic var created: Double = Date().timeIntervalSince1970

// プライマリーキーの設定
override static func primaryKey() -&gt; String? {
    return "id"
}

// インデックスの設定
override static func indexedProperties() -&gt; [String] {
    return ["title"]
}
</code></pre>

<p>}
```</p>

<p>続いて、 <code>RealmManager</code> のソースコードです。<br/>
まずは、 <code>protocol</code> として <code>RealmManagerClient</code> を定義します。<br/>
実際の <code>RealmManager</code> クラスは <code>RealmManagerClient protocol</code> を継承します。</p>

<p>こうすることで、テストを書く際にモックデータを返却することが容易になります。</p>

<p>```objective-c
// Model/RealmManager.swift
import Foundation
import CoreLocation
import RxSwift
import RealmSwift</p>

<p>protocol RealmManagerClient {</p>

<pre><code>// MARK: - Protocol Properties
var title: String { get set }

// MARK: - Protocol Methods
func setSaveTitle(_ title: String)
func createFootprint(location: CLLocation)
func fetchFootprints() -&gt; Observable&lt;Results&lt;Footprint&gt;?&gt;
func fetchFootprintsByTitle(_ text: String) -&gt; Observable&lt;Results&lt;Footprint&gt;?&gt;
func existsByTitle(_ text: String) -&gt; Observable&lt;Bool&gt;
func countFootprints() -&gt; Observable&lt;Int&gt;
func countFootprintsByTitle(_ text: String) -&gt; Observable&lt;Int&gt;
</code></pre>

<p>}
```</p>

<p>この <code>RealmManagerClient protocol</code> を継承して各メソッドの実処理を実装すると、下記のようになります。</p>

<p>```objective-c
// Model/RealmManager.swift
final class RealmManager: NSObject, RealmManagerClient {</p>

<pre><code>// MARK: - Properties
var title = String()

// MARK: - Initial Methods
override init() {
    super.init()
}

/// タイトルの保存処理
///
/// - Parameter title: 保存したいタイトル
func setSaveTitle(_ title: String) {
    self.title = title
}

// MARK: - CRUD

/// 位置情報のデータの保存処理
///
/// - Parameter location: 保存する位置情報
func createFootprint(location: CLLocation) {
    do {
        let realm = try Realm()
        let footprint = Footprint()
        let savedLastFootprint = fetchAllFootprints()?.last
        footprint.id = (savedLastFootprint != nil) ? ((savedLastFootprint?.id)! + 1) : 0
        footprint.title = self.title
        footprint.latitude = location.coordinate.latitude
        footprint.longitude = location.coordinate.longitude
        footprint.accuracy = location.horizontalAccuracy
        footprint.speed = location.speed
        footprint.direction = location.course

        // Realmへのオブジェクトの書き込み
        try realm.write {
            realm.create(Footprint.self, value: footprint, update: false)
        }
    } catch let error as NSError {
        print("Error: code - \(error.code), description - \(error.description)")
    }
}

/// 保存している全位置情報データを取得する処理
///
/// - Returns: 保存している全位置情報データ
func fetchFootprints() -&gt; Observable&lt;Results&lt;Footprint&gt;?&gt; {
    let footprints = fetchAllFootprints()
    return Observable.just(footprints)
}

/// 指定したタイトルで保存されている位置情報データを取得する処理
///
/// - Parameter text: タイトル
/// - Returns: 指定したタイトルで保存されている位置情報データ
func fetchFootprintsByTitle(_ text: String) -&gt; Observable&lt;Results&lt;Footprint&gt;?&gt; {
    do {
        let realm = try Realm()
        let footprints = realm.objects(Footprint.self).filter("title == '\(text)'")
        if footprints.count &gt; 0 {
            return Observable.just(footprints)
        }
        return Observable.just(nil)
    } catch _ as NSError {
        return Observable.just(nil)
    }
}

/// 指定したタイトルで保存されている位置情報データがあるか確認する処理
///
/// - Parameter text: タイトル
/// - Returns: 存在する場合はtrue, 存在しない場合はfalseを返却する
func existsByTitle(_ text: String) -&gt; Observable&lt;Bool&gt; {
    do {
        let realm = try Realm()
        let footprints = realm.objects(Footprint.self).filter("title == '\(text)'")
        if footprints.count &gt; 0 {
            return Observable.just(true)
        }
        return Observable.just(false)
    } catch _ as NSError {
        return Observable.just(false)
    }
}

/// 保存したい全位置情報の数を取得する処理
///
/// - Returns: 保存している位置情報の数
func countFootprints() -&gt; Observable&lt;Int&gt; {
    do {
        let realm = try Realm()
        return Observable.just(realm.objects(Footprint.self).count)
    } catch _ as NSError {
        return Observable.just(0)
    }
}

/// 指定したタイトルで保存されている位置情報の数
///
/// - Parameter text: タイトル
/// - Returns: 保存している位置情報の数
func countFootprintsByTitle(_ text: String) -&gt; Observable&lt;Int&gt; {
    do {
        let realm = try Realm()
        let footprints = realm.objects(Footprint.self).filter("title == '\(text)'")
        return Observable.just(footprints.count)
    } catch _ as NSError {
        return Observable.just(0)
    }
}

// MARK: - Private Methods

/// 保存している全位置情報データを取得する処理
///
/// - Returns: 位置情報データ
private func fetchAllFootprints() -&gt; Results&lt;Footprint&gt;? {
    do {
        let footprints = try Realm().objects(Footprint.self).sorted(byKeyPath: "id")
        return footprints
    } catch _ as NSError {
        return nil
    }
}
</code></pre>

<p>}
```</p>

<h5>protocol Injectableを用意することで依存関係の解決</h5>

<p>続いて、<code>ViewModel</code> や <code>View</code> の説明をする前に、<br/>
<code>ViewModel</code> と <code>View</code> の双方を疎結合にするための <code>protocol Injectable</code> を定義します。<br/>
※これは<a href="https://gihyo.jp/magazine/wdpress/archive/2018/vol106">WEB+DB PRESS V.106</a>で特集されていた手法をそのまま採用しています。</p>

<p>```objective-c
import UIKit</p>

<p>protocol Injectable {</p>

<pre><code>associatedtype Dependency
init(with dependency: Dependency)
</code></pre>

<p>}</p>

<p>extension Injectable where Dependency == Void {</p>

<pre><code>init() {
    self.init(with: ())
}
</code></pre>

<p>}
```</p>

<p>実際の効力は <code>ViewModel</code> や <code>View</code> のソースを見て頂けると伝わるかと思います。</p>

<h5>ViewModelの説明</h5>

<p>では、<code>ViewModel</code>について次は見ていきます。</p>

<p>先程言語化した</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
<li><code>Realm</code> から保存した位置情報を取得する</li>
</ul>


<p>の5つを実装の内の幾つかを例に説明していきます。</p>

<p>繰り返しになりますが、 <code>ViewModel</code> ですので、以下を守ることを念頭に置くことが大事です。</p>

<ul>
<li><code>ViewModel</code> の責務

<ul>
<li><code>View</code> と <code>Model</code> を繋ぐ</li>
<li><code>View</code> からの処理依頼を受けて、<code>Model</code>を介して必要な情報を取得し、<code>View</code>に特定の描画司令を出す</li>
</ul>
</li>
</ul>


<p>まずは、 <code>ViewModel</code> の最低限の実装から先に説明します。</p>

<p>```objective-c
// MapViewModel.swift
import Foundation
import RxSwift
import RxCocoa
import CoreLocation
import RealmSwift</p>

<p>// 説明(1)
final class MapViewModel: Injectable {</p>

<pre><code>// 説明(2)
struct Dependency {
    let locationManager: CLLocationManager
    let realmManager: RealmManagerClient
}

// MARK: - Properties
private let disposeBag = DisposeBag()

// MARK: Initial method
// 説明(3)
init(with dependency: Dependency) {
    let locationManager = dependency.locationManager
    let realmManager = dependency.realmManager
    ...
}
</code></pre>

<p>}
```</p>

<p><strong>説明(1)</strong><br/>
<code>MapViewModel</code> クラスは <code>Injectable</code> プロトコルを継承するクラスとして定義します。</p>

<p><strong>説明(2)</strong><br/>
<code>Injectable</code> は <code>Generic Protocol</code> として定義されているため、
説明(1)の実装により、 <code>Dependency</code> を定義する必要が出てきます。<br/>
ここでは <code>struct</code> として、そのプロパティに</p>

<ul>
<li><code>CLLocationManager</code> 型の <code>locationManager</code></li>
<li><code>RealmManagerClient</code> 型の <code>realmManager</code></li>
</ul>


<p>を定義しています。</p>

<p>ミソなのが、 <code>RealmManager</code> ではなく <code>RealmManagerClient</code> としている点です。<br/>
<code>RealmManagerClient</code> は <code>protocol</code> なので、具体的な処理は書かれていません。<br/>
あくまでもインタフェースの提供のみです。</p>

<p>このため、テストを書く際に、レスポンスをモック化することが容易になるのです。<br/>
※ <code>CLLocationManager</code> はApple提供の純正品なので難しいですが&hellip;</p>

<p><strong>説明(3)</strong><br/>
<code>MapViewModel</code> の初期化メソッドの引数に <code>Dependency</code> 型の <code>dependency</code> を渡しています。<br/>
初期化時の引数として外部から渡せるようにすることで依存性を軽減しています。</p>

<p>説明(2)の実装を活かすために、外部から渡せるようにしたと言いかえることもできますね。</p>

<p>続いて、 <code>View</code> と <code>ViewModel</code> を繋ぐ <code>RxSwift</code> の実装部分を説明してきます。</p>

<p>5つの実装の内の</p>

<ul>
<li>位置情報の取得許可の確認</li>
<li>位置情報の取得情報の確認</li>
</ul>


<p>は下記の通りに実装しています。</p>

<p>```objective-c
// MapViewModel.swift
import Foundation
import RxSwift
import RxCocoa
import CoreLocation
import RealmSwift</p>

<p>final class MapViewModel: Injectable {</p>

<pre><code>struct Dependency {
    let locationManager: CLLocationManager
    let realmManager: RealmManagerClient
}

// MARK: - Properties
private let disposeBag = DisposeBag()

// MARK: Drivers
private (set) var authorized: Driver&lt;Bool&gt;
private (set) var location: Driver&lt;CLLocationCoordinate2D&gt;

// MARK: Initial method
init(with dependency: Dependency) {
    let locationManager = dependency.locationManager
    let realmManager = dependency.realmManager

    // Initialize stored properties
    // 位置情報の取得許可の確認
    authorized = Observable.deferred({() -&gt; Observable&lt;CLAuthorizationStatus&gt; in
        let status = CLLocationManager.authorizationStatus()
        return locationManager
            .rx.didChangeAuthorizationStatus
            .startWith(status)
    })
        .asDriver(onErrorJustReturn: CLAuthorizationStatus.notDetermined)
        .map {
            switch $0 {
            case .authorizedAlways:
                return true
            default:
                return false
            }
    }

    // 位置情報の取得情報の確認
    location = locationManager.rx.didUpdateLocations
        .asDriver(onErrorJustReturn: [])
        .flatMap {
            return $0.last.map(Driver.just) ?? Driver.empty()
        }
        .map {
            realmManager.createFootprint(location: $0)
            return $0.coordinate
    }

    // 位置情報の取得許可を要求
    locationManager.requestAlwaysAuthorization()
    // バックグラウンドでの位置情報取得を許可
    locationManager.allowsBackgroundLocationUpdates = true
    // バックグラウンドで位置情報取得がわかるように設定
    locationManager.showsBackgroundLocationIndicator = true
}
</code></pre>

<p>}
```</p>

<p>これは<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample/Services/GeolocationService.swift">RxSwiftの公式ExampleのGeolocationService</a>と同じ実装です。</p>

<p>詳細は<a href="http://grandbig.github.io/blog/2018/10/06/rx-delegate/">GeolocationSampleから学ぶdelegateのRx対応</a>でも説明しているので、ここでは概略だけにします。</p>

<ul>
<li>位置情報の補足等を <code>Rx</code> でできるように独自に実装する必要があります</li>
<li>これにより <code>didChangeAuthorizationStatus</code> と <code>didUpdateLocations</code> を <code>locationManager.rx.xxx</code> のように <code>Rx</code> 実装方式に則って書けるようになります</li>
<li>それぞれハンドリングした値を <code>authorized</code> と <code>location</code> に渡すことで <code>View</code> で検知できるようにします</li>
</ul>


<p>また、5つの実装の内の</p>

<ul>
<li>位置情報の計測を開始し、<code>Realm</code> にそのデータを保存する</li>
<li>位置情報の計測を停止する</li>
</ul>


<p>は下記の通りに実装しています。</p>

<p>```objective-c
// MapViewModel.swift
import Foundation
import RxSwift
import RxCocoa
import CoreLocation
import RealmSwift</p>

<p>final class MapViewModel: Injectable {</p>

<pre><code>...
// MARK: - Properties
private let disposeBag = DisposeBag()
private var dataTitle = String()
private var isUpdatingLocation = false

// 説明(4)
// MARK: PublishSubjects
private let startUpdatingLocationStream = PublishSubject&lt;(LocationAccuracy, String?)&gt;()
private let stopUpdatingLocationStream = PublishSubject&lt;Void&gt;()

// MARK: BehaviorRelays
private let errorStream = BehaviorRelay&lt;String?&gt;(value: nil)

// MARK: Initial method
init(with dependency: Dependency) {
    ...
    // Data Binding Handling
    // 説明(6)
    observeStartUpdatingLocation(locationManager: locationManager, realmManager: realmManager)
    observeStopUpdatingLocation(locationManager: locationManager)
}
</code></pre>

<p>}</p>

<p>// 説明(5)
// MARK: &ndash; Input
extension MapViewModel {</p>

<pre><code>var startUpdatingLocation: AnyObserver&lt;(LocationAccuracy, String?)&gt; {
    return startUpdatingLocationStream.asObserver()
}
var stopUpdatingLocation: AnyObserver&lt;Void&gt; {
    return stopUpdatingLocationStream.asObserver()
}
</code></pre>

<p>}</p>

<p>// MARK: &ndash; Output
extension MapViewModel {</p>

<pre><code>var error: Driver&lt;String?&gt; {
    return errorStream.asDriver()
}
</code></pre>

<p>}</p>

<p>// MARK: &ndash; Data Binding Handling
// 説明(6)
extension MapViewModel {</p>

<pre><code>/// startUpdatingLocationStreamにデータバインディングされてきた場合の処理
///
/// - Parameters:
///   - locationManager: 位置情報管理マネージャ
///   - realmManager: Realm管理マネージャ
func observeStartUpdatingLocation(locationManager: CLLocationManager, realmManager: RealmManagerClient) {

    startUpdatingLocationStream
        .subscribe { [weak self] event in
            guard let strongSelf = self, let element = event.element, let dataTitle = element.1 else { return }
            strongSelf.dataTitle = dataTitle
            let locationAccuracy = LocationAccuracy.toCLLocationAccuracy(element.0)
            // タイトルの設定
            realmManager.setSaveTitle(dataTitle)
            // 同名タイトルの既存データが存在するか確認
            realmManager.existsByTitle(dataTitle)
                .flatMapLatest({ isExist -&gt; Observable&lt;String?&gt; in
                    if isExist {
                        return Observable.just(R.string.mapView.alreadySameTitleErrorMessage())
                    }
                    // 位置情報の取得精度を設定
                    locationManager.desiredAccuracy = locationAccuracy
                    // 位置情報の計測を開始
                    locationManager.startUpdatingLocation()
                    strongSelf.isUpdatingLocation = true
                    return Observable.just(nil)
                })
                .asDriver(onErrorJustReturn: R.string.mapView.unExpectedErrorMessage())
                .drive(strongSelf.errorStream)
                .disposed(by: strongSelf.disposeBag)
        }
        .disposed(by: disposeBag)
}

/// stopUpdatingLocationStreamにデータバインディングされてきた場合の処理
///
/// - Parameter locationManager: 位置情報管理マネージャ
func observeStopUpdatingLocation(locationManager: CLLocationManager) {

    stopUpdatingLocationStream
        .subscribe { [weak self] _ in
            guard let strongSelf = self else { return }
            // 位置情報の計測を停止
            locationManager.stopUpdatingLocation()
            strongSelf.isUpdatingLocation = false
        }
        .disposed(by: disposeBag)
}
</code></pre>

<p>}
```</p>

<p><strong>説明(4)</strong><br/>
<code>View</code> からの位置情報の取得開始と停止イベント通知をキャッチした後に、 <code>ViewModel</code> 内の処理に導くために実装している部分になります。<br/>
開発当初に <code>Observable</code> であり <code>Observer</code> でもある <code>PublishSubject</code> を利用する必要があったため、 <code>PublishSubject</code> 型として宣言しています。<br/>
現段階では <code>Observer</code> で十分な気がします。<br/>
(今後の宿題と言うことで&hellip;)</p>

<p><strong>説明(5)</strong><br/>
<code>startUpdatingLocationStream</code> と <code>stopUpdatingLocationStream</code> を <code>PublishSubject</code> として定義したことで、必要となった実装です。<br/>
<code>Observable</code> であり <code>Observer</code> でもある <code>PublishSubject</code> は便利な反面、<code>public</code> なプロパティとしておくと、誤って外側から <code>Observable</code> な機能を利用される可能性があります。</p>

<p>これを防ぐために <code>AnyObserver</code> 型のプロパティを外部に公開し、<code>PublishSubject</code> 型プロパティは <code>private</code> として内部に閉ざしています。</p>

<p>因みに、 <code>Input</code> / <code>Output</code> と分けて書くことで視認性が高まるので、<br/>
<code>error</code> に至っては <code>BehaviorRelay</code> 関連にも関わらず、この書式を取っています。<br/>
※ <code>error</code> は <code>Output</code> 時のみの利用かつ、<code>ObservableType</code> 型の <code>BehaviorRelay</code> なので誤った利用がされる恐れはないため。</p>

<p><strong>説明(6)</strong><br/>
実際に <code>View</code> からの指示を受け取った後に実行している処理になります。<br/>
この中で、必要な情報を <code>Model</code> を介して取得することで <code>MVVM</code> というアーキテクチャが取れているわけです。<br/>
<code>ViewModel</code> の中で、 <code>View</code> の描画に必要な情報を整理して、必要な情報を <code>View</code> に渡しつつ、実行処理を指示しています。</p>

<h5>Viewの説明</h5>

<p><code>ViewModel</code> に続いて <code>View</code> を説明します。<br/>
繰り返しになりますが、 <code>View</code> の責務は、</p>

<ul>
<li><code>View</code>

<ul>
<li>ユーザアクションのキャッチ</li>
<li>画面の描画</li>
</ul>
</li>
</ul>


<p>になります。<br/>
まずは、 <code>View</code> の最低限の実装から説明します。</p>

<p>```objective-c
import UIKit
import MapKit
import RxSwift
import RxCocoa</p>

<p>// 説明(1)
final class MapViewController: UIViewController, Injectable {</p>

<pre><code>typealias Dependency = MapViewModel

// MARK: - IBOutlets
@IBOutlet private weak var mapView: MKMapView!
@IBOutlet private weak var tabBar: UITabBar!
@IBOutlet private weak var searchButton: UIButton!

// MARK: - Properties
// 説明(2)
private let viewModel: MapViewModel
private let disposeBag = DisposeBag()

// MARK: - Initial methods
// 説明(3)
required init(with dependency: Dependency) {
    viewModel = dependency
    super.init(nibName: nil, bundle: nil)
}

@available(*, unavailable)
required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
}

// MARK: - Lifecycle methods
override func viewDidLoad() {
    super.viewDidLoad()
    ...
}
</code></pre>

<p>}
```</p>

<p><strong>説明(1)</strong><br/>
<code>ViewModel</code> と <code>View</code> を疎結合にするために、ここでも <code>Injectable</code> を利用します。<br/>
<code>MapViewController</code> を <code>Injectable</code> プロトコルを継承するクラスとして定義し、<br/>
<code>Dependency</code> を <code>MapViewModel</code> の別名として設定しています。</p>

<p><strong>説明(2)</strong><br/>
<code>ViewModel</code> からの指示を受け取れるように、 <code>MapViewModel</code> を宣言します。</p>

<p><strong>説明(3)</strong><br/>
<code>Injectable</code> プロトコルを継承するため、 <code>Dependency</code> を引数に持つ <code>init</code> メソッドが必要になります。<br/>
メソッド内で <code>viewModel</code> に <code>dependency</code> を与えていますが、<br/>
これは冒頭で説明した通り <code>Dependency</code> を <code>MapViewModel</code> の別名として設定しているため実現可能となります。</p>

<p>最低限の実装の次は「位置情報の計測を停止する」機能を元に、 <code>View</code> → <code>ViewModel</code> の実装を見てみます。</p>

<p>本アプリでは、<code>UITabBar</code>の「STOP」項目をタップすることで位置情報の計測停止処理を進めることができます。<br/>
よって、 <code>View</code> → <code>ViewModel</code> の部分は下記のように&hellip;</p>

<p>```objective-c
 // 説明(4)
 // Drive to ViewModel
 private func driveToViewModel() {</p>

<pre><code>tabBar.rx.didSelectItem
    .asDriver()
    .drive(onNext: { [weak self] item in
        guard let strongSelf = self else { return }
        strongSelf.didSelectTabBarItem(tag: item.tag)
        }, onCompleted: nil, onDisposed: nil)
    .disposed(by: disposeBag)
</code></pre>

<p> }</p>

<p>// 説明(5)
/// 各タブバーアイテムタップ時の処理
///
/// &ndash; Parameter tag: タブバーアイテムのタグ
private func didSelectTabBarItem(tag: Int) {</p>

<pre><code>guard let itemTag = TabBarItemTag(rawValue: tag) else { return }
switch itemTag {
case .start:
    startUpdatingLocationMode()
case .stop:
    stopUpdatingLocationMode()
case .footView:
    showOrHideFootprintMode()
case .settings:
    showSettingViewMode()
}
</code></pre>

<p>}</p>

<p>// 説明(6)
/// Stopモードに変更された場合に実行される処理
private func stopUpdatingLocationMode() {</p>

<pre><code>// 確認アラートを表示、タブバーの選択表示をnilにする(全て未選択状態にする)
let alert = UIAlertController(title: R.string.common.confirmTitle(),
                              message: R.string.mapView.stopUpdatingLocationMessage(),
                              preferredStyle: .alert)
self.promptFor(alert: alert)
    .subscribe({ [weak self] event in
        // アラートを消す
        alert.dismiss(animated: false, completion: nil)

        // アラートに表示されたOK/Cancelボタンのどちらをタップしたか確認
        guard let strongSelf = self, let alertActionType = event.element else { return }
        switch alertActionType {
        case .ok:
            // OKボタンをタップした場合
            // タブバーの全アイテムを未選択の状態にする
            strongSelf.tabBar.selectedItem = nil
            // ストップボタンをdisabledに変更
            strongSelf.activateStartButton()
            // 位置情報の取得停止をViewModelにバインディング
            Observable.just(Void())
                .bind(to: strongSelf.viewModel.stopUpdatingLocation)
                .disposed(by: strongSelf.disposeBag)
        case .cancel:
            // Cancelボタンをタップした場合
            // タブバーの選択状態をスタートボタンの選択状態に戻す
            let startTag = TabBarItemTag.start
            strongSelf.tabBar.selectedItem = strongSelf.tabBar.items?[startTag.rawValue]
        }
    })
    .disposed(by: disposeBag)
</code></pre>

<p>}
```</p>

<p><strong>説明(4)</strong><br/>
<code>RxCocoa</code> 内に <code>UITabBar+Rx.swift</code> があり、その中で <code>Rx</code> 的に扱えるように <code>didSelectItem</code> が定義されています。<br/>
ここでは、それを用いて、 <code>UITabBar</code> のタブ項目をタップしたら、 <code>didSelectTabBarItem</code> メソッドを呼び出すように処理を書いています。</p>

<p><strong>説明(5)</strong><br/>
ここは1つ1つの処理が長くなり過ぎないように、単にメソッド分けしているだけです。<br/>
<code>tag</code> の <code>0</code> 〜 <code>3</code> で判別して処理分けしているのですが、<br/>
直で数字で <code>switch</code> 文を利用したくないので <code>TabBarItemTag</code> を定義しています。</p>

<p>```objective-c
// TabBarItemTag.swift
enum TabBarItemTag: Int {</p>

<pre><code>case start = 0
case stop
case footView
case settings
</code></pre>

<p>}
```</p>

<p>単にこれだけですが、何をタップした時にどんな処理をするのかが、こちらの方がひと目でわかりますよね。</p>

<p><strong>説明(6)</strong><br/>
ここで具体的に「STOP」をタップされた場合の処理を書いています。<br/>
重要なのは、</p>

<p>```objective-c
// 位置情報の取得停止をViewModelにバインディング
Observable.just(Void())</p>

<pre><code>.bind(to: strongSelf.viewModel.stopUpdatingLocation)
.disposed(by: strongSelf.disposeBag)
</code></pre>

<p>```</p>

<p>の部分です。<br/>
「位置情報の計測を停止しますか？」という質問に「OK」と答えた際に実行される処理で、<br/>
<code>View</code> から <code>ViewModel</code> に指示が出ていることを伝えています。<br/>
(<code>Void</code>型のデータを <code>viewModel.stopUpdatingLocation</code> にバインディングしています。)</p>

<p>このような形で <code>View</code> と <code>ViewModel</code> は双方向データバインディングな関係を構築しています。</p>

<h4>今後の展望とリリース時期について</h4>

<p>ざっくりと <code>MVVM</code> で実装したソースコードを説明してきましたが、<br/>
冒頭でも述べた通り、まだアプリは完成しておりません&hellip;</p>

<p>そこで今後の展望ですが、下記2点となります。</p>

<ul>
<li><code>RxSwift</code> らしい書き方に修正する

<ul>
<li>学習しながら実装していた経緯もあり、無用に <code>PublishSubject</code> や <code>BehaviorRelay</code> を利用している箇所があります。</li>
<li>上記を <code>Driver</code> に置き換えることで視認性の向上に繋がると考えています。</li>
</ul>
</li>
<li>テストの拡充

<ul>
<li>正直、まだ十分にテストが書けていません&hellip;</li>
<li>折角、疎結合を意識しながら構築しているのでテストは書き切りたいと思っています。</li>
</ul>
</li>
</ul>


<p>それらを満たした上で、リリース時期は1月末を見込んでいます。<br/>
極力、早期なリリースを目指していきたいと思います。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回は5年前の個人開発アプリの再構築について紹介させて頂きました。</p>

<p>個人開発すると、業務で学んだ技術の復習になることもあるでしょうし、<br/>
新たな技術の学びにも繋がるかと思います。</p>

<p>筆者もめげずにこれからも新しい技術を学び続け、個人開発した結果をアウトプットしていきたいなと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[方向音痴メモ ver1.0の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1/"/>
    <updated>2017-07-23T11:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はついこの間まで趣味で開発していたアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/us/app/%E6%96%B9%E5%90%91%E9%9F%B3%E7%97%B4%E3%83%A1%E3%83%A2/id1260288529?mt=8&amp;ign-mpt=uo%3D2">方向音痴メモ</a>というアプリです。<br/>
(仕事終わりに1時間ちびちびと開発していたこともあって、)製作期間は1ヶ月もかかってしまいました。<br/>
全然大した機能があるわけでもないのに&hellip;。</p>

<p>今回の開発を通して学んだこともあるため、記録として本記事を書こうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの紹介</h3>

<p>アプリの機能から紹介したいと思います。<br/>
まず、アイコンはこちらになります。</p>

<p><img src="/images/HelpSenseOfDirection_icon.jpg" alt="方向音痴メモのアイコン" /></p>

<h4>アプリのコンセプト</h4>

<p>このアプリのターゲットはアプリの名にもある通り『方向音痴な人』です。<br/>
このターゲットを助けるために筆者は下記が必要だと考えました。</p>

<ul>
<li>道に迷った時に、通った場所の記憶を蘇らせるためのメモを残せる</li>
<li>メモは「その場所の概要」や「その場所の画像」を記録できるようにする</li>
</ul>


<p>上記を実装したのが、今回のアプリになります。</p>

<h4>アプリの使い方</h4>

<p>ではアプリの使い方を見ていきましょう。<br/>
今回はアプリ起動時にチュートリアルを見れるようにしたため、そのチュートリアルの指示に従って進めば簡単だと思います。</p>

<h5>基本的な使い方</h5>

<p>チュートリアルを進むことで、下記のように、基本的な使い方を知ることができます。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_1.jpg" alt="チュートリアル１" /><br/>
<img src="/images/HelpSenseOfDirection_tutorial_2.jpg" alt="チュートリアル２" /><br/>
<img src="/images/HelpSenseOfDirection_tutorial_3.jpg" alt="チュートリアル３" /></p>

<h5>不要なポイントの削除</h5>

<p>誤ってポイントを作成してしまうこともあると思います。<br/>
そんなときには下記のように不要なポイントを削除してしまいましょう。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_4.jpg" alt="不要なポイントの削除" /></p>

<h5>ポイントの全削除</h5>

<p>配置したポイントを一気に削除することもできます。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_5.jpg" alt="ポイントの全削除" /></p>

<h5>チュートリアルをもう一度見る</h5>

<p>初回起動時にチュートリアルを見たものの、使い方を忘れてしまうこともあるでしょう。<br/>
そんな時用にチュートリアルをもう一度見る機能を用意しています。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_6.jpg" alt="チュートリアルをもう一度見る" /></p>

<h3>アプリの実装</h3>

<p>続いて実装面に関して触れます。<br/>
実コードは<a href="https://github.com/grandbig/HelpSenseOfDirection">GitHub: HelpSenseOfDirection</a>を参照頂ければと思います。</p>

<h4>プロジェクト構成</h4>

<p>Xcode上のプロジェクト構成は下記の通りです。<br/>
今回もMVCで実装しています。</p>

<p><code>objective-c
HelpSenseOfDirection
├── Enum
│    └── MarkerType.swift
├── Model
│    ├── CustomGMSMarker.swift
│    ├── Direction.swift
│    ├── Geocoding.swift
│    ├── RealmMarker.swift
│    ├── RealmMarkerManager.swift
│    └── Marker.swift
├── View
│    ├── MarkerInfoContentsView.xib
│    ├── MarkerInfoContentsView.swift
│    ├── UIPlaceHolderTextView
│    └── CustomCell.swift
├── ViewController
│    ├── AnnotationViewController.swift
│    ├── CreateMarkerViewController.swift
│    ├── ViewController.swift
│    ├── ViewController+CLLocationManager.swift
│    ├── ViewController+GMSMapView.swift
│    ├── ViewController+SpotlightControllerView.swift
│    ├── SettingViewController.swift
│    └── SlideMenuViewController.swift
├── AppDelegate.swift
└── Main.storyboard
</code></p>

<h4>利用ライブラリ</h4>

<p>今回利用したライブラリは下記になります。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。</li>
<li><a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a><br/>
今回はAppleデフォルトではなく、Google Mapsを利用しています。</li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a><br/>
Google Directions APIやGeocoding APIを利用する際にネットワーク通信が必要なので利用しています。</li>
<li><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a><br/>
APIレスポンスとしてJSON方式で取得するので扱いやすさのために導入しています。</li>
<li><a href="https://github.com/yukiasai/Gecco">Gecco</a><br/>
チュートリアル表示用に利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>今回も少々クラス説明を書いておきたいと思います。</p>

<h5>Enum/MarkerType.swift</h5>

<p>今回のアプリでは <strong>スタート地点/ゴール地点/途中ポイント地点</strong> の3種類の地点にマーカを設置する必要があるため、<code>Enum</code>としてパターンを定義しています。<br/>
デフォルトは最も多く設置するであろう <strong>途中ポイント地点</strong> である <code>MarkerType.point</code> としています。<br/>
因みに <code>SwiftLint</code> の設定で <code>Enum</code> の <code>case</code> 定義は <strong>小文字始まり</strong> としているため、それぞれ <code>start/point/goal</code> としています。</p>

<h5>Model/CustomGMSMarker.swift</h5>

<p>Google Maps SDK for iOSでは <code>GMSMarker</code> クラスが用意されています。<br/>
今回のアプリでは、</p>

<ul>
<li>スタート地点/ゴール地点/途中ポイント地点とタイプ別でマーカを設置する</li>
<li><code>Realm</code>に<code>ID</code>を採番してマーカ情報を保存する</li>
<li>マーカをタップしたときに<code>InfoWindow</code>に表示する地点情報を<code>ID</code>を元に<code>Realm</code>から取得する</li>
</ul>


<p>という処理が必要であるため、通常の <code>GMSMarker</code> クラスでは機能が足りません。<br/>
よってプロパティに<code>id</code>と<code>type</code>を追加した <code>CustomGMSMarker</code> を作成しました。</p>

<h5>Model/Direction.swift, Model/Geocoding.swift</h5>

<p>こちらはGoogle Maps SDK for iOSだけではカバーできない機能があるため、<br/>
<code>Google Directions API</code>や<code>Google Geocoding API</code>を利用します。<br/>
そのためのクラスになります。</p>

<h5>Model/Marker.swift</h5>

<p>これは少々わかりにくいクラスになってしまいました。<br/>
と言うのも、<code>ViewController.swift</code>の<code>putMarker</code>のメソッドの引数を減らすためだけに作成したクラスだからです。<br/>
各種で<code>Marker</code>というワードを利用していることもあって非常にわかりにくいですね&hellip;</p>

<h5>Model/RealmMarker.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式です。</p>

<h5>Model/RealmMarkerManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/MarkerInfoContentsView.swift</h5>

<p>マップにプロットするマーカをタップしたときに表示する<code>InfoWindow</code>に当たります。</p>

<h5>View/UIPlaceHolderTextView.swift</h5>

<p>こちらは<code>InfoWindow</code>内に<code>UITextView</code>が必要だったのですが、<code>UILabel</code>同様に<code>placeholder</code>を表示したかったため利用しています。<br/>
<a href="http://qiita.com/matsuhisa_h/items/5f4877e8ec89729de824">UITextViewでのPlaceHolder（プレースホルダ）をSwiftで実装する方法</a>からほぼほぼ拝借させて頂きました。</p>

<h5>View/CustomCell.swift</h5>

<p>チュートリアルを再度閲覧できるように設定画面に<code>UISwitch</code>つきの<code>Cell</code>を用意する必要があったため、作成しました。</p>

<h5>ViewController/ViewController+◯◯.swift</h5>

<p>さて今回は<code>ViewController+CLLocationManager.swift</code>のように幾つかファイルを分けています。<br/>
理由としては、<code>ViewController</code>が肥大化することで最大行数が<code>SwiftLint</code>のデフォルト値を超過してしまったためです。<br/>
簡単のために<code>delegate</code>系を別ファイルとして切り出しました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
正直、iOSアプリを開発する際のプロジェクト構成やアーキテクチャには迷いがあります。<br/>
今は個人で1ヶ月程度で開発成果を残していくことが目的になっているため、慣れているMVC形式での開発で進めてしまっています。<br/>
ただ、チーム開発やモダンな開発のことを考えるともう少しチャレンジを入れてみたいと思っています。</p>

<p>引き続き別アプリの開発を進めているので、徐々に新しい要素を追加してブログ記事に残せていければと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[足跡計 ver1.0.3の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3/"/>
    <updated>2017-06-29T22:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はいつもと趣向を変えて、最近作り直したアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/jp/app/%E8%B6%B3%E8%B7%A1%E8%A8%88/id725412788?mt=8">足跡計</a>というアプリです。<br/>
これは実に3年半以上昔に作成したアプリで、v1.0.0リリース後に一度も更新をしていませんでした&hellip;。</p>

<p>そんな状況なので当たり前ではあるのですが、<br/>
前々からAppleより警告が来ていたものの対応せずにいたら、とうとうApp Storeから削除されてしまいました。　　</p>

<p>最近、iOSアプリ開発を仕事でもする機会がなくなっていた筆者にとって、これを良い機会だと捉え、アプリを作り直してみることにしました。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!-- more -->


<h3>アプリの紹介</h3>

<p>まずはアプリの機能について紹介してみたいと思います。<br/>
基本的にはv1.0.0からそんなに変えてはいません。</p>

<p>アイコンはこちらになります。</p>

<p><img src="/images/footStepMeter_Icon.png" alt="足跡計のアイコン" /></p>

<h4>移動経路の計測</h4>

<p>メイン機能として <strong>移動経路の計測</strong> が可能です。<br/>
手順は実に簡単で、</p>

<ol>
<li>初期画面にてタブの『開始』ボタンをタップします</li>
<li>計測したい精度を選択します</li>
<li>計測する経路のタイトルを設定します</li>
</ol>


<p>以上となります。</p>

<p><img src="/images/footStepMeter4.png" alt="移動経路の計測手順" /></p>

<p>計測したい精度の種類としては、</p>

<ul>
<li>最高精度: kCLLocationAccuracyBestForNavigation</li>
<li>高精度: kCLLocationAccuracyBest</li>
<li>10m誤差: kCLLocationAccuracyNearestTenMeters</li>
<li>100m誤差: kCLLocationAccuracyHundredMeters</li>
<li>1km誤差: kCLLocationAccuracyKilometer</li>
<li>3km誤差: kCLLocationAccuracyThreeKilometers</li>
</ul>


<p>となっています。</p>

<h4>過去経路の閲覧</h4>

<p>計測直後の経路を見ることはもちろん、過去の経路を閲覧することもできます。<br/>
また、経路表示のために配置しているアイコンを「人の足跡アイコン」と「動物の足跡アイコン」の2つを切り替えることが可能です。</p>

<p>さらに、もう1つの機能として、過去経路のデータをCSVファイルとしてメールで送信することができます。</p>

<p><img src="/images/footStepMeter5.png" alt="過去の経路の閲覧" /></p>

<h3>アプリの実装</h3>

<p>さて、続いて、アプリの実装部分、中身について紹介したいと思います。<br/>
実コードは<a href="https://github.com/grandbig/footStepMeter">GitHub: footStepMeter</a>を見て頂ければわかるのですが、かいつまんで少々説明したいと思います。</p>

<h4>プロジェクト構成</h4>

<p>プロジェクト構成は下記の通りです。<br/>
シンプルにMVCで実装しています。</p>

<p><code>objective-c
footStepMeter
├── Enum
│    └── LocationAccuracy.swift
├── Model
│    ├── Location.swift
│    ├── Footprint.swift
│    ├── FootprintManager.swift
│    ├── CustomAnnotation.swift
│    └── UIImage+Extension.swift
├── View
│    ├── PickerView.xib
│    └── PickerView.swift
├── AppDelegate.swift
├── ViewController.swift
├── SettingViewController.swift
├── FootprintsViewController.swift
├── AboutViewController.swift
├── LicenceViewController.swift
├── HistoryViewController.swift
└── Main.storyboard
</code></p>

<p>本当は <code>ViewController</code>系をフォルダにまとめても良かったのですが、そのままにしています。<br/>
あとMain.storyboardも<code>View</code>フォルダ配下においても良かったのですが、これもそのままにしています。</p>

<h4>利用OSSライブラリ</h4>

<p>今回導入したOSSライブラリは以下の通りです。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。<br/>
因みに、V1.0.0では<a href="https://github.com/ccgus/fmdb">fmdb</a>を使っていました。</li>
<li><a href="https://github.com/Quick/Quick">Quick</a><br/>
UIテストのために利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>少し、各クラスの説明や意図についても紹介します。</p>

<h5>Enum/LocationAccuracy.swift</h5>

<p>わざわざ <code>Enum/LocationAccuracy.swift</code> を用意した理由としては、位置情報の精度は各種クラスで利用する可能性があるためです。<br/>
実際は <code>Model/Location.swift</code> と <code>View/PickerView.swift</code> で利用しています。</p>

<h5>Model/Location.swift</h5>

<p>位置情報関連のロジック処理を書いています。<br/>
実態は <code>CLLocationManagerDelegate</code> を逃した感じになっています。</p>

<h5>Model/Footprint.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式ですね。</p>

<h5>Model/FootprintManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/PickerView.swift</h5>

<p><code>UIPickerView</code>は<code>UITableView</code>に負けず劣らず面倒な作業が多いので、<code>ViewController</code>からは切り離して扱っています。<br/>
<code>Main.storyboard</code>に配置することはできなくもないのですが、</p>

<ul>
<li>必要な機会が少ないのに、<code>UITabBar</code>などの他の要素と被って配置されるのが気になる</li>
<li>初めは非表示状態にしたい</li>
</ul>


<p>の理由から <code>ViewController</code> で <code>self.view.addSubView(pickerView!)</code> として要素を追加しています。</p>

<p>位置情報の精度を選択するときに利用するので、ピッカーの各行に精度を表示する必要があります。<br/>
そこで <code>Enum/LocationAccuracy.swift</code> で定義した値を利用しています。</p>

<h3>アプリのテストについて</h3>

<p><code>Quick</code>を導入した本格的なテストを実装することを考えていたものの、実際にはあまり書けていません&hellip;</p>

<p><code>FootprintManager.swift</code>の単体テスト用に<code>FootprintManagerTests.swift</code>を実装しました。<br/>
中身は<a href="http://grandbig.github.io/blog/2017/05/06/quick-2/">QuickでSwiftコードのUnitテストをしよう！(2)</a>で書いた内容です。</p>

<p>View系のテストも実装しようと思ったものの、下記のように途中までしか書けていません。<br/>
(というのも、View系だとUIテストの方に譲った方が実装しやすいのかなと思ったからなんですよね。)</p>

<p>```objective-c
// ViewControllerTests.swift
import Quick
import Nimble
import RealmSwift
@testable import footStepMeter</p>

<p>class ViewControllerTests: QuickSpec {</p>

<pre><code>override func spec() {
    var subject: ViewController!

    beforeEach {
        // StoryboardからViewControllerを初期化
        subject = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "ViewController") as? ViewController

        expect(subject.view).notTo(beNil())
        expect(subject.statusBarView).notTo(beNil())
        expect(subject.navigationBar).notTo(beNil())
        expect(subject.mapView).notTo(beNil())
        expect(subject.tabBar).notTo(beNil())
        expect(subject.currentLocationButton).notTo(beNil())
        expect(subject.countLabel).notTo(beNil())
    }

    it("countLabel default is ****") {
        expect(subject.countLabel.text).to(equal("****"))
    }

    it("User's current location move when tapped currentLocationButton") {
        subject.currentLocationButton.sendActions(for: UIControlEvents.touchUpInside)
        print(subject.mapView.region.span.latitudeDelta)
        print(subject.mapView.region.span.longitudeDelta)
        expect(String(format: "%.2f", subject.mapView.region.span.latitudeDelta)).to(equal("0.06"))
        expect(String(format: "%.2f", subject.mapView.region.span.longitudeDelta)).to(equal("0.05"))
    }
}
</code></pre>

<p>}
```</p>

<p>UIテストもRecording機能を使って、少し実装したものの、やっぱり手で書かなくてはいけない部分が出てくるな〜と思い、一旦止めています。<br/>
(ま、当たり前なんですけどね。)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はiOSアプリ開発およびSwiftコーディングのリハビリも兼ねて進めてみました。<br/>
また別のアプリ開発も考えていたりするので、完成でき次第、どんどんブログでも紹介できればと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p><del>※現在、アップデート申請中のため、公開されていません。</del><br/>
<del>(公開され次第、合わせてブログを更新する予定です。)</del><br/>
2015/05/28にめでたく公開されました！！<br/>
本記事を書いてから、実に1ヶ月もの時間を要したのですが、そこには新たに判明した事柄があったためです。<br/>
そこについて本記事に追記させて頂きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<h4>アップデート完了までの道のり</h4>

<p>さて、ここからは追記になります。<br/>
さらっと審査が通るかと思っていたものの、実に2度の <strong>リジェクト</strong> を受けました。</p>

<p>リジェクトの理由は、本アプリでも受けていた設定画面のUUID/major/minorの手動変更が<a href="http://adcdownload.apple.com//Documents/license_agreements__ios_standard/iOS_Program_Standard_Agreement_20150309.pdf">iOS Developer Program License Agreement</a>の3.3.1項目に違反するとされたためです。<br/>
既存のバージョンで問題視されていなかった項目だったため、その旨を伝えたり、major/minorの手動変更のみを削除したり(UUIDのみの手動変更を許可したり)したものの、同様の理由でリジェクトされました。</p>

<p>因みに同項目では、<br/>
<strong>Applications may only use Documented APIs in the manner prescribed by Apple and must not use or call any private APIs.</strong> <br/>
と記されています。</p>

<p>要は、Public APIがAppleの意図せぬ形で使われている or Private APIを使っている場合に引っかかる項目ということです。<br/>
他に手動変更を許可しているアプリはもうアップデートできないんじゃないかな&hellip;なんて思ってしまいました。</p>

<p>専用のBeacon機器を出している会社さんの場合はOKなのかは気になるところです。<br/>
これができないとなると、iBeaconが普及し得ないと思いますし&hellip;。</p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEメジャー ver 1.0.0]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0/"/>
    <updated>2013-11-17T21:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリ『BLEメジャー ver1.0.0』の紹介</h3>

<p>本日(2013/11/17)、iPhoneアプリ<strong>BLEメジャー</strong>をリリースしました。本アプリはiOS7から新たに使用可能となったiBeaconの技術を利用した距離計測アプリです。今回はこのアプリの使い方について説明したいと思います。</p>

<p>興味を持った方はインストールページヘ！！<br/>
<a href="https://itunes.apple.com/jp/app/blemeja/id741597546?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<h4>BLEメジャーの使い方</h4>

<p>早速、本アプリの使い方を説明します。<br/>
まず、iOS7以上の端末(iPhone4S以降, iPad 第3世代以降, iPad mini, iPod touch 第5世代以降)を2台用意してください。2端末間の距離を計測するために必要となります。<br/>
次に各端末で<strong>BLEメジャー</strong>アプリを起動します。すると下記画面が表示されます。</p>

<p><img src="/images/ble_measure1.PNG" alt="BLE初期画面" /></p>

<p>２台のうちどちらかの端末で<strong>Attract</strong>を、もう片方の端末で<strong>Keep</strong>を選択してください。
<img src="/images/ble_measure2.png" alt="別々のボタンをタップする" /></p>

<p>それぞれ別の画面が表示されます。<br/>
<img src="/images/ble_measure3.png" alt="Attract画面とKeep画面が表示されます" /></p>

<p>Attract(左側の)画面では初期起動時のみ位置情報サービスの利用の可否を求められます。これは必ず許可を選択してください。2端末間の計測が始まっていない時は<strong>default</strong>と表示されます。Keep(右側の)画面では特に操作はありません。<br/>
計測が開始されるとAttract側で数値が表示されます。</p>

<p><img src="/images/ble_measure4.PNG" alt="計測開始" /></p>

<p>※うまく計測できない場合は再度、両端末でアプリを起動し直してください。<br/>
※途中、計測がうまくいかなくなったときは-1.000000[m]と表示されますが、そのまま使って頂くと計測が再開されます。</p>
]]></content>
  </entry>
  
</feed>
