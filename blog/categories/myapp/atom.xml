<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MyApp | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/myapp/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2018-10-07T13:41:51+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[方向音痴メモ ver1.0の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1/"/>
    <updated>2017-07-23T11:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/helpsenseofdirection-ver-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はついこの間まで趣味で開発していたアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/us/app/%E6%96%B9%E5%90%91%E9%9F%B3%E7%97%B4%E3%83%A1%E3%83%A2/id1260288529?mt=8&amp;ign-mpt=uo%3D2">方向音痴メモ</a>というアプリです。<br/>
(仕事終わりに1時間ちびちびと開発していたこともあって、)製作期間は1ヶ月もかかってしまいました。<br/>
全然大した機能があるわけでもないのに&hellip;。</p>

<p>今回の開発を通して学んだこともあるため、記録として本記事を書こうと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>アプリの紹介</h3>

<p>アプリの機能から紹介したいと思います。<br/>
まず、アイコンはこちらになります。</p>

<p><img src="/images/HelpSenseOfDirection_icon.jpg" alt="方向音痴メモのアイコン" /></p>

<h4>アプリのコンセプト</h4>

<p>このアプリのターゲットはアプリの名にもある通り『方向音痴な人』です。<br/>
このターゲットを助けるために筆者は下記が必要だと考えました。</p>

<ul>
<li>道に迷った時に、通った場所の記憶を蘇らせるためのメモを残せる</li>
<li>メモは「その場所の概要」や「その場所の画像」を記録できるようにする</li>
</ul>


<p>上記を実装したのが、今回のアプリになります。</p>

<h4>アプリの使い方</h4>

<p>ではアプリの使い方を見ていきましょう。<br/>
今回はアプリ起動時にチュートリアルを見れるようにしたため、そのチュートリアルの指示に従って進めば簡単だと思います。</p>

<h5>基本的な使い方</h5>

<p>チュートリアルを進むことで、下記のように、基本的な使い方を知ることができます。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_1.jpg" alt="チュートリアル１" /><br/>
<img src="/images/HelpSenseOfDirection_tutorial_2.jpg" alt="チュートリアル２" /><br/>
<img src="/images/HelpSenseOfDirection_tutorial_3.jpg" alt="チュートリアル３" /></p>

<h5>不要なポイントの削除</h5>

<p>誤ってポイントを作成してしまうこともあると思います。<br/>
そんなときには下記のように不要なポイントを削除してしまいましょう。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_4.jpg" alt="不要なポイントの削除" /></p>

<h5>ポイントの全削除</h5>

<p>配置したポイントを一気に削除することもできます。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_5.jpg" alt="ポイントの全削除" /></p>

<h5>チュートリアルをもう一度見る</h5>

<p>初回起動時にチュートリアルを見たものの、使い方を忘れてしまうこともあるでしょう。<br/>
そんな時用にチュートリアルをもう一度見る機能を用意しています。</p>

<p><img src="/images/HelpSenseOfDirection_tutorial_6.jpg" alt="チュートリアルをもう一度見る" /></p>

<h3>アプリの実装</h3>

<p>続いて実装面に関して触れます。<br/>
実コードは<a href="https://github.com/grandbig/HelpSenseOfDirection">GitHub: HelpSenseOfDirection</a>を参照頂ければと思います。</p>

<h4>プロジェクト構成</h4>

<p>Xcode上のプロジェクト構成は下記の通りです。<br/>
今回もMVCで実装しています。</p>

<p><code>objective-c
HelpSenseOfDirection
├── Enum
│    └── MarkerType.swift
├── Model
│    ├── CustomGMSMarker.swift
│    ├── Direction.swift
│    ├── Geocoding.swift
│    ├── RealmMarker.swift
│    ├── RealmMarkerManager.swift
│    └── Marker.swift
├── View
│    ├── MarkerInfoContentsView.xib
│    ├── MarkerInfoContentsView.swift
│    ├── UIPlaceHolderTextView
│    └── CustomCell.swift
├── ViewController
│    ├── AnnotationViewController.swift
│    ├── CreateMarkerViewController.swift
│    ├── ViewController.swift
│    ├── ViewController+CLLocationManager.swift
│    ├── ViewController+GMSMapView.swift
│    ├── ViewController+SpotlightControllerView.swift
│    ├── SettingViewController.swift
│    └── SlideMenuViewController.swift
├── AppDelegate.swift
└── Main.storyboard
</code></p>

<h4>利用ライブラリ</h4>

<p>今回利用したライブラリは下記になります。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。</li>
<li><a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a><br/>
今回はAppleデフォルトではなく、Google Mapsを利用しています。</li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a><br/>
Google Directions APIやGeocoding APIを利用する際にネットワーク通信が必要なので利用しています。</li>
<li><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a><br/>
APIレスポンスとしてJSON方式で取得するので扱いやすさのために導入しています。</li>
<li><a href="https://github.com/yukiasai/Gecco">Gecco</a><br/>
チュートリアル表示用に利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>今回も少々クラス説明を書いておきたいと思います。</p>

<h5>Enum/MarkerType.swift</h5>

<p>今回のアプリでは <strong>スタート地点/ゴール地点/途中ポイント地点</strong> の3種類の地点にマーカを設置する必要があるため、<code>Enum</code>としてパターンを定義しています。<br/>
デフォルトは最も多く設置するであろう <strong>途中ポイント地点</strong> である <code>MarkerType.point</code> としています。<br/>
因みに <code>SwiftLint</code> の設定で <code>Enum</code> の <code>case</code> 定義は <strong>小文字始まり</strong> としているため、それぞれ <code>start/point/goal</code> としています。</p>

<h5>Model/CustomGMSMarker.swift</h5>

<p>Google Maps SDK for iOSでは <code>GMSMarker</code> クラスが用意されています。<br/>
今回のアプリでは、</p>

<ul>
<li>スタート地点/ゴール地点/途中ポイント地点とタイプ別でマーカを設置する</li>
<li><code>Realm</code>に<code>ID</code>を採番してマーカ情報を保存する</li>
<li>マーカをタップしたときに<code>InfoWindow</code>に表示する地点情報を<code>ID</code>を元に<code>Realm</code>から取得する</li>
</ul>


<p>という処理が必要であるため、通常の <code>GMSMarker</code> クラスでは機能が足りません。<br/>
よってプロパティに<code>id</code>と<code>type</code>を追加した <code>CustomGMSMarker</code> を作成しました。</p>

<h5>Model/Direction.swift, Model/Geocoding.swift</h5>

<p>こちらはGoogle Maps SDK for iOSだけではカバーできない機能があるため、<br/>
<code>Google Directions API</code>や<code>Google Geocoding API</code>を利用します。<br/>
そのためのクラスになります。</p>

<h5>Model/Marker.swift</h5>

<p>これは少々わかりにくいクラスになってしまいました。<br/>
と言うのも、<code>ViewController.swift</code>の<code>putMarker</code>のメソッドの引数を減らすためだけに作成したクラスだからです。<br/>
各種で<code>Marker</code>というワードを利用していることもあって非常にわかりにくいですね&hellip;</p>

<h5>Model/RealmMarker.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式です。</p>

<h5>Model/RealmMarkerManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/MarkerInfoContentsView.swift</h5>

<p>マップにプロットするマーカをタップしたときに表示する<code>InfoWindow</code>に当たります。</p>

<h5>View/UIPlaceHolderTextView.swift</h5>

<p>こちらは<code>InfoWindow</code>内に<code>UITextView</code>が必要だったのですが、<code>UILabel</code>同様に<code>placeholder</code>を表示したかったため利用しています。<br/>
<a href="http://qiita.com/matsuhisa_h/items/5f4877e8ec89729de824">UITextViewでのPlaceHolder（プレースホルダ）をSwiftで実装する方法</a>からほぼほぼ拝借させて頂きました。</p>

<h5>View/CustomCell.swift</h5>

<p>チュートリアルを再度閲覧できるように設定画面に<code>UISwitch</code>つきの<code>Cell</code>を用意する必要があったため、作成しました。</p>

<h5>ViewController/ViewController+◯◯.swift</h5>

<p>さて今回は<code>ViewController+CLLocationManager.swift</code>のように幾つかファイルを分けています。<br/>
理由としては、<code>ViewController</code>が肥大化することで最大行数が<code>SwiftLint</code>のデフォルト値を超過してしまったためです。<br/>
簡単のために<code>delegate</code>系を別ファイルとして切り出しました。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
正直、iOSアプリを開発する際のプロジェクト構成やアーキテクチャには迷いがあります。<br/>
今は個人で1ヶ月程度で開発成果を残していくことが目的になっているため、慣れているMVC形式での開発で進めてしまっています。<br/>
ただ、チーム開発やモダンな開発のことを考えるともう少しチャレンジを入れてみたいと思っています。</p>

<p>引き続き別アプリの開発を進めているので、徐々に新しい要素を追加してブログ記事に残せていければと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[足跡計 ver1.0.3の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3/"/>
    <updated>2017-06-29T22:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/29/footstepmeter-ver1-dot-0-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はいつもと趣向を変えて、最近作り直したアプリについて紹介したいと思います。<br/>
それは<a href="https://itunes.apple.com/jp/app/%E8%B6%B3%E8%B7%A1%E8%A8%88/id725412788?mt=8">足跡計</a>というアプリです。<br/>
これは実に3年半以上昔に作成したアプリで、v1.0.0リリース後に一度も更新をしていませんでした&hellip;。</p>

<p>そんな状況なので当たり前ではあるのですが、<br/>
前々からAppleより警告が来ていたものの対応せずにいたら、とうとうApp Storeから削除されてしまいました。　　</p>

<p>最近、iOSアプリ開発を仕事でもする機会がなくなっていた筆者にとって、これを良い機会だと捉え、アプリを作り直してみることにしました。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!-- more -->


<h3>アプリの紹介</h3>

<p>まずはアプリの機能について紹介してみたいと思います。<br/>
基本的にはv1.0.0からそんなに変えてはいません。</p>

<p>アイコンはこちらになります。</p>

<p><img src="/images/footStepMeter_Icon.png" alt="足跡計のアイコン" /></p>

<h4>移動経路の計測</h4>

<p>メイン機能として <strong>移動経路の計測</strong> が可能です。<br/>
手順は実に簡単で、</p>

<ol>
<li>初期画面にてタブの『開始』ボタンをタップします</li>
<li>計測したい精度を選択します</li>
<li>計測する経路のタイトルを設定します</li>
</ol>


<p>以上となります。</p>

<p><img src="/images/footStepMeter4.png" alt="移動経路の計測手順" /></p>

<p>計測したい精度の種類としては、</p>

<ul>
<li>最高精度: kCLLocationAccuracyBestForNavigation</li>
<li>高精度: kCLLocationAccuracyBest</li>
<li>10m誤差: kCLLocationAccuracyNearestTenMeters</li>
<li>100m誤差: kCLLocationAccuracyHundredMeters</li>
<li>1km誤差: kCLLocationAccuracyKilometer</li>
<li>3km誤差: kCLLocationAccuracyThreeKilometers</li>
</ul>


<p>となっています。</p>

<h4>過去経路の閲覧</h4>

<p>計測直後の経路を見ることはもちろん、過去の経路を閲覧することもできます。<br/>
また、経路表示のために配置しているアイコンを「人の足跡アイコン」と「動物の足跡アイコン」の2つを切り替えることが可能です。</p>

<p>さらに、もう1つの機能として、過去経路のデータをCSVファイルとしてメールで送信することができます。</p>

<p><img src="/images/footStepMeter5.png" alt="過去の経路の閲覧" /></p>

<h3>アプリの実装</h3>

<p>さて、続いて、アプリの実装部分、中身について紹介したいと思います。<br/>
実コードは<a href="https://github.com/grandbig/footStepMeter">GitHub: footStepMeter</a>を見て頂ければわかるのですが、かいつまんで少々説明したいと思います。</p>

<h4>プロジェクト構成</h4>

<p>プロジェクト構成は下記の通りです。<br/>
シンプルにMVCで実装しています。</p>

<p><code>objective-c
footStepMeter
├── Enum
│    └── LocationAccuracy.swift
├── Model
│    ├── Location.swift
│    ├── Footprint.swift
│    ├── FootprintManager.swift
│    ├── CustomAnnotation.swift
│    └── UIImage+Extension.swift
├── View
│    ├── PickerView.xib
│    └── PickerView.swift
├── AppDelegate.swift
├── ViewController.swift
├── SettingViewController.swift
├── FootprintsViewController.swift
├── AboutViewController.swift
├── LicenceViewController.swift
├── HistoryViewController.swift
└── Main.storyboard
</code></p>

<p>本当は <code>ViewController</code>系をフォルダにまとめても良かったのですが、そのままにしています。<br/>
あとMain.storyboardも<code>View</code>フォルダ配下においても良かったのですが、これもそのままにしています。</p>

<h4>利用OSSライブラリ</h4>

<p>今回導入したOSSライブラリは以下の通りです。</p>

<ul>
<li><a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">Realm / RealmSwift</a><br/>
足跡のデータを端末内部に保存するために利用しています。<br/>
因みに、V1.0.0では<a href="https://github.com/ccgus/fmdb">fmdb</a>を使っていました。</li>
<li><a href="https://github.com/Quick/Quick">Quick</a><br/>
UIテストのために利用しています。</li>
</ul>


<h4>各クラスの説明</h4>

<p>少し、各クラスの説明や意図についても紹介します。</p>

<h5>Enum/LocationAccuracy.swift</h5>

<p>わざわざ <code>Enum/LocationAccuracy.swift</code> を用意した理由としては、位置情報の精度は各種クラスで利用する可能性があるためです。<br/>
実際は <code>Model/Location.swift</code> と <code>View/PickerView.swift</code> で利用しています。</p>

<h5>Model/Location.swift</h5>

<p>位置情報関連のロジック処理を書いています。<br/>
実態は <code>CLLocationManagerDelegate</code> を逃した感じになっています。</p>

<h5>Model/Footprint.swift</h5>

<p><code>RealmSwift</code>を利用しているので、保存するモデルの形式ですね。</p>

<h5>Model/FootprintManager.swift</h5>

<p><code>RealmSwift</code>を用いてデータの保存/取得/削除などを管理するクラスです。</p>

<h5>View/PickerView.swift</h5>

<p><code>UIPickerView</code>は<code>UITableView</code>に負けず劣らず面倒な作業が多いので、<code>ViewController</code>からは切り離して扱っています。<br/>
<code>Main.storyboard</code>に配置することはできなくもないのですが、</p>

<ul>
<li>必要な機会が少ないのに、<code>UITabBar</code>などの他の要素と被って配置されるのが気になる</li>
<li>初めは非表示状態にしたい</li>
</ul>


<p>の理由から <code>ViewController</code> で <code>self.view.addSubView(pickerView!)</code> として要素を追加しています。</p>

<p>位置情報の精度を選択するときに利用するので、ピッカーの各行に精度を表示する必要があります。<br/>
そこで <code>Enum/LocationAccuracy.swift</code> で定義した値を利用しています。</p>

<h3>アプリのテストについて</h3>

<p><code>Quick</code>を導入した本格的なテストを実装することを考えていたものの、実際にはあまり書けていません&hellip;</p>

<p><code>FootprintManager.swift</code>の単体テスト用に<code>FootprintManagerTests.swift</code>を実装しました。<br/>
中身は<a href="http://grandbig.github.io/blog/2017/05/06/quick-2/">QuickでSwiftコードのUnitテストをしよう！(2)</a>で書いた内容です。</p>

<p>View系のテストも実装しようと思ったものの、下記のように途中までしか書けていません。<br/>
(というのも、View系だとUIテストの方に譲った方が実装しやすいのかなと思ったからなんですよね。)</p>

<p>```objective-c
// ViewControllerTests.swift
import Quick
import Nimble
import RealmSwift
@testable import footStepMeter</p>

<p>class ViewControllerTests: QuickSpec {</p>

<pre><code>override func spec() {
    var subject: ViewController!

    beforeEach {
        // StoryboardからViewControllerを初期化
        subject = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "ViewController") as? ViewController

        expect(subject.view).notTo(beNil())
        expect(subject.statusBarView).notTo(beNil())
        expect(subject.navigationBar).notTo(beNil())
        expect(subject.mapView).notTo(beNil())
        expect(subject.tabBar).notTo(beNil())
        expect(subject.currentLocationButton).notTo(beNil())
        expect(subject.countLabel).notTo(beNil())
    }

    it("countLabel default is ****") {
        expect(subject.countLabel.text).to(equal("****"))
    }

    it("User's current location move when tapped currentLocationButton") {
        subject.currentLocationButton.sendActions(for: UIControlEvents.touchUpInside)
        print(subject.mapView.region.span.latitudeDelta)
        print(subject.mapView.region.span.longitudeDelta)
        expect(String(format: "%.2f", subject.mapView.region.span.latitudeDelta)).to(equal("0.06"))
        expect(String(format: "%.2f", subject.mapView.region.span.longitudeDelta)).to(equal("0.05"))
    }
}
</code></pre>

<p>}
```</p>

<p>UIテストもRecording機能を使って、少し実装したものの、やっぱり手で書かなくてはいけない部分が出てくるな〜と思い、一旦止めています。<br/>
(ま、当たり前なんですけどね。)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はiOSアプリ開発およびSwiftコーディングのリハビリも兼ねて進めてみました。<br/>
また別のアプリ開発も考えていたりするので、完成でき次第、どんどんブログでも紹介できればと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p><del>※現在、アップデート申請中のため、公開されていません。</del><br/>
<del>(公開され次第、合わせてブログを更新する予定です。)</del><br/>
2015/05/28にめでたく公開されました！！<br/>
本記事を書いてから、実に1ヶ月もの時間を要したのですが、そこには新たに判明した事柄があったためです。<br/>
そこについて本記事に追記させて頂きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<h4>アップデート完了までの道のり</h4>

<p>さて、ここからは追記になります。<br/>
さらっと審査が通るかと思っていたものの、実に2度の <strong>リジェクト</strong> を受けました。</p>

<p>リジェクトの理由は、本アプリでも受けていた設定画面のUUID/major/minorの手動変更が<a href="http://adcdownload.apple.com//Documents/license_agreements__ios_standard/iOS_Program_Standard_Agreement_20150309.pdf">iOS Developer Program License Agreement</a>の3.3.1項目に違反するとされたためです。<br/>
既存のバージョンで問題視されていなかった項目だったため、その旨を伝えたり、major/minorの手動変更のみを削除したり(UUIDのみの手動変更を許可したり)したものの、同様の理由でリジェクトされました。</p>

<p>因みに同項目では、<br/>
<strong>Applications may only use Documented APIs in the manner prescribed by Apple and must not use or call any private APIs.</strong> <br/>
と記されています。</p>

<p>要は、Public APIがAppleの意図せぬ形で使われている or Private APIを使っている場合に引っかかる項目ということです。<br/>
他に手動変更を許可しているアプリはもうアップデートできないんじゃないかな&hellip;なんて思ってしまいました。</p>

<p>専用のBeacon機器を出している会社さんの場合はOKなのかは気になるところです。<br/>
これができないとなると、iBeaconが普及し得ないと思いますし&hellip;。</p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLEメジャー ver 1.0.0]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0/"/>
    <updated>2013-11-17T21:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/17/ble-measure-1-dot-0-0</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリ『BLEメジャー ver1.0.0』の紹介</h3>

<p>本日(2013/11/17)、iPhoneアプリ<strong>BLEメジャー</strong>をリリースしました。本アプリはiOS7から新たに使用可能となったiBeaconの技術を利用した距離計測アプリです。今回はこのアプリの使い方について説明したいと思います。</p>

<p>興味を持った方はインストールページヘ！！<br/>
<a href="https://itunes.apple.com/jp/app/blemeja/id741597546?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<h4>BLEメジャーの使い方</h4>

<p>早速、本アプリの使い方を説明します。<br/>
まず、iOS7以上の端末(iPhone4S以降, iPad 第3世代以降, iPad mini, iPod touch 第5世代以降)を2台用意してください。2端末間の距離を計測するために必要となります。<br/>
次に各端末で<strong>BLEメジャー</strong>アプリを起動します。すると下記画面が表示されます。</p>

<p><img src="/images/ble_measure1.PNG" alt="BLE初期画面" /></p>

<p>２台のうちどちらかの端末で<strong>Attract</strong>を、もう片方の端末で<strong>Keep</strong>を選択してください。
<img src="/images/ble_measure2.png" alt="別々のボタンをタップする" /></p>

<p>それぞれ別の画面が表示されます。<br/>
<img src="/images/ble_measure3.png" alt="Attract画面とKeep画面が表示されます" /></p>

<p>Attract(左側の)画面では初期起動時のみ位置情報サービスの利用の可否を求められます。これは必ず許可を選択してください。2端末間の計測が始まっていない時は<strong>default</strong>と表示されます。Keep(右側の)画面では特に操作はありません。<br/>
計測が開始されるとAttract側で数値が表示されます。</p>

<p><img src="/images/ble_measure4.PNG" alt="計測開始" /></p>

<p>※うまく計測できない場合は再度、両端末でアプリを起動し直してください。<br/>
※途中、計測がうまくいかなくなったときは-1.000000[m]と表示されますが、そのまま使って頂くと計測が再開されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[足跡計 ver1.0.0の紹介]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/03/footstepmeter-ver1-dot-0-0/"/>
    <updated>2013-11-03T19:19:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/03/footstepmeter-ver1-dot-0-0</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリ『足跡計 ver 1.0.0』の紹介</h3>

<p>さて、筆者が先日リリースしたiPhoneアプリについて紹介したいと思います。実はiPhoneアプリを申請するときに<strong>Support URL</strong>の入力が必須だったのです。ひとまず、筆者のブログのトップページを書いたものの、後々きちんと専用ページを作っておきたいなと思っていました。しかし、思わぬリジェクト内容から使い方の動画を作成してしまったので、何を書くか悩みました。<br/>
そこで、アプリの操作方法ではなく<strong>役立つ使用方法</strong>を記載することでインストールした方に(いや、インストールされていない方にも)作り手の意図をできるだけ伝えようと決めました。<br/>
iPhoneでの位置情報取得に興味のある方はぜひ御覧ください。</p>

<p>興味がある方は下記ボタンからインストールページヘ！</p>

<p><a href="https://itunes.apple.com/jp/app/zu-ji-ji/id725412788?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<h4>足跡計アプリについて</h4>

<p>基本操作は前回のブログにも記載しましたが、<a href="http://www.youtube.com/watch?v=r2nHW-imRv4">You Tubeにアップした動画</a>を見て頂ければ大体わかると思います。<br/>
ここでは本アプリの役立つ使い方について説明したいと思います。</p>

<p>早速、下記をご覧ください。<br/>
<img src="/images/footStepMeter1.png" alt="精度の選択" /><br/>
これはアプリで足跡計測をするときに精度を選択する画面です。全6種類の中から精度を選択することがあります。位置情報をiPhoneで扱ったことがある方ならすぐにわかると思うのですが、各選択肢はdesireAccuracyの設定を選ぶことと同義です。<br/>
つまり<br/>
・最高精度： kCLLocationAccuracyBestForNavigation<br/>
・高精度： kCLLocationAccuracyBest<br/>
・10m誤差： kCLLocationAccuracyNearestTenMeters<br/>
・100m誤差： kCLLocationAccuracyHundredMeters<br/>
・1km誤差： kCLLocationAccuracyKilometer<br/>
・3km誤差： kCLLocationAccuracyThreeKilometers<br/>
のようになっているということです。</p>

<p>取得する位置情報の精度は電池消耗とのトレードオフになるので、iPhoneアプリで位置情報を取得する場合、どの程度の精度にすべきか悩むと思います。<br/>
ここの判断を適正に行わないと電池の消耗の激しさばかりが目立ってしまい、アプリのレビューで凄まじく叩かれることになるかもしれません&hellip;。<br/>
とは言え、実際にどの精度を選択すればどの程度の情報を取得できるのか、やってみないとわかりませんよね。そんなときに本アプリは非常に役に立つのです。</p>

<p>下記をご覧ください。<br/>
本アプリでは記録している情報の詳細を<strong>計測中であっても</strong>確認することができます。<br/>
<img src="/images/footStepMeter2.png" alt="情報の詳細を確認" /></p>

<p>これを見れば、計測中に現在、選択している精度がアプリとして適正かどうか確認することができますし、なんなら計測途中で精度を再選定してテストし直すこともできます。</p>

<p>また、記録した情報を解析したいということもあるでしょう。<br/>
例えば、6種類の精度を比較するために山手線を6周して、<strong>取得データ数, 精度のバラつき</strong>をグラフ化したいとかですね。そんなときは本アプリの足跡履歴からデータをメールでPCに送信してしまいましょう！受け取った後、どう解析するかは完全に自由です。<br/>
<img src="/images/footStepMeter3.png" alt="データをメールで送信" /></p>

<p>因みに、本アプリでは<strong>標準位置情報サービス</strong>を使用しています。大幅変更位置情報サービスは使っていません。(大幅変更位置情報サービスは今回の目的からは外れるためです。あくまでも設定可能な精度の中での比較をしてみたかったので&hellip;)</p>

<h4>今後について</h4>

<p>いかがだったでしょうか？驚くほどシンプルな内容ではなかったでしょうか？(筆者もたくさん書くことを想定していたのですが、案外書くことがなかった&hellip;)</p>

<p>今後は、まだまだ現状のアプリで不便なところも多々あるので、バージョンアップに取り組んでいきたいと思っています。もっと便利にオリジナリティを出していきたいという構想はあります。<br/>
もし、iPhoneでの位置情報の取得精度について悩まれている方がいましたら、本アプリを参考にして頂けると幸いです。なお、本アプリには全く広告はついていない&amp;無料アプリですので、筆者にはお金は一銭も入りません笑。</p>
]]></content>
  </entry>
  
</feed>
