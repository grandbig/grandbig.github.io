<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: autolayout | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/autolayout/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2018-08-04T18:29:31+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[今更だけど正しく身につけよう『Content Hugging Priority』と『Content Compression Resistance Priority』]]></title>
    <link href="http://grandbig.github.io/blog/2018/08/04/content-hugging-priority/"/>
    <updated>2018-08-04T16:42:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2018/08/04/content-hugging-priority</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は <code>AutoLayout</code> の中でもしっかりと知っておきたい以下2つを紹介します。</p>

<ul>
<li><code>Content Hugging Priority</code></li>
<li><code>Content Compression Resistance Priority</code></li>
</ul>


<p>上記2つを利用することで、各サイズでの想定されたデザインを再現することができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>題材の紹介</h3>

<p>今回説明に利用する題材は以下とします。</p>

<ul>
<li><code>UILabel</code> 2つが配置されたカスタム <code>UITableViewCell</code> を持つ <code>UITableView</code> の表示</li>
<li><code>UITableViewCell</code> 内に2つの <code>UILabel</code> を配置するために <code>UIStackView</code> を利用</li>
</ul>


<p><img src="/images/content_hugging_priority_1.png" alt="説明用の題材" /></p>

<p>上記に表示した <code>UITableViewCell</code> に付与された制約は次の通りです。</p>

<ul>
<li><code>UIStackView</code> の左右に <code>SuperView</code> に対して <code>8pt</code> の制約を付与</li>
<li><code>UIStackView</code> のY位置を <code>SuperView</code> の <code>CenterY</code> と一致させる制約を付与</li>
<li><code>subTitleLabel</code> の <code>width</code> を <code>100pt</code> に指定</li>
</ul>


<p><img src="/images/content_hugging_priority_2.png" alt="付与している制約" /></p>

<h3>Content Hugging Priority</h3>

<p>先程の紹介では <code>subTitleLabel</code> に <code>width: 100pt</code> の制約を付与していました。<br/>
もし、この制約が不要で、以下のようなデザイン指定がある場合、どのように対処すれば良いでしょうか。</p>

<ul>
<li><code>titleLabel</code> の <code>width</code> を <code>subTitleLabel</code> よりも広く取りたい</li>
<li>(逆を言えば、) <code>subTitleLabel</code> の <code>width</code> はコンテンツサイズ以上に広くしたくない</li>
</ul>


<p>その場合は、<br/>
<code>titleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Hugging Priority</code> よりも低く設定します。<br/>
※デフォルト値は <code>250</code> です。</p>

<p><img src="/images/content_hugging_priority_3.png" alt="Content Hugging Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="/images/content_hugging_priority_4.png" alt="Content Hugging Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>subTitleLabel</code> のテキストである <code>GOOD</code> が全文表示される最低サイズを優先して設定していることを指しています。<br/>
逆に、 <code>titleLabel</code> は中身のテキストに寄らず、横幅が広くなっているのも同じ理由です。</p>

<p>つまり、<br/>
<code>Content Hugging Priority</code> が高いと、<strong>コンテンツのサイズを優先する</strong> ことがわかります。</p>

<h3>Content Compression Resistance Priority</h3>

<p>上記で説明した際には <code>subTitleLabel</code> のテキストが <code>GOOD</code> でした。<br/>
もしも、 <code>subTitleLabel</code> のテキストが長文だった場合、どうなるでしょうか。</p>

<p>答えは、</p>

<p><img src="/images/content_hugging_priority_5.png" alt="subTitleLabelが長文の場合" /></p>

<p>です。</p>

<p><code>subTitleLabel</code> が長くなり <code>titleLabel</code> の文字が1文字しか表示されなくなってしまいました。</p>

<p>ここで、テキストの表示重要度が <code>titleLabel</code> の方が <code>subTitleLabel</code> よりも高いとしましょう。<br/>
それを実現するために <code>Content Compression Resistance Priority</code> を利用します。</p>

<p><code>titleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> を、<br/>
<code>subTitleLabel</code> の <code>Horizontal</code> の <code>Content Compression Resistance Priority</code> よりも高く設定します。<br/>
※デフォルト値は <code>750</code> です。</p>

<p><img src="/images/content_hugging_priority_6.png" alt="Content Compression Resistance Priorityの指定" /></p>

<p>この結果、</p>

<p><img src="/images/content_hugging_priority_7.png" alt="Content Compression Resistance Priorityを設定した結果" /></p>

<p>のようになります。<br/>
これは <code>titleLabel</code> のテキストを極力表示するように優先して設定されていることを指しています。</p>

<p>つまり、 <code>Content Compression Resistance Priority</code> が高いと、<br/>
文字通り、 <strong>小さくなりにくさの優先度を高くしている</strong> ということです。</p>

<h3>おまけ</h3>

<p>因みに、 <code>subTitleLabel</code> を完全に非表示にしたくないと言った要望がある場合には、<br/>
<code>subTitleLabel</code> の <code>width</code> に最低サイズを指定すれば良いでしょう。</p>

<p><img src="/images/content_hugging_priority_8.png" alt="subTitleLabelにwidthを設定" /></p>

<p>これは以下理由により実現されます。</p>

<ul>
<li><code>Content Compression Resistance Priority</code> の <code>Priority</code> は <code>751</code></li>
<li><code>width</code> に付与した <code>Priority</code> は <code>1000</code></li>
</ul>


<p><img src="/images/content_hugging_priority_9.png" alt="subTitleLabelにwidthを指定した結果" /></p>

<h3>まとめ</h3>

<p>上記をまとめます。</p>

<ul>
<li><code>Content Hugging Priority</code> が高い = コンテンツサイズを優先する</li>
<li><code>Content Compression Resistance Priority</code> が高い = 小さくなりにくさを優先する</li>
<li>どの制約が優先して適用されるかは <code>Priority</code> の値に従って決まる</li>
</ul>


<p>さて如何でしたでしょうか？<br/>
今更ながら実例を交えてきちんと整理しておきたい気持ちが強くなり、今回のブログ記事となりました。<br/>
iOSアプリを開発する際に、 <code>AutoLayout</code> スキルをないがしろにすることはできません。</p>

<p>ぜひぜひ今後とも強めていきたいところですね。<br/>
ということで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
