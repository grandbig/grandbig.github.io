<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-05-17T23:59:05+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/17/swift-base-2/"/>
    <updated>2015-05-17T17:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/17/swift-base-2</id>
    <content type="html"><![CDATA[<h4>Swiftの型</h4>

<p>続いて、基本的な内容を見ていきます。<br/>
SwiftはObjective-Cと型の表現が変わりました。<br/>
よく使う型を見て行きましょう。</p>

<p>```objective-c</p>

<p>var intValue:Int = 3
var doubleValue:Double = 1.234
var floatValue:Float = 5.678
var boolValue:Bool = true
var stringValue:String = &ldquo;abcdefg&rdquo;
var charValue:Character = &ldquo;a&rdquo;
var intArray = [1, 30, 120, 6]
var stringArray = [&ldquo;abc&rdquo;, &ldquo;123&rdquo;]
var testDictionary = [&ldquo;job&rdquo;: &ldquo;programmer&rdquo;, &ldquo;skillNum&rdquo;: 5]</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>因みにこれをObjective-Cで書くと</p>

<p>```objective-c</p>

<p>NSInteger intValue = 3;
CGFloat doubleValue = 1.234;
CGFloat floatValue = 5.678;
BOOL boolValue = YES;
NSString <em>stringValue = @&ldquo;abcdefg&rdquo;;
char charValue = &ldquo;a&rdquo;
NSArray </em>intArray = @[1, 30, 120, 6];
NSArray <em>stringArray = @[@&ldquo;abc&rdquo;, @&ldquo;123&rdquo;];
NSDictionary </em>testDictionary = @{@&ldquo;job&rdquo;: @&ldquo;programmer&rdquo;, @&ldquo;skillNum&rdquo;: @5};</p>

<p>```</p>

<p>CGFloatで定義された<code>doubleValue</code>と<code>floatValue</code>は<code>double</code>, <code>float</code>をそれぞれ書くこともできます。<br/>
(ここは32bit, 64bit問題のため、安全側に倒すために<code>CGFloat</code>に統一して書いています。)</p>

<h4>Swiftでクラスを作成</h4>

<p>さて、新たにSwiftファイルを追加して、カスタムクラスを実装してみましょう。<br/>
まずは、Objective-Cと同様で、左メニューのフォルダを右クリックして、『New File』を選択します。</p>

<p><img src="/images/swift_add_new_class.png" alt="New File" /></p>

<p>そして、iOS > Source > Swift Fileを選択します。</p>

<p><img src="/images/choose_swift_file.png" alt="Add Swift File" /></p>

<p>Objective-Cと違って、どのクラスを継承するか否かを決めるフェーズはありません。<br/>
ファイル名と保存場所を決めるのみです。</p>

<p><img src="/images/create_swift_file.png" alt="Save Swift File" /></p>

<p>作成されるファイルの内容は下記になります。</p>

<p>```objective-c</p>

<p>import Foundation</p>

<p>```</p>

<p>ここにカスタムクラスを実装していきましょう。<br/>
例えば下記のようなクラスを作ります。</p>

<p>```objective-c</p>

<p>class Engineer:NSObject {</p>

<pre><code>// プロパティの定義
var level:Int = 1
var businessTitle:String = "新米エンジニア"
var skill:Array&lt;String&gt; = ["Swift"]

// メソッドの定義
// レベルアップ処理
func levelUp() -&gt;Int {
    return level++
}

// 新規スキルをセットする処理
func addNewSkills(newSkill:String) {
    skill.append(newSkill)
}

// 新たな肩書をセットする処理
func updateBusinessTitle(title:String) {
    businessTitle = title
}
</code></pre>

<p>}</p>

<p>```</p>

<p>上記のクラスでは <strong>NSObject</strong> クラスを継承しています。逆に言えばEngineerクラスのスーパークラスは <strong>NSObject</strong> クラスということです。<br/>
Engineerクラスには<code>level</code>, <code>businessTitle</code>, <code>skill</code>という3つのプロパティを定義しています。(全てに初期値を与えています。)<br/>
また、<code>levelUp()</code>, <code>addNewSkills(newSkill:String)</code>, <code>updateBusinessTitle(title:String)</code>の3つのクラス・メソッドを定義しています。</p>

<p>では、実際にカスタムクラスを使ってみましょう。</p>

<p>```objective-c
// 呼び出す側のswiftファイル(ViewController.swift)</p>

<p>import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    // カスタムクラスの初期化
    var engineer:Engineer = Engineer()
    // プロパティの初期値をログ出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")

    // 各メソッドを実行
    engineer.levelUp()
    engineer.addNewSkills("Objective-C")
    engineer.updateBusinessTitle("iOSアプリエンジニア")
    // プロパティをログに再出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")
}

&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>ここで気になるのが、自作したクラスを使うときに<code>import</code>をしていないという点です。<br/>
同プロジェクト内のクラスは<code>import</code>の必要がないということらしいです。<br/>
なので、自作したクラスをCocoaPodでインストールした場合は<code>import</code>の必要があると思われます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/16/swift-base/"/>
    <updated>2015-05-16T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/16/swift-base</id>
    <content type="html"><![CDATA[<h4>Swiftを基本から覚えよう</h4>

<p>さて、本日はSwiftについて基本から覚えていきたいと思います。<br/>
筆者はこれまでObjective-Cを中心に開発を続けてきました。<br/>
が、昨年Swiftが初めて発表されて以来、少しずつSwiftに関わることが増えてきました。<br/>
正直なところ、Xcodeのバージョンアップごとに『 <strong>割りと大きな変更が生じるSwift</strong> を商用アプリに使うかどうか』は迷います。deprecatedになるメソッドはあるにしても『 <strong>大幅な変更の生じないObjective-C</strong> 』の方が安全ですし、何より多彩なライブラリが存在しています。</p>

<p>とは言え、今後、Swiftしか使えないiOSアプリエンジニアが当たり前に存在していくことでしょう。<br/>
そんなときにObjective-CもSwiftも当然のように使えるエンジニアとなっていたいので勉強しておこうと思う次第です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Swiftでプロジェクトを生成</h4>

<p>言語でSwiftを選択してXcodeのプロジェクトを新規作成すると、ViewController.swiftは下記のように生成されます。</p>

<p>```objective-c
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}
</code></pre>

<p>}
```</p>

<p>これまでのObjective-Cでは下記のように生成されていました。</p>

<p>```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
  // Do any additional setup after loading the view, typically from a nib.
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<p>少し違和感があるかもしれませんが、ぱっと見た感じ、あまり変わらないようにも見えます。<br/>
因みに、Objective-Cの場合はViewController.m, ViewController.hの2つのファイルが作成されますが、Swiftの場合は <strong>swift</strong> という拡張子のファイルのみです。</p>

<h4>変数/定数の定義</h4>

<p>Swiftでの変数/定数の定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String       // String型の変数を定義
    let invariableString:String     // String型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li><strong>var 変数名:変数の型</strong></li>
<li><strong>let 定数名:定数の型</strong></li>
<li>1行の終わりは <strong>改行</strong> or <strong>;(セミコロン)</strong></li>
</ul>


<p>letは <strong>定数</strong> なので、</p>

<p>```objective-c
let invariableString:String     // String型の定数を定義</p>

<p>invariableString = &ldquo;これは定数です。&rdquo;
invariableString = &ldquo;定数なので、2回目以降の値設定はエラーが発生します。&rdquo;</p>

<p>```</p>

<p>のようなことを書くと、<code>invariableString</code>に対する2回目の値設定行で、<br/>
<code>immutable value 'invariableString' may only be initialized once</code>エラーが発生します。<br/>
(<code>var</code>は定数なので問題ありません。)</p>

<h4>グローバル変数/定数の定義</h4>

<p>Swiftのグローバル変数/定数の仕方を見て行きましょう。</p>

<p>```objective-c
import UIKit</p>

<p>var globalVariableInt:Int = 3
let globalInvariableInt:Int = 5</p>

<p>class ViewController: UIViewController {</p>

<pre><code>&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>クラス外に定義した変数/定数はグローバル変数/定数</li>
<li>グローバル変数/定数は共に初期値が必要</li>
</ul>


<p>2つ目のポイントに書いた通り、初期値を与えないと<code>Global 'var' declaration requires an initializer expression or getter/setter specifier</code>, <code>Global 'let' declaration requires an initializer expression</code>といったエラーが発生します。</p>

<h4>オプショナル型と非オプショナル型</h4>

<p>オプショナル型とは、Swiftで唯一『 <strong>nilの代入が許可された</strong> 』型です。逆に『 <strong>nilの代入を許可されていない</strong> 』型を非オプショナル型と言います。<br/>
では、Swiftのオプショナル型/非オプショナル型の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String?      // String型&amp;オプショナル型の変数を定義
    let invariableString:String?    // String型&amp;オプショナル型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>【ポイント】</p>

<ul>
<li>var 変数名:変数型 <strong>?</strong> でオプショナル型</li>
<li>let 定数名:定数型 <strong>?</strong> でオプショナル型</li>
<li>オプショナル型の初期値は <strong>nil</strong></li>
<li>非オプショナル型の初期値は何も初期値が入っていない(nilが入っているわけではない)</li>
</ul>


<p>これまで特に意識せずに変数/定数を定義してきたと思いますが、『 <strong>?</strong> 』をつけていない変数/定数は自動的に非オプショナル型となります。<br/>
よって、</p>

<p>```objective-c</p>

<p>var variableString:String
let inVariableString:String</p>

<p>variableString = nil
inVariableString = nil</p>

<p>```</p>

<p>とすると<code>Cannnot assign a value of type 'nil' to a value of type 'String'</code>とエラーが発生します。</p>

<p>因みに、 <strong>?</strong> をつけた書き方は省略した書き方です。<br/>
<code>var variableString:String?</code>は<code>var variableString:Optional&lt;String&gt;</code>と同じです。</p>

<h4>オプショナル型の使い方(アンラップの仕方)</h4>

<p>オプショナル型はそのままでは使えません。<br/>
例えば、<code>var variableString:String?</code>は<code>String</code>型の変数を<code>Optional</code>(オプショナル)型の箱に入れているイメージです。<br/>
なので、<code>String</code>型として値を扱うためには『 <strong>Unwrap</strong> (アンラップ)』する必要があるのです。<br/>
(箱から<code>String</code>型を取り出すイメージです。)</p>

<p>アンラップには幾つか方法があります。</p>

<ul>
<li>Forced Unwrapping<br/>
強制的にアンラップする方法。変数/定数名の末尾に <strong>!</strong> をつける</li>
</ul>


<p>```objective-c</p>

<p>var fuga:String? = &ldquo;FugaFuga&rdquo;
println(fuga!.lowercaseString)</p>

<p>```</p>

<p>上記例で<code>fuga.lowercaseString</code>とすると<code>Value of optional type 'String' not unwrapped; did you mean to use '!' or '?'?</code>という静的解析でエラーが発生します。<br/>
因みに、『 <strong>!</strong> 』をつけた場合、中身がnilだと実行時にエラーが発生するので注意。</p>

<ul>
<li>Optional Chaining<br/>
Optionalのメソッドやプロパティ参照時にnilチェックする方法です。<br/>
nilでなければUnwrapしてnilであった場合はnilを返す方法です。<br/>
実はUnwrapして返されるものもOptional型であったりします。<br/>
ただし、そのメソッドやプロパティを使うことができるのです。</li>
</ul>


<p>```objective-c
var hoge:String?
var fuga:String? = hoge?.lowercaseString
println(fuga)</p>

<p>hoge = &ldquo;HogeHoge&rdquo;
fuga = hoge?lowercaseString
println(fuga)
```</p>

<p>上記を実行してみると、1回目のprintlnで<code>nil</code>が出力され、2回目のprintlnで<code>Optional("hogehoge")</code>と出力されます。</p>

<ul>
<li>Optional Binding<br/>
nilチェックをして、nilでない場合に限り、Unwrapして元の方を返す方法です。<br/>
別名の変数/定数に値を入れ直して、以後、それを使っていく場合に使います。</li>
</ul>


<p>```objective-c
var hoge:String?</p>

<p>if var fuga:String = hoge {</p>

<pre><code>println("値が格納されていました。")
</code></pre>

<p>} else {</p>

<pre><code>println("nilでした。")
</code></pre>

<p>}</p>

<p>hoge = &ldquo;HogeHoge&rdquo;</p>

<p>if var fuga:String = hoge {</p>

<pre><code>println("値が格納されていました。")
</code></pre>

<p>} else {</p>

<pre><code>println("nilでした。")
</code></pre>

<p>}</p>

<p>```</p>

<p>上記の例文を実行すると、1回目は<code>true</code>, 2回目は<code>false</code>の条件分岐を通過するはずです。</p>

<ul>
<li>Implicitly Unwrapped Optional<br/>
使用時に自動的にUnwrapされて元の型が返される方法です。<br/>
<code>nil</code>が入っているものに対して実行した場合はエラーが発生します。(静的解析時には判別されないことに注意)</li>
</ul>


<p>```objective-c</p>

<p>vat hoge:String! = &ldquo;HogeHoge&rdquo;
println(hoge.lowercaseString)</p>

<p>var fuga:String!
println(fuga.lowercaseString)</p>

<p>```</p>

<p>上記の例文を実行すると、1回目のログは出力されますが、2回目のログ出力時にエラーが発生します。<br/>
因みに、『 <strong>型!</strong> 』は『 <strong>ImplicitlyUnwrappedOptional&lt;型名></strong> 』の省略形です。</p>

<p>```objective-c</p>

<p>var hoge:String! = &ldquo;HogeHoge&rdquo;
var fuga:ImplicitlyUnwrappedOptional<String> = &ldquo;FugaFuga&rdquo;</p>

<p>```</p>

<p>こんな感じですね。</p>

<h4>オプショナル型の意義</h4>

<p>前章でオプショナル型と非オプショナル型が存在することがわかりました。<br/>
では、このオプショナル型/非オプショナル型は何のために使うのでしょうか？</p>

<p>【オプショナル型/非オプショナル型を使う理由】</p>

<ul>
<li>静的解析でエラーを発見するため</li>
<li>実行時の想定外のエラーを防ぐため</li>
<li>オープンソースとしてライブラリを作成した際に、ライブラリ利用者が想定外のエラーに合わないようにするため</li>
</ul>


<h4>クラスプロパティ</h4>

<p>クラスプロパティの定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>var variableNumber:Int?
let unVariableNumber:Int = 3

override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String       // String型の変数を定義
    let invariableString:String     // String型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>クラスプロパティ定義時は初期値が必要</li>
<li>varは初期値がnilなので具体的な値を書く必要はない</li>
<li>letは初期値にnilが入らないので、具体的な値を設定する必要がある</li>
</ul>


<h4>クラスメソッド</h4>

<p>クラスメソッドの定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>var variableNumber:Int?
let unVariableNumber:Int = 3

override func viewDidLoad() {
    super.viewDidLoad()

    println(setTestString("abc", b:"def"))
}

&lt;省略&gt;

func setTestString(a:String, b:String) -&gt; String {
    return a+b
}
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>func メソッド名(第一引数名:第一引数の型, 第二引数名:第二引数の型, &hellip;) &ndash;> 戻り値の型 { &hellip;. }</li>
<li>呼び出し側では、メソッド名(第一引数に渡す値, 第二引数名:第二引数に渡す値)</li>
</ul>


<p>まだまだSwiftについて調べていきますが、記事が長くなってきたので本日はここまで。</p>

<p>参考サイト:</p>

<ul>
<li><a href="http://qiita.com/koher/items/c6f446bad54442a28bf4">SwiftのOptional型を極める</a></li>
<li><a href="http://www.slideshare.net/hasegawatomoki/ss-40424010">オプショナル型。 〜 なんとなく付ける ! ? 撲滅 &ndash; SlideShare</a></li>
<li><a href="http://qiita.com/cotrpepe/items/518c4476ca957a42f5f1">[Swift] Optional 型についてのまとめ Ver2</a></li>
<li><a href="http://qiita.com/nori0620/items/afa94cc42f3233f54bdc">[Swift] Swiftのoptional valueの便利さ /「?」と「!」でより堅牢なコードへ</a></li>
<li><a href="http://qiita.com/mokumoku/items/5fef496f4e97a053e53e">【Swift】Optional型を安全にunwrapしよう</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StoryboardでNavigationBarを表示する]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar/"/>
    <updated>2015-05-10T22:04:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar</id>
    <content type="html"><![CDATA[<h4>StoryboardでNavigationBarを表示する方法</h4>

<p>さて、今日も忘れやすい内容なのでメモメモ&hellip;。<br/>
最近はXIBファイルよりもStoryboardを利用するシーンが多くなっているかと思います。<br/>
そこで、本日はStoryboardでNavigationBarを表示する方法について説明したいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>方法は実に簡単です。<br/>
Main.storyboardを開いて、 <strong>メニューのEditor > Embed In > Navigation Controller</strong> を選択してください。
すると、これまでViewControllerが1つだけだった状態からNavigation Controllerが追加されます。<br/>
また、初めからあったViewControllerにもNavigationBarが表示されたことがわかると思います。<br/>
これは正確には <strong>Navigation Item</strong> が追加された状態です。このNavigation Itemを編集すれば、任意のタイトルを付与することができますし、Backボタンの名称も決められます。さらに、 <strong>prompt</strong> (説明文)を表示することもできます。</p>

<p>Backボタンではなく、好きなアクションを起こさせるためのボタンを追加する場合には、右メニューバーからButtonを追加すればOKです。自動的にBar Button Itemが追加されます。<br/>
すると、下図のような構成になるはずです。</p>

<p><img src="/images/storyboard-navigationbar.png" alt="ViewControllerの構成" /></p>

<p>Storyboardの画面的には下図になります。</p>

<p><img src="/images/storyboard-navigationbar2.png" alt="Storyboard" /></p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一定時間内は画面タップをさせない！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/09/timer-progresshud/"/>
    <updated>2015-05-09T23:37:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/09/timer-progresshud</id>
    <content type="html"><![CDATA[<h4>SVProgressHUDとNSTimerを使う</h4>

<p>さて、本日はさくっとメモしておきます。<br/>
できると思っていて当然できた話なので、本当にメモです笑。</p>

<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>などでどこかしらのサーバに通信している間、画面をユーザに触らせたくないことがあるかもしれません。<br/>
そんなときはローディングウィンドウを<a href="https://github.com/TransitApp/SVProgressHUD">SVProgressHUD</a>で表示し、 <strong>NSTimer</strong> を使って時間で操ります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;SVProgressHUD.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) NSTimer *timer;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
<li><p>(IBAction)showLoadWindow:(id)sender {
  // ローディングウィンドウの表示
  [SVProgressHUD showWithStatus:@&ldquo;Loading&hellip;&rdquo; maskType:SVProgressHUDMaskTypeGradient];
  // タイマーの設定
  _timer = [NSTimer scheduledTimerWithTimeInterval:5.0 target:self selector:@selector(hiddenWindow:) userInfo:nil repeats:NO];
}</p></li>
</ul>


<p>/**</p>

<pre><code>タイマー対象メソッド(ローディングウィンドウを非表示にする処理)
@param timer タイマー
</code></pre>

<p> <em>/
&ndash; (void)hiddenWindow:(NSTimer </em>)timer
{</p>

<pre><code>[SVProgressHUD dismiss];
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>よし、できた！ってところでメモ書き終了。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDBを使ってSQLiteに画像を保存しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/07/sqlite-img/"/>
    <updated>2015-05-07T00:37:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/07/sqlite-img</id>
    <content type="html"><![CDATA[<h4>FMDBを使ってSQLiteに画像を保存してみる</h4>

<p>さて、当たり前なようでやったことがなかったのでやってみました。<br/>
たぶんもっとキレイな方法があると思うのですが、なぜかできず&hellip;。できた方法を説明します。</p>

<h5>SQLiteにデータを保存</h5>

<p>まず下記のメソッドを実装します。</p>

<p>```objective-c
// DBに接続
&ndash; (id)dbConnect:(NSString *)dbName
{</p>

<pre><code>NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES );
NSString *dir = [paths objectAtIndex:0];
FMDatabase *db = [FMDatabase databaseWithPath:[dir stringByAppendingPathComponent:dbName]];

return db;
</code></pre>

<p>}</p>

<p>// テーブルの作成
&ndash; (void)createTable:(NSString <em>)dbName tableName:(NSString </em>)tableName
{</p>

<pre><code>FMDatabase *db = [self dbConnect:dbName];
NSString *sql = [[NSString alloc] initWithFormat:@"create table if not exists %@ (id INTEGER PRIMARY KEY, title TEXT, imgData TEXT)", tableName];
[db open];
[db executeUpdate:sql];
[db close];
</code></pre>

<p>}</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>さて、上記のメソッドは基本的なDB接続とテーブル作成をするためのものです。<br/>
続いて画像のデータをinsertします。</p>

<p>```objective-c
&ndash; (void)insertImgData:(NSString <em>)dbName tableName:(NSString </em>)tableName
{</p>

<pre><code>UIImage *img = [UIImage imageNamed:@"apple.png"];
NSData *imgData = [NSData alloc] initWithData:UIImagePNGRepresentation(img)];
NSString *imgString = [imgData base64EncodedStringWithOptions:NSDataBase64Encoding76CharacterLineLength];
FMDatabase *db = [self dbConnect:dbName];
NSString *insert = [[NSString alloc] initWithFormat:@"insert into %@ (title, imgData) values ('%@', '%@')", tableName, @"test", imgString];
[db open];
[db executeUpdate:insert];
[db close];
</code></pre>

<p>}</p>

<p>```</p>

<p>今回はテストのために固定の画像を内部DBにinsertするようにしています。<br/>
そして、画像データを取得するメソッドを用意します。</p>

<p>```objective-c
&ndash; (UIImage)getImgData:(NSString <em>)dbName tableName:(NSString </em>)tableName
{</p>

<pre><code>NSData *imgData;
FMDatabase *db = [self dbConnect:dbName];
NSString *select = [[NSString alloc] initWithFormat:@"select * from %@ order by id desc limit 1", table_name];
[db open];
FMResultSet *rs = [db executeQuery:select];
while([rs next]) {
    NSString *imgString = [rs stringForColumn:@"imgData"];
    imgData = [[NSData alloc] initWithBase64EncodedString:imgString options:NSDataBase64DecodingIgnoreUnknownCharacters];
}
UIImage *img = [UIImage alloc] initWithData:imgData];]
</code></pre>

<p>}
```</p>

<p>重要なのはエンコード/デコードです。<br/>
いろいろなサイトを見ると、NSData型の値をSQLiteのBLOB型で保存すれば良いと書かれているのですが、デフォで画像用でないエンコードされているからなのか、想定した値が取れないんですよね〜。<br/>
う〜ん。もう少し考えてみますが、一先ず、これでもできるってことでメモ書きとしておきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
