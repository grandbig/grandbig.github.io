<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-10-05T23:16:34+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swiftで継承とカテゴリってどうやってやるの！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/07/swift-inheritance-extension/"/>
    <updated>2015-06-07T23:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/07/swift-inheritance-extension</id>
    <content type="html"><![CDATA[<h4>Swiftで継承</h4>

<p>まずはObjective-CとSwiftの継承の書き方の違いを見て行きましょう。</p>

<p>早速、Objective-Cの継承ですが、</p>

<p>```objective-c
// ヘッダーファイル
@interface SampleA:NSObject
// プロパティの定義
@property(strong, nonatomic) NSString *sampleString;
// メソッドの定義
&ndash; (void)sampleMethod;</p>

<p>@end</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```objective-c
// モデルファイル
@interface SampleA()</p>

<p>@end</p>

<p>@implementation</p>

<ul>
<li>(void)sampleMethod {
  &hellip;.
}</li>
</ul>


<p>@end</p>

<p>```</p>

<p>といった形で書けます。</p>

<p>これがSwiftだと、</p>

<p>```objective-c
// swiftファイル
class SampleA:NSObject {</p>

<pre><code>// プロパティの定義
var sampleString:String = "サンプル"
// メソッドの定義
func sampleMethod {
    ....
}
</code></pre>

<p>}</p>

<p>```</p>

<p>とかなりシンプルに書けますね！</p>

<h4>Swiftでカテゴリ</h4>

<p>次にSwiftでObjective-Cで言うカテゴリを実装してみます。</p>

<p>Objective-Cでは、</p>

<p>```objective-c
// ヘッダーファイル
@interface NSError(ContextBase)</p>

<ul>
<li>(NSError <em>)createError:(NSString </em>)message code:(NSInteger)code;</li>
</ul>


<p>@end
```</p>

<p>```objective-c
// モデルファイル
@implementation NSError(ContextBase)</p>

<ul>
<li><p>(NSError <em>)createError:(NSString </em>)message code:(NSInteger)code {
 NSDictionary <em>errorUserInfo = @{ NSLocalizedDescriptionKey:message };
 NSError </em>error = [[NSError alloc] initWithDomain:domain code:code userInfo:errorUserInfo];</p>

<p> return error;
}</p></li>
</ul>


<p>@end
```</p>

<p>と書いてきました。<br/>
これがSwiftでは、</p>

<p>```objective-c
// Swiftファイル
extension NSError {</p>

<pre><code>func createError(message:String!, code:Int!) -&gt; NSError {
    let errorUserInfo = [NSLocalizedDescriptionKey: message]
    let error:NSError = NSError(domain: "jp.co.swiftSample", code: code, userInfo: errorUserInfo)

    return error
}
</code></pre>

<p>}
```</p>

<p>と書けます。<br/>
う〜んこれもシンプル！！<br/>
Objective-Cで利用してきた継承はもちろんのこと、カテゴリも残っていて助かりますね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでRealmを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/07/swift-realm/"/>
    <updated>2015-06-07T16:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/07/swift-realm</id>
    <content type="html"><![CDATA[<h4>Realmをプロジェクトに追加しよう</h4>

<p>本日は最近、流行っているRealmについて遊んでみたいと思います。<br/>
まずは導入の仕方から見て行きましょう！</p>

<h5>Realmの導入方法</h5>

<p>下記のPodfileを作成しましょう。<br/>
本記事のSwiftプロジェクトとして、<code>SwiftRealm.xcodeproj</code>を作成します。</p>

<p>```objective-c
// Podfile
platform :ios, &lsquo;8.0&rsquo;
source &lsquo;<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>&rsquo;</p>

<p>target &lsquo;SwiftRealm&rsquo;, exclusive: true do</p>

<pre><code>pod 'Realm'
</code></pre>

<p>end</p>

<p>target &lsquo;SwiftRealmTests&rsquo;, exclusive: true do</p>

<pre><code>pod 'Realm/Headers'
</code></pre>

<p>end
```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>あとは<code>pod install</code>しましょう。<br/>
すると、<code>SwiftRealm.xcworkspace</code>が作成されるので、Xcodeで起動しましょう。</p>

<p><img src="/images/swift-realm.png" alt="Realmを追加した結果" /></p>

<p>なんと、Objective-C++で書かれていますね！
Swiftで利用するためにはBridging-Headerファイルの設定を行う必要があります。</p>

<p>SwiftRealm-Bridging-Header.hを作成します。<br/>
<img src="/images/swift-realm2.png" alt="ヘッダーファイルの作成" /></p>

<p>TARGETS > SwiftRealm > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Header にパスを設定します。<br/>
<img src="/images/swift-realm3.png" alt="パスの設定" /></p>

<p>SwiftRealm-Bridging-Header.hの中身を書きます。</p>

<p>```objective-c</p>

<h1>ifndef SwiftRealm_SwiftRealm_Bridging_Header_h</h1>

<h1>define SwiftRealm_SwiftRealm_Bridging_Header_h</h1>

<h1>import &lt;Realm/Realm.h></h1>

<h1>endif</h1>

<p>```</p>

<p>これでRealmを利用する準備が整いました。<br/>
実際にコードを書いていきましょう。</p>

<h5>保存オブジェクトの生成</h5>

<p>Realmでは保存する対象を<code>RLMObject</code>として作成します。<br/>
SQLiteでいうところのテーブルを生成しているイメージでしょうか。</p>

<p>今回は練習として<code>Engineer.swift</code>内で<code>Engineer</code>クラスを作ってみました。</p>

<p>```objective-c
// Engineer.swift</p>

<p>// Engineerクラス
class Engineer:RLMObject {</p>

<pre><code>// プロパティと初期値の設定
dynamic var id:Int = 0
dynamic var level:Int = 0
dynamic var businessTitle:String = ""
dynamic var skills = RLMArray(objectClassName: "Skills")
dynamic var created:Double = 0
dynamic var updated:Double = 0

// プライマリーキーの設定
override class func primaryKey() -&gt; String? {
    return "id"
}

// インデックスの設定
override class func indexedProperties() -&gt; [AnyObject]? {
    return ["level"]
}
</code></pre>

<p>}</p>

<p>// Skillsクラス
class Skills: RLMObject {</p>

<pre><code>    dynamic var skill:String = ""
</code></pre>

<p>}
```</p>

<p>ポイントとしては、<code>skills</code>のように配列の形で1つの要素に複数の値を割り当てたい場合は、それ単体で別に<code>RLMObject</code>の拡張クラスを作成する必要があります。<br/>
<code>RLMArray</code>を初期化することは許可されていないためです。</p>

<h5>オブジェクトのインサート/アップデート</h5>

<p>続いて、先ほど生成したオブジェクトをインサート/アップデートしてみましょう。</p>

<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    // id=0のオブジェクトを検索
    if let engineer = Engineer(forPrimaryKey: 0) {
        // 検索結果がある場合
        println("既にエンジニアが１人います。\(engineer)")

        // アップデート
        let realm = RLMRealm.defaultRealm()
        // 書込みの開始
        realm.beginWriteTransaction()
        // Skillsクラスをインスタンス化
        let skills = Skills()
        // 要素を設定
        skills.skill = "Objective-C"
        // 既存のデータに要素を追加
        engineer.skills.addObject(skills)
        engineer.updated = NSDate().timeIntervalSince1970
        // データのアップデート処理
        realm.addOrUpdateObject(engineer)
        // 書込みの終了
        realm.commitWriteTransaction()
    } else {
        // 検索結果がない場合
        // Engineerクラスをインスタンス化
        let newEngineer = Engineer()
        newEngineer.id = 0
        newEngineer.level = 0
        newEngineer.businessTitle = "新米エンジニア"
        // Skillsクラスをインスタンス化
        let skills = Skills()
        skills.skill = "Swift"
        newEngineer.skills.addObject(skills)
        newEngineer.created = NSDate().timeIntervalSince1970

        // データの新規作成
        let realm = RLMRealm.defaultRealm()
        // 書込みの開始
        realm.beginWriteTransaction()
        // データのインサート処理
        realm.addObject(newEngineer)
        // 書込みの終了
        realm.commitWriteTransaction()
    }
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}
</code></pre>

<p>}
```</p>

<p>ここでは、<code>id=0</code>のデータを検索して、見つからない場合は新規データをインサートし、見つかった場合はデータのアップデートをしています。<br/>
書込みにはトランザクションブロックを使った方法もあるようですが、今回は<code>beginWriteTransaction</code>と<code>commitWriteTransaction</code>を利用しました。</p>

<h5>データの確認</h5>

<p>では、データを作成した後に、そのデータを確認したい場合はどうすれば良いのでしょうか？<br/>
実はMac専用のアプリが提供されています。</p>

<p><a href="https://realm.io/jp/docs/java/latest/">こちらのサイト</a>の <strong>Realm Browser</strong> の項目からインストールしましょう。</p>

<p>Realm Browserを使えば、下記のようにデータを見ることができます。</p>

<p><img src="/images/swift-realm4.png" alt="Realm Browserで確認１" /><br/>
<img src="/images/swift-realm5.png" alt="Realm Browserで確認２" /></p>

<p>これからSQLiteよりもRealmの方がスタンダートな保存方法となることでしょう。<br/>
どんどん使い方を勉強していかなくては！！<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift AFNetworkingライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-afnetworking/"/>
    <updated>2015-05-24T10:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-afnetworking</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAFNetworkingの使い方を覚えよう！</h4>

<p>さて、本日はObjective-Cの超有名通信系ライブラリの<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>をSwiftで使ってみようと思います。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方を見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<p><code>objective-c
platform :ios, '7.0'
pod "AFNetworking", "~&gt; 2.0"
</code></p>

<p>これで<code>pod install</code>すればプロジェクトに <strong>AFNetworking</strong> が追加されるはずです。<br/>
ここで注意したいのが、あくまでもObjective-Cで書かれたライブラリなので、Swiftで使うためにはBridgeファイルを用意する必要があります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<ol>
<li>プロジェクトにヘッダーファイルを追加します。
ProjectName-Bridging-Header.hという形式が推奨されている模様<br/>
今回はSwiftSample-Bridging-Header.hという名前で追加しました。</li>
<li>TARGETS > SwiftSample > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Headerにパスを指定
SwiftSample/SwiftSample-Bridging-Header.hを指定しました。</li>
<li>Bridgeファイルにライブラリを<code>import</code>する</li>
<li>ライブラリを利用するファイルにも<code>import</code>を書きましょう(Swiftの書き方で。)</li>
</ol>


<p>下記の画像を参照ください。
<img src="/images/swift-afnetworking.png" alt="Bridgeファイルの用意" /></p>

<p>また、Bridgeファイルへの具体的な内容を書いておきます。</p>

<p>```objective-c</p>

<h1>ifndef SwiftSample_SwiftSample_Bridging_Header_h</h1>

<h1>define SwiftSample_SwiftSample_Bridging_Header_h</h1>

<h1>endif</h1>

<h1>import &lt;AFNetworking/AFNetworking.h></h1>

<p>```</p>

<h5>GETリクエスト</h5>

<p>では、早速、GETリクエストを書いてみましょう。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<p>```objective-c</p>

<p>{</p>

<pre><code>base:  "stations",
clouds: {
    all: 32
},
cod: 200,
coord: {
    lat: 35.69,
    lon: 139.65
},
dt: 1432394992,
id: 1850147,
main: {
    grnd_level: 1019.97,
    humidity: 88,
    pressure: 1019.97,
    sea_level: 1024.92,
    temp: 290.99,
    temp_max: 290.99,
    temp_min: 290.99
},
name: Tokyo,
sys: {
    country: "JP",
    message: 0.0386,
    sunrise: 1432323041,
    sunset: 1432374314
},
weather: [
    {
        description: "scattered clouds",
        icon: "03n",
        id: 802,
        main: "Clouds"
    }
],
wind: {
    deg: 198.001,
    speed: 5.11
}
</code></pre>

<p>}</p>

<p>```</p>

<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。</p>

<p>```objective-c
// GETリクエスト
let manager = AFHTTPSessionManager()
manager.GET(&ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;, parameters: nil,</p>

<pre><code>success: { (operation, json) -&gt; Void in
    // 処理が成功した場合
    let dict = json as! [String: AnyObject]
    let weatherArray = dict["weather"] as! [AnyObject]
    let weather = weatherArray[0] as! [String: AnyObject]
    let description = weather["description"] as! String
    println(description)
}, failure: { (operation, error) -&gt; Void in
    // エラーが発生した場合
})
</code></pre>

<p>```</p>

<p>Objective-Cでは下記のように書いていたので、対応づけて見るとわかりやすいかもしれません。</p>

<p>```objective-c
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
[manager.GET:@&ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;, parameters: nil,</p>

<pre><code>success:^(NSURLSessionDataTask *task, id responseObject) {
    NSArray *weatherArray = [responseObject objectForKey:@"weather"];
    NSDictionary *weather = [weatherArray objectAtIndex:0];
    NSString *description = [weather objectForKey:@"description"];
    NSLog(description);
}, failure:^(NSURLSessionDataTask *task, NSError *error) {
    // エラーが発生した場合
}];
</code></pre>

<p>```</p>

<p><code>success</code>と<code>failure</code>は戻り値が<code>void</code>なので、Swiftでも<code>-&gt; Void</code>と指定しています。<br/>
<code>[String: AnyObject]</code>は <strong>keyがString型</strong> で <strong>valueがAnyObject(何でもあり)型</strong> のDictionary型への変換で、<br/>
<code>[AnyObject]</code>は <strong>要素がAnyObject(何でもあり)型</strong> のArray型への変換です。</p>

<p>Alamofireとはやはり違った書き方となるので、iOSのターゲットなど要件に従って使い分けていくのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Alamofireライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-alamofire1/"/>
    <updated>2015-05-24T00:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-alamofire1</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAlamofireの使い方を覚えよう！</h4>

<p>さて、本日は <strong>Alamofire</strong> ライブラリの使い方を勉強します。<br/>
<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>はObjective-Cの超有名通信系ライブラリである<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>のSwift版と思えばよいでしょう。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方から見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<p>```objective-c
source &lsquo;<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>&rsquo;
platform :ios, &lsquo;8.0&rsquo;
use_frameworks!</p>

<p>pod &lsquo;Alamofire&rsquo;, &lsquo;~> 1.2&rsquo;
```</p>

<p>これで<code>pod install</code>すればプロジェクトにAlamofireが追加されるはずです！<br/>
後は利用したいswiftファイルで<code>import Alamofire</code>しましょう。<br/>
SwiftライブラリをCocoaPodsでインストールすると対象iOSが8.0以上である必要が出てくるので、そこだけ注意しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>GETリクエスト(パターン１)</h5>

<p>続いて、GETリクエストのメソッドを書いてみます。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<p>```objective-c</p>

<p>{</p>

<pre><code>base:  "stations",
clouds: {
    all: 32
},
cod: 200,
coord: {
    lat: 35.69,
    lon: 139.65
},
dt: 1432394992,
id: 1850147,
main: {
    grnd_level: 1019.97,
    humidity: 88,
    pressure: 1019.97,
    sea_level: 1024.92,
    temp: 290.99,
    temp_max: 290.99,
    temp_min: 290.99
},
name: Tokyo,
sys: {
    country: "JP",
    message: 0.0386,
    sunrise: 1432323041,
    sunset: 1432374314
},
weather: [
    {
        description: "scattered clouds",
        icon: "03n",
        id: 802,
        main: "Clouds"
    }
],
wind: {
    deg: 198.001,
    speed: 5.11
}
</code></pre>

<p>}</p>

<p>```</p>

<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。<br/>
幾つか書き方があるのですが、まずは１つ目の書き方です。</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather">http://api.openweathermap.org/data/2.5/weather</a>&rdquo;, parameters:[&ldquo;q&rdquo;:&ldquo;Tokyo,jp&rdquo;]).response { (request, response, data, error) in</p>

<pre><code>if let data = data as? NSData {
    // AnyObject型をNSData型に変換できた場合に通過
    // NSData型をJSONの形に変換して、AnyObject?型の変数に格納
    var obj: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments, error: nil)

    if let weatherArray = obj["weather"] as? [AnyObject] {
        // objからweatherフィールドを取得。その際、Array型に変換できた場合に通過
        if let weather = weatherArray[0] as? [String: AnyObject] {
            // NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過
            if let description = weather["description"] as? String {
                // NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過
                println(description)
            }

            // NSDictionary型のweatherからdescriptionを指定して取得
            var description2:String? = weather["description"] as? String
            println(description2)
        }
    }
}
</code></pre>

<p>}
```</p>

<p>注意したいのは、responseで返却される<code>data</code>は <strong>NSData型</strong> ではなく、 <strong>AnyObject?型</strong> だということです。<br/>
そのため、直接<code>NSJSONSerialization.JSONObjectWithData</code>の１つ目の引数に<code>data</code>を指定するとNSData型ではないことを示唆するエラーが出ます。<br/>
なので、 <strong>NSData型</strong> に変換する必要があります。</p>

<p>そして、NSData型のままでは各要素を取り出せないので、 <strong>(JSONの形をした)AnyObject?型</strong> に変換させましょう。<br/>
(Dictionary型に変換しても良いのですが、既にJSONの形に変換されているので十分でしょう。)<br/>
後は各フィールドの型に従って変換して取り出していくイメージで書きましょう。</p>

<p>覚えておきたいのは、</p>

<p>```objective-c
if let 定数名 = 要素 as? 定数の型 {</p>

<pre><code>// 指定した定数の型に変換できた場合に、この中を通過する(変換できなかった場合はnilを入れようとするので、この中を通過しない)
</code></pre>

<p>}
```</p>

<p>という変換の書き方です。<br/>
Swiftの場合、JSONの取り扱いで思った以上にコードが長くなり、ネスト化してしまいます。<br/>
それを防ぐため&amp;JavaScriptのような書き方を意識したライブラリがたくさん出ています。<br/>
近いうち使ってみようと思います。</p>

<p>また、変換時に<code>[AnyObject]</code>や<code>[String: AnyObject]</code>と書いているのは、<br/>
前者が<code>Array型</code>に変換していて、後者は<code>Dictionary型</code>に変換しています。<br/>
Swiftではどんな要素を含むArray型なのかを示し、どんなkeyでどんなvalueなのかをDictionary型として明示的に示す必要があります。</p>

<p>もし、Objective-Cの<code>NSArray型</code>や<code>NSDictionary型</code>に変換する場合は中身の形式を考えずに<code>as</code>の後ろに続けて書けばOKです。</p>

<h5>GETリクエスト(パターン２)</h5>

<p>とは言え、少しネストが深いので、別のresoponse形式のパターンで試してみましょう。</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;).responseJSON { (<em>, </em>, JSON, _) in</p>

<pre><code>if let weatherArray = JSON!["weather"] as? [AnyObject] {
    // JSONからweatherフィールドを取得。その際、Array型に変換できた場合に通過
    if let weather = weatherArray[0] as? [String: AnyObject] {
        // NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過
        if let description = weather["description"] as? String {
            // NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過
            println(description)
        }

        // NSDictionary型のweatherからdescriptionを指定して取得
        var description2:String? = weather["description"] as? String
        println(description2)
    }
}
</code></pre>

<p>}
```</p>

<p>これは、レスポンスメソッドに<code>responseJSON</code>を指定することで、<br/>
1つ目に上げた<code>AnyObject?型 ⇒ NSData型</code>への変換と<code>NSData型 ⇒ JSONの形をしたAnyObject?型</code>への変換は不要となります。<br/>
既に<code>responseJSON</code>の中でやってくれています。<br/>
少しネストが浅くなりましたね！</p>

<h5>GETリクエスト(パターン３)</h5>

<p>まだ、ネストが深いって？<br/>
よし！思い切ってネストをなくしましょう！</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;).response { (request, response, data, error) in</p>

<pre><code>// AnyObject?型をNSData型に変換。さらにJSONの形をしたNSDictionary型に変換。
let json = NSJSONSerialization.JSONObjectWithData(data as! NSData, options: NSJSONReadingOptions.MutableContainers, error: nil) as! [String: AnyObject]
let weatherArray = json["weather"] as! [AnyObject]
let weather = weatherArray[0] as! [String: AnyObject]
let description = weather["description"] as! String
println(description)
</code></pre>

<p>}
```</p>

<p>う〜ん。ネストは確かになくなったのですが、Unwrapの手法を <strong>Implicitly Unwrapped Optional</strong> にしたため、nilが発生した段階でエラーが発生して落ちます&hellip;。<br/>
値がない場合には空オブジェクトを返すAPIである場合には問題ないと思います。</p>

<p>だんだんとSwiftの基礎含めて理解が進んできた気がします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/17/swift-base-2/"/>
    <updated>2015-05-17T17:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/17/swift-base-2</id>
    <content type="html"><![CDATA[<h4>Swiftの型</h4>

<p>続いて、基本的な内容を見ていきます。<br/>
SwiftはObjective-Cと型の表現が変わりました。<br/>
よく使う型を見て行きましょう。</p>

<p>```objective-c</p>

<p>var intValue:Int = 3
var doubleValue:Double = 1.234
var floatValue:Float = 5.678
var boolValue:Bool = true
var stringValue:String = &ldquo;abcdefg&rdquo;
var charValue:Character = &ldquo;a&rdquo;
var intArray = [1, 30, 120, 6]
var stringArray = [&ldquo;abc&rdquo;, &ldquo;123&rdquo;]
var testDictionary = [&ldquo;job&rdquo;: &ldquo;programmer&rdquo;, &ldquo;skillNum&rdquo;: 5]</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>因みにこれをObjective-Cで書くと</p>

<p>```objective-c</p>

<p>NSInteger intValue = 3;
CGFloat doubleValue = 1.234;
CGFloat floatValue = 5.678;
BOOL boolValue = YES;
NSString <em>stringValue = @&ldquo;abcdefg&rdquo;;
char charValue = &ldquo;a&rdquo;
NSArray </em>intArray = @[1, 30, 120, 6];
NSArray <em>stringArray = @[@&ldquo;abc&rdquo;, @&ldquo;123&rdquo;];
NSDictionary </em>testDictionary = @{@&ldquo;job&rdquo;: @&ldquo;programmer&rdquo;, @&ldquo;skillNum&rdquo;: @5};</p>

<p>```</p>

<p>CGFloatで定義された<code>doubleValue</code>と<code>floatValue</code>は<code>double</code>, <code>float</code>をそれぞれ書くこともできます。<br/>
(ここは32bit, 64bit問題のため、安全側に倒すために<code>CGFloat</code>に統一して書いています。)</p>

<h4>Swiftでクラスを作成</h4>

<p>さて、新たにSwiftファイルを追加して、カスタムクラスを実装してみましょう。<br/>
まずは、Objective-Cと同様で、左メニューのフォルダを右クリックして、『New File』を選択します。</p>

<p><img src="/images/swift_add_new_class.png" alt="New File" /></p>

<p>そして、iOS > Source > Swift Fileを選択します。</p>

<p><img src="/images/choose_swift_file.png" alt="Add Swift File" /></p>

<p>Objective-Cと違って、どのクラスを継承するか否かを決めるフェーズはありません。<br/>
ファイル名と保存場所を決めるのみです。</p>

<p><img src="/images/create_swift_file.png" alt="Save Swift File" /></p>

<p>作成されるファイルの内容は下記になります。</p>

<p>```objective-c</p>

<p>import Foundation</p>

<p>```</p>

<p>ここにカスタムクラスを実装していきましょう。<br/>
例えば下記のようなクラスを作ります。</p>

<p>```objective-c</p>

<p>class Engineer:NSObject {</p>

<pre><code>// プロパティの定義
var level:Int = 1
var businessTitle:String = "新米エンジニア"
var skill:Array&lt;String&gt; = ["Swift"]

// メソッドの定義
// レベルアップ処理
func levelUp() -&gt;Int {
    return level++
}

// 新規スキルをセットする処理
func addNewSkills(newSkill:String) {
    skill.append(newSkill)
}

// 新たな肩書をセットする処理
func updateBusinessTitle(title:String) {
    businessTitle = title
}
</code></pre>

<p>}</p>

<p>```</p>

<p>上記のクラスでは <strong>NSObject</strong> クラスを継承しています。逆に言えばEngineerクラスのスーパークラスは <strong>NSObject</strong> クラスということです。<br/>
Engineerクラスには<code>level</code>, <code>businessTitle</code>, <code>skill</code>という3つのプロパティを定義しています。(全てに初期値を与えています。)<br/>
また、<code>levelUp()</code>, <code>addNewSkills(newSkill:String)</code>, <code>updateBusinessTitle(title:String)</code>の3つのクラス・メソッドを定義しています。</p>

<p>では、実際にカスタムクラスを使ってみましょう。</p>

<p>```objective-c
// 呼び出す側のswiftファイル(ViewController.swift)</p>

<p>import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    // カスタムクラスの初期化
    var engineer:Engineer = Engineer()
    // プロパティの初期値をログ出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")

    // 各メソッドを実行
    engineer.levelUp()
    engineer.addNewSkills("Objective-C")
    engineer.updateBusinessTitle("iOSアプリエンジニア")
    // プロパティをログに再出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")
}

&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>ここで気になるのが、自作したクラスを使うときに<code>import</code>をしていないという点です。<br/>
同プロジェクト内のクラスは<code>import</code>の必要がないということらしいです。<br/>
なので、自作したクラスをCocoaPodでインストールした場合は<code>import</code>の必要があると思われます。</p>

<p>基本的なところで微妙にObjective-Cと異なる部分があるので注意が必要ですね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
