<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-08-06T23:09:02+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UICollectionViewCellをカスタム化しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/08/06/custome-collectionview/"/>
    <updated>2017-08-06T03:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/08/06/custome-collectionview</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は基礎中の基礎ではあるものの、結構忘れがちなカスタム化についてメモ書きしておきたいと思います。<br/>
その題材として <code>UICollectionViewCell</code> を使ってみます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>カスタムファイルの作成</h3>

<p>まずは <code>xib</code> ファイルを作成します。<br/>
今回は下記のように <code>UIImageView</code> を持たせるようにカスタム化させます。<br/>
(<code>CustomCollectionViewCell.xib</code>とします。)</p>

<p><img src="/images/custom-collection-view-1.png" alt="xibファイル" /></p>

<p>これと対となる<code>swift</code>ファイルを作成します。<br/>
(<code>CustomCollectionViewCell.swift</code>とします。)</p>

<p>```objective-c
// CustomCollectionViewCell.swift
import UIKit</p>

<p>class CustomCollectionViewCell: UICollectionViewCell {</p>

<p>  @IBOutlet weak var imageView: UIImageView!</p>

<p>  override init(frame: CGRect) {</p>

<pre><code>super.init(frame: frame)
self.xibViewSet()
</code></pre>

<p>  }</p>

<p>  required init?(coder aDecoder: NSCoder) {</p>

<pre><code>super.init(coder: aDecoder)!
self.xibViewSet()
</code></pre>

<p>  }</p>

<p>  internal func xibViewSet() {</p>

<pre><code>if let view = Bundle.main.loadNibNamed("CustomCollectionViewCell", owner: self, options: nil)?.first as? UIView {
  view.frame = self.bounds
  self.addSubview(view)
}
</code></pre>

<p>  }
}
```</p>

<p>この<code>xib</code>と<code>swift</code>ファイルを繋ぐために <code>xib</code>ファイルの<code>File's Owner</code>の<code>Custom Class</code>の<code>Class</code>にクラス名を入力します。</p>

<p><img src="/images/custom-collection-view-2.png" alt="xibとswiftの接続" /></p>

<h3>Storyboardにカスタム部品を配置</h3>

<p>続いて、先程作成したカスタム部品を<code>Storyboard</code>に配置します。<br/>
今回は <code>UICollectionViewCell</code> をカスタム化しているので、右メニューから <code>UICollectionView</code> をドラッグ&amp;ドロップして持ってきます。</p>

<p><img src="/images/custom-collection-view-3.png" alt="UICollectionViewをドラッグ&amp;ドロップ" /></p>

<p>持ってきた部品とカスタム化クラスを結びつけます。<br/>
<code>右メニュー &gt; Show the Identity inspector &gt; Custom Class &gt; Class</code> にクラス名を入力します。</p>

<p><img src="/images/custom-collection-view-4.png" alt="カスタムクラスへの接続" /></p>

<h3>CustomCollectionViewCellの表示</h3>

<p>ここまでくれば後はいつも通り<code>UICollectionView</code>を使えば良いだけです。</p>

<p>・ <code>Storyboard</code> 上で <code>Collection Reusable View</code> の <code>Identifier</code> に値を設定<br/>
・ 下記の通りソースコードを実装</p>

<p>```objective-c
import Foundation
import UIKit</p>

<p>class CreateShopMemoViewController: UIViewController, UICollectionViewDataSource {</p>

<p>  /// UICollectionView
  @IBOutlet weak var collectionView: UICollectionView!</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()
self.collectionView.dataSource = self
</code></pre>

<p>  }</p>

<p>  override func didReceiveMemoryWarning() {</p>

<pre><code>super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
</code></pre>

<p>  }</p>

<p>  // MARK: &ndash; UICollectionViewDataSource
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) &ndash;> UICollectionViewCell {</p>

<pre><code>let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CustomCell", for: indexPath) as? CustomCollectionViewCell   
// 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)
cell?.imageView.image = UIImage(named: "NoImageIcon")

return cell!
</code></pre>

<p>  }</p>

<p>  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) &ndash;> Int {</p>

<pre><code>return 1
</code></pre>

<p>  }
}
```</p>

<p>その結果は下記の通りです。</p>

<p><img src="/images/custom-collection-view-6.png" alt="CustomCollectionViewCellの表示" /></p>

<p>因みに、今回のように、Viewを1枚ペタッと貼るだけであれば、</p>

<p>```objective-c
// MARK: &ndash; UICollectionViewDataSource
func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) &ndash;> UICollectionViewCell {
  let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &ldquo;CustomCell&rdquo;, for: indexPath) <br/>
  // 画像を設定 (今回はサンプルのためNoImageIconというものがあることを想定しています)
  cell.backgroundView = UIImageView(image: UIImage(named: &ldquo;NoImageIcon&rdquo;))</p>

<p>  return cell
}
```</p>

<p>とすれば良いだけです。</p>

<h3>まとめ</h3>

<p>今回は完全なるメモ書きでしたが、カスタム化の基礎なので、十二分に慣れておかないとですね。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://himaratsu.hatenablog.com/entry/ios/customview">カスタムViewをNibから初期化し、IBDesignableとIBInspectableで便利に使う</a></li>
<li><a href="http://qiita.com/taketomato/items/7bf3f1dc2690c76079fb">xib 化した UITableViewCell を使うときの Tips</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bond, SwiftBondを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/31/swiftbond-1/"/>
    <updated>2017-07-31T20:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/31/swiftbond-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回はiOSで <code>MVVM</code> アーキテクチャで重宝されている<a href="https://github.com/ReactiveKit/Bond">ReactiveKit/Bond</a>(SwiftBond)について勉強したいと思います。<br/>
趣味で個人iOSアプリを作成する分にはそこまで大規模アプリになることも少ないとは思うものの、仕事で大人数で1つのアプリを開発することは当然あることでしょう。<br/>
そんなときに備えて知識を向上させたいと思います。<br/>
(今まで <code>MVC</code> で済んできたこともあり、良い機会なので <code>MVVM</code> を勉強したいと思っています。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>MVVMとは</h3>

<p>まず、 <code>MVVM</code> とはそもそも何なのでしょうか？<br/>
<code>MVVM</code> とは <code>Model View ViewModel</code> の略です。</p>

<p><a href="https://ja.wikipedia.org/wiki/Model_View_ViewModel">Wikipedia</a>を見ると、それぞれ</p>

<ul>
<li><code>Model</code>

<ul>
<li>そのアプリケーションが扱う領域のデータと手続き (ビジネスロジック)を表現する要素</li>
<li>データの格納に永続的な記憶の仕組み(データベース)やサーバ側との通信ロジックなど</li>
</ul>
</li>
<li><code>View</code>

<ul>
<li>ユーザに見せるためのアウトプット描画およびユーザ入力を受け取る(UIへの入力とUIからの出力を担当する)要素</li>
<li>データバインディング機構を通して自動的に描画</li>
<li><code>View</code> そのものに複雑なロジックや状態を持たない</li>
</ul>
</li>
<li><code>ViewModel</code>

<ul>
<li>Viewを描画するための状態の保持と、Viewから受け取った入力を適切な形に変換してModelに伝達する役目を持つ</li>
</ul>
</li>
</ul>


<p>と書かれています。<br/>
他の方のブログ記事を見ても、上記からそう遠くはない印象です。</p>

<h3>Bond, SwiftBondとは</h3>

<p><code>Bond</code> は昔は <code>SwiftBond</code> と呼ばれていたようですが、今はGitHub上でも <code>ReactiveKit</code> の一部として提供されているようです。<br/>
元々、 <code>SwiftBond</code> も <code>ReactiveKit</code> も開発者は同じなので、どこかのタイミングで取り込まれたんですかね&hellip;。<br/>
この <code>Bond</code> を <code>MVVM</code> で言うところのデータバインディング機構を実現するために利用します。</p>

<h3>サンプルを作ってみよう</h3>

<p>今回のサンプルで扱う機能は下記です。</p>

<ul>
<li>Google　Mapに現在地周辺のレストランをマッピングする</li>
<li>レストラン情報はホットペッパーAPIの周辺レストラン検索APIから取得する</li>
</ul>


<p>続いてXcode上のフォルダ構成は下記にします。</p>

<p><code>objective-c
SampleApp
├── Model
│    └── HotpepperAPI.swift
├── ViewModel
│    └── HotpepperAPIViewModel.swift
├── View
│    └── ViewController.swift
├── AppDelegate.swift
└── Main.storyboard
</code></p>

<p>また、今回は <code>Google Maps SDK for iOS</code> と ホットペッパーのAPIを利用します。<br/>
これらのAPIキーを公式案内を元に取得して、 <code>Info.plist</code> と同じ階層に作成した <code>key.plist</code> に追加します。</p>

<p><img src="/images/swiftbond_1.png" alt="ホットペッパーAPIキー" /></p>

<p>さて下準備は済んだので、各ファイルの実装を見ていきましょう。</p>

<h4>AppDelegate.swift</h4>

<p><code>Google Maps SDK for iOS</code> を利用するために <code>AppDelegate.swift</code> に下記処理を実装します。</p>

<p>```objective-c
import UIKit
import GoogleMaps</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<p>  var window: UIWindow?</p>

<p>  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) &ndash;> Bool {</p>

<pre><code>// Override point for customization after application launch.

if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleMapsApiKey"] as? String {
      GMSServices.provideAPIKey(apiKey)
    }
  }
}

return true
</code></pre>

<p>  }
  &hellip;
}
```</p>

<h4>HotpepperAPI.swift</h4>

<p>ホットペッパーのグルメサーチAPIを利用する <code>Model</code> ファイルです。<br/>
今回はサンプルということもあって、ほとんど複雑な処理はありません。</p>

<p>```objective-c
// HotpepperAPI.swift
import Foundation
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>/<em>*
 ホットペッパーAPI
 </em>/
class HotpepperAPI {
  /// API Key
  private var apiKey: String = String()
  /// ホットペッパーAPIのベースURL
  private let baseURL: String = &ldquo;<a href="https://webservice.recruit.co.jp/hotpepper/gourmet/v1/">https://webservice.recruit.co.jp/hotpepper/gourmet/v1/</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["hotpepperApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   ホットペッパーグルメサーチAPI</p>

<ul>
<li> parameter coordinate: 位置</li>
<li><p> parameter completion: レストラン情報を返却するcallback
*/
func searchRestaurant(coordinate: CLLocationCoordinate2D, completion: @escaping ((JSON) &ndash;> Void)) {
let parameters = [&ldquo;key&rdquo;: self.apiKey, &ldquo;format&rdquo;: &ldquo;json&rdquo;, &ldquo;lat&rdquo;: coordinate.latitude, &ldquo;lng&rdquo;: coordinate.longitude, &ldquo;range&rdquo;: 2] as [String : Any]
Alamofire.request(baseURL, method: .get, parameters: parameters, encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)
  let result = json[&ldquo;results&rdquo;][&ldquo;shop&rdquo;]</p>

<p>  completion(result)
}
}
}
```</p></li>
</ul>


<h4>HotpepperAPIViewModel.swift</h4>

<p><code>Model</code>である<code>HotpepperAPI.swift</code>と<code>View</code>である<code>ViewController.swift</code>を繋ぐ<code>ViewModel</code>ファイルです。<br/>
<code>View</code>からの入力受付を想定して<code>searchRestaurant</code>メソッドを用意しています。</p>

<p>```objective-c
// HotpepperAPIViewModel.swift
import Foundation
import ReactiveKit
import Bond
import SwiftyJSON
import CoreLocation</p>

<p>/// 通信の各状態をEnumで表現
enum RequestState {
  case none
  case requesting
  case finish
  case error
}</p>

<p>/// HotpepperAPIのViewModelクラス
final class HotpepperAPIViewModel {</p>

<p>  var items: ObservableArray<JSON> = ObservableArray([])
  let requestState = Observable<RequestState>(.none)
  let hotpepperAPI = HotpepperAPI.init()</p>

<p>  var finishSearchRestaurant: Signal&lt;[JSON]?, NoError> {</p>

<pre><code>return self.requestState.map({ (requestState) -&gt; [JSON]? in
  if requestState == .finish {
    return self.items.array
  }
  return nil
})
</code></pre>

<p>  }</p>

<p>  func searchRestaurant(coordinate: CLLocationCoordinate2D) {</p>

<pre><code>self.requestState.next(RequestState.requesting)
hotpepperAPI.searchRestaurant(coordinate: coordinate, completion: { (result) in
  guard let resultArray = result.array else {
    return
  }
  self.items = ObservableArray(resultArray)
  self.requestState.next(RequestState.finish)
})
</code></pre>

<p>  }
}
```</p>

<p>上記では、<code>searchRestaurant</code>の中で先程紹介した<code>Model</code>の<code>HotpepperAPI</code>クラスにアクセスしてサーバ通信を委託しています。<br/>
また、返却された値を受け取って<code>requestState</code>の状態を変えることが、<code>finishSearchRestaurant</code>の処理のトリガーになっています。<br/>
<code>finishSearchRestaurant</code>では、<code>RequestState</code>の状態が<code>finish</code>になったときのみ正しい値を返却し、それ以外は<code>nil</code>を返却しています。</p>

<h4>ViewController.swift</h4>

<p>最後に <code>View</code> に当たる <code>ViewController.swift</code> について見ていきます。<br/>
iOSでファットになりがちな <code>ViewController</code> を <code>View</code> の定義に則って実装していくというのがキーになります。</p>

<p>```objective-c
// ViewController.swift
import UIKit
import GoogleMaps
import SwiftyJSON
import RealmSwift</p>

<p>class ViewController: UIViewController {
  /// マップビュー
  @IBOutlet weak var mapView: GMSMapView!
  /// 検索ボタン
  @IBOutlet weak var searchButton: UIButton!
  /// 現在地
  internal var currentLocation: CLLocationCoordinate2D?
  /// ViewModel
  internal var hotpepperAPIVM = HotpepperAPIViewModel()</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

// データバインディング機構の設定処理
self.setUpBind()
</code></pre>

<p>  }</p>

<p>  &hellip;</p>

<p>  private func setUpBond() {</p>

<pre><code>// 検索ボタンをタップ(.touchUpInside)したときに呼び出される処理
_ = self.searchButton.reactive.tap.observeNext { _ in
  self.hotpepperAPIVM.searchRestaurant(coordinate: self.currentLocation!)
}
// finishSearchRestaurantから値が返却されるときに呼び出される処理
_ = self.hotpepperAPIVM.finishSearchRestaurant.ignoreNil().observeNext(with: { (searchShops) in
  for searchShop in searchShops {
    // Google Mapへのマッピング処理
    // 省略
  }
})
</code></pre>

<p>  }
}
```</p>

<p>上記のように実装することで、データバインディング機構を <code>View</code> に実装することができます。<br/>
ポイントは上記ソース内コメントに書いた通りですが、筆者が苦戦したのは、</p>

<ul>
<li><code>_ =</code> から始めなかったためSwift3の静的解析で怒られた</li>
<li><code>observeNext</code> 内で <code>nil</code> 判定してしまっていたが、 <code>ignoreNil</code> という便利なものがある</li>
</ul>


<p>の2点です。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
筆者的にもまだまだ理解しきれていないところがあり、引き続き勉強する必要があると感じています。<br/>
特にエラーハンドリング周りでは <code>ReactiveKit</code> を利用することで、<br/>
うまく書けるようになるのではという期待感があるのでもう少し見ていきたいと思っています。<br/>
と言ったところで本日はここまで。</p>

<p>参考</p>

<ul>
<li><a href="http://qiita.com/hachinobu/items/27a92d480db24511559a">SwiftBondの魅力 ~実用サンプル編~</a></li>
<li><a href="http://qiita.com/susieyy/items/2af5321b287b8d2f49f6">MVVMをベースに複雑な振る舞いをしっかり把握できるアプリ開発</a></li>
<li><a href="http://qiita.com/ko2ic/items/44c18b07c7f337dfb06b">SwiftBondをSwift3対応するためにv5にマイグレーションする</a></li>
<li><a href="https://www.raywenderlich.com/149753/bond-tutorial-bindings-swift">Bond Tutorial: Bindings in Swift</a></li>
<li><a href="https://github.com/ReactiveKit/ReactiveKit">ReactiveKit/ReactiveKit</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlamofireImageを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/23/alamofireimage/"/>
    <updated>2017-07-23T15:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/23/alamofireimage</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は何気に今まで使ってこなかった<a href="https://github.com/Alamofire/AlamofireImage">AlamofireImage</a>についてメモ書きです。<br/>
キャッシュコントロールやら同期/非同期での画像取得など考えなくても良いというのはパワー的にかなり楽になりますね。<br/>
ということで早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>API経由で取得した画像URLを使ってUIImageViewに画像を表示する</h3>

<h4>テストとして利用するAPI</h4>

<p>今回はテスト用APIとして<a href="https://webservice.recruit.co.jp/hotpepper/reference.html">ホットペッパーのグルメサーチAPI</a>を利用しました。</p>

<p>ホットペッパーAPIを利用するには新規登録して<code>API Key</code>をゲットする必要があります。<br/>
また、前提として取得した<code>API Key</code>は<code>key.plist</code>に書いているとします。</p>

<p><img src="/images/alamofireimage_1.png" alt="API Keyをkey.plistに書き出し" /></p>

<p>上記準備をした上で下記クラスを作成しました。</p>

<p>```objective-c
// HotpepperAPI.swift
import Foundation
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>/<em>*
 ホットペッパーAPI
 </em>/
class HotpepperAPI {
  /// API Key
  private var apiKey: String = String()
  /// ホットペッパーAPIのベースURL
  private let baseURL: String = &ldquo;<a href="https://webservice.recruit.co.jp/hotpepper/gourmet/v1/">https://webservice.recruit.co.jp/hotpepper/gourmet/v1/</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["hotpepperApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   ホットペッパーグルメサーチAPI</p>

<ul>
<li> parameter coordinate: 位置</li>
<li><p> parameter completion: レストラン情報を返却するcallback
*/
func searchRestaurant(coordinate: CLLocationCoordinate2D, completion: @escaping ((JSON) &ndash;> Void)) {
let parameters = [&ldquo;key&rdquo;: self.apiKey, &ldquo;format&rdquo;: &ldquo;json&rdquo;, &ldquo;lat&rdquo;: coordinate.latitude, &ldquo;lng&rdquo;: coordinate.longitude, &ldquo;range&rdquo;: 2] as [String : Any]
Alamofire.request(baseURL, method: .get, parameters: parameters, encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)
  let result = json[&ldquo;results&rdquo;][&ldquo;shop&rdquo;]</p>

<p>  completion(result)
}
}
}
```</p></li>
</ul>


<h4>テストとして用意するUIImageView</h4>

<p>今回はテストとして <strong>マップにプロットしたマーカをタップしたときに表示するInfoWindow内にUIImageViewを用意する</strong> ようにしました。</p>

<p>【準備事項】<br/>
&ndash; Google Maps SDK for iOSをマップとして利用<br/>
&ndash; マーカタップ時に表示されるInfoWindowをカスタム化</p>

<p>表示するViewとしては下図のようになります。<br/>
<img src="/images/alamofireimage_2.png" alt="MarkerInfoContentsView.xib" /></p>

<h4>AlamofireImageの用意</h4>

<p>では肝心な<code>AlamofireImage</code>の導入を見てみましょう。<br/>
<code>CocoaPods</code>で簡単に導入が可能です。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!
platform :ios, &lsquo;10.0&rsquo;</p>

<p>target &ldquo;SampleApp&rdquo; do
  # Normal libraries
  &hellip;
  pod &lsquo;AlamofireImage&rsquo;, &lsquo;~> 3.1&rsquo;
end</p>

<p>post_install do |installer|
  installer.pods_project.targets.each do |target|</p>

<pre><code>target.build_configurations.each do |config|
  config.build_settings['SWIFT_VERSION'] = '3.0'
end
</code></pre>

<p>  end
end
```</p>

<h4>マーカタップ時に表示するInfoWindowに画像を表示する</h4>

<p>まずは<code>InfoWindow</code>をカスタム化したクラスである<code>MarkerInfoContentsView.swift</code>のソースコードを書きます。</p>

<p>```objective-c
// MarkerInfoContentsView.swift
import Foundation
import UIKit
import AlamofireImage</p>

<p>class MarkerInfoContentsView: UIView {</p>

<p>  @IBOutlet weak var shopName: UILabel!
  @IBOutlet weak var categoryName: UILabel!
  @IBOutlet weak var shopImage: UIImageView!</p>

<p>  override init(frame: CGRect) {</p>

<pre><code>super.init(frame: frame)
self.xibViewSet()
</code></pre>

<p>  }</p>

<p>  required init?(coder aDecoder: NSCoder) {</p>

<pre><code>super.init(coder: aDecoder)!
self.xibViewSet()
</code></pre>

<p>  }</p>

<p>  internal func xibViewSet() {</p>

<pre><code>if let view = Bundle.main.loadNibNamed("MarkerInfoContentsView", owner: self, options: nil)?.first as? UIView {
  view.frame = self.bounds
  self.addSubview(view)
}
</code></pre>

<p>  }</p>

<p>  /**</p>

<pre><code>データの設定処理

- parameter shopName: 店舗名
- parameter categoryName: カテゴリ名
- parameter shopImageURLString: 画像URL
</code></pre>

<p>   */
  func setData(shopName: String?, categoryName: String?, shopImageURLString: String?) {</p>

<pre><code>// 店舗名の設定
if let shopNameTextCount = shopName?.characters.count, shopNameTextCount &gt; 0 {
  self.shopName.text = shopName
} else {
  self.shopName.text = "店舗名不明"
  self.shopName.textColor = UIColor.gray
}
// 詳細説明の設定
if let categoryNameTextCount = categoryName?.characters.count, categoryNameTextCount &gt; 0 {
  self.categoryName.text = categoryName
} else {
  self.categoryName.text = "カテゴリ不明"
  self.categoryName.textColor = UIColor.gray
}
// 画像の設定
if let shopImageURLStringTextCount = shopImageURLString?.characters.count, shopImageURLStringTextCount &gt; 0 {
  if let shopImageURL = URL(string: shopImageURLString!) {
    self.shopImage.af_setImage(withURL: shopImageURL, placeholderImage: UIImage(named: "NoImageIcon"))
  } else {
    self.shopImage.image = UIImage(named: "NoImageIcon")
  }
} else {
  self.shopImage.image = UIImage(named: "NoImageIcon")
}    
</code></pre>

<p>  }
}
```</p>

<p>実際に<code>AlamofireImage</code>を利用して画像URLから取得した画像データを格納している箇所は、</p>

<p><code>objective-c
self.shopImage.af_setImage(withURL: shopImageURL, placeholderImage: UIImage(named: "NoImageIcon"))
</code></p>

<p>になります。<br/>
続いて、<code>ViewController.swift</code>での<code>GMSMapViewDelegate</code>部分の処理を抜粋して書きます。</p>

<p>```objective-c
// ViewController.swift
extension ViewController: GMSMapViewDelegate {
  func mapView(_ mapView: GMSMapView, markerInfoWindow marker: GMSMarker) &ndash;> UIView? {</p>

<pre><code>guard let cMarker = marker as? CustomGMSMarker else {
  return nil
}
cMarker.tracksInfoWindowChanges = true
let view = MarkerInfoContentsView(frame: CGRect(x: 0, y: 0, width: 250, height: 265))
view.setData(shopName: cMarker.shopName, categoryName: cMarker.categoryName, shopImageURLString: cMarker.imageURL)
return view
}
</code></pre>

<p>}
```</p>

<p>重要なのは、 <strong><code>cMarker.tracksInfoWindowChanges = true</code></strong> です。<br/>
これを書かないと <strong>画像URLから画像データを取得したタイミングで<code>InfoWindow</code>の画像を更新する</strong>ということができなくなります。<br/>
(<code>placeholderImage</code>として用意した画像がずっと表示されてしまいます。)</p>

<p>筆者はここでドハマリして試行錯誤してしまいました。<br/>
非同期で画像データを取得しに行っているので、データ取得前に<code>InfoWindow</code>の描画処理に進んでしまうということはわかるのですが、どうすれば想定した挙動が実現できるのか悩みました。<br/>
ですが、蓋を開けてみれば何ということもなかったんですよね。</p>

<h3>まとめ</h3>

<p>さて、如何でしたでしょうか？<br/>
画像取得/キャッシュ関連のOSSライブラリは多種多様なものが出ており、好き嫌いもあるかもしれませんが、筆者は通信ライブラリに<code>Alamofire</code>を使うことが多いため、<code>AlamofireImage</code>も嫌いではないんですよね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geocoding APIとDirections APIを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/google-maps-api/"/>
    <updated>2017-07-17T22:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/google-maps-api</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はGoogleが提供している<a href="https://developers.google.com/maps/documentation/geocoding/intro?hl=ja">Geocoding API</a>と<a href="https://developers.google.com/maps/documentation/directions/?hl=ja">Directions API</a>をiOSで使ってみた話を書きます。</p>

<p>まずは、Google Cloud Platform > API Managerから <strong>Geocoding API</strong> と <strong>Directions API</strong> を有効にしましょう。</p>

<p><img src="/images/google_api_1.png" alt="API Manager" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geocoding APIの利用</h3>

<p>Googleから提供されたAPIを利用し、それがJSON形式が返却されるため、<code>Alamofire</code>と<code>SwiftyJSON</code>をあわせて利用します。</p>

<p>因みに、APIキーは<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>で説明した通り<code>key.plist</code>に記載することでGitHubにアップすることを避けています。</p>

<p>今回実装する処理は <strong>住所を緯度/経度に変換する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Geocoding {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/geocode/json?language=ja">https://maps.googleapis.com/maps/api/geocode/json?language=ja</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   ジオコーディング</p>

<ul>
<li> parameter address: 住所</li>
<li><p> parameter completion: 緯度/経度を返すcallback
*/
func geocoding(address: String, completion: @escaping ((CLLocationCoordinate2D) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
Alamofire.request(requestURL, method: .get, parameters: [&ldquo;address&rdquo;: address], encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)</p>

<p>  guard let latitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lat&rdquo;].double else {
    return
  }</p>

<p>  guard let longitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lng&rdquo;].double else {
    return
  }</p>

<p>  completion(CLLocationCoordinate2D.init(latitude: latitude, longitude: longitude))
}
}<br/>
}
```</p></li>
</ul>


<h3>Directions APIの利用</h3>

<p>ここで実装する処理は <strong>開始地点から終了地点までの道順を取得する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Direction {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking">https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   目的地までの道順を取得</p>

<ul>
<li> parameter from: 開始地点</li>
<li> parameter to: 終了地点</li>
<li><p> parameter completion: 道順を返すcallback
*/
func getRoutes(from: CLLocationCoordinate2D, to: CLLocationCoordinate2D, completion: @escaping ((JSON) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
let parameters = [&ldquo;origin&rdquo;: &ldquo;(from.latitude),(from.longitude)&rdquo;, &ldquo;destination&rdquo;: &ldquo;(to.latitude),(to.longitude)&rdquo;]
Alamofire.request(requestURL, method: .get, parameters: parameters, encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)
  let steps = json[&ldquo;routes&rdquo;][0][&ldquo;legs&rdquo;][0][&ldquo;steps&rdquo;]</p>

<p>  completion(steps)
}
}
}
```</p></li>
</ul>


<h3>まとめ</h3>

<p>今回はGoogleが提供している <strong>Geocoding API</strong> と <strong>Directions API</strong> について見てみました。<br/>
Google Mapを利用するサービスを考えると案外必要となる場面が多いんですよね。<br/>
知っておいて損はないかと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geccoを使ったiOSアプリのチュートリアルを実装しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/gecco/"/>
    <updated>2017-07-17T21:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/gecco</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はアプリでのチュートリアル実装について見ていきたいと思います。<br/>
あまたあるOSSライブラリの中で筆者が注目したのは、<a href="https://github.com/yukiasai/Gecco">Gecco</a>です。<br/>
理由は</p>

<ul>
<li>Swiftで作られていること</li>
<li>GitHubでのStar数が多いこと</li>
<li>タップ箇所を誘導するUIであること</li>
</ul>


<p>です。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geccoのインストール</h3>

<p>CocoaPodsでインストールします。<br/>
以下のように <code>Podfile</code> を作成して、 <code>pod install</code> を実行してください。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!
platform :ios, &lsquo;10.0&rsquo;</p>

<p>target &ldquo;SampleApplication&rdquo; do
  pod &lsquo;Gecco&rsquo;
end
```</p>

<h3>Geccoの使い方</h3>

<p>これまた実にシンプルです。</p>

<h4>スポットライトの表示</h4>

<p>タップを促すときなどに焦点を当てるためのスポットライトを表示させたいことがあると思います。<br/>
これを実現してみましょう。</p>

<p>```objective-c
import UIKit
import Gecco</p>

<p>class ViewController: UIViewController {</p>

<p>  private var spotlightViewController: SpotlightViewController!
  &hellip;
  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

// 初期化
self.spotlightViewController = SpotlightViewController()
</code></pre>

<p>  }</p>

<p>  override func viewWillAppear() {</p>

<pre><code>super.viewWillAppear()

present(self.spotlightViewController, animated: true) {
  // スポットライトの表示
  self.spotlightViewController.spotlightView.appear(Spotlight.Oval(center: CGPoint(x: 100, y: 100), diameter: 50))
}
</code></pre>

<p>  }
}
```</p>

<p>上記のように初期化をして、<code>present</code>で画面遷移させる要領で表示させることができます。<br/>
また、上記例では円形のスポットライトが表示されますが、<br/>
スポットライトの形式には <code>Oval</code>(円) / <code>Rect</code>(長方形) / <code>RoundRect</code>(角丸長方形)の3つがあるため用途にあった形式を選択することができます。</p>

<h4>スポットライトに対するアクションを拾う</h4>

<p>続いて、下図のようにボタンタップを促す形で表示したスポットライトをタップしたことを検知して、次のチュートリアルに進みたいことがあると思います。</p>

<p><img src="/images/gecco_1.png" alt="ボタンの上にスポットライトの表示" /></p>

<p>これは <code>SpotlightViewControllerDelegate</code> を利用することになります。</p>

<p>```objective-c
import UIKit
import Gecco</p>

<p>class ViewController: UIViewController, SpotlightViewControllerDelegate {</p>

<p>  @IBOutlet weak var button: UIButton!
  private var spotlightViewController: SpotlightViewController!
  &hellip;
  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

// 初期化
self.spotlightViewController = SpotlightViewController()
self.spotlightViewController?.delegate = self
</code></pre>

<p>  }</p>

<p>  override func viewWillAppear() {</p>

<pre><code>super.viewWillAppear()

present(self.spotlightViewController, animated: true) {
  self.spotlightViewController.spotlightView.appear(Spotlight.Oval(center: CGPoint(x: 100, y: 100), diameter: 50))
}
</code></pre>

<p>  }</p>

<p>  // SpotlightViewControllerをタップした場合
  func spotlightViewControllerTapped(_ viewController: SpotlightViewController, isInsideSpotlight: Bool) {</p>

<pre><code>if isInsideSpotlight {
  // スポットライトの内側をタップした場合
  // SpotlightViewControllerを非表示にする
  self.spotlightViewController.dismiss(animated: true, completion: {
    self.button.sendActions(for: .touchUpInside)
  })
}
</code></pre>

<p>  }
}
```</p>

<p>上記のようにタップの検知は <code>spotlightViewControllerTapped</code> で可能です。<br/>
また、 <code>isInsideSpotlight</code> を利用することでスポットライトの内側をタップしたかどうかも検知できます。<br/>
余談ですが、<br/>
スポットライトをタップしても、そのままではボタンをタップしたことにはなりません。<br/>
そのため、ボタンへのタップアクションを伝えるために <code>sendActions(for: .touchUpInside)</code> を利用します。</p>

<p><code>spotlightViewControllerTapped</code>以外にも<code>spotlightViewControllerWillPresent</code>や<code>spotlightViewControllerWillDismiss</code>もありますので、状況次第で利用すると良いかと思います。</p>

<p><code>objective-c
@objc public protocol SpotlightViewControllerDelegate: class {
  optional func spotlightViewControllerWillPresent(viewController: SpotlightViewController, animated: Bool)
  optional func spotlightViewControllerWillDismiss(viewController: SpotlightViewController, animated: Bool)
  optional func spotlightViewControllerTapped(viewController: SpotlightViewController, isInsideSpotlight: Bool)
}
</code></p>

<h3>Geccoに機能を追加しよう</h3>

<p>デフォルトで用意されている機能以外に何らかの機能を合わせて使いたいこともあるでしょう。<br/>
そんなときは自ら実装するのが良いかと思います。</p>

<h4>チュートリアル用の説明を追加</h4>

<p>今回、筆者がGeccoを使った際に必要とした機能の中に <strong>説明表記</strong> がありました。<br/>
<code>GeccoExample</code> の中に <code>AnnotationViewController</code> が用意されていますので参考にさせて頂きました。</p>

<p>```objective-c
// AnnotationViewController
import Foundation
import UIKit
import Gecco</p>

<p>class AnnotationViewController: SpotlightViewController {</p>

<p>  @IBOutlet weak var label: UILabel!</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()
</code></pre>

<p>  }</p>

<p>  override func viewWillAppear(_ animated: Bool) {</p>

<pre><code>super.viewWillAppear(animated)
</code></pre>

<p>  }</p>

<p>  func updateLabel(_ text: String, blackColor: Bool = false) {</p>

<pre><code>self.label.text = text
if blackColor {
  self.label.textColor = UIColor.black
} else {
  self.label.textColor = UIColor.white
}
</code></pre>

<p>  }
}
```</p>

<p>筆者の場合、<code>UILabel</code>の位置は常に同じ場所で十分だったため上記のみの追加になっています。</p>

<h4>長押しジェスチャの追加</h4>

<p>今回、筆者がGeccoを使った際に必要とした機能の中に <strong>長押し検知</strong> がありました。<br/>
デフォルトで実装されていないため、GitHubからRepositoryをForkして機能追加することにしました。<br/>
コメントを記載した4箇所の追加のみで実装できます。</p>

<p>```objective-c
// SpotlightViewController
import UIKit</p>

<p>@objc public protocol SpotlightViewControllerDelegate: class {
  @objc optional func spotlightViewControllerWillPresent(<em> viewController: SpotlightViewController, animated: Bool)
  @objc optional func spotlightViewControllerWillDismiss(</em> viewController: SpotlightViewController, animated: Bool)
  @objc optional func spotlightViewControllerTapped(<em> viewController: SpotlightViewController, isInsideSpotlight: Bool)
  // (1)長押し検知
  @objc optional func spotlightViewControllerLongPressed(</em> viewController: SpotlightViewController, isInsideSpotlight: Bool)
}</p>

<p>open class SpotlightViewController: UIViewController {
  open weak var delegate: SpotlightViewControllerDelegate?
  &hellip;
  open override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

setupSpotlightView(alpha)
setupContentView()
setupTapGesture()
// (2)長押し処理の追加
setupLongPressGesture()

view.backgroundColor = UIColor.clear
</code></pre>

<p>  }
  &hellip;
  // (3)長押し処理ジェスチャの初期化
  fileprivate func setupLongPressGesture() {</p>

<pre><code>let gesture = UILongPressGestureRecognizer(target: self, action: #selector(SpotlightViewController.viewLongPressed(_:)));
view.addGestureRecognizer(gesture)
</code></pre>

<p>  }
}</p>

<p>extension SpotlightViewController {
  &hellip;
  // (4)長押し時に実行される処理を追加
  func viewLongPressed(_ gesture: UILongPressGestureRecognizer) {</p>

<pre><code>let pressPoint = gesture.location(in: spotlightView)
let isInside = spotlightView.spotlight?.frame.contains(pressPoint) ?? false
delegate?.spotlightViewControllerLongPressed?(self, pressPoint: pressPoint, isInsideSpotlight: isInside)
</code></pre>

<p>  }
}
```</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
今回はチュートリアル用に利用する <code>Gecco</code> ライブラリについて紹介させて頂きました。<br/>
チュートリアルにはGoogleがよく使うような初めに説明スライドを数枚用意する方式もあるかと思います。<br/>
ケースによって使い分けると良いんでしょうね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
