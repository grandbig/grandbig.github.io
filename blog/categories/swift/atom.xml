<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-05-24T22:14:27+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift AFNetworkingライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-afnetworking/"/>
    <updated>2015-05-24T10:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-afnetworking</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAFNetworkingの使い方を覚えよう！</h4>

<p>さて、本日はObjective-Cの超有名通信系ライブラリの<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>をSwiftで使ってみようと思います。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方を見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<p><code>objective-c
platform :ios, '7.0'
pod "AFNetworking", "~&gt; 2.0"
</code></p>

<p>これで<code>pod install</code>すればプロジェクトに <strong>AFNetworking</strong> が追加されるはずです。<br/>
ここで注意したいのが、あくまでもObjective-Cで書かれたライブラリなので、Swiftで使うためにはBridgeファイルを用意する必要があります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<ol>
<li>プロジェクトにヘッダーファイルを追加します。
ProjectName-Bridging-Header.hという形式が推奨されている模様<br/>
今回はSwiftSample-Bridging-Header.hという名前で追加しました。</li>
<li>TARGETS > SwiftSample > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Headerにパスを指定
SwiftSample/SwiftSample-Bridging-Header.hを指定しました。</li>
<li>Bridgeファイルにライブラリを<code>import</code>する</li>
<li>ライブラリを利用するファイルにも<code>import</code>を書きましょう(Swiftの書き方で。)</li>
</ol>


<p>下記の画像を参照ください。
<img src="/images/swift-afnetworking.png" alt="Bridgeファイルの用意" /></p>

<p>また、Bridgeファイルへの具体的な内容を書いておきます。</p>

<p>```objective-c</p>

<h1>ifndef SwiftSample_SwiftSample_Bridging_Header_h</h1>

<h1>define SwiftSample_SwiftSample_Bridging_Header_h</h1>

<h1>endif</h1>

<h1>import &lt;AFNetworking/AFNetworking.h></h1>

<p>```</p>

<h5>GETリクエスト</h5>

<p>では、早速、GETリクエストを書いてみましょう。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<p>```objective-c</p>

<p>{</p>

<pre><code>base:  "stations",
clouds: {
    all: 32
},
cod: 200,
coord: {
    lat: 35.69,
    lon: 139.65
},
dt: 1432394992,
id: 1850147,
main: {
    grnd_level: 1019.97,
    humidity: 88,
    pressure: 1019.97,
    sea_level: 1024.92,
    temp: 290.99,
    temp_max: 290.99,
    temp_min: 290.99
},
name: Tokyo,
sys: {
    country: "JP",
    message: 0.0386,
    sunrise: 1432323041,
    sunset: 1432374314
},
weather: [
    {
        description: "scattered clouds",
        icon: "03n",
        id: 802,
        main: "Clouds"
    }
],
wind: {
    deg: 198.001,
    speed: 5.11
}
</code></pre>

<p>}</p>

<p>```</p>

<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。</p>

<p>```objective-c
// GETリクエスト
let manager = AFHTTPSessionManager()
manager.GET(&ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;, parameters: nil,</p>

<pre><code>success: { (operation, json) -&gt; Void in
    // 処理が成功した場合
    let dict = json as! [String: AnyObject]
    let weatherArray = dict["weather"] as! [AnyObject]
    let weather = weatherArray[0] as! [String: AnyObject]
    let description = weather["description"] as! String
    println(description)
}, failure: { (operation, error) -&gt; Void in
    // エラーが発生した場合
})
</code></pre>

<p>```</p>

<p>Objective-Cでは下記のように書いていたので、対応づけて見るとわかりやすいかもしれません。</p>

<p>```objective-c
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
[manager.GET:@&ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;, parameters: nil,</p>

<pre><code>success:^(NSURLSessionDataTask *task, id responseObject) {
    NSArray *weatherArray = [responseObject objectForKey:@"weather"];
    NSDictionary *weather = [weatherArray objectAtIndex:0];
    NSString *description = [weather objectForKey:@"description"];
    NSLog(description);
}, failure:^(NSURLSessionDataTask *task, NSError *error) {
    // エラーが発生した場合
}];
</code></pre>

<p>```</p>

<p><code>success</code>と<code>failure</code>は戻り値が<code>void</code>なので、Swiftでも<code>-&gt; Void</code>と指定しています。<br/>
<code>[String: AnyObject]</code>は <strong>keyがString型</strong> で <strong>valueがAnyObject(何でもあり)型</strong> のDictionary型への変換で、<br/>
<code>[AnyObject]</code>は <strong>要素がAnyObject(何でもあり)型</strong> のArray型への変換です。</p>

<p>Alamofireとはやはり違った書き方となるので、iOSのターゲットなど要件に従って使い分けていくのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Alamofireライブラリを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/swift-alamofire1/"/>
    <updated>2015-05-24T00:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/swift-alamofire1</id>
    <content type="html"><![CDATA[<h4>通信系ライブラリAlamofireの使い方を覚えよう！</h4>

<p>さて、本日は <strong>Alamofire</strong> ライブラリの使い方を勉強します。<br/>
<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>はObjective-Cの超有名通信系ライブラリである<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>のSwift版と思えばよいでしょう。</p>

<h5>導入の仕方</h5>

<p>まずは導入の仕方から見て行きましょう。<br/>
CocoaPodsを使います。<br/>
Podfileを作成し、下記の内容を記載しましょう。</p>

<p>```objective-c
source &lsquo;<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>&rsquo;
platform :ios, &lsquo;8.0&rsquo;
use_frameworks!</p>

<p>pod &lsquo;Alamofire&rsquo;, &lsquo;~> 1.2&rsquo;
```</p>

<p>これで<code>pod install</code>すればプロジェクトにAlamofireが追加されるはずです！<br/>
後は利用したいswiftファイルで<code>import Alamofire</code>しましょう。<br/>
SwiftライブラリをCocoaPodsでインストールすると対象iOSが8.0以上である必要が出てくるので、そこだけ注意しましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>GETリクエスト(パターン１)</h5>

<p>続いて、GETリクエストのメソッドを書いてみます。<br/>
以前の<a href="http://grandbig.github.io/blog/2015/02/12/afnetworking/">AFNetworking2.xでWeb-APIを叩いてみた！</a>でも利用した <strong>OpenWeatherMap API</strong> を例として使います。</p>

<p><code>http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</code>でリクエストして、<br/>
下記のデータを返してもらうことを想定しています。</p>

<p>```objective-c</p>

<p>{</p>

<pre><code>base:  "stations",
clouds: {
    all: 32
},
cod: 200,
coord: {
    lat: 35.69,
    lon: 139.65
},
dt: 1432394992,
id: 1850147,
main: {
    grnd_level: 1019.97,
    humidity: 88,
    pressure: 1019.97,
    sea_level: 1024.92,
    temp: 290.99,
    temp_max: 290.99,
    temp_min: 290.99
},
name: Tokyo,
sys: {
    country: "JP",
    message: 0.0386,
    sunrise: 1432323041,
    sunset: 1432374314
},
weather: [
    {
        description: "scattered clouds",
        icon: "03n",
        id: 802,
        main: "Clouds"
    }
],
wind: {
    deg: 198.001,
    speed: 5.11
}
</code></pre>

<p>}</p>

<p>```</p>

<p>では、GETリクエストを投げてみましょう。<br/>
返却されたデータの取得方法についても記載します。<br/>
幾つか書き方があるのですが、まずは１つ目の書き方です。</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather">http://api.openweathermap.org/data/2.5/weather</a>&rdquo;, parameters:[&ldquo;q&rdquo;:&ldquo;Tokyo,jp&rdquo;]).response { (request, response, data, error) in</p>

<pre><code>if let data = data as? NSData {
    // AnyObject型をNSData型に変換できた場合に通過
    // NSData型をJSONの形に変換して、AnyObject?型の変数に格納
    var obj: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments, error: nil)

    if let weatherArray = obj["weather"] as? [AnyObject] {
        // objからweatherフィールドを取得。その際、Array型に変換できた場合に通過
        if let weather = weatherArray[0] as? [String: AnyObject] {
            // NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過
            if let description = weather["description"] as? String {
                // NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過
                println(description)
            }

            // NSDictionary型のweatherからdescriptionを指定して取得
            var description2:String? = weather["description"] as? String
            println(description2)
        }
    }
}
</code></pre>

<p>}
```</p>

<p>注意したいのは、responseで返却される<code>data</code>は <strong>NSData型</strong> ではなく、 <strong>AnyObject?型</strong> だということです。<br/>
そのため、直接<code>NSJSONSerialization.JSONObjectWithData</code>の１つ目の引数に<code>data</code>を指定するとNSData型ではないことを示唆するエラーが出ます。<br/>
なので、 <strong>NSData型</strong> に変換する必要があります。</p>

<p>そして、NSData型のままでは各要素を取り出せないので、 <strong>(JSONの形をした)AnyObject?型</strong> に変換させましょう。<br/>
(Dictionary型に変換しても良いのですが、既にJSONの形に変換されているので十分でしょう。)<br/>
後は各フィールドの型に従って変換して取り出していくイメージで書きましょう。</p>

<p>覚えておきたいのは、</p>

<p>```objective-c
if let 定数名 = 要素 as? 定数の型 {</p>

<pre><code>// 指定した定数の型に変換できた場合に、この中を通過する(変換できなかった場合はnilを入れようとするので、この中を通過しない)
</code></pre>

<p>}
```</p>

<p>という変換の書き方です。<br/>
Swiftの場合、JSONの取り扱いで思った以上にコードが長くなり、ネスト化してしまいます。<br/>
それを防ぐため&amp;JavaScriptのような書き方を意識したライブラリがたくさん出ています。<br/>
近いうち使ってみようと思います。</p>

<p>また、変換時に<code>[AnyObject]</code>や<code>[String: AnyObject]</code>と書いているのは、<br/>
前者が<code>Array型</code>に変換していて、後者は<code>Dictionary型</code>に変換しています。<br/>
Swiftではどんな要素を含むArray型なのかを示し、どんなkeyでどんなvalueなのかをDictionary型として明示的に示す必要があります。</p>

<p>もし、Objective-Cの<code>NSArray型</code>や<code>NSDictionary型</code>に変換する場合は中身の形式を考えずに<code>as</code>の後ろに続けて書けばOKです。</p>

<h5>GETリクエスト(パターン２)</h5>

<p>とは言え、少しネストが深いので、別のresoponse形式のパターンで試してみましょう。</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;).responseJSON { (<em>, </em>, JSON, _) in</p>

<pre><code>if let weatherArray = JSON!["weather"] as? [AnyObject] {
    // JSONからweatherフィールドを取得。その際、Array型に変換できた場合に通過
    if let weather = weatherArray[0] as? [String: AnyObject] {
        // NSArray型のweatherArrayから要素0番目を取得。その際、Dictionary型に変換できた場合に通過
        if let description = weather["description"] as? String {
            // NSDictionary型のweatherからdescriptionフィールドを取得。その際、String型に変換できた場合に通過
            println(description)
        }

        // NSDictionary型のweatherからdescriptionを指定して取得
        var description2:String? = weather["description"] as? String
        println(description2)
    }
}
</code></pre>

<p>}
```</p>

<p>これは、レスポンスメソッドに<code>responseJSON</code>を指定することで、<br/>
1つ目に上げた<code>AnyObject?型 ⇒ NSData型</code>への変換と<code>NSData型 ⇒ JSONの形をしたAnyObject?型</code>への変換は不要となります。<br/>
既に<code>responseJSON</code>の中でやってくれています。<br/>
少しネストが浅くなりましたね！</p>

<h5>GETリクエスト(パターン３)</h5>

<p>まだ、ネストが深いって？<br/>
よし！思い切ってネストをなくしましょう！</p>

<p>```objective-c
// GETリクエスト
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp">http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp</a>&rdquo;).response { (request, response, data, error) in</p>

<pre><code>// AnyObject?型をNSData型に変換。さらにJSONの形をしたNSDictionary型に変換。
let json = NSJSONSerialization.JSONObjectWithData(data as! NSData, options: NSJSONReadingOptions.MutableContainers, error: nil) as! [String: AnyObject]
let weatherArray = json["weather"] as! [AnyObject]
let weather = weatherArray[0] as! [String: AnyObject]
let description = weather["description"] as! String
println(description)
</code></pre>

<p>}
```</p>

<p>う〜ん。ネストは確かになくなったのですが、Unwrapの手法を <strong>Implicitly Unwrapped Optional</strong> にしたため、nilが発生した段階でエラーが発生して落ちます&hellip;。<br/>
値がない場合には空オブジェクトを返すAPIである場合には問題ないと思います。</p>

<p>だんだんとSwiftの基礎含めて理解が進んできた気がします。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(2)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/17/swift-base-2/"/>
    <updated>2015-05-17T17:48:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/17/swift-base-2</id>
    <content type="html"><![CDATA[<h4>Swiftの型</h4>

<p>続いて、基本的な内容を見ていきます。<br/>
SwiftはObjective-Cと型の表現が変わりました。<br/>
よく使う型を見て行きましょう。</p>

<p>```objective-c</p>

<p>var intValue:Int = 3
var doubleValue:Double = 1.234
var floatValue:Float = 5.678
var boolValue:Bool = true
var stringValue:String = &ldquo;abcdefg&rdquo;
var charValue:Character = &ldquo;a&rdquo;
var intArray = [1, 30, 120, 6]
var stringArray = [&ldquo;abc&rdquo;, &ldquo;123&rdquo;]
var testDictionary = [&ldquo;job&rdquo;: &ldquo;programmer&rdquo;, &ldquo;skillNum&rdquo;: 5]</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>因みにこれをObjective-Cで書くと</p>

<p>```objective-c</p>

<p>NSInteger intValue = 3;
CGFloat doubleValue = 1.234;
CGFloat floatValue = 5.678;
BOOL boolValue = YES;
NSString <em>stringValue = @&ldquo;abcdefg&rdquo;;
char charValue = &ldquo;a&rdquo;
NSArray </em>intArray = @[1, 30, 120, 6];
NSArray <em>stringArray = @[@&ldquo;abc&rdquo;, @&ldquo;123&rdquo;];
NSDictionary </em>testDictionary = @{@&ldquo;job&rdquo;: @&ldquo;programmer&rdquo;, @&ldquo;skillNum&rdquo;: @5};</p>

<p>```</p>

<p>CGFloatで定義された<code>doubleValue</code>と<code>floatValue</code>は<code>double</code>, <code>float</code>をそれぞれ書くこともできます。<br/>
(ここは32bit, 64bit問題のため、安全側に倒すために<code>CGFloat</code>に統一して書いています。)</p>

<h4>Swiftでクラスを作成</h4>

<p>さて、新たにSwiftファイルを追加して、カスタムクラスを実装してみましょう。<br/>
まずは、Objective-Cと同様で、左メニューのフォルダを右クリックして、『New File』を選択します。</p>

<p><img src="/images/swift_add_new_class.png" alt="New File" /></p>

<p>そして、iOS > Source > Swift Fileを選択します。</p>

<p><img src="/images/choose_swift_file.png" alt="Add Swift File" /></p>

<p>Objective-Cと違って、どのクラスを継承するか否かを決めるフェーズはありません。<br/>
ファイル名と保存場所を決めるのみです。</p>

<p><img src="/images/create_swift_file.png" alt="Save Swift File" /></p>

<p>作成されるファイルの内容は下記になります。</p>

<p>```objective-c</p>

<p>import Foundation</p>

<p>```</p>

<p>ここにカスタムクラスを実装していきましょう。<br/>
例えば下記のようなクラスを作ります。</p>

<p>```objective-c</p>

<p>class Engineer:NSObject {</p>

<pre><code>// プロパティの定義
var level:Int = 1
var businessTitle:String = "新米エンジニア"
var skill:Array&lt;String&gt; = ["Swift"]

// メソッドの定義
// レベルアップ処理
func levelUp() -&gt;Int {
    return level++
}

// 新規スキルをセットする処理
func addNewSkills(newSkill:String) {
    skill.append(newSkill)
}

// 新たな肩書をセットする処理
func updateBusinessTitle(title:String) {
    businessTitle = title
}
</code></pre>

<p>}</p>

<p>```</p>

<p>上記のクラスでは <strong>NSObject</strong> クラスを継承しています。逆に言えばEngineerクラスのスーパークラスは <strong>NSObject</strong> クラスということです。<br/>
Engineerクラスには<code>level</code>, <code>businessTitle</code>, <code>skill</code>という3つのプロパティを定義しています。(全てに初期値を与えています。)<br/>
また、<code>levelUp()</code>, <code>addNewSkills(newSkill:String)</code>, <code>updateBusinessTitle(title:String)</code>の3つのクラス・メソッドを定義しています。</p>

<p>では、実際にカスタムクラスを使ってみましょう。</p>

<p>```objective-c
// 呼び出す側のswiftファイル(ViewController.swift)</p>

<p>import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    // カスタムクラスの初期化
    var engineer:Engineer = Engineer()
    // プロパティの初期値をログ出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")

    // 各メソッドを実行
    engineer.levelUp()
    engineer.addNewSkills("Objective-C")
    engineer.updateBusinessTitle("iOSアプリエンジニア")
    // プロパティをログに再出力
    println("Engineer level : \(engineer.level), businessTitle : \(engineer.businessTitle), skill : \(engineer.skill)")
}

&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>ここで気になるのが、自作したクラスを使うときに<code>import</code>をしていないという点です。<br/>
同プロジェクト内のクラスは<code>import</code>の必要がないということらしいです。<br/>
なので、自作したクラスをCocoaPodでインストールした場合は<code>import</code>の必要があると思われます。</p>

<p>基本的なところで微妙にObjective-Cと異なる部分があるので注意が必要ですね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftの基礎を理解しよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/16/swift-base/"/>
    <updated>2015-05-16T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/16/swift-base</id>
    <content type="html"><![CDATA[<h4>Swiftを基本から覚えよう</h4>

<p>さて、本日はSwiftについて基本から覚えていきたいと思います。<br/>
筆者はこれまでObjective-Cを中心に開発を続けてきました。<br/>
が、昨年Swiftが初めて発表されて以来、少しずつSwiftに関わることが増えてきました。<br/>
正直なところ、Xcodeのバージョンアップごとに『 <strong>割りと大きな変更が生じるSwift</strong> を商用アプリに使うかどうか』は迷います。deprecatedになるメソッドはあるにしても『 <strong>大幅な変更の生じないObjective-C</strong> 』の方が安全ですし、何より多彩なライブラリが存在しています。</p>

<p>とは言え、今後、Swiftしか使えないiOSアプリエンジニアが当たり前に存在していくことでしょう。<br/>
そんなときにObjective-CもSwiftも当然のように使えるエンジニアとなっていたいので勉強しておこうと思う次第です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Swiftでプロジェクトを生成</h4>

<p>言語でSwiftを選択してXcodeのプロジェクトを新規作成すると、ViewController.swiftは下記のように生成されます。</p>

<p>```objective-c
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}
</code></pre>

<p>}
```</p>

<p>これまでのObjective-Cでは下記のように生成されていました。</p>

<p>```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
  // Do any additional setup after loading the view, typically from a nib.
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<p>少し違和感があるかもしれませんが、ぱっと見た感じ、あまり変わらないようにも見えます。<br/>
因みに、Objective-Cの場合はViewController.m, ViewController.hの2つのファイルが作成されますが、Swiftの場合は <strong>swift</strong> という拡張子のファイルのみです。</p>

<h4>変数/定数の定義</h4>

<p>Swiftでの変数/定数の定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String       // String型の変数を定義
    let invariableString:String     // String型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li><strong>var 変数名:変数の型</strong></li>
<li><strong>let 定数名:定数の型</strong></li>
<li>1行の終わりは <strong>改行</strong> or <strong>;(セミコロン)</strong></li>
</ul>


<p>letは <strong>定数</strong> なので、</p>

<p>```objective-c
let invariableString:String     // String型の定数を定義</p>

<p>invariableString = &ldquo;これは定数です。&rdquo;
invariableString = &ldquo;定数なので、2回目以降の値設定はエラーが発生します。&rdquo;</p>

<p>```</p>

<p>のようなことを書くと、<code>invariableString</code>に対する2回目の値設定行で、<br/>
<code>immutable value 'invariableString' may only be initialized once</code>エラーが発生します。<br/>
(<code>var</code>は定数なので問題ありません。)</p>

<h4>グローバル変数/定数の定義</h4>

<p>Swiftのグローバル変数/定数の仕方を見て行きましょう。</p>

<p>```objective-c
import UIKit</p>

<p>var globalVariableInt:Int = 3
let globalInvariableInt:Int = 5</p>

<p>class ViewController: UIViewController {</p>

<pre><code>&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>クラス外に定義した変数/定数はグローバル変数/定数</li>
<li>グローバル変数/定数は共に初期値が必要</li>
</ul>


<p>2つ目のポイントに書いた通り、初期値を与えないと<code>Global 'var' declaration requires an initializer expression or getter/setter specifier</code>, <code>Global 'let' declaration requires an initializer expression</code>といったエラーが発生します。</p>

<h4>オプショナル型と非オプショナル型</h4>

<p>オプショナル型とは、Swiftで唯一『 <strong>nilの代入が許可された</strong> 』型です。逆に『 <strong>nilの代入を許可されていない</strong> 』型を非オプショナル型と言います。<br/>
では、Swiftのオプショナル型/非オプショナル型の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String?      // String型&amp;オプショナル型の変数を定義
    let invariableString:String?    // String型&amp;オプショナル型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>【ポイント】</p>

<ul>
<li>var 変数名:変数型 <strong>?</strong> でオプショナル型</li>
<li>let 定数名:定数型 <strong>?</strong> でオプショナル型</li>
<li>オプショナル型の初期値は <strong>nil</strong></li>
<li>非オプショナル型の初期値は何も初期値が入っていない(nilが入っているわけではない)</li>
</ul>


<p>これまで特に意識せずに変数/定数を定義してきたと思いますが、『 <strong>?</strong> 』をつけていない変数/定数は自動的に非オプショナル型となります。<br/>
よって、</p>

<p>```objective-c</p>

<p>var variableString:String
let inVariableString:String</p>

<p>variableString = nil
inVariableString = nil</p>

<p>```</p>

<p>とすると<code>Cannnot assign a value of type 'nil' to a value of type 'String'</code>とエラーが発生します。</p>

<p>因みに、 <strong>?</strong> をつけた書き方は省略した書き方です。<br/>
<code>var variableString:String?</code>は<code>var variableString:Optional&lt;String&gt;</code>と同じです。</p>

<h4>オプショナル型の使い方(アンラップの仕方)</h4>

<p>オプショナル型はそのままでは使えません。<br/>
例えば、<code>var variableString:String?</code>は<code>String</code>型の変数を<code>Optional</code>(オプショナル)型の箱に入れているイメージです。<br/>
なので、<code>String</code>型として値を扱うためには『 <strong>Unwrap</strong> (アンラップ)』する必要があるのです。<br/>
(箱から<code>String</code>型を取り出すイメージです。)</p>

<p>アンラップには幾つか方法があります。</p>

<ul>
<li>Forced Unwrapping<br/>
強制的にアンラップする方法。変数/定数名の末尾に <strong>!</strong> をつける</li>
</ul>


<p>```objective-c</p>

<p>var fuga:String? = &ldquo;FugaFuga&rdquo;
println(fuga!.lowercaseString)</p>

<p>```</p>

<p>上記例で<code>fuga.lowercaseString</code>とすると<code>Value of optional type 'String' not unwrapped; did you mean to use '!' or '?'?</code>という静的解析でエラーが発生します。<br/>
因みに、『 <strong>!</strong> 』をつけた場合、中身がnilだと実行時にエラーが発生するので注意。</p>

<ul>
<li>Optional Chaining<br/>
Optionalのメソッドやプロパティ参照時にnilチェックする方法です。<br/>
nilでなければUnwrapしてnilであった場合はnilを返す方法です。<br/>
実はUnwrapして返されるものもOptional型であったりします。<br/>
ただし、そのメソッドやプロパティを使うことができるのです。</li>
</ul>


<p>```objective-c
var hoge:String?
var fuga:String? = hoge?.lowercaseString
println(fuga)</p>

<p>hoge = &ldquo;HogeHoge&rdquo;
fuga = hoge?lowercaseString
println(fuga)
```</p>

<p>上記を実行してみると、1回目のprintlnで<code>nil</code>が出力され、2回目のprintlnで<code>Optional("hogehoge")</code>と出力されます。</p>

<ul>
<li>Optional Binding<br/>
nilチェックをして、nilでない場合に限り、Unwrapして元の方を返す方法です。<br/>
別名の変数/定数に値を入れ直して、以後、それを使っていく場合に使います。</li>
</ul>


<p>```objective-c
var hoge:String?</p>

<p>if var fuga:String = hoge {</p>

<pre><code>println("値が格納されていました。")
</code></pre>

<p>} else {</p>

<pre><code>println("nilでした。")
</code></pre>

<p>}</p>

<p>hoge = &ldquo;HogeHoge&rdquo;</p>

<p>if var fuga:String = hoge {</p>

<pre><code>println("値が格納されていました。")
</code></pre>

<p>} else {</p>

<pre><code>println("nilでした。")
</code></pre>

<p>}</p>

<p>```</p>

<p>上記の例文を実行すると、1回目は<code>true</code>, 2回目は<code>false</code>の条件分岐を通過するはずです。</p>

<ul>
<li>Implicitly Unwrapped Optional<br/>
使用時に自動的にUnwrapされて元の型が返される方法です。<br/>
<code>nil</code>が入っているものに対して実行した場合はエラーが発生します。(静的解析時には判別されないことに注意)</li>
</ul>


<p>```objective-c</p>

<p>vat hoge:String! = &ldquo;HogeHoge&rdquo;
println(hoge.lowercaseString)</p>

<p>var fuga:String!
println(fuga.lowercaseString)</p>

<p>```</p>

<p>上記の例文を実行すると、1回目のログは出力されますが、2回目のログ出力時にエラーが発生します。<br/>
因みに、『 <strong>型!</strong> 』は『 <strong>ImplicitlyUnwrappedOptional&lt;型名></strong> 』の省略形です。</p>

<p>```objective-c</p>

<p>var hoge:String! = &ldquo;HogeHoge&rdquo;
var fuga:ImplicitlyUnwrappedOptional<String> = &ldquo;FugaFuga&rdquo;</p>

<p>```</p>

<p>こんな感じですね。</p>

<h4>オプショナル型の意義</h4>

<p>前章でオプショナル型と非オプショナル型が存在することがわかりました。<br/>
では、このオプショナル型/非オプショナル型は何のために使うのでしょうか？</p>

<p>【オプショナル型/非オプショナル型を使う理由】</p>

<ul>
<li>静的解析でエラーを発見するため</li>
<li>実行時の想定外のエラーを防ぐため</li>
<li>オープンソースとしてライブラリを作成した際に、ライブラリ利用者が想定外のエラーに合わないようにするため</li>
</ul>


<h4>クラスプロパティ</h4>

<p>クラスプロパティの定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>var variableNumber:Int?
let unVariableNumber:Int = 3

override func viewDidLoad() {
    super.viewDidLoad()

    var variableString:String       // String型の変数を定義
    let invariableString:String     // String型の定数を定義
}
&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>クラスプロパティ定義時は初期値が必要</li>
<li>varは初期値がnilなので具体的な値を書く必要はない</li>
<li>letは初期値にnilが入らないので、具体的な値を設定する必要がある</li>
</ul>


<h4>クラスメソッド</h4>

<p>クラスメソッドの定義の仕方を見て行きましょう。</p>

<p>```objective-c
class ViewController: UIViewController {</p>

<pre><code>var variableNumber:Int?
let unVariableNumber:Int = 3

override func viewDidLoad() {
    super.viewDidLoad()

    println(setTestString("abc", b:"def"))
}

&lt;省略&gt;

func setTestString(a:String, b:String) -&gt; String {
    return a+b
}
</code></pre>

<p>}
```</p>

<p>【ポイント】</p>

<ul>
<li>func メソッド名(第一引数名:第一引数の型, 第二引数名:第二引数の型, &hellip;) &ndash;> 戻り値の型 { &hellip;. }</li>
<li>呼び出し側では、メソッド名(第一引数に渡す値, 第二引数名:第二引数に渡す値)</li>
</ul>


<p>まだまだSwiftについて調べていきますが、記事が長くなってきたので本日はここまで。</p>

<p>参考サイト:</p>

<ul>
<li><a href="http://qiita.com/koher/items/c6f446bad54442a28bf4">SwiftのOptional型を極める</a></li>
<li><a href="http://www.slideshare.net/hasegawatomoki/ss-40424010">オプショナル型。 〜 なんとなく付ける ! ? 撲滅 &ndash; SlideShare</a></li>
<li><a href="http://qiita.com/cotrpepe/items/518c4476ca957a42f5f1">[Swift] Optional 型についてのまとめ Ver2</a></li>
<li><a href="http://qiita.com/nori0620/items/afa94cc42f3233f54bdc">[Swift] Swiftのoptional valueの便利さ /「?」と「!」でより堅牢なコードへ</a></li>
<li><a href="http://qiita.com/mokumoku/items/5fef496f4e97a053e53e">【Swift】Optional型を安全にunwrapしよう</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでGoogle OAuth2認証をしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift/"/>
    <updated>2015-03-15T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift</id>
    <content type="html"><![CDATA[<h4>Swift版 OAuth2認証</h4>

<p>本日は<a href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/">iOSでGoogle OAuth認証がしたい</a>のSwift版を紹介したいと思います。<br/>
Google Play Consoleでの設定やGoogleから配布されているOAuth2認証に必要なソースのダウンロード方法については上記の記事に任せるとして、具体的なソース部分を紹介します。</p>

<p>では早速、Objective-CのソースをSwiftで書きなおしたものを下記に載せます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>var auth:GTMOAuth2Authentication!
let kKeychainItemName:NSString! = "GOAuthTest"
let scope:NSString! = "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/calendar"
let clientId:NSString! = "Googleから発行されたクライアントID"
let clientSecret:NSString! = "Googleから発行されたクライアントシークレット"
let hasLoggedIn:NSString! = "hasLoggedInKey"

override func viewDidLoad() {
    super.viewDidLoad()
}

override func viewDidAppear(animated: Bool) {
    self.startLogIn()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}

func startLogIn() {
    var defaults:NSUserDefaults? = NSUserDefaults.standardUserDefaults()
    var hasLoggedInFlag:Bool! = defaults?.boolForKey(hasLoggedIn)

    if(hasLoggedInFlag == true) {
        // 認証したことがある場合
        self.auth = GTMOAuth2ViewControllerTouch.authForGoogleFromKeychainForName("Google", clientID: clientId, clientSecret: clientSecret)

        // アクセストークンの取得
        self.authorizeRequest()
    } else {
        // 認証したことがない場合
        var gvc:GTMOAuth2ViewControllerTouch! = GTMOAuth2ViewControllerTouch(scope: scope, clientID: clientId, clientSecret: clientSecret, keychainItemName: "Google", delegate: self, finishedSelector: "viewController:finishedWithAuth:error:")
        self.presentViewController(gvc, animated: true, completion: nil)
    }
}

func viewController(viewController:GTMOAuth2ViewControllerTouch!, finishedWithAuth:GTMOAuth2Authentication!, error:NSError?) {
    if(error != nil) {
        // 認証失敗
    } else {
        // 認証成功
        self.auth = finishedWithAuth
        var defaults = NSUserDefaults.standardUserDefaults()
        defaults.setBool(true, forKey: hasLoggedIn)
        defaults.synchronize()

        // アクセストークンの取得
        self.authorizeRequest()
    }

    // 認証画面を閉じる
    viewController.dismissViewControllerAnimated(true, completion: nil)
}

func authorizeRequest() {
    println(self.auth)
    var req:NSMutableURLRequest! = NSMutableURLRequest(URL: self.auth.tokenURL)
    self.auth.authorizeRequest(req, completionHandler: { (error) -&gt; Void in
        println(self.auth)
    })
}
</code></pre>

<p>}
```</p>

<p>今回のソースは<a href="https://github.com/grandbig/gtm-oauth2-swift">GitHub</a>にアップしています。<br/>
興味があればどしどし使ってみてください。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
