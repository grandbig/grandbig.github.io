<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-02-20T01:34:28+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwiftでNSDateFormatterを使ってNSDateからStringに変換してみる！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/19/swift-date/"/>
    <updated>2016-02-19T23:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/19/swift-date</id>
    <content type="html"><![CDATA[<h4>NSDateFormatterとは</h4>

<p>さて、本日は<code>NSDateFormatter</code>について見ていきます。<br/>
<code>NSDateFormatter</code>は</p>

<ul>
<li><code>NSDate</code>から<code>String</code>へ変換する際に指定するフォーマットオブジェクト</li>
<li><code>String</code>から<code>NSDate</code>へ変換する際に指定するフォーマットオブジェクト</li>
</ul>


<p>として使ったりします。<br/>
(他にも<code>NSCalendar</code>等々で利用します。)<br/>
基本的な変換は下記のようにできます。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<p>続いて、よく利用する各種設定について見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>NSTimeZoneについて</h4>

<p><code>NSTimeZone</code>はグリニッジ標準時と各地域の標準時の時差情報を持ったクラスです。<br/>
このクラスを利用することで、欲しい時差情報を含んだ日付を取得できます。</p>

<p>例えば下記のような形です。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.timeZone = NSTimeZone.defaultTimeZone()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<p><code>NSTimeZone</code>には<code>systemTimeZone</code>, <code>defaultTimeZone</code>, <code>localTimeZone</code>, 直接地域を指定する方法があります。</p>

<ul>
<li><code>systemTimeZone</code>:<br/>
設定 > 一般 > 日付と時刻 で設定されている地域のタイムゾーンを返却する</li>
<li><code>defaultTimeZone</code>:<br/>
アプリで設定された地域のタイムゾーン<br/>
アプリで設定されていない場合は<code>systemTimeZone</code>を返却する</li>
<li><code>localTimeZone</code>:<br/>
<code>defaultTimeZone</code>への参照値を返却する</li>
<li>直接タイムゾーンを指定:<br/>
<code>GMT</code>, <code>UTC</code>, <code>ja_JP</code>, <code>en_US</code>などの地域を指定することで、指定地域のタイムゾーンを返却する</li>
</ul>


<p>仮に、それぞれのタイムゾーンの設定をして文字列を出力してみると、</p>

<p><code>objective-c
systemTimeZone: 2016-02-19 23:27:37.550000
defaultTimeZone: 2016-02-19 23:27:37.550000
localTimeZone: 2016-02-19 23:27:37.550000
GMT: 2016-02-19 14:27:37.551000
UTC: 2016-02-19 14:27:37.551000
ja_JP: 2016-02-19 23:27:37.551000
</code></p>

<p>といった感じです。</p>

<h4>NSLocaleについて</h4>

<p><code>NSLocale</code>は言語や分化などの情報を持ったクラスです。<br/>
このクラスを利用することで、欲しい言語や分化の地域情報を含んだ日付を取得できます。</p>

<p>利用方法は下記のようになります。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.locale = NSLocale.currentLocale()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<ul>
<li><code>systemLocale</code>:<br/>
設定 > 一般 > 日付と時刻 で設定されている地域の情報を返却する</li>
<li><code>currentLocale</code>:<br/>
現在のユーザで設定されている地域の情報を返却する<br/>
マルチユーザ環境下であれば、違いが出ると思います。</li>
</ul>


<p>地味に文字列変換って面倒だったりするんですよね&hellip;。<br/>
とは言え、アプリを世界対応させる場合は、<br/>
ユーザの設定している <strong>日付と時刻</strong> に注意を配ることが大切です。</p>

<p>と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://aqubiblog.blogspot.jp/2012/11/ios.html">iOSの日付処理まとめ</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftLintを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/13/swift-lint/"/>
    <updated>2016-02-13T21:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/13/swift-lint</id>
    <content type="html"><![CDATA[<h4>SwiftLintを使ってコード規約に則ったチーム開発を目指そう！</h4>

<p>本日は<a href="https://github.com/realm/SwiftLint">SwiftLint</a>を紹介したいと思います。</p>

<p>SwiftLintとは<br/>
チーム内で1つのコード規約に則って開発することを補佐してくれる静的解析ツールです。</p>

<p>JavaScriptであれば<a href="http://www.jslint.com/">JSLint</a>や<a href="http://jshint.com/">JSHint</a>(最近であれば<a href="http://eslint.org/">ESLint</a>でしょうか)ですし、<br/>
Objective-Cであれば<a href="http://oclint.org/">OCLint</a>が主流かと思います。<br/>
それのSwift版ですね。</p>

<p>筆者はあまり大規模なチーム開発を経験したことがないので、<br/>
SwiftLintを使ったことがありません。<br/>
なので、逆に新鮮な心持ちで使い方や良いなと思う点について紹介できればと思っています。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>SwiftLintの導入方法</h4>

<p>早速、SwiftLintを導入していきましょう。</p>

<p>1．homebrewでインストール<br/>
下記コマンドでSwiftLintをインストールできます。<br/>
<code>brew install swiftlint</code></p>

<p>2．SwiftLintを適用したいXcodeプロジェクトの設定を変更<br/>
下図のように <strong>Run Script</strong> を追加しましょう。<br/>
<img src="/images/swiftlint-1.png" alt="Run Scriptの追加" /></p>

<p>続いて、下記のShell Scriptを記載しましょう。</p>

<p>```objective-c
if which swiftlint >/dev/null; then</p>

<pre><code>swiftlint
</code></pre>

<p>else</p>

<pre><code>echo "SwiftLint does not exist, download from https://github.com/realm/SwiftLint"
</code></pre>

<p>fi
```</p>

<p><img src="/images/swiftlint-2.png" alt="Shell Scriptを記載" /></p>

<p>たったこれだけで準備完了です。<br/>
非常に簡単ですね！</p>

<h4>SwiftLintを使ってみよう</h4>

<p>導入ができたので、SwiftLintを使っていきたいと思います。<br/>
因みに、今回導入したSwiftLintはバージョン <strong>0.8.0</strong> です。</p>

<p>実際にBuildしてみるとわかるのですが、<br/>
デフォルトで設定されているチェック内容では厳しすぎて気が遠くなります&hellip;。<br/>
特にCocoaPodsでオープンソースのライブラリをプロジェクトに追加している場合、<br/>
おびただしい数のErrorとWarningが出ます。</p>

<p><img src="/images/swiftlint-3.png" alt="OSSライブラリもひっかかる" /></p>

<p>よって設定をカスタム化したいと思います。<br/>
カスタム化は非常に簡単です。</p>

<p>xcodeprojファイルと同階層に<code>.swiftlint.yml</code>ファイルを作成します。<br/>
このファイルに設定可能なものは下記になります。</p>

<ul>
<li><code>disabled_rules</code><br/>
デフォルトで有効となっているルールの中から無効にしたいルールを設定</li>
<li><code>opt_in_rules</code><br/>
デフォルトで無効となっているルールの中から有効にしたいルールを設定</li>
<li><code>whitelist_rules</code><br/>
他の2つとの併用はできず、これに記載したルールのみ適用したい場合に設定</li>
<li><code>included</code><br/>
SwiftLintの対象に含めるファイルのパスを記載</li>
<li><code>excluded</code><br/>
SwiftLintの対象から外すファイルのパスを記載</li>
</ul>


<p><code>.swiftlint.yml</code>を作成する前のデフォルト設定は下図の通りです。<br/>
<code>swiftlint rules</code>とコマンドを打てば確認できます。</p>

<p><img src="/images/swiftlint-4.png" alt="SwiftLintのデフォルト設定" /></p>

<p>因みに、SwiftLintのコマンドは下記です。</p>

<p>```objective-c
Available commands:</p>

<pre><code>autocorrect   Automatically correct warnings and errors
help          Display general or command-specific help
lint          Print lint warnings and errors (default command)
rules         Display the list of rules and their identifiers
version       Display the current version of SwiftLint
</code></pre>

<p>```</p>

<p>筆者が作成した<code>.swiftlint.yml</code>ファイルは下記になります。</p>

<p>```objective-c
disabled_rules:</p>

<h1>コードの記載のない改行を許可したい</h1>

<ul>
<li>trailing_whitespace

<h1>ネスト1つで怒られるのでDisableにしたい</h1></li>
<li>nesting</li>
</ul>


<h1>追加したOSSライブラリは対象に含めたくない</h1>

<p>excluded:
&ndash; Pods/
&ndash; Podfile
&ndash; Podfile.lock</p>

<h1>1行あたりの文字数制限を300に変更</h1>

<h1>プロジェクト作成時にデフォルトで追加されるコメントをひっかけないため</h1>

<p>line_length: 300</p>

<h1>変数名の長さのMAXとMINを変更</h1>

<p>variable_name:
  max_length:</p>

<pre><code>warning: 60
error: 80
</code></pre>

<p>  min_length:</p>

<pre><code>warning: 1
error: 0
</code></pre>

<p>```</p>

<p>実際に使ってみた結果、<br/>
チームとして開発するには非常に良いのではないかと思いました。<br/>
ただ、デフォルトの設定項目では全てをカバーし切れないことがあるように感じました。<br/>
なので、自前ルールを作成する機会がそれなりにある気がしました。</p>

<p><a href="https://github.com/realm/SwiftLint">SwiftLintのREADME</a>にも記載がある通り、<br/>
SwiftLintでは自前でルールを作成することができます。</p>

<p>といったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/akatsuki174/items/45205e0f0948f11e9db5">SwiftLintの.swiftlint.yml記述方式とその詳細</a></li>
<li><a href="http://qiita.com/akatsuki174/items/c37dfcae3ff3a79fb8cf">SwiftLint 0.8.0 アップデート内容まとめ</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift2.xでのシングルトンパターンとクラスメソッド / インスタンスメソッド]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/06/swift2-singleton/"/>
    <updated>2016-02-06T11:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/06/swift2-singleton</id>
    <content type="html"><![CDATA[<h4>シングルトンを使用したクラスでクラスメソッドとインスタンスメソッドを定義する</h4>

<p>本日は、</p>

<ul>
<li>Swift2.xでのシングルトンパターンのクラスの定義の仕方</li>
<li>そのクラスにおけるクラスメソッドとインスタンスメソッドの定義の仕方</li>
<li>クラスメソッドとインスタンスメソッドの呼び出し方</li>
</ul>


<p>について見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>シングルトンパターンのクラスの定義</h5>

<p>まず、シングルトンパターンのクラスの定義の方法を見ていきましょう。<br/>
Swift1.2までとSwift2.xでは定義の仕方が異なります。<br/>
ここではSwift2.xの場合のみ書きます。</p>

<p>```objective-c
class SingletonSample:NSObject {</p>

<pre><code>// シングルトンパターンとして定義
static let sharedInstance:SingletonSample = SingletonSample()

private init() {
}
</code></pre>

<p>}
```</p>

<p>インスタンスは1つしか作られないので、</p>

<ul>
<li>内容に変更がない変数ということで<code>let</code>を使用</li>
<li>SingletonSampleクラスにおける固有の値ということで<code>static</code>を使用</li>
<li>外部クラスからインスタンス化することを防ぐために<code>private</code>で<code>init</code>を定義</li>
</ul>


<p>となっています。</p>

<p>シングルトンパターンのクラスを利用するときは、<br/>
<code>SingletonSample.sharedInstance</code>でOKです。<br/>
これで1つのインスタンスを使い回すことができます。</p>

<h5>インスタンスメソッドの定義</h5>

<p>次にシングルトンパターンにおけるインスタンスメソッドの定義方法について見ていきましょう。<br/>
まずは、定義する側です。</p>

<p>```objective-c
class SingletonSample:NSObject {</p>

<pre><code>...
// インスタンスメソッドの定義
func sampleInstanceMethod() {
    ...
}
...
</code></pre>

<p>}
```</p>

<p>インスタンスメソッドを使うときは</p>

<p><code>objective-c
SingletonSample.sharedInstance.sampleMethod()
</code></p>

<p>という形で使うことができます。<br/>
<code>SingletonSample.sharedInstance</code>で1つのインスタンスを使うことができるので、通常のクラスと使い方は同じですよね。</p>

<h5>クラスメソッドの定義</h5>

<p>最後にシングルトンパターンにおけるクラスメソッドの定義方法について見ていきましょう。<br/>
まずは、定義する側です。</p>

<p>```objective-c
class SingletonSample:NSObject {</p>

<pre><code>...
// クラスメソッドの定義
class func sampleClassMethod() {
    ...
}
...
</code></pre>

<p>}
```</p>

<p>クラスメソッドを使うときは</p>

<p><code>objective-c
SingletonSample.sampleClassMethod()
</code></p>

<p>という形で使うことができます。<br/>
クラスメソッドはクラスをインスタンス化する必要なく、利用できるメソッドなので、<br/>
<code>SingletonSample.sharedInstance</code>とインスタンスを通して利用せずに、 <strong>クラス名+メソッド名</strong> で利用できるんですね。</p>

<p>本日は簡単ですが、以上になります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位置情報サービスの許可アラートに表示する文字数について]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/31/location-alert-number-of-characters/"/>
    <updated>2016-01-31T22:55:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/31/location-alert-number-of-characters</id>
    <content type="html"><![CDATA[<h4>位置情報サービスの許可アラートに文字数制限はあるのか！？</h4>

<p>位置情報サービスを利用するアプリの場合、位置情報サービスの利用許可を求めるアラートが表示されます。<br/>
これはアプリで位置情報を利用するために必須の機能であり、これなくしては、<code>CoreLocation.framework</code>を通して、位置情報を利用することはできません。</p>

<p>とここまではiOSエンジニアで位置情報サービスを扱ったアプリを開発した方々にとっては周知の事実かと思います。<br/>
しかし、その許可アラートには『 <strong>どのくらいの文字を記載することができるのか</strong> 』まで気にする方はあまり多くないかもしれません。</p>

<p>ふと気になったので、試してみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>Local Notification / Remote Notificationは文字数に制限があるということで以前から述べられてきました。<br/>
例えば、下記が参考になると思います。</p>

<ul>
<li><a href="http://www.hangout.co.jp/blog/archives/295">iOSのプッシュ通知の文字数とデータサイズの制限</a></li>
<li><a href="http://iot.mb.cloud.nifty.com/iotcolumn/%E6%96%87%E5%AD%97%E6%95%B0%E5%88%B6%E9%99%90%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5">文字数制限を知って効果的にプッシュ通知を利用しよう！</a></li>
<li><a href="http://qiita.com/mono0926/items/df03c61adc56934e2e7a">iOSのPUSH通知(APNS)の特徴・ノウハウまとめ(iOS 9まで対応)</a></li>
</ul>


<p>では、位置情報サービスを利用する際に表示される許可アラートに表示可能な文字数に制限はあるのでしょうか？<br/>
iOS9ではLocal Notification / Remote Notificationの制限は4KB(4096Bytes)とのことなので、このくらいいけるのでしょうか&hellip;。</p>

<p>はい。結果です。<br/>
全角で <strong>3938文字</strong> まで行けました。<br/>
これは<code>Info.plist</code>に記載できた文字数です。<br/>
これ以上は入力しても<code>Info.plist</code>に表示されないんですね&hellip;。<br/>
ただ、設定 > 位置情報サービス > アプリ に表示される文言はもう少し行けてるんですよ&hellip;。</p>

<p>たぶんLocal Notification / Remote Notificationと同じ制限な気がしますね。<br/>
まだまだiOS7やiOS8に対応する必要もあるでしょうし、長すぎるとそもそもユーザに対するハードルを上げることになるので全くオススメできませんよね。</p>

<p>ま、文字数は気にしすぎずに、Appleが言うように極力短く的確に書くにこしたことはないと思います。</p>

<p>参考までにキャプチャを貼っておきます。</p>

<p><img src="/images/corelocation_alert.png" alt="位置情報サービス許可アラート" /><br/>
アラート内をスクロールして全文を読むことができます。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftでドキュメントコメントを正しく書こう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/24/swift-document-comment/"/>
    <updated>2016-01-24T00:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/24/swift-document-comment</id>
    <content type="html"><![CDATA[<h4>Swiftでのドキュメントコメントの書き方を覚えよう！</h4>

<p>先日、<a href="http://grandbig.github.io/blog/2016/01/12/jazzy/">jazzy: リファレンス自動生成ツール</a>の記事を書きました。<br/>
その中で幾つかのドキュメントコメントの書き方を紹介しましたが、改めて説明しておきたいと思います。</p>

<p>Swiftではドキュメントコメントの中でマークアップ言語の書式が有効に働きます。<br/>
代表的なマークアップ言語の書式は下記の通りです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>マークアップ言語の書式</h4>

<h5>見出し</h5>

<p>```objective-c</p>

<h1>最大見出し</h1>

<h2>大見出し</h2>

<h3>中見出し</h3>

<h4>見出し</h4>

<h5>小見出し</h5>

<h6>最小見出し</h6>

<p>```</p>

<p><img src="/images/documment_comment_1.png" alt="見出しを書いた場合" /></p>

<h5>リスト</h5>

<p>```objective-c
&ndash; リスト項目１</p>

<pre><code>- リスト小項目１
- リスト小項目２
- リスト小項目３
</code></pre>

<ul>
<li>リスト項目２</li>
<li>リスト項目３
```</li>
</ul>


<p><img src="/images/documment_comment_2.png" alt="リストを書いた場合" /></p>

<h5>順序リスト</h5>

<p>```objective-c
1. 順序リスト項目１</p>

<pre><code>1. 小順序リスト項目１
2. 小順序リスト項目２
3. 小順序リスト項目３
</code></pre>

<ol>
<li>順序リスト項目２</li>
<li>順序リスト項目３
```</li>
</ol>


<p><img src="/images/documment_comment_3.png" alt="順序リストを書いた場合" /></p>

<h5>ItalicとBold</h5>

<p>```objective-c
normal</p>

<p><em>Italic</em></p>

<p><strong>Bold</strong>
```</p>

<p><img src="/images/documment_comment_4.png" alt="ItalicとBold" /></p>

<h5>URLリンク</h5>

<p><code>objective-c
[URLリンク](https://developer.apple.com/jp/)
</code></p>

<p><img src="/images/documment_comment_5.png" alt="URLリンク" /></p>

<h5>罫線</h5>

<p>```objective-c
abcdefg</p>

<hr />

<p>123456</p>

<hr />

<p>あいうえお</p>

<hr />

<p>かきくけこ
```</p>

<p><img src="/images/documment_comment_6.png" alt="罫線" /></p>

<h5>コード表記</h5>

<p>(Octopressの都合上、ここでは書き方が異なりますが、ご了承ください。)</p>

<p>` ` `<br/>
self.sampleMethod()<br/>
` ` `</p>

<p><img src="/images/documment_comment_7.png" alt="コード表記" /></p>

<h4>Swiftのドキュメントコメントの書式</h4>

<h5>MARK</h5>

<p>```objective-c
// MARK: &ndash; Properties
var sample:String = &ldquo;sampleProperty&rdquo;</p>

<p>// MARK: &ndash; Method
func sampleMethod() {</p>

<pre><code>print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_8.png" alt="MARK" /></p>

<h5>FIXME</h5>

<p>```objective-c
func sampleMethod() {</p>

<pre><code>// FIXME: - ログ出力ではなく、アラートを出す
print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_9.png" alt="FIXME" /></p>

<h5>TODO</h5>

<p>```objective-c
func sampleMethod() {</p>

<pre><code>// TODO: - ログ出力ではなく、何か処理を書く(まだ決まっていないけど)
print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_10.png" alt="TODO" /></p>

<h5>Parameter / Throws / Returns</h5>

<p>```objective-c
/**
 サンプルメソッド</p>

<ul>
<li>parameter name: パラメータの書き方</li>
<li>throws: 例外処理の書き方</li>
<li><p>returns: 戻り値の書き方
*/
func sampleMethod2(name:String) throws &ndash;> String {</p>

<p>  return &ldquo;result: &rdquo; + name
}
```</p></li>
</ul>


<p><img src="/images/documment_comment_11.png" alt="Parameter / Throws / Returns" /></p>

<h5>Description内で利用可能な文言</h5>

<p>この他にクラス, プロパティ, メソッドの説明(Description)を書く際に利用可能な予約語的なものが幾つかあります。</p>

<p><code>objective-c
/**
 - Attention: 注意書き
 - Author: 作成者が一人の場合
 - Authors: 作成者が複数人の場合
 - Bug: バグの詳細
 - Copyright: 著作権の所在
 - Date: 日付(作成日, 更新日など)
 - Experiment: 実験内容
 - Important: 重要事項
 - Invariant: 不変事項
 - Note: その他、必要事項
 - Precondition: 事前条件
 - Postcondition: 事後条件
 - Remark: 備考
 - Requires: 要求事項
 - SeeAlso: 参照事項
 - Since: いつから実装されているか
 - Version: バージョン
 - Warning: 警告                 
*/
</code>
上記のように書くことで、 <strong>太字</strong> かつ <strong>各用語に属する説明</strong> が付与されます。</p>

<p><img src="/images/documment_comment_12.png" alt="予約語1" /></p>

<p><img src="/images/documment_comment_13.png" alt="予約語2" /></p>

<h4>まとめ</h4>

<p>さて、いかがだったでしょうか？<br/>
これだけ知っていれば、ほぼ確実に困ることはないと思います。<br/>
どこまで頑張って書くかは開発者次第かもしれませんが、やはり初めてコードを見る人でも極力伝わるようにしておくことは必要不可欠かと思います。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
