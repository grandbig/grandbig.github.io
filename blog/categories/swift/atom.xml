<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2019-07-21T23:16:42+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.jazzy.yamlを使ってコマンドを省略しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2019/06/29/jazzy-2/"/>
    <updated>2019-06-29T21:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/06/29/jazzy-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>約3年前に<a href="https://github.com/realm/jazzy">jazzy</a>を利用していました。<br/>
(以前の記事：<a href="http://grandbig.github.io/blog/2016/01/12/jazzy/">jazzyを使って、Swiftで書いたプロジェクトのリファレンスを自動生成しよう！</a>)</p>

<p>今回、久々に <code>jazzy</code> を触ってみて <code>.jazzy.yaml</code> を利用する機会があったので、その時のメモを書き記しておきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>.jazzy.yaml</h3>

<p>では早速、 <code>.jazzy.yaml</code> の書き方を見ていきます。<br/>
作成する階層はアプリのプロジェクトの <code>xcodeproj</code> と同階層です。</p>

<p>実際の <code>.jazzy.yaml</code> は下記のようになります。</p>

<p>```objective-c</p>

<h1>.jazzy.yaml</h1>

<h1>ドキュメント化するスコープ</h1>

<p>min_acl: private</p>

<h1>出力先フォルダをクリーンするか否か</h1>

<p>clean: true</p>

<h1>出力先フォルダの指定</h1>

<p>output: docs</p>

<h1>作成者の名前</h1>

<p>author: Takahiro</p>

<h1>作成者のURL</h1>

<p>author_url: <a href="https://grandbig.github.io">https://grandbig.github.io</a></p>

<h1>ドキュメント化する対象モジュールの名称</h1>

<p>module: JazzySample</p>

<h1>ドキュメントコメントのないファイルはスキップするか否か</h1>

<p>skip_undocumented: true</p>

<h1>ドキュメントにつけるバージョン番号</h1>

<p>module_version: 1.0</p>

<h1>コピーライト</h1>

<p>copyright: © 2019 &ndash; Takahiro &ndash; Powered by Octopress</p>

<h1>ドキュメントのテーマ(apple/fullWidth/jonyの3つから選択可能)</h1>

<p>theme: apple
```</p>

<p>このように定義しておけば実行するときのコマンドは</p>

<p><code>objective-c
$ jazzy
</code></p>

<p>で済みます。</p>

<h3>まとめ</h3>

<p>今回は簡単に <code>.jazzy.yaml</code> の書き方についてまとめました。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIStackViewとConstraintで変わるアニメーション]]></title>
    <link href="http://grandbig.github.io/blog/2019/05/19/stackview-animation/"/>
    <updated>2019-05-19T17:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/05/19/stackview-animation</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日は<code>UIStackView</code>とアニメーションに関するメモです。<br/>
通常、<code>UIStackView</code>を利用すれば、ラッピングされた内部の<code>View</code>間の距離は、<br/>
<code>Spacing</code>で指定することができます。<br/>
逆に言えば、<code>NSLayoutCostraint</code>を指定する必要はありません。</p>

<p>ですが、もしアニメーションで工夫を加えた場合はその限りではないという話をしたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UIStackViewを利用したアニメーションサンプル１</h3>

<p>まずは、今回実装するサンプルを説明します。<br/>
最終Viewは、</p>

<p><img src="/images/uistackview_animation_1.png" alt="サンプルView" /></p>

<p>です。</p>

<p>下記アニメーションに従って、この最終Viewになります。</p>

<ol>
<li>赤色Viewが徐々に表示される</li>
<li>青色Viewが徐々に表示される</li>
<li>最終Viewになる</li>
</ol>


<p><code>Storyboard</code>では下図のように実装しています。</p>

<p><img src="/images/uistackview_animation_2.png" alt="Storyboardの設定" /></p>

<p><code>UIStackView</code>だけで、うまく実装できているかがわかります。<br/>
アニメーションの実装は下図の通りです。</p>

<p>```objective-c
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>@IBOutlet weak var redView: UIView!
@IBOutlet weak var blueView: UIView!

override func viewDidLoad() {
    super.viewDidLoad()

    UIView.animate(withDuration: 1.0, animations: {
        // 赤色Viewが徐々に表示される
        self.redView.alpha = 1
    }) { _ in
        UIView.animate(withDuration: 2.0, animations: {
            // 青色Viewが徐々に表示される
            self.blueView.isHidden = false
            self.blueView.alpha = 1
        })
    }
}
</code></pre>

<p>}
```</p>

<p>この実装によって実現されるアニメーションは下記の通りです。</p>

<p><img src="/images/uistackview_animation_4.gif" alt="サンプル１のアニメーション" /></p>

<h3>UIStackViewを利用したアニメーションサンプル２</h3>

<p>サンプル１では赤色Viewと青色Viewが中央から上下に離れる形で表示されたかと思います。<br/>
もしこれを、赤色Viewについていく形で青色Viewを表示したい場合は工夫が必要になります。</p>

<p>その工夫とは、<code>Storyboard</code>上で<code>UIStackView</code>にラッピングされた2つのViewに<code>NSLayoutCostraint</code>を与えてやります。</p>

<p><img src="/images/uistackview_animation_3.png" alt="StoryboatdでNSLayoutConstraintの制約を追加" /></p>

<p>これによりアニメーションは下記のようになりました。</p>

<p><img src="/images/uistackview_animation_5.gif" alt="サンプル２のアニメーション" /></p>

<h3>まとめ</h3>

<p>手軽にアニメーションを実現しようとすると少々の工夫が必要なことがわかりました。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneX時代のNetwork Indicatorについて]]></title>
    <link href="http://grandbig.github.io/blog/2019/04/14/iphonex-indicator/"/>
    <updated>2019-04-14T00:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/04/14/iphonex-indicator</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>これまでのiPhone8/8Plus/SEなどでは通信中に下図のような <code>Network Indicator</code> が表示されていました。</p>

<p><img src="/images/iphone-indicator.png" alt="従来のNetwork Indicator" /></p>

<p>しかしながら、iPhoneX系統では、下図のように <code>Network Indicator</code> の表示がなくなってしまいました。</p>

<p><img src="/images/iphonex-indicator.png" alt="iPhoneX系統ではNetwork Indicatorがない" /></p>

<p>今回は、この <code>Network Indicator</code> に焦点を当てたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>iPhoneX時代のNetwork Indicatorは？</h3>

<p>『iPhoneXではステータスバーに<code>Network Indicator</code>を表示しない』方針を取ったのは、<br/>
紛れもなくAppleなわけですから、何らかの他の方法でユーザに通信中であることを伝えていると思われます。</p>

<p>そこで幾つかのApple標準アプリを見ていきたいと思います。</p>

<p>まず、<code>App Store</code> を見てみると、</p>

<ul>
<li>読み込まれるまでは真っ白</li>
<li>読み込みの早い文字を先に表示し、画像系は枠だけ表示する</li>
</ul>


<p>ようになっていました。<br/>
Apple標準アプリ以外でも、上記手法を取り入れているアプリは結構多そうでした。</p>

<p><img src="/images/iphonex-placeholder.png" alt="アプリの読み込み例：Placeholder" /></p>

<p>続いて、<code>Safari</code> を見てみると、</p>

<ul>
<li>アドレスバー下にプログレスバーを表示する</li>
</ul>


<p>ようになっていました。</p>

<p><img src="/images/iphonex-progressbar.png" alt="アプリの読み込み例：ProgressBar" /></p>

<h3>iPhoneXで従来型Network Indicatorを表示するためには？</h3>

<p>このように現在のアプリでは、従来のような密やかな<code>Network Indicator</code>よりも、<br/>
この先にどんな画面が表示されるか想像させたり、<br/>
あとどの程度で読み込みが終わるのか進捗を伝えたりなど、<br/>
より具体性を伝達するように変わってきている気がします。</p>

<p>しかしながら、従来のような密やかな通信状態の伝達が完全に不要になったかと言うと、それはアプリ仕様に依存するところでしょう。<br/>
では、そんなアプリを開発するときに、どうすればよいかと言うと、<br/>
<a href="https://github.com/futuretap/FTLinearActivityIndicator">FTLinearActivityIndicator</a>を利用してみるのも一つの手かなと思います。</p>

<h4>FTLinearActivityIndicatorで密やかなNetworkIndicatorを出すためには</h4>

<p>非常に簡単に実装ができます。</p>

<p>まずは、<code>Indicator</code>の<code>configure</code>を実行します。</p>

<p>```objective-c<br/>
// AppDelegate.swift
import UIKit
import FTLinearActivityIndicator</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<pre><code>...
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    // Override point for customization after application launch.
        UIApplication.configureLinearNetworkActivityIndicatorIfNeeded()
    return true
}
...
</code></pre>

<p>}
```</p>

<p>続いて、必要なタイミングで、<br/>
<code>UIApplication.shared.isNetworkActivityIndicatorVisible</code>を<code>true</code>にするだけです。<br/>
※非表示にする場合は<code>false</code>にセットし直すだけです。</p>

<h4>FTLinearActivityIndicatorはどんなことをやっているのか</h4>

<p>まず、ライブラリの構成としては、</p>

<p><code>objective-c
FTLinearActivityIndicator
  ├── FTLinearActivityIndicator.swift
  └── UIApplication+LinearNetworkActivityIndicator.swift
</code></p>

<p>となっています。<br/>
<code>FTLinearActivityIndicator.swift</code>はクラス名通り、<code>NetworkIndicator</code>の表現やアニメーション系のメソッドを提供しています。</p>

<p>一方で、<code>UIApplication+LinearNetworkActivityIndicator.swift</code>は、</p>

<ul>
<li><code>UIApplication</code>の拡張</li>
<li><code>UIViewController</code>の拡張</li>
<li><code>DispatchQueue</code>の拡張</li>
</ul>


<p>と3つに分かれており、<code>FTLinearActivityIndicator</code>を制御するためのメソッドが用意されています。</p>

<p>具体的に実装の中身を見ていきます。<br/>
先程の<code>AppDelegate</code>の<code>didFinishLaunchingWithOptions</code>で実行していた<code>configureLinearNetworkActivityIndicatorIfNeeded()</code>内の処理は下記のようになっています。</p>

<p>```objective-c
@objc final public class func configureLinearNetworkActivityIndicatorIfNeeded() {</p>

<pre><code>if #available(iOS 11.0, *) {
        // detect iPhone X
        if let window = shared.windows.first, window.safeAreaInsets.bottom &gt; 0.0 {
            if UIDevice.current.userInterfaceIdiom != .pad {
                configureLinearNetworkActivityIndicator()
            }
        }
    }
</code></pre>

<p>}
```</p>

<p>これを見ると、ライブラリ側で<code>iPhoneX</code>系端末なのか/<code>iPad</code>ではない端末なのかを判別してくれていることがわかります。<br/>
既に全画面表示の <code>iPad</code> が世に出ているため、作成者に<code>PullRequest</code>を送るチャンスかもしれないですね！</p>

<p>続いて、もう少し深ぼると&hellip;<br/>
上記メソッド内で実行している<code>configureLinearNetworkActivityIndicator()</code>の中身は、</p>

<p>```objective-c
class func configureLinearNetworkActivityIndicator() {</p>

<pre><code>// 説明(1)
    DispatchQueue.once {
  // 説明(2)
        let originalSelector = #selector(setter: UIApplication.isNetworkActivityIndicatorVisible)
        let swizzledSelector = #selector(ft_setNetworkActivityIndicatorVisible(visible:))
        let originalMethod = class_getInstanceMethod(self, originalSelector)
        let swizzledMethod = class_getInstanceMethod(self, swizzledSelector)
        method_exchangeImplementations(originalMethod!, swizzledMethod!)
    }
    UIViewController.configureLinearNetworkActivityIndicator()
</code></pre>

<p>}
```</p>

<p>になっています。</p>

<p>重要ポイントを説明すると、</p>

<ul>
<li>説明(1)

<ul>
<li><code>DispatchQueue.once</code>の内部実装を見ると、ファイル名/メソッド名/行数からトークンを作成し、実行回数を管理しています</li>
<li>これにより、誤って無駄に重複実行したとしても、防いでくれるようになっているようです</li>
</ul>
</li>
<li>説明(2)

<ul>
<li>ライブラリの存在を意識する必要なく機能を利用できるように<code>method_exchangeImplementations</code>を使っています 　</li>
<li><a href="https://developer.apple.com/documentation/objectivec/1418530-class_getinstancemethod">class_getInstanceMethod</a>でメソッド情報を取得します</li>
<li><a href="https://developer.apple.com/documentation/objectivec/1418769-method_exchangeimplementations">method_exchangeImplementations</a>でメソッドの実装を入れ替えます</li>
<li><code>method_exchangeImplementations</code>により<code>UIApplication.isNetworkActivityIndicatorVisible</code>が実行されたら、<code>ft_setNetworkActivityIndicatorVisible(visible:)</code>が呼び出されるという状況を作ることができます</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>以上をまとめます。</p>

<ul>
<li>iPhoneX系端末では従来の<code>NetworkIndicator</code>はデフォルト、表示されない</li>
<li>従来型の通信表現を取り入れているアプリは最近少ないかもしれない</li>
<li>従来型の通信表現を利用する場合は<code>FTLinearActivityIndicator</code>がオススメ</li>
</ul>


<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発時に注意したい色空間(Generic RGB vs sRGB)]]></title>
    <link href="http://grandbig.github.io/blog/2019/03/16/srgb/"/>
    <updated>2019-03-16T19:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/03/16/srgb</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>最近、iOSアプリ開発をしている際に、</p>

<p><strong>デザイナーさんが指定している色をXcode上で指定しているにも関わらず、</strong><br/>
<strong>iPhoneで見た時に、デザイナーさんが指定した色になっていない</strong></p>

<p>といった話が出ました。<br/>
結論から言えば、</p>

<p>デザイナーさんが利用しているツール(PhotoshopやXdなど)と、<br/>
エンジニアが利用しているXcodeとで、<br/>
指定している <strong>色空間が異なる</strong> ことが原因でした。</p>

<p>筆者は過去に同様の問題に直面した経験があったため、すぐに理由の予測がついたのですが、<br/>
ふと『元々こういった話って開発時に出てきていただろうか？』と疑問に思いました。</p>

<p>そこでXcodeでの色空間について触りを見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Xcodeの色空間について</h3>

<p>Xcodeでは様々な方法で色を定義・設定することができます。<br/>
しかしながら筆者が見る限り、デフォルトの色空間の指定は、色の設定方法次第で異なっているようです。</p>

<p>では、1つずつ見ていきましょう。<br/>
※ Xcodeのバージョンは <code>Version 10.1 (10B61)</code> です。</p>

<h4>Xcode Interface Builderの場合</h4>

<p>Interface Builder(以降、IB)の場合を見ていきます。<br/>
IBでは色空間がデフォルトで <code>Generic RGB</code> が指定されています。</p>

<p><img src="/images/srgb_1.png" alt="IBで色を指定する場合、デフォルト色空間はGeneric RGB" /></p>

<p>デザイナーとエンジニア間での色の違いが問題に上がる際は、だいたいIB周りで発生していることが多いと思います。</p>

<h4>コードで指定する場合</h4>

<p>コードでの指定方法は幾つかありますので、その一部を例に見ていきましょう。</p>

<h5>UIColorを初期化して設定する場合</h5>

<p>まずは、 <code>UIColor</code> を初期化して設定する場合です。</p>

<p>```objective-c
// sRGBで指定する場合
label.backgroundColor = UIColor(red: 245/255.0, green: 84/255.0, blue: 45/255.0, alpha: 1.0)</p>

<p>//Display P3で指定する場合
label.backgroundColor = UIColor(displayP3Red: 245/255.0, green: 84/255.0, blue: 45/255.0, alpha: 1.0)
```</p>

<p><code>Display P3</code> の場合は引数名の <code>displayP3Red</code> から自明なのでわかりやすいかと思います。<br/>
注意したいのは、前者の初期化方法です。こちらはメソッド名からはわからないものの、実際には <code>sRGB</code> になっています。</p>

<h5>Color Literalを利用して設定する場合</h5>

<p>Xcode8から <code>Color Literal</code> が導入され、コード上で色がある程度わかるようになりました。<br/>
※「ある程度わかる」 = 「色の傾向はわかるものの、肉眼では色空間の指定まではわからない」 ということです。</p>

<p><code>Color Literal</code> でも、もちろん色空間を設定できます。<br/>
実際に色を指定する際に見てみると、デフォルトで <code>sRGB</code> が指定されていることがわかります。</p>

<p><img src="/images/srgb_2.png" alt="Color Literalで指定する場合、デフォルト色空間はsRGB" /></p>

<h4>AssetCatalogのColorSetで設定する場合</h4>

<p>Xcode9から <code>AssetCatalog</code> から <code>ColorSet</code> を定義できるようになりました。</p>

<p>設定方法は簡単で、Xcodeプロジェクト内の <code>Assets.xcassets</code> を開きます。<br/>
そして <code>New Color Set</code> を追加すれば良いだけです。</p>

<p><code>AssetCatalog</code> で <code>ColorSet</code> を設定する際には、下図のようにデフォルトで <code>sRGB</code> が色空間として指定されています。</p>

<p><img src="/images/srgb_3.png" alt="AssetCatalogで指定する場合、デフォルト色空間はsRGB" /></p>

<p>先程、IBでは色空間の指定に注意しなければならないと書きましたが、<br/>
もしも、色のテーマが決まっているようであれば、<br/>
<code>AssetCatalog</code> で <code>ColorSet</code> を定義し、それをIBで利用すれば、<br/>
毎回個別に <code>sRGB</code> を指定するといったことも起こらなくなるでしょう。</p>

<p><code>AssetCatalog</code> で <code>ColorSet</code> を定義してしまえば、コード上でもその名称の色を呼び出すだけなので、IBと定義がずれる可能性も低くなることでしょう。</p>

<h3>なぜsRGBが多く利用されるのか</h3>

<p>ところで、なぜ <code>sRGB</code> が多く利用されているのでしょうか。</p>

<p>そもそも <code>sRGB</code> とは、ヒューレット・パッカード社とマイクロソフト社が提案し、<br/>
IEC（国際電気標準会議）で審議され、1991年にRGB色空間の国際規格として標準化されました。</p>

<p>これによって様々な製品間のやりとりで個別に色空間の定義が異なれば、<br/>
結果的に思っていたものと異なる色の製品ができ上がるという問題を解決するに至ったようですね。</p>

<p>そういう経緯もあり、今では <code>sRGB</code> はパソコンやデジカメなど多くの製品で利用されています。</p>

<p>よって、デザイナーさんがデザインするときには <code>sRGB</code> を利用していることが多いのでしょう。<br/>
※場合によっては <code>Adobe RGB</code> でデザインされている可能性もあるため、基本的には開発時に色空間の設定を認識合わせすると良いでしょう。</p>

<h3>P3ディスプレイについて</h3>

<p>おまけですが、<code>P3</code>ディスプレイについても触れておきたいと思います。<br/>
<code>P3</code>ディスプレイとは <code>sRGB</code> を超える色域である <code>DCI-P3</code> という色空間で表現された色を表現できるディスプレイです。</p>

<p>iPhoneではiPhone7以降が対応しており、iPhoneXでは更に上級なOLEDディスプレイが採用されています。<br/>
もちろんiPhoneは従来の <code>sRGB</code> も対応していますし、 <code>DCI-P3</code> にも対応しています。<br/>
そしてその色空間の切り替えは必要性に応じてiOSが自動で行なってくれるため、<br/>
作り手側が本来見せたい意図を伝えられる可能性が高いとも言えるかもしれません。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
一言で『色の指定』と言っても、注意しなければいけないことが多々ありますよね。</p>

<p>以上をまとめます。</p>

<ul>
<li>エンジニアとデザイナーで開発前に色空間の認識を合わせることは重要</li>
<li>IBではデフォルト <code>Generic RGB</code> で、他はデフォルト <code>sRGB</code> で指定されている</li>
<li><code>AssetCatalog</code> で <code>ColorSet</code> を定義することでプロジェクト内での色空間の齟齬を少なくできる</li>
</ul>


<p>では最後にそれぞれの色指定方法を比較した画面を掲載しておきたいと思います。</p>

<p><img src="/images/srgb_4.png" alt="各色指定方法を比較した画面" /></p>

<p>すべて <code>RGB</code> に指定した値は同じですが、色空間によって微妙に色が異なっていることがわかると思います。<br/>
※色の指定方法が異なるだけで色空間が同じものは、もちろん同じ色になっています。</p>

<p>ということで本日はここまで。</p>

<p>参考URL</p>

<ul>
<li><a href="https://omoide-photo.jp/blog/srgb/#sRGB1999">sRGBとは、現在カメラやモニター等で共通で使われている標準色空間</a></li>
<li><a href="https://dev.classmethod.jp/smartphone/iphone/xcode-9-asset-catalogs-support-named-colors/">Asset Catalogで色を定義できるようになりました</a></li>
<li><a href="http://appleengine.hatenablog.com/entry/2016/10/24/182852">Apple Engine iPhone と Display P3</a></li>
<li><a href="https://dev.classmethod.jp/smartphone/iphone/xcode-8-image-and-color-literals/">Xcode8の新機能！画像と色のリテラル、画像のコード補完</a></li>
<li><a href="https://www.gizmodo.jp/2017/12/why-every-smartphone-screen-looks-different.html">スマホのディスプレイの色味が端末によって違う理由</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftのグローバルプロパティとスタティックプロパティは自動でlazyになる]]></title>
    <link href="http://grandbig.github.io/blog/2019/03/10/swift-global-variables/"/>
    <updated>2019-03-10T00:40:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/03/10/swift-global-variables</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今日はSwiftでグローバルプロパティを定義した時の挙動についてのメモです。</p>

<p>Swiftではプロパティを定義する時に、わざと遅延評価させるための <code>lazy</code> という修飾子があります。<br/>
<code>lazy</code> をつけることで、そのプロパティが利用される時に、初期化されメモリが消費されるため、メモリの効率性を上げることに一役買います。</p>

<p>実際の定義は下記の通りです。</p>

<p>```objective-c
// ViewController.swift</p>

<p>class ViewController: UIViewController {</p>

<pre><code>lazy var localProp = "local"
...
</code></pre>

<p>}
```</p>

<p>これがSwiftで <strong>グローバルプロパティ</strong> や <strong>スタティックプロパティ</strong> を定義した時に自動的に付与されます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>実験</h3>

<p>では、実際に実験してみましょう。</p>

<h4>事前準備</h4>

<p>まずは下記のような <code>Sample</code> クラスを定義します。</p>

<p>```objective-c
// 実験用のクラス</p>

<p>class Sample {
  let label: String</p>

<p>  init(label: String) {</p>

<pre><code>  self.label = label
  print("initされたよ！ - \(label)")
</code></pre>

<p>  }</p>

<p>  deinit {</p>

<pre><code>  print("deinitされたよ！ - \(label)")
</code></pre>

<p>  }
}
```</p>

<p>そして、下記のような <code>Storyboard</code> を用意します。</p>

<p><img src="/images/swift_global_variables_1.png" alt="Storyboard" /></p>

<p>各種機能を箇条書きで述べると下記の通りです。</p>

<ul>
<li>中央の『<code>Next Page</code>』ボタンを持つVCが <code>FirstViewController</code></li>
<li>右端のVCが <code>SecondViewController</code></li>
<li><code>FirstViewController</code> の『<code>Next Page</code>』ボタンをタップすると <code>SecondViewController</code> に遷移する</li>
<li><code>SecondViewController</code> に各種プロパティを定義</li>
</ul>


<p>```objective-c
// SecondViewController.swift
import Foundation
import UIKit</p>

<p>/// グローバルプロパティ
var global_prop = Sample(label: &ldquo;global_prop&rdquo;)</p>

<p>class SecondViewController: UIViewController {</p>

<pre><code>/// 通常のローカルプロパティ
var local_prop = Sample(label: "local_prop")
/// 遅延実行されるローカルプロパティ
lazy var local_lazy_prop = Sample(label: "local_lazy_prop")
/// スタティックプロパティ
static var static_prop = Sample(label: "static_prop")

override func viewDidLoad() {
    super.viewDidLoad()

    // 各種プロパティにアクセスする
    print(global_prop)
    print(local_prop)
    print(local_lazy_prop)
    print(SecondViewController.static_prop)
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}

deinit {
    print("SecondViewControllerがdeinitされました")
}
</code></pre>

<p>}
```</p>

<h4>実験結果</h4>

<p>準備が整ったので、実際に挙動を見ていきましょう。</p>

<p>まずは、 <code>FirstViewController</code> の『<code>Next Page</code>』をタップして <code>SecondViewController</code> に遷移した場合です。</p>

<p>結果は、</p>

<p><code>objective-c
initされたよ！ - local_prop
initされたよ！ - global_prop
initされたよ！ - local_lazy_prop
initされたよ！ - static_prop
</code></p>

<p>の順番でログが出力されました。</p>

<p>このことから、</p>

<ul>
<li><code>local_prop</code> は <code>SecondViewController</code> 初期化時に初期化される</li>
<li><code>global_prop</code> はアクセス時に初期化される</li>
<li><code>local_lazy_prop</code> はアクセス時に初期化される</li>
<li><code>static_prop</code> はアクセス時に初期化される</li>
</ul>


<p>ことがわかります。</p>

<p>続いて、 <code>SecondViewController</code> のナビゲーションバーの『<code>Back</code>』をタップして前の画面に戻ってみます。</p>

<p><code>objective-c
SecondViewControllerがdeinitされました
deinitされたよ！ - local_prop
deinitされたよ！ - local_lazy_prop
</code></p>

<p>のようにログが出力されました。</p>

<p>このことから、</p>

<ul>
<li><code>local_prop</code> は <code>SecondViewController</code> が <code>deinit</code> されるタイミングで <code>deinit</code> される</li>
<li><code>local_lazy_prop</code> は <code>SecondViewController</code> が <code>deinit</code> されるタイミングで <code>deinit</code> される</li>
<li><code>global_prop</code> は <code>SecondViewController</code> が <code>deinit</code> されても <code>deinit</code>  <strong>されない</strong></li>
<li><code>static_prop</code> は <code>SecondViewController</code> が <code>deinit</code> されても <code>deinit</code>  <strong>されない</strong></li>
</ul>


<p>ことがわかります。</p>

<p>さらに、再度 <code>FirstViewController</code> の『<code>Next Page</code>』をタップして <code>SecondViewController</code> に画面遷移してみます。</p>

<p>すると、</p>

<p><code>objective-c
initされたよ！ - local_prop
initされたよ！ - local_lazy_prop
</code></p>

<p>のようにログが出力されました。</p>

<p>このことから、</p>

<ul>
<li><code>local_prop</code> は <code>SecondViewController</code> 初期化時に初期化される</li>
<li><code>local_lazy_prop</code> はアクセス時に初期化される</li>
<li><code>global_prop</code> と <code>static_prop</code> は既に初期化済みなので、初期化されない</li>
</ul>


<p>ことがわかります。</p>

<h3>グローバルプロパティ vs スタティックプロパティ</h3>

<p>因みに、グローバルプロパティとスタティックプロパティの挙動は下記の点で似ています。</p>

<ul>
<li>特定のクラスを初期化しなくても利用できる</li>
<li>特定のクラスが <code>deinit</code> されてもプロパティ自体は <code>deinit</code> されない</li>
</ul>


<p>そうなると、グローバルプロパティとスタティックプロパティそれぞれ使い分けに疑問を抱くかもしれません。<br/>
しかしながら、この2つは全く利用用途が異なります。</p>

<ul>
<li>グローバルプロパティ

<ul>
<li>グローバルにアクセスする必要がある場合に利用する</li>
<li>特定のクラスに依存するような関係性を持たない</li>
<li>名前空間はグローバル(全体)に影響があるため、十分注意が必要</li>
</ul>
</li>
<li>スタティックプロパティ

<ul>
<li>特定のクラスを初期化せずともアクセスする必要がある場合に利用する</li>
<li>特定のクラスに依存する関係性ではある

<ul>
<li>特定のクラスを初期化せずとも利用できるが、特定のクラスが持つ役割に含まれる</li>
</ul>
</li>
<li>名前空間は特定のクラス内に留まる</li>
</ul>
</li>
</ul>


<p>上記から、より適切な使い分けをするように気をつけましょう。</p>

<h3>まとめ</h3>

<p>ではまとめます。</p>

<ul>
<li>グローバルプロパティは自動で <code>lazy</code> 付与と同じ扱いになる</li>
<li>スタティックプロパティは自動で <code>lazy</code> 付与と同じ扱いになる</li>
<li>グローバルプロパティとスタティックプロパティは特定のクラスが <code>deinit</code> されても <code>deinit</code> されない</li>
<li>グローバルプロパティはグローバルにアクセスが必要な場合に利用する</li>
<li>スタティックプロパティは特定のクラス内に定義して利用することで、その役割を明確にして利用する</li>
</ul>


<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
