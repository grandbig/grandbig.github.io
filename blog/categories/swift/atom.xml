<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-06-17T15:37:29+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSでヘッダーを設定する3つの方法！？]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/17/ios-header/"/>
    <updated>2017-06-17T14:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/17/ios-header</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は今更ではありますが、iOSでヘッダーを作るための方法について書いていきたいと思います。</p>

<ul>
<li>代表的な方法

<ul>
<li><code>NavigationController</code>を利用する方法</li>
<li><code>UIView</code> + <code>UINavigationBar</code>を利用する方法</li>
<li><code>UINavigationBar</code>の高さをカスタマイズする方法</li>
</ul>
</li>
</ul>


<p>1つずつ見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>NavigationControllerを利用する方法</h3>

<p>最も少ない手間でヘッダーを作るなら<code>NavigationController</code>ではないでしょうか。<br/>
幾つかメリット/デメリットを上げてみます。</p>

<ul>
<li>メリット

<ul>
<li>最も簡単にヘッダーを作成できる(Editor > Embed In > Navigation Controller)</li>
<li>画面遷移の設定が簡単(戻るも自動で設定される)</li>
<li>ステータスバー(最上部の縦20pxの領域)を考慮する必要なし</li>
</ul>
</li>
<li>デメリット

<ul>
<li>ヘッダーの不要な画面に遷移するときにヘッダーの非表示をコードで書く必要がある</li>
<li>画面遷移時のアニメーション変更に手間がかかる</li>
</ul>
</li>
</ul>


<h3>UIView + UINavigationBarを利用する方法</h3>

<p>Storyboardを利用するなら初めに上げた「<code>NavigationController</code>を利用する方法」か「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」を使うと良いでしょう。<br/>
わざわざ<code>UIView</code>を利用する理由は、ただ単に<code>UINavigationBar</code>のみを配置すると、ステータスバー領域に邪魔されて表示が崩れてしまうためです。<br/>
これを回避するためだけに<code>UIView</code>を配置するという方法です。</p>

<p>具体的には下図のような配置になります。</p>

<p><img src="/images/ios_header_1.png" alt="UIView + UINavigationBarの例" /></p>

<ul>
<li>メリット

<ul>
<li>Storyboard上でキレイに見える方法でヘッダーを作成できる</li>
<li>画面遷移先でヘッダーが不要であれば配置しなければOK</li>
<li>画面遷移時のアニメーションのデフォルト選択肢が多い</li>
</ul>
</li>
<li>デメリット

<ul>
<li>画面遷移先でヘッダーが必要な場合は毎回<code>UIView</code>を配置する必要がある(色の透過の考慮など面倒な側面あり)</li>
</ul>
</li>
</ul>


<h3>UINavigationBarの高さをカスタマイズする方法</h3>

<p>割りと昔からある方法です。<br/>
ただし、昔(iOS6以前)は純粋の<code>UINavigationBar</code>の高さを変更したいという用途で使われていました。<br/>
今回は通常の<code>UINavigationBar</code>ではステータスバーと被ってしまうため、ステータスバー分の高さを拡張したいという用途で利用します。</p>

<p>高さをステータスバー分、拡張した<code>CustomNavigationBar</code>は下記のように作成できます。</p>

<p>```objective-c
// CustomNavigationBar.swift
import Foundation
import UIKit</p>

<p>class CustomNavigationBar: UINavigationBar {
  override func layoutSubviews() {</p>

<pre><code>super.layoutSubviews()
super.frame = CGRect(x: 0, y: 0, width: super.frame.size.width, height: 64)
</code></pre>

<p>  }
}
```</p>

<p>これをStoryboardで利用するのをオススメしないのは他のパーツと組み合わせて利用する際に、<code>AutoLayout</code>を利用して(客観的に見たら謎の)マージンを設定しないとならないためです。</p>

<p><img src="/images/ios_header_2.png" alt="CustomeNavigationBarをStoryboardで設定" /><br/>
<img src="/images/ios_header_3.png" alt="20のマージンを設定しないといけない" /></p>

<p>一応、メリット/デメリットも書いておきます。</p>

<ul>
<li>メリット

<ul>
<li>「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」よりもソースコードがスマート(機能拡張して利用しているという意味で。)</li>
<li>(ソースコードで書いて実装することを前提にするなら)自由度が最も大きい</li>
</ul>
</li>
<li>デメリット

<ul>
<li>Storyboardで利用するとキレイではない(画面ごとに謎マージンを設定しなくてはならない)</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
たまに必要性を感じる内容であることもあって、一度まとめてみようと思い、書いてみました。<br/>
今の世の中なら、用途にあったOSSライブラリもたくさんあると思うので手法は3つには限らないでしょうね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift3でUIImageを任意の角度で回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3/"/>
    <updated>2017-06-11T22:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>以前、<a href="http://grandbig.github.io/blog/2014/03/13/uiimagerotate/">UIImageを任意の角度で回転させる方法について</a>を書きましたが、今回はそのSwift3版です。<br/>
Objective-Cで書いた方法と基本的には同じではあるのですが、そのままの書き方が使えるわけではないため覚えておいて損はないはず！</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UIImageの回転方法</h3>

<p>Objective-Cでは下記のように回転させていました。</p>

<p>```objective-c
// 元の画像。ここではtest.pngという画像があるとします。
UIImage *image = [UIImage imageNamed:@&ldquo;test.png&rdquo;];</p>

<p>CGSize imgSize = {image.size.width, image.size.height};
// Contextを開く
UIGraphicsBeginImageContext(imgSize);
CGContextRef context = UIGraphicsGetCurrentContext();
// 回転の中心点を移動
CGContextTranslateCTM(context, image.size.width/2, image.size.height/2);
// Y軸方向を補正
CGContextScaleCTM(context, 1.0, -1.0);</p>

<p>// ラジアンに変換(45°回転させたい場合)
float radian = 45 * M_PI / 180;
CGContextRotateCTM(context, radian);
// 回転画像の描画
CGContextDrawImage(UIGraphicsGetCurrentContext(), CGRectMake(-image.size.width/2, -image.size.height/2, image.size.width, image.size.height), image.CGImage);</p>

<p>// Contextを閉じる
UIImage *rotatedImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();</p>

<p>// UIImageViewに回転後の画像を設定
UIImageView *imageView = [[UIImageView alloc] init];
imageView.image = rotatedImage;
```</p>

<p>これをSwift3で書き直すと以下のようになります。</p>

<p>```objective-c
// 元の画像。ここではtest.pngという画像があるとします。
let image = UIImage.init(named: &ldquo;test&rdquo;)</p>

<p>let imgSize = CGSize.init(width: image.size.width, height: image.size.height)
// Contextを開く
UIGraphicsBeginImageContextWithOptions(imgSize, false, 0.0)
let context: CGContext = UIGraphicsGetCurrentContext()!
// 回転の中心点を移動
context.translateBy(x: image.size.width/2, y: image.size.height/2)
// Y軸方向を補正
context.scaleBy(x: 1.0, y: -1.0)</p>

<p>// ラジアンに変換(45°回転させたい場合)
let radian: CGFloat = 45 * CGFloat(Double.pi) / 180.0
context.rotate(by: radian)
// 回転画像の描画
context.draw(image.cgImage!, in: CGRect.init(x: -image.size.width/2, y: -image.size.height/2, width: image.size.width, height: image.size.height))</p>

<p>// Contextを閉じる
let rotatedImage: UIImage = UIGraphicsGetImageFromCurrentImageContext()!
UIGraphicsEndImageContext()</p>

<p>// UIImageViewに回転後の画像を設定
let imageView = UIImageView.init()
imageView.image = rotatedImage
```</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
基本的な回転の流れは変わりませんね。<br/>
ただ、Swift3で書いた方が心なしか自然なメソッドで書けている気がするのは筆者だけですかね&hellip;<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RealmSwiftでdistinctしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/swift3-realm-2/"/>
    <updated>2017-06-11T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/swift3-realm-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">RealmSwift</a>に関するメモ書きです。<br/>
<code>RealmSwift</code>を使って保存したデータを<code>distinct</code>したいときがあったのですが、<code>RealmSwift</code>内で定義されているわけではなさそうなので迷いました。<br/>
よく考えてみれば、なんてことはなく<code>Swift</code>に標準で用意されたものを使えばよかったのでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>distinctする方法</h3>

<p>さて、具体的な方法を見てみましょう。<br/>
例として<code>RealmSwift</code>で保存するオブジェクトを下記のように定義します。</p>

<p>```objective-c
// Footprint.swift
import Foundation
import RealmSwift</p>

<p>/<em>*
 足跡
 </em>/
class Footprint: Object {
  dynamic var id: Int = 0
  dynamic var title: String = &ldquo;&rdquo;
  dynamic var latitude: Double = 0.0
  dynamic var longitude: Double = 0.0
  dynamic var speed: Double = 0.0
  dynamic var direction: Double = 0.0
  dynamic var created: Double = Date().timeIntervalSince1970</p>

<p>  // プライマリーキーの設定
  override static func primaryKey() &ndash;> String? {</p>

<pre><code>return "id"
</code></pre>

<p>  }</p>

<p>  // インデックスの設定
  override static func indexedProperties() &ndash;> [String] {</p>

<pre><code>return ["title"]
</code></pre>

<p>  }
}
```</p>

<p><code>RealmSwift</code>で保存していくと、下記のような結果になるでしょう。</p>

<p><img src="/images/realmswift_distinct_1.png" alt="RealmSwiftブラウザで結果を見てみる" /></p>

<p>もし、これらのデータから<code>title</code>を<code>distinct</code>して取得したい場合があったとしましょう。<br/>
その場合は下記のように取得します。</p>

<p>```objective-c
// FootprintManager.swift
/**
  保存した足跡タイトルを取得する処理</p>

<ul>
<li>returns: [タイトル]の配列
*/
func distinctByTitle() &ndash;> [String] {
let realm = try! Realm()
let distinctTitles = Set(realm.objects(Footprint.self).value(forKey: &ldquo;title&rdquo;) as! [String])</li>
</ul>


<p>  return distinctTitles
}
```</p>

<p>実はSwiftでは<code>Set</code>という重複を許さない集合体を定義するための型が用意されています。<br/>
なので、<code>RealmSwift</code>から単に取得してきた値を<code>Set</code>型に変換することで<code>distinct</code>と同じ結果が得られるということになります。</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか。<br/>
<code>distinct</code>は決して負荷の軽い処理ではありませんが、様々な場面で求められることでしょう。<br/>
使い方を知っておいて損はありません。<br/>
ということで今回はメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapに好きな画像を配置しよう！ Swift編]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/04/put-annotation-2/"/>
    <updated>2017-06-04T21:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/04/put-annotation-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>実に3年半ほど前のブログを始めた当初、<a href="https://grandbig.github.io/blog/2013/09/28/put-annotation/">Mapに好きな画像を配置しよう！</a>といった記事を書いたことがありました。<br/>
駆け出しのiOSエンジニアであった当時の筆者はお世辞にもObjective-CやiOS自体について詳しいとは言い難きスキルレベルでした。<br/>
(当時のブログ記事に不必要な記述があるかとは思いますが、あえてそのまま残しています。)</p>

<p>それから月日を経て、Swiftで同じ実装をするタイミングがあったことで、本記事を書こうと思い、今に至ります。<br/>
簡単な内容ではありますが、感慨深く書かせて頂いています笑</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>CustomAnnotationを作成しよう</h3>

<p>当時と同じ手法で実装してみます。</p>

<p>```objective-c
import Foundation
import MapKit</p>

<p>class CustomAnnotation:NSObject, MKAnnotation {
  public var coordinate: CLLocationCoordinate2D
  public var title: String?
  public var subtitle: String?</p>

<p>  init(coordinate: CLLocationCoordinate2D, title: String, subtitle: String) {</p>

<pre><code>self.coordinate = coordinate
self.title = title
self.subtitle = subtitle

super.init()
</code></pre>

<p>  }
}
```</p>

<p>上記では、<code>MKAnnotation</code>を拡張し、<code>coordinate</code> / <code>title</code> / <code>subtitle</code>を初期化時に一斉に設定できるようなイニシャライザを用意しました。</p>

<h3>Mapに画像を配置しよう</h3>

<p>さて、ではMapに画像を配置する方法を見ていきます。</p>

<p>```objective-c
import UIKit
import MapKit</p>

<p>class ViewController: UIViewController, MKMapViewDelegate {
  @IBOutlet weak var mapView: MKMapView!</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

// マップ関連の初期化処理
self.mapView.delegate = self
self.mapView.setUserTrackingMode(MKUserTrackingMode.followWithHeading, animated: true)

// CustomAnnotationの初期化
let ann = CustomAnnotation.init(coordinate: CLLocationCoordinate2D.init(latitude: 35.685623, longitude: 139.763153), title: "TEST", subtitle: "test")
// CustomAnnotationをマップに配置
self.mapView.addAnnotation(ann)
</code></pre>

<p>  }</p>

<p>  &lt;省略></p>

<p>  // MARK: MKMapViewDelegate
  func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) &ndash;> MKAnnotationView? {</p>

<pre><code>if (annotation is MKUserLocation) {
  // ユーザの現在地の青丸マークは置き換えない
  return nil
} else {
  // CustomAnnotationの場合に画像を配置
  let identifier = "Pin"
  var annotationView: MKAnnotationView? = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
  if annotationView == nil {
    annotationView = MKAnnotationView.init(annotation: annotation, reuseIdentifier: identifier)
  }
  annotationView?.image = UIImage.init(named: "xxxx") // 任意の画像名
  annotationView?.annotation = annotation
  annotationView.canShowCallout = true  // タップで吹き出しを表示
  return annotationView
}
</code></pre>

<p>  }
}
```</p>

<p>結果は次のようになります。<br/>
<img src="/images/annotationpractice6.png" alt="Mapに画像を表示" /></p>

<h3>まとめ</h3>

<p>昔は様々なサイトを参考にしながら、解読しながら書いていたソースがすんなりと書くことができました。<br/>
今回の記事を通して、もっと他にもSwiftに書き直しても良い記事がありそうだなと思いました。
まあ、タイミング見てですかね&hellip;といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FirebaseをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/14/firebase-ios/"/>
    <updated>2017-05-14T16:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/14/firebase-ios</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今や商用で利用している人も珍しくないであろうFirebaseを触ってみようと思います！<br/>
と言うのも、最近Stackoveflowを眺めている時にFirebaseに関する質問を時たま見かけるようになったからです。<br/>
(筆者はまともにFirebaseを使ったことがないため、この機会に使ってみようと思い立ちました。)</p>

<p>ということで、初歩の初歩から見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h3>Firebaseの導入</h3>

<p>まずは何と言っても利用方法ですよね？<br/>
ほとんどGoogleが用意してくれているため、本当に簡単にできます。</p>

<p>１．Firebaseの公式ページにアクセス<br/>
まずは、<a href="https://console.firebase.google.com/?hl=ja">Firebaseの公式ページ</a>に遷移して、新規プロジェクトを作成しましょう。</p>

<p><img src="/images/firebase_ios_1.png" alt="Firebaseの新規プロジェクトを作成" /></p>

<p>２．iOSアプリにFirebaseを追加<br/>
１で新規プロジェクトが作成できたため、続いてiOSアプリにFirebaseを追加しましょう。</p>

<p>追加対象のXcodeプロジェクトを作成します。<br/>
<img src="/images/firebase_ios_2.png" alt="Xcodeプロジェクトの作成" /></p>

<p>Firebase管理ページから「iOSアプリにFirebaseを追加」を選択します。<br/>
<img src="/images/firebase_ios_3.png" alt="iOSアプリにFirebaseを追加" /></p>

<p>plistファイルをDLしてXcodeプロジェクトに追加します。<br/>
<img src="/images/firebase_ios_4.png" alt="plistファイルをXcodeプロジェクトに追加" /></p>

<p>続いて、<code>CocoaPods</code>でFrameworkをインストールします。<br/>
<img src="/images/firebase_ios_5.png" alt="CocoaPodsでFrameworkを追加" /></p>

<p><code>Podfile</code>には下記を記載しました。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;FirebaseSample&rdquo; do
  # Normal libraries
  pod &lsquo;Firebase/Core&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "FirebaseSampleTests"
target "FirebaseSampleUITests"
</code></pre>

<p>  end
end
```</p>

<p>そして、<code>.xcworkspace</code>ファイルを開いて、下図の指示の通り<code>AppDelegate.swift</code>にコードを追加します。</p>

<p><img src="/images/firebase_ios_6.png" alt="AppDelegate.swiftにコードを追加" /></p>

<p>```objective-c
import UIKit
import Firebase // ここを追記</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<pre><code>var window: UIWindow?

func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {
    // Override point for customization after application launch.
    FIRApp.configure()　// ここを追記
    return true
}
</code></pre>

<p>}
```</p>

<p>これでFirebase管理画面にiOSプロジェクトとの紐付けが完了したことがわかります。</p>

<p><img src="/images/firebase_ios_7.png" alt="iOSプロジェクトへのFirebase紐付け完了" /></p>

<h3>Firebaseの導入を確認</h3>

<p>ここまででFirebaseの導入が完了したものの、正しく導入できたかどうかわからないかと思います。<br/>
そういうときには<code>DebugView</code>を利用しましょう。</p>

<p>１．XcodeプロジェクトにFirebaseのデバッグ設定を追加<br/>
Target > Edit Scheme > Run > Arguments を見てみましょう。</p>

<p><img src="/images/firebase_ios_8.png" alt="Firebaseデバッグ設定を追加" /></p>

<p><code>-FIRDebugEnabled</code>をONにしておくことでデバッグが可能になります。<br/>
デバッグ機能を利用しない場合は明示的に<code>-FIRDebugDisabled</code>をONにしましょう。<br/>
(<a href="https://support.google.com/firebase/answer/7201382?hl=ja&amp;utm_id=ad">Google公式ページ</a>によると一度デバッグ機能を有効化すると<code>-FIRDebugDisabled</code>を指定しないと無効化しないそうです。)</p>

<p>２．Xcodeからデバッグ状況を確認<br/>
上記設定を追加した状態で実機でアプリを起動してみましょう。<br/>
すると、Xcodeのコンソールログ欄に下図のようにログが出力されるようになります。</p>

<p><img src="/images/firebase_ios_9.png" alt="Xcodeにログが出力されます" /></p>

<p>３．Firebase管理サイトでデバッグ状況を確認<br/>
Firebase管理サイトからもデバッグ状況を確認できます。</p>

<p><img src="/images/firebase_ios_10.png" alt="Firebase管理サイトでデバッグ状況を確認" /></p>

<h3>まとめ</h3>

<p>これでFirebaseをiOSに追加することができました。非常に簡単ですね！<br/>
サイドメニューを見るだけでも、非常に多くの機能を有しているようなので、少しずつ試してみたいと思いますが、まずは導入まで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
