<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-04-12T17:38:07+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwiftでGoogle OAuth2認証をしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift/"/>
    <updated>2015-03-15T22:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/15/gtm-oauth2-in-swift</id>
    <content type="html"><![CDATA[<h4>Swift版 OAuth2認証</h4>

<p>本日は<a href="http://grandbig.github.io/blog/2014/07/13/ios-google-oauth2/">iOSでGoogle OAuth認証がしたい</a>のSwift版を紹介したいと思います。<br/>
Google Play Consoleでの設定やGoogleから配布されているOAuth2認証に必要なソースのダウンロード方法については上記の記事に任せるとして、具体的なソース部分を紹介します。</p>

<p>では早速、Objective-CのソースをSwiftで書きなおしたものを下記に載せます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController {</p>

<pre><code>var auth:GTMOAuth2Authentication!
let kKeychainItemName:NSString! = "GOAuthTest"
let scope:NSString! = "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/calendar"
let clientId:NSString! = "Googleから発行されたクライアントID"
let clientSecret:NSString! = "Googleから発行されたクライアントシークレット"
let hasLoggedIn:NSString! = "hasLoggedInKey"

override func viewDidLoad() {
    super.viewDidLoad()
}

override func viewDidAppear(animated: Bool) {
    self.startLogIn()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}

func startLogIn() {
    var defaults:NSUserDefaults? = NSUserDefaults.standardUserDefaults()
    var hasLoggedInFlag:Bool! = defaults?.boolForKey(hasLoggedIn)

    if(hasLoggedInFlag == true) {
        // 認証したことがある場合
        self.auth = GTMOAuth2ViewControllerTouch.authForGoogleFromKeychainForName("Google", clientID: clientId, clientSecret: clientSecret)

        // アクセストークンの取得
        self.authorizeRequest()
    } else {
        // 認証したことがない場合
        var gvc:GTMOAuth2ViewControllerTouch! = GTMOAuth2ViewControllerTouch(scope: scope, clientID: clientId, clientSecret: clientSecret, keychainItemName: "Google", delegate: self, finishedSelector: "viewController:finishedWithAuth:error:")
        self.presentViewController(gvc, animated: true, completion: nil)
    }
}

func viewController(viewController:GTMOAuth2ViewControllerTouch!, finishedWithAuth:GTMOAuth2Authentication!, error:NSError?) {
    if(error != nil) {
        // 認証失敗
    } else {
        // 認証成功
        self.auth = finishedWithAuth
        var defaults = NSUserDefaults.standardUserDefaults()
        defaults.setBool(true, forKey: hasLoggedIn)
        defaults.synchronize()

        // アクセストークンの取得
        self.authorizeRequest()
    }

    // 認証画面を閉じる
    viewController.dismissViewControllerAnimated(true, completion: nil)
}

func authorizeRequest() {
    println(self.auth)
    var req:NSMutableURLRequest! = NSMutableURLRequest(URL: self.auth.tokenURL)
    self.auth.authorizeRequest(req, completionHandler: { (error) -&gt; Void in
        println(self.auth)
    })
}
</code></pre>

<p>}
```</p>

<p>今回のソースは<a href="https://github.com/grandbig/gtm-oauth2-swift">GitHub</a>にアップしています。<br/>
興味があればどしどし使ってみてください。<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでWebSocket!]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/11/socketio-in-swift/"/>
    <updated>2015-03-11T14:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/11/socketio-in-swift</id>
    <content type="html"><![CDATA[<h4>socket.io公式クライアントソースを使ったサンプルの作成</h4>

<p>先日、公開された<a href="https://github.com/socketio/socket.io-client-swift">socket.io公式のクライアントソース</a>を使って、サンプルを作成したいと思います。<br/>
公式にも<a href="https://github.com/nuclearace/socket.io-client-swift-example">サンプルコード</a>は公開されているのですが、練習がてら試してみたいと思います。</p>

<p>因みに本件にはサーバ側の説明は特に書いていません。<br/>
下記、内容を試したい場合は<a href="https://github.com/grandbig/socket.io.web">GitHub: socket.io.web</a>からソースをダウンロードしてお使いください。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>プログラミング前の準備</h5>

<p>まずは、<a href="https://github.com/square/SocketRocket">SocketRocket</a>をダウンロードしてきましょう。<br/>
READMEに書かれている通り、SocketRocketフォルダごと、自身のフォルダにコピーします。</p>

<p>続いて、下記４つのFrameworkを追加しましょう。</p>

<ul>
<li>libicucore.dylib</li>
<li>CFNetwork.framework</li>
<li>Security.framework</li>
<li>Foundation.framework</li>
</ul>


<p>本プロジェクトはSwiftがベースであるため、このままだと、Objective-Cのクラスを読み込めません。<br/>
そこで、 <strong>Bridge-Header</strong> ファイルを作成する必要があります。</p>

<p>作成手順は下記です。</p>

<ol>
<li>プロジェクトを右クリックでAdd files to &ldquo;プロジェクト名"を選択</li>
<li>TARGETS > Build Settings > Swift Compiler &ndash; Code Generation > Objective-C Bridging Header に作成したBridge-Headerファイルを指定</li>
<li>作成したBridge-Headerファイルに利用したいObjective-Cファイルをimportする</li>
</ol>


<p>そして、socket.io公式のクライアントソースである <strong>SwiftIO</strong> を追加しましょう。</p>

<p>ここまでで準備完了です。<br/>
下記のようなプロジェクト構成になっていることを確認してください。</p>

<p><img src="/images/ws_swift_1.png" alt="プロジェクト構成" /></p>

<h5>プログラミング</h5>

<p>さて、ここからは本格的にプログラミングを書いていきます。<br/>
と言っても、今回作成するサンプルは<a href="http://socket.io/get-started/chat/">socket.io 公式HP > Get Started > Write a chat application</a>を途中まで作成する程度なので、少ししか書きません。</p>

<p>まずは、Storyboardにテキストフィールドとボタンを設置します。</p>

<p><img src="/images/ws_swift_2.png" alt="Storyboardの様子" /></p>

<p>続いて、StoryboardからViewController.swiftにリンク付けします。<br/>
その結果、下記の通りになります。<br/>
(ついでに後々必要となる部分も実装しています。)</p>

<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController, UITextFieldDelegate {</p>

<pre><code>// Storyboardからのリンクづけ
@IBOutlet weak var msgField: UITextField!

override func viewDidLoad() {
    super.viewDidLoad()

    // Delegateの設定
    self.msgField.delegate = self
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}

func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
    // キーボードのreturnを押下するとキーボードが閉じる処理
    self.msgField.resignFirstResponder()

    return true;
}

@IBAction func sendMessage(sender: AnyObject) {
    // Storyboardからのリンクづけ
    // 後ほど記載
}
</code></pre>

<p>}
```</p>

<p>さて、これでほぼ大詰めです。<br/>
WebSocket処理を書いてみましょう。</p>

<p>```objective-c
// ViewController.swift
import UIKit</p>

<p>class ViewController: UIViewController, UITextFieldDelegate {</p>

<pre><code>// Storyboardからのリンクづけ
@IBOutlet weak var msgField: UITextField!

// クライアント側のSocketコネクションの準備
let socket = SocketIOClient(socketURL: "localhost:3000")

override func viewDidLoad() {
    super.viewDidLoad()

    // Delegateの設定
    self.msgField.delegate = self

    // コネクションの接続
    self.socket.connection()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
}

func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
    // キーボードのreturnを押下するとキーボードが閉じる処理
    self.msgField.resignFirstResponder()

    return true;
}

@IBAction func sendMessage(sender: AnyObject) {
    // Storyboardからのリンクづけ
    // テキストフィールド内の文字列をWebSocketで送る処理
    var msg = self.msgField.text
    self.socket.emit("chat message", msg)
}
</code></pre>

<p>}
```</p>

<p>はい。これでクライアント側の実装終了です！<br/>
上記のソースは全て<a href="https://github.com/grandbig/socket.io.ios-swift">GitHub: socket.io.ios-swift</a>にアップしていますので、ご自由にご利用ください。</p>

<p>ということで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://socket.io/get-started/chat/">socket.io</a></li>
<li><a href="https://github.com/socketio/socket.io-client-swift">socketio/socket.io-client-swift</a></li>
<li><a href="http://qiita.com/n0bisuke/items/6dc990579b343475a635">SocketRocketでWebSocketを実装してみる</a></li>
<li><a href="http://mk.hatenablog.com/entry/2014/10/16/075841">SwiftからObjective-Cのライブラリ使う</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
