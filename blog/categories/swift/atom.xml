<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-03-13T01:32:11+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SwiftでTupleを活用しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/03/12/swift-tuple/"/>
    <updated>2016-03-12T23:09:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/03/12/swift-tuple</id>
    <content type="html"><![CDATA[<h4>Tupleとは</h4>

<p>さて、本日はSwiftの <strong>Tuple</strong> について見ていきます。<br/>
<strong>Tuple</strong> とは『複数の型の値を一組にまとめる』ときに利用します。</p>

<p>続いて具体的な使い方を紹介します。</p>

<h5>valueのみの格納</h5>

<p><code>objective-c
let sample = (201603, "TEST", true)
print("0番目の値は\(sample.0), 1番目の値は\(sample.1), 2番目の値は\(sample.2)")
</code></p>

<p>これを実行すると、</p>

<p><code>objective-c
0番目の値は201603, 1番目の値はTEST, 2番目の値はtrue
</code></p>

<p>のように出力されます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>key, valueの格納</h5>

<p><code>objective-c
let sample = (num: 201603, str: "TEST", flag: true)
print("0番目の値は\(sample.num)", 1番目の値は\(sample.str), 2番目の値は\(sample.flag))
print("0番目の値は\(sample.0), 1番目の値は\(sample.1), 2番目の値は\(sample.2)")
</code></p>

<p>これを実行すると、</p>

<p><code>objective-c
0番目の値は201603, 1番目の値はTEST, 2番目の値はtrue
0番目の値は201603, 1番目の値はTEST, 2番目の値はtrue
</code>
のように出力されます。<br/>
key, valueの関係で書いても、数値指定が可能です。</p>

<p>数値指定ができることから、部分的にkeyを指定することができます。</p>

<p><code>objective-c
let sample = (201603, str: "TEST", flag: true)
print("0番目の値は\(sampel.0), 1番目の値は\(sample.str), 2番目の値は\(sample.flag)")
</code></p>

<p>これを実行すると、</p>

<p><code>objective-c
0番目の値は201603, 1番目の値はTEST, 2番目の値はtrue
</code></p>

<p>と出力されます。</p>

<h4>TupleとArray, Dictionaryの違いは？</h4>

<p><strong>Tuple</strong> が真新しく見えるかというと実はそうでもないというのが筆者の感想でありました。<br/>
というのも、ここまでの話では『ArrayやDictionaryで代用できるのでは？』と思えたためです。</p>

<p>それぞれ比較してみましょう。</p>

<h5>TupleとArrayを比較</h5>

<p>まずは、 <strong>Tuple</strong> とArrayの比較です。</p>

<p>```objective-c
// Array
let arraySample = [201603, &ldquo;TEST&rdquo;, true]
print(arraySample[0])</p>

<p>// Tuple
let tupleSample = (201603, &ldquo;TEST&rdquo;, true)
print(tupleSample.0)
```</p>

<ul>
<li>2つの違い

<ul>
<li>書式が異なる(Tupleの方が簡易)</li>
<li>Arrayは要素の追加と削除が可能だが、Tupleはできない</li>
</ul>
</li>
<li>2つの同じところ

<ul>
<li>異なる型の値を格納できる(Arrayは<code>AnyObject</code>にすれば良い)</li>
<li>値渡し</li>
</ul>
</li>
</ul>


<h5>TupleとDictionaryを比較</h5>

<p>次に、 <strong>Tuple</strong> とDictionaryの比較です。</p>

<p>```objective-c
// Dictionary
let dictSample = [&ldquo;numValue&rdquo;: 201603, &ldquo;strValue&rdquo;: &ldquo;TEST&rdquo;, &ldquo;flagValue&rdquo;: true]
print(dictSample[&ldquo;numValue&rdquo;])</p>

<p>// Tuple
let tupleSample = (numValue: 201603, strValue: &ldquo;TEST&rdquo;, flagValue: true)
print(tupleSample.numValue)
```</p>

<p><strong>Tuple</strong> とDictionaryの違いと同一点はArrayと比較した場合と同じです。</p>

<ul>
<li>2つの違い

<ul>
<li>書式が異なる(Tupleの方が簡易)</li>
<li>Dictionaryは要素の追加と削除が可能だが、Tupleはできない</li>
</ul>
</li>
<li>2つの同じところ

<ul>
<li>異なる型の値を格納できる(DictionaryはValueを<code>AnyObject</code>にすれば良い)</li>
<li>値渡し</li>
</ul>
</li>
</ul>


<h4>まとめ</h4>

<p>正直、『こういったところでは  <strong>Tuple</strong> を必ず利用したい』という利用シーンがあまり思い浮かびません&hellip;。<br/>
書式が簡単でとっつきやすいという良さはあるかもしれませんが、<br/>
実際に利用した際にその本当の意義を感じることができるのかもしれませんね。</p>

<p>と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更だけど使ってみようSwiftyJson]]></title>
    <link href="http://grandbig.github.io/blog/2016/03/06/swiftyjson/"/>
    <updated>2016-03-06T22:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/03/06/swiftyjson</id>
    <content type="html"><![CDATA[<h4>SwiftyJsonの便利さを改めて確かめてみる</h4>

<p>さて、筆者の個人的な諸事情により、なかなか時間が取れないため、<br/>
完全に新しいことを書けないでいる今日このごろです。<br/>
今更ながら書くか否か迷ったのですが、<br/>
折角、習慣化しているブログ投稿をSTOPさせたくもないので、<br/>
Swift屋にとっては当たり前となっているであろう<a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJson</a>について書こうと思います。<br/>
何を隠そう、筆者は今までSwiftyJsonの存在は把握していたものの、<br/>
自身で変換して書くことに拘っていたので触っていませんでした。<br/>
がしかし、食わず嫌いは如何なものかということで触ってみることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>CocoaPodsでインストール</h4>

<p>まずは、インストールです。<br/>
<code>CocoaPods</code>, <code>Carthage</code>, <code>Swift Package Manager</code>に対応した良心的なライブラリです。<br/>
筆者はいつも通り<code>CocoaPods</code>を使います。<br/>
今回も<code>Open Weather Map API</code>をサンプルに利用したいので<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>も合わせてインストールします。</p>

<p>```objective-c
platform :ios, &lsquo;8.0&rsquo;
use_frameworks!</p>

<p>target &lsquo;SwiftyJsonSample&rsquo; do</p>

<pre><code>pod 'Alamofire', '~&gt; 3.0'
pod 'SwiftyJSON', :git =&gt; 'https://github.com/SwiftyJSON/SwiftyJSON.git'
</code></pre>

<p>end
```</p>

<h4>SwiftyJsonで何が便利になったのか</h4>

<p>さて、早速、<code>SwiftyJson</code>を使うことで何が便利になるのか見てみたいと思います。<br/>
まずは、便利にする前のベースのコードをご覧下さい。</p>

<p>```objective-c
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?APPID=">http://api.openweathermap.org/data/2.5/weather?APPID=</a>&lt;あなた自身のAPPID>&rdquo;,</p>

<pre><code>parameters:["q":location]).responseJSON { (response) -&gt; Void in
    if response.result.isSuccess {
        guard let value = response.result.value else {
            // 値の取得に失敗した場合
            return
        }
        guard let weatherArray:AnyObject? = value["weather"] else {
            // 値の取得に失敗した場合
            return
        }
        guard let weather = weatherArray?[0] else {
            // 値の取得に失敗した場合
            return
        }
        guard let description = weather["description"] as? String else {
            // 値の取得に失敗した場合
            return
        }

        print(description)
    }
</code></pre>

<p>}
```</p>

<p>前回の記事で紹介した<code>guard statement</code>を使うことでネストが浅くなっていますね。<br/>
これはわかりやすさのために、バラけて書いたのですが、<br/>
元々 <strong>description</strong> の値が欲しいのであれば、</p>

<p>```objective-c
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?APPID=">http://api.openweathermap.org/data/2.5/weather?APPID=</a>&lt;あなた自身のAPPID>&rdquo;,</p>

<pre><code>parameters:["q":location]).responseJSON { (response) -&gt; Void in
    if response.result.isSuccess {
        guard let description = response.result.value?["weather"]??[0]["description"] else {
            // 値の取得に失敗した場合
            return
        }
        print(description!)
    }
</code></pre>

<p>}
```</p>

<p>とすればかなり短く書けます。<br/>
しかしながら、素人にとって <strong>オプショナル型</strong> や <strong>アンラップ</strong> は相当わかりにくいと言えます。<br/>
これが<code>SwiftyJson</code>を利用することで細かい上記のことを気にすることなく、<br/>
WEBで扱うようにJSONを扱えます。<br/>
もちろんSwiftでは重要なことなので、<br/>
<a href="http://qiita.com/maiki055/items/b24378a3707bd35a31a8">どこよりも分かりやすいSwiftの"?&ldquo;と&rdquo;!"</a>を参考に正しく理解しましょう。</p>

<p>さて、<code>SwiftyJson</code>を使うと次のように書けます。</p>

<p>```objective-c
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?APPID=">http://api.openweathermap.org/data/2.5/weather?APPID=</a>&lt;あなた自身のAPPID>&rdquo;,</p>

<pre><code>parameters:["q":location]).responseJSON { (response) -&gt; Void in
    if response.result.isSuccess {
        guard let data = response.result.value else {
            return
        }
        let json = JSON(data)
        guard let description = json["weather"][0]["description"] else {
            return
        }
        print(description)
    }
</code></pre>

<p>}
```</p>

<p>多少行数は増えているものの、<br/>
<strong>オプショナル型</strong> の <strong>アンラップ化</strong> を気にせず書けていることがわかると思います。<br/>
そう、まるでWEBでJSONを扱うかのように&hellip;。</p>

<p>オプショナル型の値が内部にオプショナル型の値を持っているなど、<br/>
<code>??</code>と書く状況を作りかねないことがあっても<code>SwiftyJson</code>では考えなくて良いんですね。<br/>
う〜ん。便利。</p>

<p>他にもたくさんの使い道があるため機会があれば積極的に利活用していこうと思います。<br/>
また、これまでスルーしてきた他の便利ライブラリについてもちょくちょくその便利さを追求していこうと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift2.0で追加された新機能を見てみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/29/swift-2-new-function/"/>
    <updated>2016-02-29T21:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/29/swift-2-new-function</id>
    <content type="html"><![CDATA[<h4>今更だけど見てみたいSwift2.0で追加された新機能</h4>

<p>さて、本日は表題通り、今更なんだけど&hellip;Swift2.0で追加された新機能について見ていきたいと思います。<br/>
Swift2.0では下記3つの新機能が追加されました。</p>

<ul>
<li><code>guard statement</code></li>
<li><code>do-catch</code>, <code>try</code>, <code>defer</code></li>
<li><code>Protocol Extension</code></li>
</ul>


<p>これらの使いどころやメリットなど見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>guard statementについて</h4>

<p>まずは<code>guard statement</code>について見ていきます。</p>

<h5>用途について</h5>

<p>条件分岐(<code>if 〜 else 〜</code>)で利用します。<br/>
例えば、Open Weather Map APIでのリクエストでは</p>

<p>```objective-c
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?APPID=">http://api.openweathermap.org/data/2.5/weather?APPID=</a>&lt;あなた自身のAPPID>&rdquo;,</p>

<pre><code>parameters:["q":location]).responseJSON { (response) -&gt; Void in
    if response.result.isSuccess {
        guard let value = response.result.value else {
            // 値の取得に失敗した場合
            return
        }
        guard let weatherArray:AnyObject? = value["weather"] else {
            // 値の取得に失敗した場合
            return
        }
        guard let weather = weatherArray?[0] else {
            // 値の取得に失敗した場合
            return
        }
        guard let description = weather["description"] as? String else {
            // 値の取得に失敗した場合
            return
        }

        print(description)
    }
</code></pre>

<p>}</p>

<p>```</p>

<p>のように書くことができます。<br/>
以前であれば、下記のようにこれでもかってくらいネストしていたのですが、可読性が向上します。</p>

<p>```objective-c
Alamofire.request(.GET, &ldquo;<a href="http://api.openweathermap.org/data/2.5/weather?APPID=">http://api.openweathermap.org/data/2.5/weather?APPID=</a>&lt;あなた自身のAPPID>&rdquo;,</p>

<pre><code>parameters:["q":location]).responseJSON { (response) -&gt; Void in
    if response.result.isSuccess {
        if let value = response.result.value {
            if let weatherArray = value["weather"] {
                if let weather = weatherArray?[0] {
                    if let description = weather["description"] as? String {
                        print(description)
                    }
                }
            }
        }
    }
</code></pre>

<p>}
```</p>

<h4>do-catch, try, deferについて</h4>

<p>続いて、<code>do-catch</code>, <code>try</code>, <code>defer</code>について見ていきます。</p>

<h5>用途について</h5>

<p>基本的には、例外処理を実行したい場合に使います。<br/>
想定外の例外が発生した場合にアプリが落ちないようにしないことはもちろんのこと、<br/>
想定した例外処理が発生した場合にもそれ相応の処理を実施することがあるので、<br/>
そういったときに使います。</p>

<p>まずは、呼び出し元を書きます。</p>

<p>```objective-c
// エラー種別の設定
enum MyError: ErrorType {</p>

<pre><code>case NilError
case StringError
</code></pre>

<p>}</p>

<p>// サンプルメソッド
func sampleMethod(param: String?) throws &ndash;> String {</p>

<pre><code>defer {
    print("メソッドが呼ばれました！")
}

if param == nil {
    throw MyError.NilError
} else if param == "Error" {
    throw MyError.StringError
}

return param
</code></pre>

<p>}
```</p>

<p><code>throw</code>で例外を投げる際にエラー種別を渡す必要があるため、エラー種別を設定します。<br/>
<code>defer</code>は例外発生の有無に関わらず、 <strong>必ず実行する処理内容</strong> を書きます。</p>

<p>続いて、呼び出し先を書きます。</p>

<p>```objective-c
do {</p>

<pre><code>let result = try self.sampleThrowMethod("Error")
print(result)
</code></pre>

<p>} catch MyError.NilError {</p>

<pre><code>print("nilがパラメータとして渡されました")
</code></pre>

<p>} catch MyError.StringError {</p>

<pre><code>print("Error文字列がパラメータとして渡されました")
</code></pre>

<p>} catch {</p>

<pre><code>print("想定外のErrorが発生しました")
</code></pre>

<p>}
```</p>

<p><code>do-catch</code>は例外発生別にその後の処理を分けるために利用します。<br/>
<code>try!</code>で強制実行する場合は<code>do-catch</code>は不要ですが、<br/>
アプリがダウンしては元も子もないのでオススメしません。</p>

<h4>Protocol Extension</h4>

<p>最後に<code>Protocol Extension</code>です。</p>

<h5>用途について</h5>

<p>筆者のイメージではObjective-Cで言うところの <strong>カテゴリ</strong> の用途に近いのかなと思っています。<br/>
Objective-Cのカテゴリと異なるのは指定した既存クラスにメソッドを追加するのではなく、<br/>
<strong>プロトコル</strong> にメソッドを追加するので拡張性や柔軟性が高いようです。</p>

<p>```objective-c
// MyProtocol.swift
protocol MyProtocol {</p>

<pre><code>func pico()
</code></pre>

<p>}</p>

<p>extension MyProtocol {</p>

<pre><code>func pico() {
    print("プロトコルメソッドを追加しました")
}
</code></pre>

<p>}
```</p>

<p>定義したメソッドを下記のように呼び出せます。</p>

<p>```objective-c
// ViewController.swift
class ViewController: UIViewController, MyProtocol {</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()

    self.pico()
}
</code></pre>

<p>}
```</p>

<h4>まとめ</h4>

<p>さて如何でしたでしょうか？<br/>
今更ですが、Swift2.0の新機能について見てきました。<br/>
個人的には<code>guard statement</code>はかなり利用したいなと思っています。<br/>
ネストが多発しがちなSwiftでは活躍の場面が目に浮かびます。<br/>
<code>do-catch</code>は待ち望んだ機能ですし、逆に今までなかったのが信じられないくらいですよね？<br/>
より安定したSwift製アプリを作成することができると想像するとワクワクしますね。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『Swiftビギナーズ勉強会 第１３回』に参加してきました]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/20/swift-beginners-study-13/"/>
    <updated>2016-02-20T13:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/20/swift-beginners-study-13</id>
    <content type="html"><![CDATA[<h4>始めに</h4>

<p>本日は<a href="http://eventdots.jp/event/578498">Swiftビギナーズ勉強会 第１３回</a>に参加してきました。<br/>
筆者はiPhoneアプリ開発自体は4年近く前から関わっているものの<br/>
(初めはWebViewを使ったハイブリッドアプリから携わり、後にフルネイティブに&hellip;)、<br/>
多くはObjective-Cで書いてきたため、Swiftでのコーディング経験は長くありません。<br/>
そういった経緯や、iOS関連の勉強会を探していたこともあり、<br/>
良い機会だと思って参加することにしました。</p>

<p>今回の勉強会の概要はこちらの資料で説明頂きました。<br/>
<a href="http://www.slideshare.net/YoshinoriKoba/swiftswift">概要資料</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>ショートセッション</h4>

<ol>
<li><p>Swift × WordPress SwiftからWP REST APIを使ってWordPressの記事をリストする<br/>
<a href="http://www.slideshare.net/YoshinoriKoba/swift-wordpressswift-wp-rest-apiwordpressswift-160220">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>デバッグ方法に関するリンク<br/>
<a href="http://blogios.stack3.net/archives/776">Xcodeでのデバッグ方法</a></li>
<li>WP REST APIを使ったときにATSに関するエラーが発生した<br/>
HTTPSサーバを用意するのはハードルがあるので、plistの設定で対応した</li>
</ul>
</li>
<li>感想

<ul>
<li>個人的には<a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJson</a>を使ったことがなく、やっぱり使った方が良いのかなと</li>
<li>最近オープンに公開されているAPIがHTTPだと、ATSに引っかかるので、世の中のオープンなAPIが載っているサーバはHTTPSになっていくのかなと</li>
</ul>
</li>
</ul>
</li>
<li><p>mBaaSの基本的な扱い方の事始め</p>

<ul>
<li>参考URL

<ul>
<li><a href="http://qiita.com/fumiyasac@github/items/53d9d45d880b0e523417">ニフティクラウドmobile backendの事始めと導入手順まとめ</a></li>
<li><a href="http://qiita.com/fumiyasac@github/items/7549acb9610860de1733">ニフティクラウドmobile backendを利用した画像付きメモアプリ作成のポイントまとめ</a></li>
</ul>
</li>
<li>メモ

<ul>
<li>Coffre, 10秒虫食い算アプリ</li>
<li><a href="https://parse.com/">Parse</a>とNCMBの比較</li>
<li>Parseは <strong>2017/01/29(日本時間)</strong> でサービス終了するのでNCMBに乗り換えたい</li>
<li>ParseサーバのソースはGitHubに公開されている</li>
<li>Parseサーバのソースを見るとNode.js(Express)とMongoDBを利用している</li>
<li>Frameworkが提供されているので、Referenceに従ってアプリ側にソースを実装していけば、自分でREST API叩くだとかしなくて良い模様</li>
<li>FrameworkはObjective-C製なので、Bridge-Headerの作成が必要</li>
<li>NCMBはParseと大差なさそう</li>
<li>NCMBは日本語のコミュニティやフォーラムなどがあるので安心</li>
</ul>
</li>
<li>感想

<ul>
<li>いつも自分でNode.jsとMongoDBで構築しちゃうからmBaaS使ったことなかったな〜</li>
</ul>
</li>
</ul>
</li>
<li><p>iOS9で楽になったAutoLayout<br/>
<a href="https://speakerdeck.com/satotakeshi/shi-utukiyanai-ios9dele-ninatutaauto-layout">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>iOS6で誕生したAutoLayout</li>
<li>徐々に進化して&hellip;iOS9でStackView, NSLayoutAnchorsが出た</li>
<li>入れ子で複雑なレイアウトをStackViewで実現可能</li>
<li>これで等間隔にviewとか並べられるよ</li>
<li>iOS8まではspacingのviewを作成して、それぞれAutoLayoutをつけていた&hellip;</li>
<li>NSLayoutAnchorsが出たことでコードでも1行で制約を書ける(かなりソースコードが短縮される)</li>
<li>NSLayoutConstraintはたいへんだった</li>
<li>Visual Format Language → 複数の制約を一気につけれるが、不正な記法が判明するのが実行時&hellip;。記法が独特すぎる&hellip;</li>
</ul>
</li>
<li>感想

<ul>
<li>Dynamic Typeってあまり気にしたことなかった&hellip;</li>
</ul>
</li>
</ul>
</li>
<li><p>Linterを使って快適なチーム開発をしよう!<br/>
<a href="https://speakerdeck.com/akatsuki174/linterwoshi-tutekuai-shi-natimukai-fa-wosiyou">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>SwiftLintの話</li>
<li>『(』で引っかかる場合はautocorrect実行してやれば良い</li>
<li>バージョンアップの頻度が高い</li>
</ul>
</li>
<li>感想

<ul>
<li>先日、気になって取り組んだところだったので、復習になった</li>
</ul>
</li>
</ul>
</li>
</ol>


<h4>もくもく会</h4>

<p>ショートセッションの後にもくもく会の時間がありました。<br/>
あまりテーマを決めていなかったものの、1時間〜1時間30分程度の時間だったため、<br/>
あまり大きなことはやらずに基本的なところから見直してみることにしました。</p>

<p>そこで、Swift2.0から追加された新機能3つを試してみることにしました。</p>

<ul>
<li><code>do-catch</code>, <code>try</code>, <code>defer</code></li>
<li><code>guard</code></li>
<li><p><code>Protocol Extension</code></p></li>
<li><p>参考URL</p>

<ul>
<li><a href="https://moneyforward.com/engineers_blog/2015/06/17/swift2/">Swift2.0で追加された新機能 3選</a></li>
<li><a href="http://llcc.hatenablog.com/entry/2015/06/13/235129">Swift2.0で追加されたguard statementを試してみる</a></li>
</ul>
</li>
</ul>


<h4>まとめ</h4>

<p>今回、初めてSwiftビギナーズ勉強会に参加させて頂きましたが、<br/>
日本にはこんなにも幅広い年齢層、職種(専門プログラミングがSwift以外)の方々がSwiftに興味を示しているのだと改めて感じました。<br/>
Objective-Cであれば、基本的なところは抑えられていると思えるようになってきましたが、<br/>
Swiftに関してはまだまだ経験不足で学ぶべきところが多いと感じたのも事実です。<br/>
だからこそやり甲斐があり、モチベーションが上がるんですけどね。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでNSDateFormatterを使ってNSDateからStringに変換してみる！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/19/swift-date/"/>
    <updated>2016-02-19T23:17:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/19/swift-date</id>
    <content type="html"><![CDATA[<h4>NSDateFormatterとは</h4>

<p>さて、本日は<code>NSDateFormatter</code>について見ていきます。<br/>
<code>NSDateFormatter</code>は</p>

<ul>
<li><code>NSDate</code>から<code>String</code>へ変換する際に指定するフォーマットオブジェクト</li>
<li><code>String</code>から<code>NSDate</code>へ変換する際に指定するフォーマットオブジェクト</li>
</ul>


<p>として使ったりします。<br/>
(他にも<code>NSCalendar</code>等々で利用します。)<br/>
基本的な変換は下記のようにできます。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<p>続いて、よく利用する各種設定について見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>NSTimeZoneについて</h4>

<p><code>NSTimeZone</code>はグリニッジ標準時と各地域の標準時の時差情報を持ったクラスです。<br/>
このクラスを利用することで、欲しい時差情報を含んだ日付を取得できます。</p>

<p>例えば下記のような形です。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.timeZone = NSTimeZone.defaultTimeZone()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<p><code>NSTimeZone</code>には<code>systemTimeZone</code>, <code>defaultTimeZone</code>, <code>localTimeZone</code>, 直接地域を指定する方法があります。</p>

<ul>
<li><code>systemTimeZone</code>:<br/>
設定 > 一般 > 日付と時刻 で設定されている地域のタイムゾーンを返却する</li>
<li><code>defaultTimeZone</code>:<br/>
アプリで設定された地域のタイムゾーン<br/>
アプリで設定されていない場合は<code>systemTimeZone</code>を返却する</li>
<li><code>localTimeZone</code>:<br/>
<code>defaultTimeZone</code>への参照値を返却する</li>
<li>直接タイムゾーンを指定:<br/>
<code>GMT</code>, <code>UTC</code>, <code>ja_JP</code>, <code>en_US</code>などの地域を指定することで、指定地域のタイムゾーンを返却する</li>
</ul>


<p>仮に、それぞれのタイムゾーンの設定をして文字列を出力してみると、</p>

<p><code>objective-c
systemTimeZone: 2016-02-19 23:27:37.550000
defaultTimeZone: 2016-02-19 23:27:37.550000
localTimeZone: 2016-02-19 23:27:37.550000
GMT: 2016-02-19 14:27:37.551000
UTC: 2016-02-19 14:27:37.551000
ja_JP: 2016-02-19 23:27:37.551000
</code></p>

<p>といった感じです。</p>

<h4>NSLocaleについて</h4>

<p><code>NSLocale</code>は言語や分化などの情報を持ったクラスです。<br/>
このクラスを利用することで、欲しい言語や分化の地域情報を含んだ日付を取得できます。</p>

<p>利用方法は下記のようになります。</p>

<p>```objective-c
func convertStringFromDate(date: NSDate) &ndash;> String {</p>

<pre><code>let dateFormatter = NSDateFormatter()
dateFormatter.locale = NSLocale.currentLocale()
dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSSSS"

return dateFormatter.stringFromDate(date)
</code></pre>

<p>}
```</p>

<ul>
<li><code>systemLocale</code>:<br/>
設定 > 一般 > 日付と時刻 で設定されている地域の情報を返却する</li>
<li><code>currentLocale</code>:<br/>
現在のユーザで設定されている地域の情報を返却する<br/>
マルチユーザ環境下であれば、違いが出ると思います。</li>
</ul>


<p>地味に文字列変換って面倒だったりするんですよね&hellip;。<br/>
とは言え、アプリを世界対応させる場合は、<br/>
ユーザの設定している <strong>日付と時刻</strong> に注意を配ることが大切です。</p>

<p>と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://aqubiblog.blogspot.jp/2012/11/ios.html">iOSの日付処理まとめ</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
