<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-02-08T16:55:51+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swiftを使って、位置情報を取得してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/19/developing-cllocation-app-by-using-swift/"/>
    <updated>2014-10-19T22:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/19/developing-cllocation-app-by-using-swift</id>
    <content type="html"><![CDATA[<h3>Swiftを使って位置情報を使ってみよう</h3>

<p>今日はSwiftを使った位置情報の取得を試してみたいと思います。<br/>
今日もObjective-Cの書式と比較しながら進めてみます。</p>

<h4>ライブラリのimport</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.hファイル</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>```</p>

<p>```objective-c
// ViewController.mファイル</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p><code>
// ViewController.swiftファイル
import UIKit
import CoreLocation
</code></p>

<!--more-->


<h4>インスタンス変数の宣言</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.mファイル
@interface ViewController ()</p>

<p>@property (strong, nonatomic) CLLocationManager *lm;</p>

<p>@end
```
* Swiftの場合</p>

<p>```
// ViewController.swiftファイル
class ViewController: UIViewController {</p>

<pre><code>var lm:CLLocationManager?

.....
</code></pre>

<p>}</p>

<p>```</p>

<h4>Delegate Protocolの宣言</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.mファイル
@interface ViewController() <CLLocationManagerDelegate> {</p>

<pre><code>......
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
// ViewController.swiftファイル
class ViewController: UIViewController, CLLocationManagerDelegate {</p>

<pre><code>......
</code></pre>

<p>}
```</p>

<h4>viewDidLoadメソッド</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.mファイル
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];

if([self.lm respondToSelector:@selector(requestAlwaysAuthorization)]) {
    [self.lm requestAlwaysAuthorization];
}
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

if((self.lm?.respondToSelector("requestAlwaysAuthorization")) != nil) {
    self.lm?.requestAlwaysAuthorization()
}
</code></pre>

<p>}
```</p>

<h4>CLLocationManagerDelegateメソッド</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.mファイル
// 位置情報の許可設定
&ndash; (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{</p>

<pre><code>if (status == kCLAuthorizationStatusNotDetermined) {
} else if(status == kCLAuthorizationStatusAuthorizedAlways) {
    [self.lm startUpdatingLocation];
} else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
    [self.lm startUpdatingLocation];
}
</code></pre>

<p>}</p>

<p>// 位置情報の更新ハンドリング処理
&ndash; (void)locationManager:(CLLocationManager <em>)manager didUpdateLocations:(NSArray </em>)locations {</p>

<pre><code>CLLocation *currentLocation = locations.lastObject;
CLLocationDegrees lat = currentLocation.coordinate.latitude;
CLLocationDegrees lng = currentLocation.coordinate.longitude;
CLLocationDegrees alt = currentLocation.altitude;
CLLocationDirection course = currentLocation.course;
CLLocationSpeed spd = currentLocation.speed;
CLLocationAccuracy hacc = currentLocation.horizontalAccuracy;
CLLocationAccuracy vacc = currentLocation.verticalAccuracy;
NSDate *dt = currentLocation.timestamp;
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
// ViewController.swiftファイル
// 位置情報の許可設定
func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {</p>

<pre><code>if(status == .NotDetermined) {
} else if(status == .Authorized) {
    self.lm?.startUpdatingLocation()
} else if(status == .AuthorizedWhenInUse) {
    self.lm?.startUpdatingLocation()
}
</code></pre>

<p>}</p>

<p>// 位置情報の更新ハンドリング処理
func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {</p>

<pre><code>var currentLocation:CLLocation? = locations.last as? CLLocation
var lat:CLLocationDegrees? = currentLocation?.coordinate.latitude
var lng:CLLocationDegrees? = currentLocation?.coordinate.longitude
var alt:CLLocationDegrees? = currentLocation?.altitude
var course:CLLocationDirection? = currentLocation?.course
var spd:CLLocationSpeed? = currentLocation?.speed
var hacc:CLLocationAccuracy? = currentLocation?.horizontalAccuracy
var vacc:CLLocationAccuracy? = currentLocation?.verticalAccuracy
var dt:NSDate! = currentLocation?.timestamp
</code></pre>

<p>}
```</p>

<p>これでコーディングは完了です。<br/>
Swiftでも位置情報が取得できるようになりました。<br/>
次回はSwiftで何を書こうかな。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swiftを使って、iBeaconのCentralアプリを作ろう！！]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift/"/>
    <updated>2014-09-29T00:53:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/29/developing-ibeacon-app-by-using-swift</id>
    <content type="html"><![CDATA[<h3>Swiftを使ってみよう</h3>

<p>さて、本日はSwiftの勉強を兼ねて、iBeaconのCentralアプリを開発してみようと思います。もちろんiOS8に対応したアプリを開発します。<br/>
これまで、筆者はまともにSwiftを触ってきませんでした。しかし、今後の動向を考えるに、Objective-Cだけでなく、Swiftでの開発もできるようになっておかないと技術者として危険な気がするのです。もし、数年後にXcode上でObjective-Cのサポートを終了するということになったら、途端にiPhoneアプリが開発できない技術者となってしまいます。</p>

<p>とは言え、何もなしに書き方を勉強しようとしても辛いものがあります。なので、これまでObjective-Cで開発してきたアプリをSwiftに移行するという方法でSwiftを学んでいくこととしました。<br/>
では、早速、開発を進めていきましょう！</p>

<p>本ブログでは、Objective-CとSwiftでの書き方を比較しながら進めていきます。<br/>
Objective-Cとの比較が不要な方は<strong>Swiftの場合</strong>の項目のみを読んでください。</p>

<!--more-->


<h4>ライブラリのimport</h4>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
// ViewController.hファイル</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>```</p>

<p>```objective-c
// ViewController.mファイル</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p><code>
// ViewController.swiftファイル
import UIKit
import CoreLocation
</code></p>

<h3>インスタンス変数の宣言</h3>

<ul>
<li>Objective-Cの場合
Objective-Cの場合は<code>import</code>のすぐ下のinterface内で書きます。</li>
</ul>


<p>```objective-c
// ViewController.mファイル
@interface ViewController ()</p>

<p>@property (strong, nonatomic) IBOutlet CLLocationManager <em>locationManager;
@property (strong, nonatomic) IBOutlet NSUUID </em>proximityUUID;
@property (strong, nonatomic) IBOutlet CLBeaconRegion <em>beaconRegion;
@property (strong, nonatomic) IBOutlet CLBeacon </em>nearestBeacon;
@property (strong, nonatomic) IBOutlet NSString *str;</p>

<p>@end
```</p>

<ul>
<li>Swiftの場合<br/>
Swiftの場合は<code>class ViewController</code>に全体が囲まれる書式になるため、<code>class ViewController</code>のすぐ下に書きます。</li>
</ul>


<p>```
class ViewController: UIViewController {</p>

<pre><code>@IBOutlet var locationManager:CLLocationManager?
@IBOutlet var proximityUUID:NSUUID?
@IBOutlet var beaconRegion:CLBeaconRegion?
@IBOutlet var nearestBeacon:CLBeacon?
@IBOutlet var str:NSString?

.....
</code></pre>

<p>}
```</p>

<h3>Delegate Protocolの宣言</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```objective-c
@interface ViewController() &lt;CLLocationManagerDelegate, UIAlertViewDelegate> {</p>

<pre><code>.....
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
class ViewController: UIViewController, CLLocationManagerDelegate, UIAlertViewDelegate {</p>

<pre><code>.....
</code></pre>

<p>}
```</p>

<h3>viewDidLoadメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];

if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion class]]) {
    self.locationManager = [[CLLocationManager alloc] init];
    self.locationManager.delegate = self;

    self.proximityUUID = [[NSUUID alloc] initWithUUIDString:@"UUID文字列を指定"];
    self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID: self.proximityUUID identifier:@"Objective-C iBeacon"];

    if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {
        [self.locationManager requestAlwaysAuthorization];
    } else {
        [self.locationManager startMonitoringForRegion: self.beaconRegion];
    }
} else {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"確認" message:@"お使いの端末ではiBeaconを利用できません。" delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
    [alert show];

}
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()

if(CLLocationManager.isMonitoringAvailableForClass(CLCircularRegion)) {
    self.locationManager = CLLocationManager()
    self.locationManager?.delegate = self

    self.proximityUUID = NSUUID(UUIDString: "UUID文字列を指定")
    self.beaconRegion = CLBeaconRegion(proximityUUID: self.proximityUUID, identifier: "Swift iBeacon")

    if((self.locationManager?.respondsToSelector("requestAlwaysAuthorization")) != nil) {
        self.locationManager?.requestAlwaysAuthorization()
    } else {
        self.locationManager?.startMonitoringForRegion(self.beaconRegion)
    }
} else {
    var alert:UIAlertView? = UIAlertView(title: "確認",message: "お使いの端末ではiBeaconを利用できません。", delegate: self, cancelButtonTitle: nil, otherButtonTitles: "OK")
    alert?.show()
}
</code></pre>

<p>}
```</p>

<h3>自作メソッドの定義</h3>

<p>ここではローカルプッシュを送信するメソッドを定義します。</p>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
&ndash; (void)sendLocalNotificationForMessage:(NSString *)message
{</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
localNotification.soundName = UILocalNotificationDefaultSoundName;
[[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
func sendLocalNotificationForMessage(message: NSString!) {</p>

<pre><code>var localNotification:UILocalNotification = UILocalNotification()
localNotification.alertBody = message
localNotification.fireDate = NSDate.date()
localNotification.soundName = UILocalNotificationDefaultSoundName
UIApplication.sharedApplication().scheduleLocalNotification(localNotification)
</code></pre>

<p>}
```</p>

<h3>CLLocationManagerのDelegateメソッド</h3>

<ul>
<li>Objective-Cの場合</li>
</ul>


<p>```
// 領域計測が開始した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didStartMonitoringForRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Start Monitoring Region"];
</code></pre>

<p>}</p>

<p>// 領域に侵入した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didEnterRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Enter Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager startRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 領域から退出した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager didExitRegion:(CLRegion </em>)region
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];

if ([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]) {
    [self.locationManager stopRangingBeaconsInRegion:(CLBeaconRegion *)region];
}
</code></pre>

<p>}</p>

<p>// 領域内にいるかいないかの判断
&ndash;(void)locationManager:(CLLocationManager <em>)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion </em>)region{</p>

<pre><code>switch (state) {
    case CLRegionStateInside:
        if([region isMemberOfClass:[CLBeaconRegion class]] &amp;&amp; [CLLocationManager isRangingAvailable]){
            NSLog(@"Enter %@",region.identifier);
            //Beacon の範囲内に入った時に行う処理を記述する
            [self sendLocalNotificationForMessage:@"Already Entering"];
        }
        break;

    case CLRegionStateOutside:
    case CLRegionStateUnknown:
    default:
        break;
}
</code></pre>

<p>}</p>

<p>// 距離計測
&ndash; (void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region
{</p>

<pre><code>if (beacons.count &gt; 0) {
    //CLBeacon *nearestBeacon = beacons.firstObject;
    self.nearestBeacon = beacons.firstObject;

    NSString *rangeMessage;

    switch (self.nearestBeacon.proximity) {
        case CLProximityImmediate:
            rangeMessage = @"Range Immediate";
            break;
        case CLProximityNear:
            rangeMessage = @"Range Near";
            break;
        case CLProximityFar:
            rangeMessage = @"Range Far";
            break;
        default:
            rangeMessage = @"Range Unknown";
            break;
    }

    self.str = [[NSString alloc] initWithFormat:@"%f [m]", self.nearestBeacon.accuracy];
    [self sendLocalNotificationForMessage:self.str];
}
</code></pre>

<p>}</p>

<p>// 領域観測に失敗した場合
&ndash; (void)locationManager:(CLLocationManager <em>)manager monitoringDidFailForRegion:(CLRegion </em>)region withError:(NSError *)error
{</p>

<pre><code>[self sendLocalNotificationForMessage:@"Exit Region"];
</code></pre>

<p>}</p>

<p>// 位置情報の許可設定
&ndash; (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{</p>

<pre><code>if (status == kCLAuthorizationStatusNotDetermined) {
} else if(status == kCLAuthorizationStatusAuthorizedAlways) {
    [self.locationManager startMonitoringForRegion: self.beaconRegion];
} else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
    [self.locationManager startRangingBeaconsInRegion:self.beaconRegion];
}
</code></pre>

<p>}
```</p>

<ul>
<li>Swiftの場合</li>
</ul>


<p>```
// 領域観測が開始した場合
func locationManager(manager: CLLocationManager!, didStartMonitoringForRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Start Monitoring Region")
</code></pre>

<p>}</p>

<p>// 領域に侵入した場合
func locationManager(manager: CLLocationManager!, didEnterRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Enter Region")

if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
    self.locationManager?.startRangingBeaconsInRegion(region as CLBeaconRegion)
}
</code></pre>

<p>}</p>

<p>// 領域から退出した場合
func locationManager(manager: CLLocationManager!, didExitRegion region: CLRegion!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Enter Region")

if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
    self.locationManager?.stopRangingBeaconsInRegion(region as CLBeaconRegion)
}
</code></pre>

<p>}</p>

<p>// 領域内にいるかどうかの判断
func locationManager(manager: CLLocationManager!, didDetermineState state: CLRegionState, forRegion region: CLRegion!) {</p>

<pre><code>switch(state) {
case .Inside:
    if(region.isMemberOfClass(CLBeaconRegion) &amp;&amp; CLLocationManager.isRangingAvailable()) {
        self.locationManager?.startRangingBeaconsInRegion(region as CLBeaconRegion)
    }
    break
case .Outside:
    break
case .Unknown:
    break
default:
    break
}
</code></pre>

<p>}</p>

<p>// 距離計測
func locationManager(manager: CLLocationManager!, didRangeBeacons beacons: [AnyObject]!, inRegion region: CLBeaconRegion!) {</p>

<pre><code>if(beacons.count &gt; 0) {
    self.nearestBeacon = beacons[0] as? CLBeacon

    var proximity:CLProximity! = self.nearestBeacon?.proximity
    var bAccuracy:CLLocationAccuracy! = self.nearestBeacon?.accuracy
    var rangeMessage:NSString

    if(proximity == CLProximity.Immediate) {
        rangeMessage = "Range Immediate"
    } else if(proximity == CLProximity.Near) {
        rangeMessage = "Range Near"
    } else if(proximity == CLProximity.Far) {
        rangeMessage = "Range Far"
    } else if(proximity == CLProximity.Unknown) {
        rangeMessage = "Range Unknown"
    }

    self.str = "\(bAccuracy) [m]"
    self.sendLocalNotificationForMessage(self.str)
}
</code></pre>

<p>}</p>

<p>// 領域観測に失敗した場合
func locationManager(manager: CLLocationManager!, monitoringDidFailForRegion region: CLRegion!, withError error: NSError!) {</p>

<pre><code>self.sendLocalNotificationForMessage("Exit Region")
</code></pre>

<p>}</p>

<p>// 位置情報の許可設定
func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {</p>

<pre><code>if(status == .NotDetermined) {
} else if(status == .Authorized) {
    self.locationManager?.startMonitoringForRegion(self.beaconRegion)
} else if(status == .AuthorizedWhenInUse) {
    self.locationManager?.startRangingBeaconsInRegion(self.beaconRegion)
}
</code></pre>

<p>}
```</p>

<p>以上でコーディング終了です。Objective-Cのときと同様にSwiftでもBeaconを検知することができるようになりました。<br/>
Swiftの勉強がてら、こういった取り組みを進めていこうと思います。<br/>
本日はここまで。</p>

<p>参考:<br/>
<a href="http://qiita.com/oggata/items/5de43d71692d1abcff7c">SwiftとiBeaconを使ってお母さんが自分の部屋に近づいて来た事を警告するアプリをつくる</a><br/>
<a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
