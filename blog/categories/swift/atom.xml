<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-07-17T01:15:42+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2/"/>
    <updated>2017-07-16T23:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>について説明しましたが、今回はもう一歩踏み込んで使い方を見ていこうと思います。</p>

<p>これまた本家の<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">Google スタートガイド</a>を見ればできることも多いのですが、見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Mapにマーカを配置する</h3>

<p>Google Mapを使う上で必ずと言っていいほど利用する機能である「マーカの配置」を見ていきましょう。<br/>
これは実に簡単で「マーカを配置するメソッド」はたった下記だけで実装できます。</p>

<p>```objective-c
/**
  マップにマーカを設置する処理</p>

<ul>
<li>parameter title: マーカのタイトル</li>
<li>parameter coordinate: 位置</li>
<li>parameter iconName: アイコン名</li>
<li>parameter completion: Callback
*/
private func putMarker(title: String?, coordinate: CLLocationCoordinate2D, iconName: String?, completion: @escaping ((GMSMarker) &ndash;> Void)) {
// マーカの生成
let marker = GMSMarker()
marker.title = title
marker.position = coordinate
if iconName != nil {
// アイコン名が指定されている場合は画像を設定
marker.icon = UIImage.init(named: iconName!)
}
marker.map = self.mapView
completion(marker)
}
```</li>
</ul>


<h3>Google Mapからマーカを削除する</h3>

<p>逆にGoogle Mapからマーカを削除する場合はどうするかを見ていきます。<br/>
これも簡単なので、下記のように実装できます。</p>

<p>```objective-c
/**
  マップからマーカを削除する処理</p>

<ul>
<li>parameter marker: マーカ
*/
private func deleteMarker(marker: GMSMarker) {
marker.map = nil
}
```</li>
</ul>


<h3>2つのマーカが入る縮尺にGoogle Mapを変更する</h3>

<p>こちらはGoogle Mapを捉えるカメラの位置を移動することで実現可能です。</p>

<p>```objective-c
@IBOutlet weak var mapView: GMSMapView!</p>

<p>&lt;省略></p>

<p>/**
  現在地と指定した場所の両方が入るようにマップの縮尺を変更する処理</p>

<ul>
<li>parameter coordinate: 場所
*/
private func changeCameraPosition(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D) {
let bounds = GMSCoordinateBounds(coordinate: fromCoordinate, coordinate: toCoordinate)
let margin: CGFloat = 50.0  // 上下左右に設定するマージン
guard let camera = self.mapView.camera(for: bounds, insets: UIEdgeInsets(top: margin, left: margin, bottom: margin, right: margin)) else {
return
}
self.mapView.camera = camera
}
```</li>
</ul>


<h3>Google Mapに線を描画する</h3>

<p>これもそんなに難しくありません。</p>

<p>```objective-c
@IBOutlet weak var mapView: GMSMapView!
private var routePath: GMSPolyline = GMSPolyline()</p>

<p>&lt;省略></p>

<p>/**
  マップへの線描画</p>

<ul>
<li>parameter fromCoordinate: 起点位置</li>
<li>parameter toCoordinate: 終点位置
*/
private func drawPolyline(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D) {</li>
</ul>


<p>  let path = GMSMutablePath()
  path.add(fromCoordinate)
  path.add(toCoordinate)</p>

<p>  self.routePath = GMSPolyline(path: path)
  self.routePath.strokeWidth = 3.0
  self.routePath.map = self.mapView
}
```</p>

<h3>Google Mapから線を削除する</h3>

<p>先程描画した線を削除するには下記で実行できます。</p>

<p>```objective-c
private var routePath: GMSPolyline = GMSPolyline()</p>

<p>&lt;省略></p>

<p>/<em>*
  マップへの描画線を削除する処理
</em>/
private func clearRoutePath() {
  self.routePath.map = nil
}
```</p>

<h3>緯度/経度とピクセル座標の相互変換</h3>

<p>これは利用ケースが限られるかもしれませんが、覚えておくと役に立つ処理です。<br/>
Google Mapは複数のマップ座標を扱うことができます。</p>

<ul>
<li>緯度/経度を用いて地球上にプロット</li>
<li>世界座標: メルカトル図法を用いて緯度/経度を地図に変換した座標</li>
<li>ピクセル座標: 世界座標を指定したズームレベルで変換した座標</li>
<li>タイル座標: 地図を複数の画像に分けたときの座標</li>
</ul>


<p>ほとんどの場合は緯度/経度をマップにプロットすると思いますが、<br/>
筆者は先日ピクセル座標を利用する場面がありました。</p>

<p>それは、「Google Mapの上に透過Viewが載せられた状態でGoogle Mapにマーカを配置する」というものでした。
今回はこれを例に変換方法を見ていきましょう。</p>

<h4>ピクセル座標を緯度/経度に変換</h4>

<p>これはGoogle Maps SDKに用意されています。</p>

<p><code>objective-c
let pressPoint = CGPoint(x: 100, y: 200)
let coordinate = self.mapView.projection.coordinate(for: pressPoint)
</code></p>

<p>たったのこれだけでピクセル座標を緯度/経度に変換できるんです。</p>

<h4>緯度/経度をピクセル座標に変換</h4>

<p>これもGoogle Maps SDKに用意されています。</p>

<p><code>objective-c
let coordinate = CLLocationCoordinate2D(latitude: 35, longitude: 139)
let point = self.mapView.projection.point(for: coordinate)
</code></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
JavaScriptでGoogle Maps APIを利用していた方々も臆することなく使えるような簡単さだと思います。<br/>
次回はGeocoding APIやDirection APIを見ていきたいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを導入してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/"/>
    <updated>2017-06-18T19:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/18/google-maps-sdk</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は<a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a>の導入の仕方を書きたいと思います。<br/>
(<a href="https://grandbig.github.io/blog/2014/01/27/googlemapssdk2/">3年以上前</a>に遊んでいたようですが、全く記憶にない&hellip;)</p>

<p>基本的には、<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">本家のスタートガイド</a>に従って進めるだけで特に問題なく<code>Google Map</code>を実装できるでしょう。<br/>
筆者の場合は<code>Storyboard</code>を使いたかったので少し気をつける必要がありました。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Maps SDK for iOSの導入</h3>

<p>実際に手順を書いていきます。</p>

<p><strong>１．Xcodeでプロジェクトを作成します。</strong><br/>
<strong>２．<code>Podfile</code>を作成します。</strong></p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;GoogleMapsSample&rdquo; do
  # Normal libraries
  pod &lsquo;GoogleMaps&rsquo;
  pod &lsquo;GooglePlaces&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "GoogleMapsSampleTests"
target "GoogleMapsSampleUITests"

pod 'Quick'
pod 'Nimble'
</code></pre>

<p>  end
end</p>

<p>post_install do |installer|
  installer.pods_project.targets.each do |target|</p>

<pre><code>target.build_configurations.each do |config|
  config.build_settings['SWIFT_VERSION'] = '3.0'
end
</code></pre>

<p>  end
end
```</p>

<p><strong>３．<code>pod install</code>で必要な<code>Framework</code>をインストールします。</strong><br/>
<strong>４．APIキーを取得します。</strong><br/>
スタートガイドに従って下記ボタンをクリックすればAPIキーを取得することができます。</p>

<p><img src="/images/google-maps-sdk-1.png" alt="APIキーの取得" /></p>

<p><strong>５．アプリのAPIキーを読み取らせる処理を導入します。</strong><br/>
筆者の場合、基本的なソースコードは<code>GitHub</code>に公開したかったため、そのままAPIキーをべた書きするわけにいきませんでした。<br/>
なので、<code>key.plist</code>ファイルを作成し、このファイルを<code>GitHub</code>にアップしないという手法を取ることにしました。</p>

<p>下図のように<code>key.plist</code>ファイルを作成</p>

<p><img src="/images/google-maps-sdk-2.png" alt="key.plistの作成" /></p>

<p>また下図のようなフォルダ構成で<code>Info.plist</code>と同じ階層に<code>key.plist</code>を配置しています。<br/>
<img src="/images/google-maps-sdk-6.png" alt="フォルダ構成" /></p>

<p><code>AppDelegate.swift</code>で<code>key.plist</code>からAPIキーを読み込みます。</p>

<p>```objective-c
// AppDelegate.swift
import UIKit
import GoogleMaps
import GooglePlaces</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<p>  var window: UIWindow?</p>

<p>  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) &ndash;> Bool {</p>

<pre><code>// Override point for customization after application launch.

if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleMapsApiKey"] as? String {
      GMSServices.provideAPIKey(apiKey)
      GMSPlacesClient.provideAPIKey(apiKey)
    }
  }
}

return true
</code></pre>

<p>  }</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p><strong>６．<code>Storyboard</code>に<code>Google Map</code>を追加します。</strong><br/>
本家スタートガイドだと<code>Storyboard</code>を利用しない方式での説明が書かれていましたが、筆者は<code>Storyboard</code>を利用しました。</p>

<p><img src="/images/google-maps-sdk-3.png" alt="StoryboardにGoogle Mapを配置" /></p>

<p>これで導入が完了です。</p>

<h3>Google Cloud PlatformのAPI Managerで詳細設定</h3>

<p>先程、本家のスタートガイドからAPIキーを取得していましたが、<a href="https://console.cloud.google.com/home">Google Cloud Platform</a>内の<code>API Manager</code>からAPIキーに対して詳細設定をすることができます。<br/>
例えば、スタートガイドから取得しただけでは、APIキーの用途が無制限になっています。<br/>
この状態では意図しない大量利用に繋がる可能性もあるため、iOSアプリでのみ利用するなど詳細を設定した方が良いでしょう。</p>

<p><code>API Manager</code>ページには下記のように遷移できます。<br/>
<img src="/images/google-maps-sdk-4.png" alt="Google Cloud Platform" /></p>

<p>APIキーの詳細設定は下記の通りです。<br/>
<img src="/images/google-maps-sdk-5.png" alt="APIキーの詳細設定" /></p>

<h3>Google Mapで初期描画時の中心位置を現在地にしてみる</h3>

<p>Apple標準で用意されている<code>MapKit</code>であれば、</p>

<p><code>objective-c
self.mapView.setUserTrackingMode(MKUserTrackingMode.follow, animated: true)
</code></p>

<p>とすれば良いだけでした。<br/>
しかし、<code>Google Map</code>では同様の手立てがなさそうなので、下記のように対応しました。</p>

<p>```objective-c
// ViewController.swift
import UIKit
import GoogleMaps
import GooglePlaces</p>

<p>class ViewController: UIViewController, GMSMapViewDelegate, CLLocationManagerDelegate {</p>

<p>  @IBOutlet weak var mapView: GMSMapView!
  private var locationManager: CLLocationManager?
  private var currentLocation: CLLocation?
  private var placesClient: GMSPlacesClient!
  private var zoomLevel: Float = 15.0
  /// 初期描画の判断に利用
  private var initView: Bool = false</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()
// Do any additional setup after loading the view, typically from a nib.

// GoogleMapの初期化
self.mapView.isMyLocationEnabled = true
self.mapView.mapType = GMSMapViewType.normal
self.mapView.settings.compassButton = true
self.mapView.settings.myLocationButton = true
self.mapView.delegate = self

// 位置情報関連の初期化
self.locationManager = CLLocationManager()
self.locationManager?.desiredAccuracy = kCLLocationAccuracyBest
self.locationManager?.requestAlwaysAuthorization()
self.locationManager?.distanceFilter = 50
self.locationManager?.startUpdatingLocation()
self.locationManager?.delegate = self

self.placesClient = GMSPlacesClient.shared()
</code></pre>

<p>  }</p>

<p>  override func didReceiveMemoryWarning() {</p>

<pre><code>super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
</code></pre>

<p>  }</p>

<p>  // MARK: CLLocationManagerDelegate
  func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {</p>

<pre><code>if !self.initView {
  // 初期描画時のマップ中心位置の移動
  let camera = GMSCameraPosition.camera(withTarget: (locations.last?.coordinate)!, zoom: self.zoomLevel)
  self.mapView.camera = camera
  self.locationManager?.stopUpdatingLocation()
  self.initView = true
}
</code></pre>

<p>  }
}
```</p>

<p>これは<code>viewDidLoad</code>時に<code>startUpdatingLocation()</code>で位置情報の取得を開始し、取得したタイミングである<code>didUpdateLocations</code>内で位置情報を<code>camera</code>に設定しています。<br/>
(もっと良い方法がありそうな気もしますが、一旦これで様子見&hellip;)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
これから<code>Google Maps SDK for iOS</code>をバシバシ使っていきたいと思っているので理解が進み次第、続きを書いていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSでヘッダーを設定する3つの方法]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/17/ios-header/"/>
    <updated>2017-06-17T14:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/17/ios-header</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は今更ではありますが、iOSでヘッダーを作るための方法について書いていきたいと思います。</p>

<ul>
<li>代表的な方法

<ul>
<li><code>NavigationController</code>を利用する方法</li>
<li><code>UIView</code> + <code>UINavigationBar</code>を利用する方法</li>
<li><code>UINavigationBar</code>の高さをカスタマイズする方法</li>
</ul>
</li>
</ul>


<p>1つずつ見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>NavigationControllerを利用する方法</h3>

<p>最も少ない手間でヘッダーを作るなら<code>NavigationController</code>ではないでしょうか。<br/>
幾つかメリット/デメリットを上げてみます。</p>

<ul>
<li>メリット

<ul>
<li>最も簡単にヘッダーを作成できる(Editor > Embed In > Navigation Controller)</li>
<li>画面遷移の設定が簡単(戻るも自動で設定される)</li>
<li>ステータスバー(最上部の縦20pxの領域)を考慮する必要なし</li>
</ul>
</li>
<li>デメリット

<ul>
<li>ヘッダーの不要な画面に遷移するときにヘッダーの非表示をコードで書く必要がある</li>
<li>画面遷移時のアニメーション変更に手間がかかる</li>
</ul>
</li>
</ul>


<h3>UIView + UINavigationBarを利用する方法</h3>

<p>Storyboardを利用するなら初めに上げた「<code>NavigationController</code>を利用する方法」か「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」を使うと良いでしょう。<br/>
わざわざ<code>UIView</code>を利用する理由は、ただ単に<code>UINavigationBar</code>のみを配置すると、ステータスバー領域に邪魔されて表示が崩れてしまうためです。<br/>
これを回避するためだけに<code>UIView</code>を配置するという方法です。</p>

<p>具体的には下図のような配置になります。</p>

<p><img src="/images/ios_header_1.png" alt="UIView + UINavigationBarの例" /></p>

<ul>
<li>メリット

<ul>
<li>Storyboard上でキレイに見える方法でヘッダーを作成できる</li>
<li>画面遷移先でヘッダーが不要であれば配置しなければOK</li>
<li>画面遷移時のアニメーションのデフォルト選択肢が多い</li>
</ul>
</li>
<li>デメリット

<ul>
<li>画面遷移先でヘッダーが必要な場合は毎回<code>UIView</code>を配置する必要がある(色の透過の考慮など面倒な側面あり)</li>
</ul>
</li>
</ul>


<h3>UINavigationBarの高さをカスタマイズする方法</h3>

<p>割りと昔からある方法です。<br/>
ただし、昔(iOS6以前)は純粋の<code>UINavigationBar</code>の高さを変更したいという用途で使われていました。<br/>
今回は通常の<code>UINavigationBar</code>ではステータスバーと被ってしまうため、ステータスバー分の高さを拡張したいという用途で利用します。</p>

<p>高さをステータスバー分、拡張した<code>CustomNavigationBar</code>は下記のように作成できます。</p>

<p>```objective-c
// CustomNavigationBar.swift
import Foundation
import UIKit</p>

<p>class CustomNavigationBar: UINavigationBar {
  override func layoutSubviews() {</p>

<pre><code>super.layoutSubviews()
super.frame = CGRect(x: 0, y: 0, width: super.frame.size.width, height: 64)
</code></pre>

<p>  }
}
```</p>

<p>これをStoryboardで利用するのをオススメしないのは他のパーツと組み合わせて利用する際に、<code>AutoLayout</code>を利用して(客観的に見たら謎の)マージンを設定しないとならないためです。</p>

<p><img src="/images/ios_header_2.png" alt="CustomeNavigationBarをStoryboardで設定" /><br/>
<img src="/images/ios_header_3.png" alt="20のマージンを設定しないといけない" /></p>

<p>一応、メリット/デメリットも書いておきます。</p>

<ul>
<li>メリット

<ul>
<li>「<code>UIView</code> + <code>UINavigationBar</code>を利用する方法」よりもソースコードがスマート(機能拡張して利用しているという意味で。)</li>
<li>(ソースコードで書いて実装することを前提にするなら)自由度が最も大きい</li>
</ul>
</li>
<li>デメリット

<ul>
<li>Storyboardで利用するとキレイではない(画面ごとに謎マージンを設定しなくてはならない)</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
たまに必要性を感じる内容であることもあって、一度まとめてみようと思い、書いてみました。<br/>
今の世の中なら、用途にあったOSSライブラリもたくさんあると思うので手法は3つには限らないでしょうね。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift3でUIImageを任意の角度で回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3/"/>
    <updated>2017-06-11T22:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/uiimagerotate-swift3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>以前、<a href="http://grandbig.github.io/blog/2014/03/13/uiimagerotate/">UIImageを任意の角度で回転させる方法について</a>を書きましたが、今回はそのSwift3版です。<br/>
Objective-Cで書いた方法と基本的には同じではあるのですが、そのままの書き方が使えるわけではないため覚えておいて損はないはず！</p>

<p>では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>UIImageの回転方法</h3>

<p>Objective-Cでは下記のように回転させていました。</p>

<p>```objective-c
// 元の画像。ここではtest.pngという画像があるとします。
UIImage *image = [UIImage imageNamed:@&ldquo;test.png&rdquo;];</p>

<p>CGSize imgSize = {image.size.width, image.size.height};
// Contextを開く
UIGraphicsBeginImageContext(imgSize);
CGContextRef context = UIGraphicsGetCurrentContext();
// 回転の中心点を移動
CGContextTranslateCTM(context, image.size.width/2, image.size.height/2);
// Y軸方向を補正
CGContextScaleCTM(context, 1.0, -1.0);</p>

<p>// ラジアンに変換(45°回転させたい場合)
float radian = 45 * M_PI / 180;
CGContextRotateCTM(context, radian);
// 回転画像の描画
CGContextDrawImage(UIGraphicsGetCurrentContext(), CGRectMake(-image.size.width/2, -image.size.height/2, image.size.width, image.size.height), image.CGImage);</p>

<p>// Contextを閉じる
UIImage *rotatedImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();</p>

<p>// UIImageViewに回転後の画像を設定
UIImageView *imageView = [[UIImageView alloc] init];
imageView.image = rotatedImage;
```</p>

<p>これをSwift3で書き直すと以下のようになります。</p>

<p>```objective-c
// 元の画像。ここではtest.pngという画像があるとします。
let image = UIImage.init(named: &ldquo;test&rdquo;)</p>

<p>let imgSize = CGSize.init(width: image.size.width, height: image.size.height)
// Contextを開く
UIGraphicsBeginImageContextWithOptions(imgSize, false, 0.0)
let context: CGContext = UIGraphicsGetCurrentContext()!
// 回転の中心点を移動
context.translateBy(x: image.size.width/2, y: image.size.height/2)
// Y軸方向を補正
context.scaleBy(x: 1.0, y: -1.0)</p>

<p>// ラジアンに変換(45°回転させたい場合)
let radian: CGFloat = 45 * CGFloat(Double.pi) / 180.0
context.rotate(by: radian)
// 回転画像の描画
context.draw(image.cgImage!, in: CGRect.init(x: -image.size.width/2, y: -image.size.height/2, width: image.size.width, height: image.size.height))</p>

<p>// Contextを閉じる
let rotatedImage: UIImage = UIGraphicsGetImageFromCurrentImageContext()!
UIGraphicsEndImageContext()</p>

<p>// UIImageViewに回転後の画像を設定
let imageView = UIImageView.init()
imageView.image = rotatedImage
```</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか？<br/>
基本的な回転の流れは変わりませんね。<br/>
ただ、Swift3で書いた方が心なしか自然なメソッドで書けている気がするのは筆者だけですかね&hellip;<br/>
ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RealmSwiftでdistinctしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/11/swift3-realm-2/"/>
    <updated>2017-06-11T00:41:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/11/swift3-realm-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回は<a href="https://github.com/realm/realm-cocoa/tree/master/RealmSwift">RealmSwift</a>に関するメモ書きです。<br/>
<code>RealmSwift</code>を使って保存したデータを<code>distinct</code>したいときがあったのですが、<code>RealmSwift</code>内で定義されているわけではなさそうなので迷いました。<br/>
よく考えてみれば、なんてことはなく<code>Swift</code>に標準で用意されたものを使えばよかったのでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>distinctする方法</h3>

<p>さて、具体的な方法を見てみましょう。<br/>
例として<code>RealmSwift</code>で保存するオブジェクトを下記のように定義します。</p>

<p>```objective-c
// Footprint.swift
import Foundation
import RealmSwift</p>

<p>/<em>*
 足跡
 </em>/
class Footprint: Object {
  dynamic var id: Int = 0
  dynamic var title: String = &ldquo;&rdquo;
  dynamic var latitude: Double = 0.0
  dynamic var longitude: Double = 0.0
  dynamic var speed: Double = 0.0
  dynamic var direction: Double = 0.0
  dynamic var created: Double = Date().timeIntervalSince1970</p>

<p>  // プライマリーキーの設定
  override static func primaryKey() &ndash;> String? {</p>

<pre><code>return "id"
</code></pre>

<p>  }</p>

<p>  // インデックスの設定
  override static func indexedProperties() &ndash;> [String] {</p>

<pre><code>return ["title"]
</code></pre>

<p>  }
}
```</p>

<p><code>RealmSwift</code>で保存していくと、下記のような結果になるでしょう。</p>

<p><img src="/images/realmswift_distinct_1.png" alt="RealmSwiftブラウザで結果を見てみる" /></p>

<p>もし、これらのデータから<code>title</code>を<code>distinct</code>して取得したい場合があったとしましょう。<br/>
その場合は下記のように取得します。</p>

<p>```objective-c
// FootprintManager.swift
/**
  保存した足跡タイトルを取得する処理</p>

<ul>
<li>returns: [タイトル]の配列
*/
func distinctByTitle() &ndash;> [String] {
let realm = try! Realm()
let distinctTitles = Set(realm.objects(Footprint.self).value(forKey: &ldquo;title&rdquo;) as! [String])</li>
</ul>


<p>  return distinctTitles
}
```</p>

<p>実はSwiftでは<code>Set</code>という重複を許さない集合体を定義するための型が用意されています。<br/>
なので、<code>RealmSwift</code>から単に取得してきた値を<code>Set</code>型に変換することで<code>distinct</code>と同じ結果が得られるということになります。</p>

<h3>まとめ</h3>

<p>さていかがでしたでしょうか。<br/>
<code>distinct</code>は決して負荷の軽い処理ではありませんが、様々な場面で求められることでしょう。<br/>
使い方を知っておいて損はありません。<br/>
ということで今回はメモ書きでした。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
