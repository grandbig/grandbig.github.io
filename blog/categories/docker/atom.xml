<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-02-20T01:35:12+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dockerコンテナ内でApache設定を試してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-3/"/>
    <updated>2017-02-19T23:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/19/docker-for-mac-3</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回の<a href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2/">DockerにWebサーバーを立てよう！</a>に引き続きDocker内Apacheで遊んでみます。<br/>
前回はUbuntuへのApacheインストールから起動まで見てきました。<br/>
実際の現場でApacheを利用する際は様々な設定を施す必要があります。<br/>
本記事ではその一端を少しでも学ぼうということで書いていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>DocumentRootの設定</h3>

<p>Apacheでは設定ファイルで静的ファイルのルートパスを設定することができます。<br/>
デフォルトでは<code>/var/www/html</code>になっています。<br/>
これは、<code>/etc/apache2/sites-enabled/000-default.conf</code>で次のように定義されています。</p>

<p>```javascript
<VirtualHost *:80>
  # The ServerName directive sets the request scheme, hostname and port that
  # the server uses to identify itself. This is used when creating
  # redirection URLs. In the context of virtual hosts, the ServerName
  # specifies what hostname must appear in the request’s Host: header to
  # match this virtual host. For the default virtual host (this file) this
  # value is not decisive as it is used as a last resort host regardless.
  # However, you must set it for any further virtual host explicitly.
  #ServerName www.example.com</p>

<p>  ServerAdmin webmaster@localhost
  DocumentRoot /var/www/html</p>

<p>  # Available loglevels: trace8, &hellip;, trace1, debug, info, notice, warn,
  # error, crit, alert, emerg.
  # It is also possible to configure the loglevel for particular
  # modules, e.g.
  #LogLevel info ssl:warn</p>

<p>  ErrorLog ${APACHE_LOG_DIR}/error.log
  CustomLog ${APACHE_LOG_DIR}/access.log combined</p>

<p>  # For most configuration files from conf-available/, which are
  # enabled or disabled at a global level, it is possible to
  # include a line for only one particular virtual host. For example the
  # following line enables the CGI configuration for this host only
  # after it has been globally disabled with &ldquo;a2disconf&rdquo;.
  #Include conf-available/serve-cgi-bin.conf
</VirtualHost></p>

<h1>vim: syntax=apache ts=4 sw=4 sts=4 sr noet</h1>

<p>```</p>

<p>必要があれば書き換えて使いましょう。</p>

<h3>リバースプロキシ設定</h3>

<p>リバースプロキシとは、</p>

<ul>
<li>クライアントからのアクセスをキャッチして、特定のサーバへ送るプロキシサーバ</li>
<li>セキュリティや負荷分散などのために利用される</li>
</ul>


<p>ものです。<br/>
詳しくは<a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7">リバースプロキシ &ndash; wiki</a>を見てください。</p>

<p>設定はいたって簡単です。<br/>
まずは、モジュールの有効化をするために下記コマンドを打ちましょう。</p>

<p>```javascript
// プロキシモジュールの有効化
$ a2enmod proxy proxy_http
Enabling module proxy.
Considering dependency proxy for proxy_<a href="http:">http:</a>
Module proxy already enabled
Enabling module proxy_http.
To activate the new configuration, you need to run:
  service apache2 restart</p>

<p>// Apacheを再起動
$ /etc/init.d/apache2 restart
```</p>

<p>続いて、設定ファイルを更新します。</p>

<p>```javascript
<IfModule mod_proxy.c></p>

<p>  # If you want to use apache2 as a forward proxy, uncomment the
  # &lsquo;ProxyRequests On&rsquo; line and the <Proxy *> block below.
  # WARNING: Be careful to restrict access inside the <Proxy *> block.
  # Open proxy servers are dangerous both to your network and to the
  # Internet at large.
  #
  # If you only want to use apache2 as a reverse proxy/gateway in
  # front of some web application server, you DON’T need
  ProxyRequests Off</p>

<p>  <Proxy *>
  #   AddDefaultCharset off
  #   Require all denied
  #   #Require local</p>

<pre><code>Require all granted
</code></pre>

<p>  </Proxy>
  ProxyPass /hoge/ <a href="http://localhost:80/hoge.html">http://localhost:80/hoge.html</a>
  ProxyPassReverse /hoge/ <a href="http://localhost:80/hoge.html">http://localhost:80/hoge.html</a></p>

<p>  # Enable/disable the handling of HTTP/1.1 &ldquo;Via:&rdquo; headers.
  # (&ldquo;Full&rdquo; adds the server version; &ldquo;Block&rdquo; removes all outgoing Via: headers)
  # Set to one of: Off | On | Full | Block
  #ProxyVia Off
</IfModule></p>

<h1>vim: syntax=apache ts=4 sw=4 sts=4 sr noet</h1>

<p>```</p>

<p>上記の設定について説明します。</p>

<ul>
<li><code>ProxyRequests Off</code>: フォワードプロキシをOFFにする設定です</li>
<li><code>&lt;Proxy *&gt; 〜 &lt;/Proxy&gt;</code>: アクセスパスに対するアクセス権限範囲を設定します</li>
<li><code>ProxyPass 元のアクセス要求パス 転送パス</code>: クライアントからのアクセス要求を転送します</li>
<li><code>ProxyPassReverse 元のアクセス要求パス 転送パス</code>: Apache に HTTP リダイレクト応答の Location, Content-Location, URI ヘッダの調整を担います</li>
</ul>


<p>筆者自身、フォワードプロキシという単語を意識して使ったことがなかったのですが、ごくごく普通に使われているものなんですよね&hellip;<br/>
Apache公式ページの下記記述を見るとよくわかります。</p>

<blockquote><p>ファイアウォールによって 制限されている内部のクライアントにインターネットへのアクセスを 提供するもの</p></blockquote>

<p>どうも<code>ProxyPassReverse</code>は理解するのが厄介だったようで多くの方が記事にしてくれていました。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/server/introduction_mod_proxy/">mod_proxy再入門 – ProxyPassとProxyPassReverse</a></li>
<li><a href="http://d.hatena.ne.jp/a666666/20090211/1234348004">やっとわかった、リバースプロキシの設定の意味</a></li>
</ul>


<p>上記設定をしたので下記にアクセスしてみます。<br/>
<code>http://localhost:15600/hoge/</code><br/>
結果は下記の通りです。</p>

<p><img src="/images/docker_reverse_proxy.png" alt="リバースプロキシした画面を表示" /></p>

<p>このために用意した<code>hoge.html</code>が表示されました。</p>

<h3>RewriteRuleの設定</h3>

<p><code>Rewrite</code>モジュールはクライアントからのリクエストを内部変換してリダイレクトするような機能です。</p>

<p>まずはモジュールを有効化させます。</p>

<p>```javascript
$ a2enmod rewrite
Enabling module rewrite.
To activate the new configuration, you need to run:
  service apache2 restart</p>

<p>// Apacheを再起動
$ /etc/init.d/apache2 restart
```</p>

<p>続いて、静的ファイルパスへのアクセス制限を変更します。</p>

<p><code>javascript
// /etc/apache2/apache2.conf
&lt;Directory /var/www/&gt;
  Options Indexes FollowSymLinks
  AllowOverride All
  Require all granted
&lt;/Directory&gt;
</code></p>

<p>デフォルトでは上記が<code>AllowOverride None</code>だったのを<code>AllowOverride All</code>に変更しています。<br/>
さらに、<code>.htaccess</code>ファイルを作成して書き換えルールを記載します。</p>

<p><code>javascript
// /var/www/html/.htaccess
&lt;IfModule mod_rewrite.c&gt;
RewriteEngine On
RewriteRule ^fuga/(.*)$ /bar/$1
&lt;/IfModule&gt;
</code></p>

<p>サンプル用に、<code>/var/www/html</code>配下に<code>bar</code>フォルダを作成し、その配下に<code>index.html</code>を作成しました。<br/>
上記設定をしたので下記にアクセスしてみます。<br/>
<code>http://localhost:15600/fuga/</code><br/>
結果は下記の通りです。</p>

<p><img src="/images/docker_rewrite.png" alt="RewriteRule適用" /></p>

<h3>まとめ</h3>

<p>さて今回はApacheの設定を少し見ることができました。<br/>
WEBサーバとはどんなものなのか、わかったようでわかっていなかったことが見えてきた気がします。<br/>
引き続き勉強を続けていきたいものです。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerにWebサーバーを立てよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2/"/>
    <updated>2017-02-19T15:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/19/docker-for-mac-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>さて、今回は前回(<a href="http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/">Docker for Macをインストールしよう！</a>)構築したDocker内のUbuntuサーバの中で遊んでみます。<br/>
まずは、基本となるWebサーバを立てるところから始めたいと思います。</p>

<p>今回は最も有名であろう(Nginxも人気ですが&hellip;) <strong>Apache</strong> を利用したWebサーバの構築をしてみます。<br/>
限りなく常識に近いと思うものの、一応概要だけ紹介すると、Apacheとは下記の通りです。</p>

<ul>
<li>正式名所は「 <strong>Apache HTTP Server</strong> 」</li>
<li>Webサーバソフトウェア</li>
<li>Apache Licenseで無償で提供</li>
<li>2.2系と2.4系があるがモダンなのは <strong>2.4系</strong></li>
</ul>


<p>というところで早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Host Macからアクセスするためのポートフォワード設定</h3>

<p>これからApacheをインストールするわけですが、その前にDockerコンテナにポートフォワード設定をしてみましょう。<br/>
Docker for Macなら簡単にできます。</p>

<p>１．該当コンテナの設定を見ましょう</p>

<p><img src="/images/docker_port_forward_1.png" alt="設定を見る" /></p>

<p>２．Port設定を見ましょう</p>

<p><img src="/images/docker_port_forward_2.png" alt="Port設定を見る" /></p>

<p>３．ポートフォワードの設定を追加する</p>

<p><img src="/images/docker_port_forward_3.png" alt="ポートフォワードの設定を追加" /></p>

<p>上記では、<code>http://localhost:15600/</code>でMacからアクセスできるようにしています。<br/>
<code>localhost</code>でなく、具体的にIPアドレスを指定しても良いようですが、今回は特に必要ないのでこれでいきます。</p>

<h3>Apacheのインストール</h3>

<p>まずは当然のことながらインストール作業から始めます。<br/>
DockerのUbuntuコンテナを起動した後にログインして、下記コマンドを叩きましょう。</p>

<p>ログインはDockerアプリに含まれている <strong>Kitematic</strong> からもできますし、コマンドでもできます。</p>

<p>```javascript
// docker コンテナにログイン
$ docker exec -it &lt;&lt;コンテナ名>> bash</p>

<p>// apt-getのアップデート
$ apt-get update
// Apacheのインストール
$ apt-get install apache2
```</p>

<p>なぜ初めに<code>apt-get update</code>をやっているかと言うと、これをやらずに突き進もうとした際に下記エラーが発生したためです。</p>

<p>```javascript</p>

<h1>apt-get install apache2</h1>

<p>Reading package lists&hellip; Done
Building dependency tree     <br/>
Reading state information&hellip; Done
E: Unable to locate package apache2
```</p>

<p>きちんとApacheのインストールが完了したか確認するためにバージョンを見てみましょう。</p>

<p>```javascript
// バージョン確認方法(1)
$ apachectl -v
Server version: Apache/2.4.18 (Ubuntu)
Server built:   2016-07-14T12:32:26</p>

<p>// バージョン確認方法(2)
$ apache2 -v
Server version: Apache/2.4.18 (Ubuntu)
Server built:   2016-07-14T12:32:26
```</p>

<h3>Apacheの起動確認</h3>

<p>インストール後はデフォルトで起動していると思いますが、念のため確認しておきましょう。</p>

<p><code>javascript
$ /etc/init.d/apache2 status
 * apache2 is running
</code></p>

<p>因みに、初期状態では<code>start</code>や<code>restart</code>コマンドを実行したときに下記警告が表示されます。</p>

<p><code>javascript
$ /etc/init.d/apache2 restart
 * Restarting Apache httpd web server apache2                                                                                                                                                           AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using XX.XX.XX.XX. Set the 'ServerName' directive globally to suppress this message
</code></p>

<p>これを回避するためには設定ファイルに<code>ServerName</code>を定義する必要があります。<br/>
(警告は出るものの、起動には何ら問題はありません。)</p>

<p>下記のように設定ファイルを開きます。</p>

<p><code>javascript
// 設定ファイルを開く
$ vi /etc/apache2/apache2.conf
</code></p>

<p>続いて、<code>ServerName</code>を適当な場所に定義してやりましょう。</p>

<p>```javascript
// /etc/apache2/apache2.conf
// 省略</p>

<h1>Include list of ports to listen on</h1>

<p>Include ports.conf</p>

<p>ServerName xxx.com
// 省略
```</p>

<p>これにより、エラーなく起動や再起動できることを確認できるはずです。</p>

<p><code>javascript
$ /etc/init.d/apache2 restart
 * Restarting Apache httpd web server apache2  
</code></p>

<p>これでApacheが起動していることが確認できたので、GETリクエストを投げてアクセスしてみましょう。<br/>
Ubuntu用のApacheデフォルトページが返却されるはずです。</p>

<p>```javascript
$ curl <a href="http://127.0.0.1/">http://127.0.0.1/</a></p>

<p>&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Transitional//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</a>&rdquo;>
<html xmlns="http://www.w3.org/1999/xhtml">
  &hellip;
</html>
```</p>

<h3>Webページにアクセス</h3>

<p>冒頭でポートフォワード設定をしたので、Apacheが起動しているのであれば、Macからページを見れるはずです！<br/>
早速見てみましょう。<br/>
設定した<code>http://localhost:15600/</code>でアクセスすると下記のようにページが表示されます。</p>

<p><img src="/images/docker_apache_1.png" alt="DockerコンテナのWEBページ" /></p>

<h3>便利コマンド利用するためにモジュールをインストール</h3>

<p>Webサーバを構築する上で、あまりにもまっさらなUbuntuだったため幾つか必要なものをインストールする必要がありました。<br/>
その紹介もおまけ程度に書いておきます。</p>

<h4>lessのインストール</h4>

<p>毎回<code>cat</code>コマンドで中身を見る必要性がないこともあると思います。<br/>
流石に<code>less</code>くらいはインストールしておきます。</p>

<p>```javascript
// lessのインストール
$ apt-get install less</p>

<p>// lessのバージョン確認
$ less &mdash;help
```</p>

<h4>lessコマンドで色をつける</h4>

<p>ついでに<code>less</code>コマンドで色を付けて見やすくする方法を書いておきます。</p>

<p><code>javascript
// source-highlightのインストール
$ apt-get install source-highlight
</code></p>

<p>Dockerコンテナ内の環境変数は<code>.dockerenv</code>ファイル内に書きます。</p>

<p>```javascript
// .dockerenvに下記を追加</p>

<h1>Source-hilight with less</h1>

<p>export LESSOPEN=&ldquo;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&rdquo;
export LESS=&lsquo;-R&rsquo;
```</p>

<p>結果を反映させるために、下記コマンドを叩きましょう。</p>

<p><code>javascript
$ source ~/.dockerenv
</code></p>

<h4>vi/vimのインストール</h4>

<p>ファイルを作成する際に必ず必要になります。</p>

<p>```javascript
// vimのインストール
$ apt-get install vim</p>

<p>// vimのバージョン確認
$ vim -v
// viのバージョン確認
$ vi -v
```</p>

<h4>curlのインストール</h4>

<p><code>curl</code>は試しにHTTPリクエストを投げてみたいことがあると思ったのでインストールしてみました。</p>

<p>```javascript
// curlのインストール
$ apt-get install curl</p>

<p>// curlのバージョン確認
$ curl -V
curl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp
Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets
```</p>

<h3>まとめ</h3>

<p>さて一先ず本記事の目的は達成できました。<br/>
が、Apacheのあまりにも簡単な基礎部分しか見ていません。<br/>
引き続き、最低限の設定を見ていきたいと思っています。</p>

<p>と言ったところで本日はここまで。</p>

<h3>参考</h3>

<p>以下、ページを参考にさせて頂きました。</p>

<ul>
<li><a href="http://www.nemotos.net/?p=1100">Ubuntuでlessを使って構文をカラー表示する方法</a></li>
<li><a href="http://qiita.com/maemori/items/e7318b088b9e4bf22310">docker-machineコマンド</a></li>
<li><a href="https://docs.docker.com/kitematic/userguide/">Kitematic user guide</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker for Macをインストールしよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1/"/>
    <updated>2017-02-13T00:06:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/02/13/docker-for-mac-1</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は <strong>Docker for Mac</strong> についてメモ程度に学んだことを書き残しておきたいと思います。<br/>
<code>Docker for Mac</code>とはMacアプリとしてインストールできるDockerです。<br/>
今までは、MacでDockerを利用するために<code>Docker Toolbox</code>と<code>Virtual Box</code>をインストールする必要がありましたが、<code>Docker for Mac</code>の登場により、いろいろとやってくれそうな感があります。<br/>
(筆者もDocker自体にそんなに詳しいわけではないので、1つずつ見ていきたいと思います。)</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Docker for Macのインストール</h3>

<p>簡単かと思いきや、なぜか詰まることもあるので書きます。<br/>
インストールは<a href="https://docs.docker.com/docker-for-mac/">Docker公式ページ</a>から可能です。<br/>
公式ページを見ると、 <strong>Download Docker for Mac</strong> という文字が見つかります。<br/>
<code>Stable channel</code>と<code>Beta channel</code>の2つがあるのですが、筆者は最終的に<code>Beta channel</code>をインストールしました。<br/>
なぜなら、<code>Stable channel</code>では<code>docker run hello-world</code>が実行エラーになったためです&hellip;</p>

<p><img src="/images/docker_1.png" alt="Docker for Mac Betaのダウンロード" /></p>

<p>インストールが完了すると、macのツールバーにDockerのマークが出現します。</p>

<p><img src="/images/docker_2.png" alt="ツールバーにDockerマーク" /></p>

<p>Dockerが正しくインストールされたので下記コマンドでバージョンを確認してみましょう。</p>

<p>```javascript
$ docker &mdash;version
Docker version 1.13.1, build 092cba3</p>

<p>$ docker-compose &mdash;version
docker-compose version 1.11.1, build 7c5d5e4</p>

<p>$ docker-machine &mdash;version
docker-machine version 0.9.0, build 15fd4c7
```</p>

<p>続いて、Dockerが期待通りに動くことを確認するために下記コマンドを叩いてみましょう。<br/>
まずはDockerのバージョン確認です。</p>

<p>```javascript
$ docker version
Client:
 Version:      1.13.1
 API version:  1.26
 Go version:   go1.7.5
 Git commit:   092cba3
 Built:        Wed Feb  8 08:47:51 2017
 OS/Arch:      darwin/amd64</p>

<p>Server:
 Version:      1.13.1
 API version:  1.26 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   092cba3
 Built:        Wed Feb  8 08:47:51 2017
 OS/Arch:      linux/amd64
 Experimental: true
```</p>

<p><code>Client</code>と<code>Server</code>の両方のバージョンが確認できるようです。<br/>
(中身があまり変わらないように見えるけど&hellip;)</p>

<p>続いて、ローカルに存在するDockerコンテナの確認です。</p>

<p><code>javascript
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</code></p>

<p>何もないと当然ですが、上記のように何も表示されません。<br/>
最も初歩であろう<code>hello-world</code>コマンドです。</p>

<p>```javascript
$ docker run hello-world
Unable to find image &lsquo;hello-world:latest&rsquo; locally
latest: Pulling from library/hello-world
78445dd45222: Pull complete
Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
Status: Downloaded newer image for hello-world:latest</p>

<p>Hello from Docker!
This message shows that your installation appears to be working correctly.</p>

<p>To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &ldquo;hello-world&rdquo; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the</p>

<pre><code>executable that produces the output you are currently reading.
</code></pre>

<ol>
<li>The Docker daemon streamed that output to the Docker client, which sent it
to your terminal.</li>
</ol>


<p>To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash</p>

<p>Share images, automate workflows, and more with a free Docker ID:
 <a href="https://cloud.docker.com/">https://cloud.docker.com/</a></p>

<p>For more examples and ideas, visit:
 <a href="https://docs.docker.com/engine/userguide/">https://docs.docker.com/engine/userguide/</a>
```</p>

<p>ローカルに存在しないとダウンロードを始めます。<br/>
冒頭に述べた<code>Stable channel</code>では、ここで全くダウンロードができませんでした。<br/>
何はともあれ、これで <strong>Docker for Mac</strong> のインストール完了です。</p>

<h3>Docker for Macを使ってUbuntuをインストールしてみよう</h3>

<p>先程インストールした<code>hello-world</code>の結果の中に<code>To try something more ambitious, you can run an Ubuntu container with:</code>とありました。<br/>
興味本位ですが、コマンド叩いてみましょう。</p>

<p><code>javascript
$ docker run -it ubuntu bash
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
8aec416115fd: Pull complete
695f074e24e3: Pull complete
946d6c48c2a7: Pull complete
bc7277e579f0: Pull complete
2508cbcde94b: Pull complete
Digest: sha256:71cd81252a3563a03ad8daee81047b62ab5d892ebbfbf71cf53415f29c130950
Status: Downloaded newer image for ubuntu:latest
root@3e95790a60cb:/#
</code></p>

<p>これで<code>Ubuntu</code>がインストールできたようです。<br/>
しかも<code>Ubuntu</code>の中に入れてますね！</p>

<p>本当に<code>Ubuntu</code>インストールできたか確かめるためにもコマンドを叩いてみましょう。</p>

<p>```javascript
root@3e95790a60cb:/# cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION=&ldquo;Ubuntu 16.04.1 LTS&rdquo;</p>

<p>root@3e95790a60cb:/# arch
x86_64</p>

<p>root@3e95790a60cb:/# uname -a
Linux 3e95790a60cb 4.9.8-moby #1 SMP Wed Feb 8 09:59:13 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
```</p>

<p>バッチリですね！！<br/>
(正直な話、<code>uname -a</code>とか数年ぶりに叩いた気がして懐かしい&hellip;笑)</p>

<p>これで後はもう様々な便利なものをインストールして楽しめそうですね。</p>

<h3>Kitematicの紹介</h3>

<p>メニューバーのDockerマークをクリックすると、Docker for Macのメニュー項目が表示されます。<br/>
その中に<code>Kitematic</code>という聞きなれないものがあると思います。<br/>
こちらをインストールするとターミナルからコマンドを叩かずとも、GUIからクリック操作で様々なことが可能になります。</p>

<p><img src="/images/docker_3.png" alt="Dockerのメニュー" /></p>

<p>起動してログインすると(初めはアカウントがないと思うので作成しましょう。)、下記のような画面が表示されます。</p>

<p><img src="/images/docker_4.png" alt="Kitematic" /></p>

<p>最早、見るだけで心躍りますよね！？<br/>
様々なものをインストールして楽しめそうな気しかしません！</p>

<p>因みに、下記のようにコンテナの起動などが可能です。</p>

<p><img src="/images/docker_5.png" alt="KitematicでDockerコンテナ起動" /></p>

<h3>まとめ</h3>

<p>さて、今回は珍しく基盤よりなDockerで遊んでみました。<br/>
この付近の知識はあって困ることはないですし、Dockerかなり一般的になってきているので引き続きブログの題材として取り上げていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
