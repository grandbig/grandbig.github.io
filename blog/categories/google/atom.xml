<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: google | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2017-09-18T02:10:09+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Firebase NotificationをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/09/18/firebase-notification/"/>
    <updated>2017-09-18T00:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/09/18/firebase-notification</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はFirebase Notificationについて見ていきたいと思います。<br/>
一昔前であれば、プロダクトごとにNotificationの仕組みを作り込んだり、共通基盤としてNotificationプロジェクトを推進していたりといった会社が多かった気がします。<br/>
また、未だにリッチなNotificationのプロダクトを生業として利益を上げている会社もあるので、それだけNotificationの仕組みは自作ではなくあるものを使いたいという需要が大きいのでしょう。<br/>
しかしながら、Firebaseの登場により、Notificationプロダクト市場もより加熱化しているのではないでしょうか。</p>

<p>筆者的にはGoogleが出す、それも無料のプロダクトであるわけなので、使わない手はないと思うわけです。<br/>
なんて偉そうなことを言いつつ、FireabseによるNotificationの仕組みを利用したことがなかったので、今回試しに使ってみることにしました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Firebaseの導入</h3>

<p>こちらの内容は<a href="https://grandbig.github.io/blog/2017/05/14/firebase-ios/">以前書いた記事</a>に任せたいと思います。</p>

<h3>APNs証明書の作成</h3>

<p>こちらに関しては、様々なサイトにて説明がされているので、そちらを見るなどした方が早いので省きます。<br/>
例えば <a href="http://qiita.com/natsumo/items/d5cc1d0be427ca3af1cb#6-apns%E7%94%A8%E8%A8%BC%E6%98%8E%E6%9B%B8cer%E3%81%AE%E4%BD%9C%E6%88%90">プッシュ通知に必要な証明書の作り方2017</a>など参考にすると良いでしょう。</p>

<h3>Firebase Notificationの利用</h3>

<p>さて、本題です。<br/>
Firebase Notificationを利用するための手順について説明します。</p>

<p>① 作成したAPNs証明書をダウンロードする<br/>
先程作成したAPNs証明書はキーチェーンに登録していると思います。<br/>
(Apple Developer Programで作成したAPNs証明書は必ずDLしてキーチェーンに登録しましょう。)<br/>
キーチェーンを開いて、該当の証明書をダウンロードします。</p>

<p>該当のAPNs証明書は <code>Apple Development IOS Push Services: xxxxx</code> のようになっているものです。<br/>
<img src="/images/firebase_notificcation_ios_1.png" alt="キーチェーンを開く" /></p>

<p>右クリックして書き出すを選択します。<br/>
<img src="/images/firebase_notificcation_ios_2.png" alt="証明書を書き出す" /></p>

<p>ファイル名とパスワードをつけて保存します。<br/>
<img src="/images/firebase_notificcation_ios_3.png" alt="ファイル名とパスワードの付け方" /></p>

<p>② ダウンロードしたAPNs証明書をFirebaseに登録する</p>

<p>FirebaseのConsoleを開き、設定画面に遷移します。<br/>
<img src="/images/firebase_notificcation_ios_4.png" alt="Firebase Consoleの設定画面" /></p>

<p>クラウドメッセージングタブを開き、APNs証明書をアップロードします。<br/>
<img src="/images/firebase_notificcation_ios_5.png" alt="Firebase Console クラウドメッセージングタブ" /></p>

<p>③ Firebaseの必要ライブラリを導入する<br/>
Firebaseの導入で<code>Core</code>ライブラリはインストールできているかもしれませんが、Notificationでは<code>Messaging</code>が必要になります。<br/>
よって、<code>Podfile</code>を下記のように修正して、<code>pod update</code>をする必要があります。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;NotificationSample&rdquo; do
  # Normal libraries
  pod &lsquo;Firebase/Core&rsquo;
  pod &lsquo;Firebase/Messaging&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "NotificationSampleTests"
target "NotificationSampleUITests"
</code></pre>

<p>  end
end
```</p>

<p>④ ソースコードにFirebase Notificationが利用できるように実装する<br/>
続いて、ソースコードの設定です。</p>

<p>```objective-c
// AppDelegate.swift
import UIKit
import Firebase
import UserNotifications</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate, MessagingDelegate {
  var window: UIWindow?
  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) &ndash;> Bool {</p>

<pre><code>// リモート通知 (iOS10に対応)
let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
UNUserNotificationCenter.current().requestAuthorization(
  options: authOptions,
  completionHandler: {_, _ in })

// UNUserNotificationCenterDelegateの設定
UNUserNotificationCenter.current().delegate = self
// FCMのMessagingDelegateの設定
Messaging.messaging().delegate = self

// リモートプッシュの設定
application.registerForRemoteNotifications()
// Firebase初期設定
FirebaseApp.configure()

// アプリ起動時にFCMのトークンを取得し、表示する
let token = Messaging.messaging().fcmToken
print("FCM token: \(token ?? "")")

return true
</code></pre>

<p>  }</p>

<p>  // 省略</p>

<p>  func userNotificationCenter(_ center: UNUserNotificationCenter,</p>

<pre><code>                            willPresent notification: UNNotification,
                            withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&gt; Void) {
print("フロントでプッシュ通知受け取ったよ")
</code></pre>

<p>  }</p>

<p>  func messaging(_ messaging: Messaging, didRefreshRegistrationToken fcmToken: String) {</p>

<pre><code>print("Firebase registration token: \(fcmToken)")
</code></pre>

<p>  }
}
```</p>

<p>たったのこれだけでプッシュ通知の受信ができるようになります。</p>

<h3>Firebase Notificationを利用する</h3>

<p>設定が完了したため、Firebaseからプッシュ通知を送ってみましょう。</p>

<p>方法は簡単です。</p>

<p>① 左メニューから <code>Notification</code> を選択する<br/>
② 「新しいメッセージ」を選択する<br/>
③ 必要項目を入力して「メッセージを送る」を選択する</p>

<p><img src="/images/firebase_notificcation_ios_6.png" alt="Firebase Consoleからプッシュ通知を送る" /></p>

<p>これにより、下図のようにプッシュが届くことを確認できます。<br/>
<img src="/images/firebase_notificcation_ios_7.png" alt="端末にプッシュ通知が届く" /></p>

<h3>FirebaseにAPNs Keyを登録する方法</h3>

<p>さて、上記まででは、APNs証明書を作成して、Firebaseに登録する方法を説明しましたが、実はAPNs証明書よりも <code>APNs Key</code> というものの利用を推奨されています。<br/>
なので、こちらの方法も説明しておきます。</p>

<p>作成方法はいたって簡単です。</p>

<p>① Apple Developer Programの左メニューから<code>Keys &gt; All</code>を選択する<br/>
② 「＋」ボタンで新規作成する<br/>
③ Keyの名称を設定する<br/>
④ Service種別として<code>APNs</code>を選択する<br/>
⑤ Continueボタンを選択して作成する</p>

<p><img src="/images/firebase_notificcation_ios_8.png" alt="APNs Keyの作成方法" /></p>

<p>上記で作成した<code>APNs Key</code>をFirebase Console上で設定します。</p>

<p>Firebase Console > 設定 > クラウドメッセージング > iOSアプリの設定から<code>APNs認証キー</code>に設定します。</p>

<p><img src="/images/firebase_notificcation_ios_9.png" alt="APNs認証キーを設定" /></p>

<p>因みに、設定時に利用するIDはそれぞれ下記から取得します。</p>

<p><img src="/images/firebase_notificcation_ios_10.png" alt="キーID" /><br/>
<img src="/images/firebase_notificcation_ios_11.png" alt="App ID Prefix" /></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
まだまだFirebase Console上からプッシュできるNotificationにも制限があるようですが、複雑なことをしない例えば「一斉お知らせ機能」のような形で利用するのであれば非常に良いのではないでしょうか？<br/>
今後もバージョンアップして使いやすくなることを期待しつつ、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geocoding APIとDirections APIを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/17/google-maps-api/"/>
    <updated>2017-07-17T22:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/17/google-maps-api</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日はGoogleが提供している<a href="https://developers.google.com/maps/documentation/geocoding/intro?hl=ja">Geocoding API</a>と<a href="https://developers.google.com/maps/documentation/directions/?hl=ja">Directions API</a>をiOSで使ってみた話を書きます。</p>

<p>まずは、Google Cloud Platform > API Managerから <strong>Geocoding API</strong> と <strong>Directions API</strong> を有効にしましょう。</p>

<p><img src="/images/google_api_1.png" alt="API Manager" /></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Geocoding APIの利用</h3>

<p>Googleから提供されたAPIを利用し、それがJSON形式が返却されるため、<code>Alamofire</code>と<code>SwiftyJSON</code>をあわせて利用します。</p>

<p>因みに、APIキーは<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>で説明した通り<code>key.plist</code>に記載することでGitHubにアップすることを避けています。</p>

<p>今回実装する処理は <strong>住所を緯度/経度に変換する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Geocoding {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/geocode/json?language=ja">https://maps.googleapis.com/maps/api/geocode/json?language=ja</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   ジオコーディング</p>

<ul>
<li> parameter address: 住所</li>
<li><p> parameter completion: 緯度/経度を返すcallback
*/
func geocoding(address: String, completion: @escaping ((CLLocationCoordinate2D) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
Alamofire.request(requestURL, method: .get, parameters: [&ldquo;address&rdquo;: address], encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)</p>

<p>  guard let latitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lat&rdquo;].double else {
    return
  }</p>

<p>  guard let longitude = json[&ldquo;results&rdquo;][0][&ldquo;geometry&rdquo;][&ldquo;location&rdquo;][&ldquo;lng&rdquo;].double else {
    return
  }</p>

<p>  completion(CLLocationCoordinate2D.init(latitude: latitude, longitude: longitude))
}
}<br/>
}
```</p></li>
</ul>


<h3>Directions APIの利用</h3>

<p>ここで実装する処理は <strong>開始地点から終了地点までの道順を取得する処理</strong> になります。</p>

<p>```objective-c
import CoreLocation
import Alamofire
import SwiftyJSON</p>

<p>class Direction {</p>

<p>  /// API Key
  private var apiKey: String = String()
  /// Geocoding APIのベースURL
  private let baseURL: String = &ldquo;<a href="https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking">https://maps.googleapis.com/maps/api/directions/json?language=ja&amp;mode=walking</a>&rdquo;</p>

<p>  /// 初期化処理
  init() {</p>

<pre><code>if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleWebApiKey"] as? String {
      self.apiKey = apiKey
    }
  }
}
</code></pre>

<p>  }</p>

<p>  /**
   目的地までの道順を取得</p>

<ul>
<li> parameter from: 開始地点</li>
<li> parameter to: 終了地点</li>
<li><p> parameter completion: 道順を返すcallback
*/
func getRoutes(from: CLLocationCoordinate2D, to: CLLocationCoordinate2D, completion: @escaping ((JSON) &ndash;> Void)) {
let requestURL = &ldquo;(baseURL)&amp;key=(String(describing: self.apiKey))&rdquo;
let parameters = [&ldquo;origin&rdquo;: &ldquo;(from.latitude),(from.longitude)&rdquo;, &ldquo;destination&rdquo;: &ldquo;(to.latitude),(to.longitude)&rdquo;]
Alamofire.request(requestURL, method: .get, parameters: parameters, encoding: URLEncoding.default, headers: nil).responseJSON { response in
  let json = JSON(response.result.value as Any)
  let steps = json[&ldquo;routes&rdquo;][0][&ldquo;legs&rdquo;][0][&ldquo;steps&rdquo;]</p>

<p>  completion(steps)
}
}
}
```</p></li>
</ul>


<h3>まとめ</h3>

<p>今回はGoogleが提供している <strong>Geocoding API</strong> と <strong>Directions API</strong> について見てみました。<br/>
Google Mapを利用するサービスを考えると案外必要となる場面が多いんですよね。<br/>
知っておいて損はないかと思います。<br/>
本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2/"/>
    <updated>2017-07-16T23:43:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/07/16/google-maps-sdk-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>前回、<a href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/">Google Maps SDK for iOSを導入してみよう！</a>について説明しましたが、今回はもう一歩踏み込んで使い方を見ていこうと思います。</p>

<p>これまた本家の<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">Google スタートガイド</a>を見ればできることも多いのですが、見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Mapにマーカを配置する</h3>

<p>Google Mapを使う上で必ずと言っていいほど利用する機能である「マーカの配置」を見ていきましょう。<br/>
これは実に簡単で「マーカを配置するメソッド」はたった下記だけで実装できます。</p>

<p>```objective-c
/**
  マップにマーカを設置する処理</p>

<ul>
<li>parameter title: マーカのタイトル</li>
<li>parameter coordinate: 位置</li>
<li>parameter iconName: アイコン名</li>
<li>parameter completion: Callback
*/
private func putMarker(title: String?, coordinate: CLLocationCoordinate2D, iconName: String?, completion: @escaping ((GMSMarker) &ndash;> Void)) {
// マーカの生成
let marker = GMSMarker()
marker.title = title
marker.position = coordinate
if iconName != nil {
// アイコン名が指定されている場合は画像を設定
marker.icon = UIImage.init(named: iconName!)
}
marker.map = self.mapView
completion(marker)
}
```</li>
</ul>


<h3>Google Mapからマーカを削除する</h3>

<p>逆にGoogle Mapからマーカを削除する場合はどうするかを見ていきます。<br/>
これも簡単なので、下記のように実装できます。</p>

<p>```objective-c
/**
  マップからマーカを削除する処理</p>

<ul>
<li>parameter marker: マーカ
*/
private func deleteMarker(marker: GMSMarker) {
marker.map = nil
}
```</li>
</ul>


<h3>2つのマーカが入る縮尺にGoogle Mapを変更する</h3>

<p>こちらはGoogle Mapを捉えるカメラの位置を移動することで実現可能です。</p>

<p>```objective-c
@IBOutlet weak var mapView: GMSMapView!</p>

<p>&lt;省略></p>

<p>/**
  現在地と指定した場所の両方が入るようにマップの縮尺を変更する処理</p>

<ul>
<li>parameter coordinate: 場所
*/
private func changeCameraPosition(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D) {
let bounds = GMSCoordinateBounds(coordinate: fromCoordinate, coordinate: toCoordinate)
let margin: CGFloat = 50.0  // 上下左右に設定するマージン
guard let camera = self.mapView.camera(for: bounds, insets: UIEdgeInsets(top: margin, left: margin, bottom: margin, right: margin)) else {
return
}
self.mapView.camera = camera
}
```</li>
</ul>


<h3>Google Mapに線を描画する</h3>

<p>これもそんなに難しくありません。</p>

<p>```objective-c
@IBOutlet weak var mapView: GMSMapView!
private var routePath: GMSPolyline = GMSPolyline()</p>

<p>&lt;省略></p>

<p>/**
  マップへの線描画</p>

<ul>
<li>parameter fromCoordinate: 起点位置</li>
<li>parameter toCoordinate: 終点位置
*/
private func drawPolyline(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D) {</li>
</ul>


<p>  let path = GMSMutablePath()
  path.add(fromCoordinate)
  path.add(toCoordinate)</p>

<p>  self.routePath = GMSPolyline(path: path)
  self.routePath.strokeWidth = 3.0
  self.routePath.map = self.mapView
}
```</p>

<h3>Google Mapから線を削除する</h3>

<p>先程描画した線を削除するには下記で実行できます。</p>

<p>```objective-c
private var routePath: GMSPolyline = GMSPolyline()</p>

<p>&lt;省略></p>

<p>/<em>*
  マップへの描画線を削除する処理
</em>/
private func clearRoutePath() {
  self.routePath.map = nil
}
```</p>

<h3>緯度/経度とピクセル座標の相互変換</h3>

<p>これは利用ケースが限られるかもしれませんが、覚えておくと役に立つ処理です。<br/>
Google Mapは複数のマップ座標を扱うことができます。</p>

<ul>
<li>緯度/経度を用いて地球上にプロット</li>
<li>世界座標: メルカトル図法を用いて緯度/経度を地図に変換した座標</li>
<li>ピクセル座標: 世界座標を指定したズームレベルで変換した座標</li>
<li>タイル座標: 地図を複数の画像に分けたときの座標</li>
</ul>


<p>ほとんどの場合は緯度/経度をマップにプロットすると思いますが、<br/>
筆者は先日ピクセル座標を利用する場面がありました。</p>

<p>それは、「Google Mapの上に透過Viewが載せられた状態でGoogle Mapにマーカを配置する」というものでした。
今回はこれを例に変換方法を見ていきましょう。</p>

<h4>ピクセル座標を緯度/経度に変換</h4>

<p>これはGoogle Maps SDKに用意されています。</p>

<p><code>objective-c
let pressPoint = CGPoint(x: 100, y: 200)
let coordinate = self.mapView.projection.coordinate(for: pressPoint)
</code></p>

<p>たったのこれだけでピクセル座標を緯度/経度に変換できるんです。</p>

<h4>緯度/経度をピクセル座標に変換</h4>

<p>これもGoogle Maps SDKに用意されています。</p>

<p><code>objective-c
let coordinate = CLLocationCoordinate2D(latitude: 35, longitude: 139)
let point = self.mapView.projection.point(for: coordinate)
</code></p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
JavaScriptでGoogle Maps APIを利用していた方々も臆することなく使えるような簡単さだと思います。<br/>
次回はGeocoding APIやDirection APIを見ていきたいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps SDK for iOSを導入してみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/06/18/google-maps-sdk/"/>
    <updated>2017-06-18T19:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/06/18/google-maps-sdk</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>本日は<a href="https://developers.google.com/maps/documentation/ios-sdk/?hl=ja">Google Maps SDK for iOS</a>の導入の仕方を書きたいと思います。<br/>
(<a href="https://grandbig.github.io/blog/2014/01/27/googlemapssdk2/">3年以上前</a>に遊んでいたようですが、全く記憶にない&hellip;)</p>

<p>基本的には、<a href="https://developers.google.com/maps/documentation/ios-sdk/start?hl=ja">本家のスタートガイド</a>に従って進めるだけで特に問題なく<code>Google Map</code>を実装できるでしょう。<br/>
筆者の場合は<code>Storyboard</code>を使いたかったので少し気をつける必要がありました。<br/>
では早速見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>Google Maps SDK for iOSの導入</h3>

<p>実際に手順を書いていきます。</p>

<p><strong>１．Xcodeでプロジェクトを作成します。</strong><br/>
<strong>２．<code>Podfile</code>を作成します。</strong></p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;GoogleMapsSample&rdquo; do
  # Normal libraries
  pod &lsquo;GoogleMaps&rsquo;
  pod &lsquo;GooglePlaces&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "GoogleMapsSampleTests"
target "GoogleMapsSampleUITests"

pod 'Quick'
pod 'Nimble'
</code></pre>

<p>  end
end</p>

<p>post_install do |installer|
  installer.pods_project.targets.each do |target|</p>

<pre><code>target.build_configurations.each do |config|
  config.build_settings['SWIFT_VERSION'] = '3.0'
end
</code></pre>

<p>  end
end
```</p>

<p><strong>３．<code>pod install</code>で必要な<code>Framework</code>をインストールします。</strong><br/>
<strong>４．APIキーを取得します。</strong><br/>
スタートガイドに従って下記ボタンをクリックすればAPIキーを取得することができます。</p>

<p><img src="/images/google-maps-sdk-1.png" alt="APIキーの取得" /></p>

<p><strong>５．アプリのAPIキーを読み取らせる処理を導入します。</strong><br/>
筆者の場合、基本的なソースコードは<code>GitHub</code>に公開したかったため、そのままAPIキーをべた書きするわけにいきませんでした。<br/>
なので、<code>key.plist</code>ファイルを作成し、このファイルを<code>GitHub</code>にアップしないという手法を取ることにしました。</p>

<p>下図のように<code>key.plist</code>ファイルを作成</p>

<p><img src="/images/google-maps-sdk-2.png" alt="key.plistの作成" /></p>

<p>また下図のようなフォルダ構成で<code>Info.plist</code>と同じ階層に<code>key.plist</code>を配置しています。<br/>
<img src="/images/google-maps-sdk-6.png" alt="フォルダ構成" /></p>

<p><code>AppDelegate.swift</code>で<code>key.plist</code>からAPIキーを読み込みます。</p>

<p>```objective-c
// AppDelegate.swift
import UIKit
import GoogleMaps
import GooglePlaces</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<p>  var window: UIWindow?</p>

<p>  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) &ndash;> Bool {</p>

<pre><code>// Override point for customization after application launch.

if let path = Bundle.main.path(forResource: "key", ofType: "plist") {
  if let dic = NSDictionary(contentsOfFile: path) as? [String: Any] {
    if let apiKey = dic["googleMapsApiKey"] as? String {
      GMSServices.provideAPIKey(apiKey)
      GMSPlacesClient.provideAPIKey(apiKey)
    }
  }
}

return true
</code></pre>

<p>  }</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p><strong>６．<code>Storyboard</code>に<code>Google Map</code>を追加します。</strong><br/>
本家スタートガイドだと<code>Storyboard</code>を利用しない方式での説明が書かれていましたが、筆者は<code>Storyboard</code>を利用しました。</p>

<p><img src="/images/google-maps-sdk-3.png" alt="StoryboardにGoogle Mapを配置" /></p>

<p>これで導入が完了です。</p>

<h3>Google Cloud PlatformのAPI Managerで詳細設定</h3>

<p>先程、本家のスタートガイドからAPIキーを取得していましたが、<a href="https://console.cloud.google.com/home">Google Cloud Platform</a>内の<code>API Manager</code>からAPIキーに対して詳細設定をすることができます。<br/>
例えば、スタートガイドから取得しただけでは、APIキーの用途が無制限になっています。<br/>
この状態では意図しない大量利用に繋がる可能性もあるため、iOSアプリでのみ利用するなど詳細を設定した方が良いでしょう。</p>

<p><code>API Manager</code>ページには下記のように遷移できます。<br/>
<img src="/images/google-maps-sdk-4.png" alt="Google Cloud Platform" /></p>

<p>APIキーの詳細設定は下記の通りです。<br/>
<img src="/images/google-maps-sdk-5.png" alt="APIキーの詳細設定" /></p>

<h3>Google Mapで初期描画時の中心位置を現在地にしてみる</h3>

<p>Apple標準で用意されている<code>MapKit</code>であれば、</p>

<p><code>objective-c
self.mapView.setUserTrackingMode(MKUserTrackingMode.follow, animated: true)
</code></p>

<p>とすれば良いだけでした。<br/>
しかし、<code>Google Map</code>では同様の手立てがなさそうなので、下記のように対応しました。</p>

<p>```objective-c
// ViewController.swift
import UIKit
import GoogleMaps
import GooglePlaces</p>

<p>class ViewController: UIViewController, GMSMapViewDelegate, CLLocationManagerDelegate {</p>

<p>  @IBOutlet weak var mapView: GMSMapView!
  private var locationManager: CLLocationManager?
  private var currentLocation: CLLocation?
  private var placesClient: GMSPlacesClient!
  private var zoomLevel: Float = 15.0
  /// 初期描画の判断に利用
  private var initView: Bool = false</p>

<p>  override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()
// Do any additional setup after loading the view, typically from a nib.

// GoogleMapの初期化
self.mapView.isMyLocationEnabled = true
self.mapView.mapType = GMSMapViewType.normal
self.mapView.settings.compassButton = true
self.mapView.settings.myLocationButton = true
self.mapView.delegate = self

// 位置情報関連の初期化
self.locationManager = CLLocationManager()
self.locationManager?.desiredAccuracy = kCLLocationAccuracyBest
self.locationManager?.requestAlwaysAuthorization()
self.locationManager?.distanceFilter = 50
self.locationManager?.startUpdatingLocation()
self.locationManager?.delegate = self

self.placesClient = GMSPlacesClient.shared()
</code></pre>

<p>  }</p>

<p>  override func didReceiveMemoryWarning() {</p>

<pre><code>super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
</code></pre>

<p>  }</p>

<p>  // MARK: CLLocationManagerDelegate
  func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {</p>

<pre><code>if !self.initView {
  // 初期描画時のマップ中心位置の移動
  let camera = GMSCameraPosition.camera(withTarget: (locations.last?.coordinate)!, zoom: self.zoomLevel)
  self.mapView.camera = camera
  self.locationManager?.stopUpdatingLocation()
  self.initView = true
}
</code></pre>

<p>  }
}
```</p>

<p>これは<code>viewDidLoad</code>時に<code>startUpdatingLocation()</code>で位置情報の取得を開始し、取得したタイミングである<code>didUpdateLocations</code>内で位置情報を<code>camera</code>に設定しています。<br/>
(もっと良い方法がありそうな気もしますが、一旦これで様子見&hellip;)</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか？<br/>
これから<code>Google Maps SDK for iOS</code>をバシバシ使っていきたいと思っているので理解が進み次第、続きを書いていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FirebaseをiOSで使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2017/05/14/firebase-ios/"/>
    <updated>2017-05-14T16:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2017/05/14/firebase-ios</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今や商用で利用している人も珍しくないであろうFirebaseを触ってみようと思います！<br/>
と言うのも、最近Stackoveflowを眺めている時にFirebaseに関する質問を時たま見かけるようになったからです。<br/>
(筆者はまともにFirebaseを使ったことがないため、この機会に使ってみようと思い立ちました。)</p>

<p>ということで、初歩の初歩から見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>


<!-- more -->


<h3>Firebaseの導入</h3>

<p>まずは何と言っても利用方法ですよね？<br/>
ほとんどGoogleが用意してくれているため、本当に簡単にできます。</p>

<p>１．Firebaseの公式ページにアクセス<br/>
まずは、<a href="https://console.firebase.google.com/?hl=ja">Firebaseの公式ページ</a>に遷移して、新規プロジェクトを作成しましょう。</p>

<p><img src="/images/firebase_ios_1.png" alt="Firebaseの新規プロジェクトを作成" /></p>

<p>２．iOSアプリにFirebaseを追加<br/>
１で新規プロジェクトが作成できたため、続いてiOSアプリにFirebaseを追加しましょう。</p>

<p>追加対象のXcodeプロジェクトを作成します。<br/>
<img src="/images/firebase_ios_2.png" alt="Xcodeプロジェクトの作成" /></p>

<p>Firebase管理ページから「iOSアプリにFirebaseを追加」を選択します。<br/>
<img src="/images/firebase_ios_3.png" alt="iOSアプリにFirebaseを追加" /></p>

<p>plistファイルをDLしてXcodeプロジェクトに追加します。<br/>
<img src="/images/firebase_ios_4.png" alt="plistファイルをXcodeプロジェクトに追加" /></p>

<p>続いて、<code>CocoaPods</code>でFrameworkをインストールします。<br/>
<img src="/images/firebase_ios_5.png" alt="CocoaPodsでFrameworkを追加" /></p>

<p><code>Podfile</code>には下記を記載しました。</p>

<p>```objective-c</p>

<h1>Podfile</h1>

<p>use_frameworks!</p>

<p>target &ldquo;FirebaseSample&rdquo; do
  # Normal libraries
  pod &lsquo;Firebase/Core&rsquo;</p>

<p>  abstract_target &lsquo;Tests&rsquo; do</p>

<pre><code>inherit! :search_paths
target "FirebaseSampleTests"
target "FirebaseSampleUITests"
</code></pre>

<p>  end
end
```</p>

<p>そして、<code>.xcworkspace</code>ファイルを開いて、下図の指示の通り<code>AppDelegate.swift</code>にコードを追加します。</p>

<p><img src="/images/firebase_ios_6.png" alt="AppDelegate.swiftにコードを追加" /></p>

<p>```objective-c
import UIKit
import Firebase // ここを追記</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<pre><code>var window: UIWindow?

func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {
    // Override point for customization after application launch.
    FIRApp.configure()　// ここを追記
    return true
}
</code></pre>

<p>}
```</p>

<p>これでFirebase管理画面にiOSプロジェクトとの紐付けが完了したことがわかります。</p>

<p><img src="/images/firebase_ios_7.png" alt="iOSプロジェクトへのFirebase紐付け完了" /></p>

<h3>Firebaseの導入を確認</h3>

<p>ここまででFirebaseの導入が完了したものの、正しく導入できたかどうかわからないかと思います。<br/>
そういうときには<code>DebugView</code>を利用しましょう。</p>

<p>１．XcodeプロジェクトにFirebaseのデバッグ設定を追加<br/>
Target > Edit Scheme > Run > Arguments を見てみましょう。</p>

<p><img src="/images/firebase_ios_8.png" alt="Firebaseデバッグ設定を追加" /></p>

<p><code>-FIRDebugEnabled</code>をONにしておくことでデバッグが可能になります。<br/>
デバッグ機能を利用しない場合は明示的に<code>-FIRDebugDisabled</code>をONにしましょう。<br/>
(<a href="https://support.google.com/firebase/answer/7201382?hl=ja&amp;utm_id=ad">Google公式ページ</a>によると一度デバッグ機能を有効化すると<code>-FIRDebugDisabled</code>を指定しないと無効化しないそうです。)</p>

<p>２．Xcodeからデバッグ状況を確認<br/>
上記設定を追加した状態で実機でアプリを起動してみましょう。<br/>
すると、Xcodeのコンソールログ欄に下図のようにログが出力されるようになります。</p>

<p><img src="/images/firebase_ios_9.png" alt="Xcodeにログが出力されます" /></p>

<p>３．Firebase管理サイトでデバッグ状況を確認<br/>
Firebase管理サイトからもデバッグ状況を確認できます。</p>

<p><img src="/images/firebase_ios_10.png" alt="Firebase管理サイトでデバッグ状況を確認" /></p>

<h3>まとめ</h3>

<p>これでFirebaseをiOSに追加することができました。非常に簡単ですね！<br/>
サイドメニューを見るだけでも、非常に多くの機能を有しているようなので、少しずつ試してみたいと思いますが、まずは導入まで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
