<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webview | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/webview/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-02-12T00:39:12+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(SunSpider 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/02/wkwebview3/"/>
    <updated>2014-10-02T00:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/02/wkwebview3</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日は<a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
今回はGoogle Octane 2.0と同じく下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<!--more-->


<p>結果は下記になりました。</p>

<p>Totalとしての結果は下記になりました。<br/>
<img src="/images/wkwebview_bench2.png" alt="Total結果" /></p>

<p>細かく見ていくと、<br/>
<img src="/images/wkwebview_bench3.png" alt="項目別結果" /><br/>
という結果になりました。</p>

<p>これから</p>

<ul>
<li>iPhone5とiPhone6で差がある</li>
<li>iOSバージョン別に比較すると、<strong>UIWebView &lt; Safari = WKWebView</strong>となる</li>
</ul>


<p>ということが言えます。</p>

<p>Google Octane 2.0でもiPhone6で試してみる価値がありそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(Google Octane2.0 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/23/wkwebview2/"/>
    <updated>2014-09-23T21:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/23/wkwebview2</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日はGoogle Octane2.0を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
まずは、Google Octane2.0とは何かから説明しましょう。<br/>
Octane2.0とはGoogleからオープンソース提供している。ブラウザのパフォーマンスを測定するJavaScriptベンチマークスイートのことです。昨年、バージョン2.0が後悔され、これまでのテスト項目13から17への増えました。<br/>
では、そのテスト項目とは何があるのか説明しましょう。</p>

<!--more-->


<ul>
<li>Richards:

<ul>
<li>OSのタスクディスパッチ(プロセッサが、実行するタスクを切り替える)・シミュレーション・ベンチマーク</li>
<li><a href="http://www.cl.cam.ac.uk/~mr10/">Martin Richards</a>によって<a href="http://ja.wikipedia.org/wiki/BCPL">BCPL</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/richards.js?r=19">ソースコード</a></li>
</ul>
</li>
<li>Deltable:

<ul>
<li>単変数の<a href="http://constraints.cs.washington.edu/deltablue/">制約解法</a></li>
<li>John MaloneyとMario Wolczkoによって<a href="http://ja.wikipedia.org/wiki/Smalltalk">Smalltalk</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/deltablue.js">ソースコード</a></li>
</ul>
</li>
<li>Raytrace:

<ul>
<li>Adam Burmisterのコードを元に作成されたレイトレース(3次元空間内を伝わる波の伝播経路を追跡するシミュレーション)・ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/raytrace.js">ソースコード</a></li>
</ul>
</li>
<li>Regexp:

<ul>
<li>正規表現ベンチマーク</li>
<li>最も人気のある50のWebページから正規表現の処理を抽出して作成</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/regexp.js">ソースコード</a></li>
</ul>
</li>
<li>NavierStokes:

<ul>
<li>二次ナビエ・ストークス方程式解法</li>
<li>倍精度(64ビットの浮動小数点数表現)配列を大量に処理</li>
<li>Oliver Huntのコードを元にしている</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/navier-stokes.js">ソースコード</a></li>
</ul>
</li>
<li>Crypto:

<ul>
<li>Tom Wuのコードを元にして作成した暗号化と復号化ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/crypto.js">ソースコード</a></li>
</ul>
</li>
<li>Splay:

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%BC%E6%9C%A8">スプレー木</a>や自動メモリ管理サブシステムを実行するデータ操作ベンチマーク</li>
<li>ノードへのメモリの割り当て＆古いノードに割り当てたメモリの再利用に要する処理時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/splay.js">ソースコード</a></li>
</ul>
</li>
<li>SplayLatency:

<ul>
<li>VMのGC(不要になったメモリ領域を自動開放する処理)サブシステムに圧力を与えるスプレー試験</li>
<li>GCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>EarleyBoyer:

<ul>
<li>典型的なSchemeベンチをFlorian LoitschのScheme2Jsコンパイラを用いてJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/earley-boyer.js">ソースコード</a></li>
</ul>
</li>
<li>pdf.js:

<ul>
<li>JavaScriptで実装されたMozillaのPDFリーダ</li>
<li>デコード、インタープリター処理の時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/pdfjs.js">ソースコード</a></li>
</ul>
</li>
<li>Mandreel:

<ul>
<li>Mandreelを利用してC++からJavaScriptに移植した<a href="http://bulletphysics.org/wordpress/">3D Bullet 物理エンジン</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/mandreel.js">ソースコード</a></li>
</ul>
</li>
<li>MandreelLatency:

<ul>
<li>Mandreelベンチ時のGCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>GB Emulator:

<ul>
<li>携帯用コンソール(任天堂ゲームボーイ)のアーキテクチャをエミュレートして、厳しい3DシミュレーションをJavaScriptで実行</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part1.js">GB Emulatorソース1</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part2.js">GB Emulatorソース2</a></li>
</ul>
</li>
<li>Code loading:

<ul>
<li>大規模なJavaScriptプログラムをロードしたあと、JavaScriptエンジンがどれだけ速くコードの実行を開始できるかを計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/code-load.js">ソースコード</a></li>
</ul>
</li>
<li>Box2DWeb:

<ul>
<li>Erin Cattoによって書かれた人気の2D物理シミュレーションエンジンである<a href="https://code.google.com/p/box2dweb/">Box2DWeb</a>のJavaScript移植版がベース</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/box2d.js">ソースコード</a></li>
</ul>
</li>
<li>zlib:

<ul>
<li><a href="https://github.com/kripken/emscripten/tree/master/tests/zlib">zlib</a> の試験により、JavaScriptとの互換性を保ちつつ、スクリプトのパフォーマンスをネイティブコード並みに高速化するasm.jsのコードの処理速度を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/zlib.js">ソースコード</a></li>
</ul>
</li>
<li>Typescript:

<ul>
<li>Microsoftが発表したJavaScriptのスーパセットである<a href="http://www.typescriptlang.org/">Typescript</a>はJavaScriptが苦手な大規模アプリケーション開発に最適とされている</li>
<li>この試験ではTypescriptをJavaScriptにコンパイルする時間を計測可能</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/typescript-compiler.js">コンパイラーソースコード</a></li>
</ul>
</li>
</ul>


<p>このOctane2.0を用いて、試験した結果を報告します。<br/>
今回は、下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone5</li>
<li>UIWebView / iOS8.0 / iPhone5</li>
<li>WKWebView / iOS8.0 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<p>結果は下記になりました。<br/>
<img src="/images/wkwebview_bench.png" alt="Octane2.0によるベンチマーク結果" /></p>

<p>数値としては下記です。<br/>
* Safari / iOS7.1.2 / iPhone5: <strong>2,642</strong><br/>
* UIWebView / iOS7.1.2 / iPhone5: <strong>453</strong><br/>
* Safari / iOS8.0 / iPhone5: <strong>2983</strong><br/>
* UIWebView / iOS8.0 / iPhone5: <strong>447</strong><br/>
* WKWebView / iOS8.0 / iPhone5: <strong>3097</strong><br/>
* Safari / iOS8.0 / iPhone6: <strong>6529</strong><br/>
* UIWebView / iOS8.0 / iPhone6: <strong>1072</strong><br/>
* WKWebView / iOS8.0 / iPhone6: <strong>6763</strong></p>

<p>項目ごとの結果は下記になります。<br/>
<img src="/images/wkwebview_bench_octane1.png" alt="Octane2.0 ベンチマーク結果: Richards〜Regexp" /><br/>
<img src="/images/wkwebview_bench_octane2.png" alt="Octane2.0 ベンチマーク結果: Splay〜MandreelLatency" /><br/>
<img src="/images/wkwebview_bench_octane3.png" alt="Octane2.0 ベンチマーク結果: GB Emulator〜Typescript" /></p>

<p>全て1回だけ計測したため、ある程度の誤差があるかもしれません。<br/>
しかし、UIWebViewとWKWebViewが圧倒的に異なるということはわかりました。また、SafariとWKWebViewの結果がほぼ同じであることから、これまでSafariでしか利用できなかった各種機能が解放されていることがわかりました。<br/>
また、端末によって大きな差が出ました。やはり、iPhone5よりもiPhone6の方がマシンスペックが高いためにかなり良い結果が出ました。<br/>
因みに、UIWebViewで計測するとき、Box2DWebまでは他と大きな差がなく進んだのですが、zlibとTypescriptの試験が非常に時間がかかりました。(もうこれ以上は計測できないのでは？と思ったほどです。)</p>

<p>今日はここまで。</p>

<p>参考:<br/>
<a href="https://developers.google.com/octane/benchmark">Google Octane</a><br/>
<a href="http://jp.techcrunch.com/2013/11/07/20131106google-updates-its-octane-javascript-benchmark-adds-asm-js-and-typescript-tests/">GoogleがJavaScriptベンチマークOctaneをアップデート</a><br/>
<a href="http://www.forest.impress.co.jp/docs/news/20131107_622555.html">Google、JavaScriptベンチマークスイートOctane2.0をリリース</a><br/>
<a href="http://www.infoq.com/jp/news/2012/08/Octane-JavaScript-Benchmark">JavaScript用の新ベンチマークスイートOctaneをGoogleがオープンソース化</a><br/>
<a href="https://code.google.com/p/octane-benchmark/source/browse/#svn%2Flatest">octane benchmark</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView内でheaderを固定して滑らかなスクロールを実現しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/12/06/header-fixed/"/>
    <updated>2013-12-06T23:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/12/06/header-fixed</id>
    <content type="html"><![CDATA[<h3>header固定をしたスクロールは案外難しい！！</h3>

<p>本日はUIWebViewを全面に貼り付けた上で、ヘッダーを固定して滑らかなスクロールを実現する方法について書きたいと思います。<br/>
もし、ヘッダーをネイティブで作成して、中身をWebで作成すれば簡単に実現できます。しかし、ネイティブとWebのハイブリットアプリを目指すとAndroidへの対応が手間となるため一長一短な面があります。今回はあえて全面UIWebViewに拘りたいと思います。</p>

<!--more-->


<h4>position: fixedだとうまくいかない！？</h4>

<p>まず、Webでヘッダーを固定することを考えたときに真っ先に思い浮かぶものは<strong>position: fixed</strong>を利用することだと思います。</p>

<p>サンプルHTML
```
&lt;!DOCTYPE html></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type" /&gt;
    &lt;meta content="width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0" name="viewport" /&gt;
    &lt;link href="./main.css" media="all" rel="stylesheet" type="text/css" /&gt;
    &lt;title&gt;サンプル&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="header"&gt;ヘッダー&lt;/div&gt;
    &lt;div id="mainContents"&gt;
        &lt;div id="main"&gt;
            contents
            &lt;br&gt;
            contents
            &lt;br&gt;
            ...
            contents
            &lt;br&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>サンプルCSS
```
html, body {</p>

<pre><code>padding: 0;
margin: 0;
width: 100%;
height: 100%;
</code></pre>

<p>}</p>

<h1>header {</h1>

<pre><code>position: fixed;
top: 0;
left: 0;
width: 100%;
height: 64px;
z-index: 2;
</code></pre>

<p>}</p>

<h1>mainContents {</h1>

<pre><code>position: relative;
top: 64px;
width: 100%;
height: 100%;
-webkit-overflow-scrolling: touch;
z-index: 1;
</code></pre>

<p>}
```
確かにこの設定であればヘッダーを固定して中身を滑らかにスクロールすることが可能になります。そして、iPhoneのSafariからその画面を見るのであればさして違和感はないでしょう。しかし、これをUIWebView上で見ると画面のバウンドを止められないことに気がつきます。これは結構な違和感です。<br/>
このバウンドを以下のようにネイティブソース側から止めることを考えました。</p>

<p>ネイティブソース(UIWebViewの設定部分)
```
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];
uiWebView.delegate = self;
// バウンドしないように設定
[[(UIScrollView *)[uiWebView subviews] objectAtIndex:0] setBounces:NO];
...
</code></pre>

<p>}
```
しかし、これだとCSSで設定した<strong>-webkit-overflow-scrolling: touch</strong>の効果がなくなってしまいます。なので別の方法を考えました。</p>

<h4>position: absoluteを使う！！</h4>

<p>position: fixed;は使いません。position: absolute;を使います。以下、踏まえて書き直します。</p>

<p>サンプルHTML
```
&lt;!DOCTYPE html></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type" /&gt;
    &lt;meta content="width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0" name="viewport" /&gt;
    &lt;link href="./main.css" media="all" rel="stylesheet" type="text/css" /&gt;
    &lt;title&gt;サンプル&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="wrapper"&gt;
        &lt;div id="header"&gt;ヘッダー&lt;/div&gt;
        &lt;div id="mainContents"&gt;
            &lt;div id="main"&gt;
                contents
                &lt;br&gt;
                contents
                &lt;br&gt;
                ...
                contents
                &lt;br&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>サンプルCSS
```
html, body {</p>

<pre><code>padding: 0;
margin: 0;
width: 100%;
height: 100%;
overflow: hidden;
</code></pre>

<p>}</p>

<h1>wrapper {</h1>

<pre><code>position: relative;
width: 100%;
height: 100%;
</code></pre>

<p>}</p>

<h1>header {</h1>

<pre><code>position: absolute;
top: 0;
left: 0;
width: 100%;
height: 64px;
z-index: 2;
</code></pre>

<p>}</p>

<h1>mainContents {</h1>

<pre><code>position: relative;
top: 64px;
width: 100%;
height: 100%;
overflow: auto;
-webkit-overflow-scrolling: touch;
z-index: 1;
</code></pre>

<p>}</p>

<h1>main {</h1>

<pre><code>position: relative;
padding: 64px 0;
</code></pre>

<p>}
```
これでほとんどの場合、バウンドしなくなります。しかも、滑らかなスクロールを保つこともできます。<br/>
ただし、ヘッダーをタッチムーブすると&hellip;バウンドしてしまいます！！</p>

<p>う〜ん。これは果たして無理なのか！？と思ったところで思いつきました。<strong>touchイベントを無効化</strong>しましょう！！<br/>
jQueryを使っている前提で下記を紹介します。</p>

<p>サンプルJS
```</p>

<p>jQuery( function($) {</p>

<pre><code>$("#header").bind("touchstart", function() {
    event.preventDefault();
});

$("#header").bind("touchmove", function() {
    event.preventDefault();
});

$("#header").bind("touchend", function() {
    event.preventDefault();
});
</code></pre>

<p>});
```
これでバウンドせずに滑らかなスクロールを保つことができました。</p>

<p>と思ったのですが、画面の両端を触っているとバウンドが発生してしまいます&hellip;。要調査ですね&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebViewのキャッシュの仕組みを見極めよう！]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/05/webview-cache/"/>
    <updated>2013-10-05T02:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/05/webview-cache</id>
    <content type="html"><![CDATA[<h3>WebViewとcache.manifestの関係性を知ろう！</h3>

<p>前回はPCで見た場合のキャッシュについて調べました。本日も引き続きキャッシュについて調べてみたいと思います。<br/>
筆者が最も疑問を感じていたのはiPhoneアプリ内でWebViewを利用したときキャッシュはどうなるのか？ということです。<br/>
今日は実際に実機でテストをしながら進めます。<br/>
そしてどうせならばiOS7搭載の実機で試してみましょう！</p>

<!--more-->


<h4>cache.manifestのキャッシュはどこに保存される？</h4>

<p>前回説明したcache.manifestを使用すると、そのキャッシュはどこに保存されるのか確認します。<br/>
まずはcache.manifestをindex.htmlで読み込まない以下の場合で見てみましょう。
```</p>

<!--index.html-->


<p>&lt;!DOCTYPE html></p>

<!--cache.manifestは読み込まない-->


<p><html></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
    &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
    &lt;title&gt;Cache-Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="word"&gt;Cache Test&lt;/div&gt;
    &lt;img src="./image1.png" /&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>このページを簡単なWebViewアプリに表示します。<br/>
CachePracticeという名前のアプリを作成してiOS7の端末にインストールしました。<br/>
<img src="/images/cachepractice_1.PNG" alt="iOS7にWebViewアプリをインストール" /></p>

<p>さて立ち上げてみましょう！<br/>
<img src="/images/cachepractice_2.PNG" alt="cache.manifestを設定していないページをWebViewに表示" /></p>

<p>このときのアプリ内のデータをPCにダウンロードして見てみましょう。
<img src="/images/cachepractice3.jpg" alt="cache.manifestを設定していないページを読み込んだ場合" /><br/>
Cache.dbというものがありますね。</p>

<p>では次に以下のcache.manifestを読み込ませたindex.htmlをWebViewで表示した場合を見てみましょう。
```</p>

<!--index.html-->


<p>&lt;!DOCTYPE html></p>

<!--cache.manifestを読み込む-->


<p><html manifest="cache.manifest"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
    &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
    &lt;title&gt;Cache-Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="word"&gt;Cache Test&lt;/div&gt;
    &lt;img src="./image1.png" /&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```
<img src="/images/cachepractice4.png" alt="cache.manifestを設定したページをWebViewに表示" /><br/>
このようにApplicationCache.dbというものが作られました。どうやらcache.manifestでのキャッシュはここに保存されているようですね。<br/>
それを裏付けるようにcache.manifestに画像を新たに追加したところApplicationCache.dbのサイズが増えました</p>

<h4>今後の調査について</h4>

<p>cache.manifestについては大体わかりました。<br/>
次に調べるとしたらネイティブ側のキャッシュ機構です。様々なサイトでネイティブキャッシュはCache.dbで保存されると書かれています。<br/>
因みにSQLite 3.7.0以上から<strong>WAL(Write-Ahead log)</strong>方式になりました。現在普及しているiOSではSQLite3.7.0以上を利用しているため、自動的にWAL方式でキャッシュしています。
先ほど上げた画像を見てもCache.db, Cache.db-shm, Cache.db-walが生成されていることが確認できます。</p>

<p>これら3つのファイルのサイズを眺めているとCache.db-walがどんどん増大していきます。一方でCache.dbのサイズは大きくならないんですよね&hellip;。このことからネイティブキャシュはDB(Cache.db)からキャッシュ情報を取り出すのではなく、ログファイル(Cache.db-wal)からキャッシュ情報をリカバリしているように思えます。
もっと詳しいことがわかれば追記したいと思います。</p>

<p>とりあえず、今日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cache.manifestのキャッシュがかなり厄介!?]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/04/html5-cache-dot-manifest/"/>
    <updated>2013-10-04T00:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/04/html5-cache-dot-manifest</id>
    <content type="html"><![CDATA[<h3>cache.manifestで苦労することまとめ</h3>

<p>本日は筆者が日頃から困っているcache.manifestについて紹介したいと思います。<br/>
『な〜んだWebか〜。ネイティブアプリとは関係ないかな〜』なんて思っていませんか？<br/>
ネイティブアプリではWebViewを実装することができます。このWebViewにも大いに関わってくるところなので、知って損はないでしょう。</p>

<!--more-->


<h4>cache.manifestの基本を簡単に紹介</h4>

<p>cache.manifestを使ったことがあるという方は多いでしょうが、おさらい程度に基本を確認しておきましょう。</p>

<p>```</p>

<h1>cache.manifestの記載例</h1>

<p>CACHE MANIFEST</p>

<h1>version 1.0</h1>

<p>CACHE:
image1.png</p>

<p>NETWORK:
base.css</p>

<p>FALLBACK:
```</p>

<p>・CACHEはキャッシュしたいファイルを記載します。<br/>
・NETWORKは毎回サーバに問い合わせたいファイルを記載します。<br/>
・FALLBACKはキャッシュできなかった場合の代わりのファイルを記載します。
・キャッシュしたいファイルの設定は変わらないがキャッシュの変更を読み込ませたいというときにversionをアップさせましょう。(なぜ必要か詳しくは例を交えて説明します)</p>

<h4>cache.manifestを試そう</h4>

<p>実際に簡単なhtml, css, cache.manifestを作成してcache.manifestの挙動を確認してみます。</p>

<p>まずはcache.manifestを読み込む設定を書くindex.html
```
//index.html
&lt;!DOCTYPE html>
<html manifest="cache.manifest"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type"&gt;
    &lt;meta content="width=device-width, user-scalable=no, minimum-scale=0.5, maximum-scale=1.0" name="viewport"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;link href="./base.css" media="all" rel="stylesheet" type="text/css"&gt;
    &lt;title&gt;Cache-Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="word"&gt;Cache Test&lt;/div&gt;
    &lt;img src="./image1.png" /&gt;
&lt;/body&gt;
</code></pre>

<p></html>
<code>
次にcache.manifestの変更がわかりやすいようにcssを作成しましょう。
</code>
html, body {</p>

<pre><code>position: absolute;
width: 100%;
height: 100%;
padding: 0;
margin: 0;
background-color: white;
</code></pre>

<p>}</p>

<h1>word {</h1>

<pre><code>font-size: 30px;
text-align: center;
</code></pre>

<p>}
```
これをChromeで表示すると
<img src="/images/cachetest1.png" alt="Chromeで確認しよう" /><br/>
このようになっています。</p>

<p>画像はデバッガツールで詳細を見た様子です。cache.manifestで書いたimage1.pngだけでなくcache.manifestの読み込みを書いた<strong>index.html自体もキャッシュ</strong>されています。因みにbase.cssファイルはキャッシュされていないことも確認できます。<br/>
base.cssは毎回読み込みに行くので変更内容は次回アクセス時に即座に反映されます。<br/>
重要な事は<strong>cache.manifestを編集していなくても反映される</strong>ということです。</p>

<p>一方でindex.htmlの内容を以下に変えてみたとします。
```
&hellip;
<body></p>

<pre><code>&lt;div id="word"&gt;Cache Test&lt;/div&gt;
&lt;img src="./image1.png" /&gt;
&lt;div&gt;test&lt;/div&gt;
</code></pre>

<p></body>
&hellip;</p>

<p><code>
これでブラウザを更新してみましょう。divタグを追加したにも関わらず何も変化がないはずです。  
CACHEで設定したファイルの変更を知らせるためには必ずcache.manifestに変更を加えて下さい。(この場合はcache.manifestのバージョンを上げれば十分です。)
</code></p>

<h1>cache.manifestのコメントアウトのバージョンを変更しよう</h1>

<p>CACHE MANIFEST</p>

<h1>version 1.0.1</h1>

<p>CACHE:
image1.png</p>

<p>NETWORK:
base.css</p>

<p>FALLBACK:
```
さて改めてブラウザを更新しましょう。あれ？まだ何も変わらない！と思うかもしれませんが、よくよくデバッガツールを見てみて下さい。<br/>
<img src="/images/cachetest2.png" alt="キャッシュが更新されている" /><br/>
cache.manifestの更新を読み込んでいます。</p>

<p>ここでもう一度ブラウザを更新しましょう。すると、先ほど追加したdivタグが表示されているはずです。</p>

<p>つまり、cache.manifestの読み込みを書いたindex.html自体を更新するためには2回ブラウザを更新する必要があるということです。<br/>
これをもし、iPhoneのネイティブアプリをWebViewを用いることで作るとしたらアプリの再起動が2回以上必要になります。ユーザにそれを強いるのはかなりハードルが高いと言えるでしょう。</p>

<p>以上をまとめます。<br/>
・cache.manifestの読み込みを設定したhtmlファイル(index.htmlなど)は更新することのないファイルとしましょう。<br/>
・更新が生じる可能性のあるhtmlファイルは(index.htmlに)ロードするようにしましょう！</p>

<p>本日はcache.manifestを用いた場合のキャッシュについて試しました。次回はネイティブ側でキャッシュ設定をした場合、どんな挙動を示すのか追いたいと思います。(cache.manifestと併用させた場合どうなるかも追えればと思います。)</p>
]]></content>
  </entry>
  
</feed>
