<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devicetoken | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/devicetoken/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2020-02-22T17:53:48+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS13におけるプッシュ通知に必要なデバイストークンの取得方法]]></title>
    <link href="http://grandbig.github.io/blog/2019/09/28/ios-devicetoken-2/"/>
    <updated>2019-09-28T16:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2019/09/28/ios-devicetoken-2</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<p>今回はiOS13のプッシュ通知用デバイストークンについて見ていきたいと思います。<br/>
<code>Swift</code> に関して言えば、歴史的変遷から、問題のない現場が多いと思うのですが、<br/>
<code>Objective-C</code> を中心に活用している現場では注意が必要かもしれません。</p>

<p>具体的には後述しますが、<br/>
<code>description</code> を利用してデバイストークンを取得する方式は <code>iOS13</code> から見直す必要がありそうです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h3>プッシュ通知の受信処理の実装</h3>

<p>折角なので、基本的な設定についても説明していきます。</p>

<h4>Xcode11の設定</h4>

<p>まずは、Xcode11上で下図の状態まで設定します。</p>

<p><strong>▼確認観点</strong><br/>
* <code>Team ID</code> が利用想定のものであること<br/>
* <code>Bundle Identifier</code> が利用想定のものであること<br/>
* <code>Signing Certificate</code> が利用想定のものであること<br/>
* <code>Provisioning Profile</code> の <code>Capabilities</code> に <code>Push Notifications</code> が含まれている<br/>
* <code>Capability</code> として <code>Push Notifications</code> が追加すること</p>

<p><img src="/images/ios-devicetoken-2_1.png" alt="Signing &amp; Capabilities" /></p>

<h4>AppDelegateの実装</h4>

<p>続いて、 <code>AppDelegate.swift</code> 上の実装です。</p>

<p>基本的なステップは4つです。</p>

<p>① プッシュ通知の利用許可のリクエストを送信します<br/>
② 利用許可を得た場合に、プッシュ通知の利用登録を実行します<br/>
③ プッシュ通知の利用登録が成功したことをキャッチする <code>Delegate</code> メソッドを書きます<br/>
④ プッシュ通知の利用登録が失敗したことをキャッチする <code>Delegate</code> メソッドを書きます</p>

<p>```objective-c
import UIKit
import UserNotifications</p>

<p>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {</p>

<pre><code>func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    // Override point for customization after application launch.

    // ① プッシュ通知の利用許可のリクエスト送信
    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
        guard granted else { return }

        DispatchQueue.main.async {
            // ② プッシュ通知利用の登録
            UIApplication.shared.registerForRemoteNotifications()
        }
    }

    return true
}
...
</code></pre>

<p>}</p>

<p>extension AppDelegate {</p>

<pre><code>// ③ プッシュ通知の利用登録が成功した場合
func application(_ application: UIApplication,
                 didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    let token = deviceToken.map { String(format: "%.2hhx", $0) }.joined()
    print("Device token: \(token)")
}

// ④ プッシュ通知の利用登録が失敗した場合
func application(_ application: UIApplication,
                 didFailToRegisterForRemoteNotificationsWithError error: Error) {
    print("Failed to register to APNs: \(error)")
}
</code></pre>

<p>}
```</p>

<h3>旧来のデバイストークンの取得方法</h3>

<p>さて本題に入ります。<br/>
<code>Objective-C</code> 時代に主流と言われていたデバイストークンの取得方法は、以下のような <code>description</code> を利用した手法でした。</p>

<p>```objective-c
NSString *token = [[[[deviceToken description] stringByReplacingOccurrencesOfString:@&ldquo;&lt;"withString:@&rdquo;&ldquo;]</p>

<pre><code>               stringByReplacingOccurrencesOfString:@"&gt;" withString:@""]
               stringByReplacingOccurrencesOfString: @" " withString: @""];
</code></pre>

<p>```</p>

<p>これは、 <code>[deviceToken description]</code> で取得される値が、<br/>
<code>&lt;7097978d 1e438923 ... 6fdbf111&gt;</code> というような先頭と末尾を <code>&lt;&gt;</code> で括られていたためです。<br/>
そして、1文で書けるというのも当時から魅力的だったのかもしれません。</p>

<p><code>Swift</code> に言語が変わってからも、上記手法が多くの場面で使われてきたことと思います。<br/>
しかし、 <code>Swift3</code> になったタイミングで、状況が変わりました。</p>

<p>プッシュ通知の利用登録成功時の <code>Delegate</code> メソッドの <code>deviceToken</code> が <code>NSData</code> 型から <code>Data</code> 型に変わったことで、この手法が利用できなくなったのです。</p>

<p>この時点で</p>

<p><code>objective-c
let token = deviceToken.map { String(format: "%.2hhx", $0) }.joined()
</code></p>

<p>という書き方がデバイストークン取得の主流に完全に取って代わったと思います。</p>

<p>もしかしたら、 <code>Data</code> 型を <code>NSData</code> 型に変換することで、<br/>
引き続き旧来の手法を利用している現場があるかもしれませんが、<br/>
その場合は、即刻デバイストークンの取得方法を見直しましょう。</p>

<p>これはあくまでも <code>Swift</code> におけるデバイストークンの取得の変遷であって、<br/>
<code>Objective-C</code> は何ら変わることがなかったため、<br/>
旧来の書き方が続いている現場がまだまだ多い気がしています。</p>

<p>しかし、 <code>iOS13</code> からはどうやら見直しが必須になったようです。<br/>
というのも、 <code>description</code> を利用すると</p>

<p><code>
{ length = 32, bytes = 7097978d 1e438923 ... 6fdbf111 }
</code></p>

<p>のような形で返ってきてしまうため、<br/>
<code>&lt;&gt;</code> を除去することでデバイストークンを取得することができなくなったようなんです。</p>

<ul>
<li><a href="https://forums.developer.apple.com/thread/117545">Apple Developer Forums: iOS13 PKPushCredentials broken</a></li>
<li><a href="https://forums.developer.apple.com/thread/119111">Apple Developer Forums: NSData description and NSString stringWithFormat have different return results when compiled with Xcode 11 versus Xcode 10</a></li>
</ul>


<p>では、 <code>Swift</code> は先程書いた通り1行で書けますが、<br/>
<code>Objective-C</code> ではどう書いていくべきなのでしょうか。<br/>
安心してください。 <code>Facebook</code> が1つの解を示してくれています。</p>

<p>```objective-c
// ↓ dataにDelegateメソッドに渡ってきたdeviceTokenを渡します
(NSString <em>)hexadecimalStringFromData:(NSData </em>)data<br/>
{</p>

<pre><code>NSUInteger dataLength = data.length;  
if (dataLength == 0) {  
    return nil;  
}  

const unsigned char *dataBuffer = data.bytes;  
NSMutableString *hexString  = [NSMutableString stringWithCapacity:(dataLength * 2)];  
for (int i = 0; i &lt; dataLength; ++i) {  
    [hexString appendFormat:@"%02x", dataBuffer[i]];  
}  
return [hexString copy];  
</code></pre>

<p>}
```</p>

<p>流石に1行で済ませることは難しいですが、<br/>
これで <code>Objective-C</code> でも正しくデバイストークンを取得できるようになりました。</p>

<h3>まとめ</h3>

<p>さて如何でしたでしょうか。<br/>
iOS13は細かいところも含めて様々な変更が入っているため、日々最新情報をキャッチしつつ、自身でも積極的に使い倒していく必要がありますね。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はっきりさせよう！iOSのデバイストークン]]></title>
    <link href="http://grandbig.github.io/blog/2013/09/24/ios-devicetoken/"/>
    <updated>2013-09-24T22:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/09/24/ios-devicetoken</id>
    <content type="html"><![CDATA[<h3>iOSのデバイストークンを理解しよう！</h3>

<p>今回はプッシュ通知をユーザに送る機能を備えたiPhoneアプリを開発したことがあるエンジニアであれば周知の事実であろう『iOSのデバイストークン』について改めて勉強したいと思います。<br/>
筆者は正直、今日まで全くの勘違いをしていました&hellip;。デバイストークンとはアプリ毎に異なるのだと思い込んでいたのです。</p>

<!--more-->


<h4>公式ドキュメントを読もう！</h4>

<p>まずは何と言っても<a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/RemoteNotificationsPG.pdf" title="Local Notificationおよび
Push Notificationプログラミングガイド">Appleの公式ドキュメント</a>から理解してみよう！ということです。<br/>
ドキュメントには『<em>APNsが初めてデバイスに接続したときに、APNsからそのデバイスに渡される不透過なデバイス識別子です。(たとえて言えば、デバイストークンは通知先を識別するための電話番号と同じ機能を果たします)</em>』とあります。ここからわかることはデバイストークンとは個人を特定できるユニークなものだということです。<br/>
次に読み進めていくと、『<em>APNsは、TLSのピアツーピア認証を利用して、接続してきたデバイスの認証を行います</em>』、『<em>プロバイダとAPNs間の接続信頼も、TLSのピアツーピア認証を利用して確立されます。</em>』と書かれています。何だかふ〜んと言った感じで読み飛ばしてしまいそうですが、実はここは結構重要でした。
このTLS接続は『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行う</em>』ことで確立させます。<br/>
最低限ここまで抜粋できれば良しとしましょう笑</p>

<h4>実際に取得してみた結果は？</h4>

<p>百聞は一見にしかずということで、実際に自分の目で確かめてみることにしました。</p>

<p>手順は省き、結果を言うと『デバイストークンは端末ごとにユニークなもの』です。</p>

<p>アプリごとにユニークではない、１端末につき１つのデバイストークンということがポイントです！<br/>
それではアプリAにプッシュを送ろうとすると、アプリBにプッシュが届くのではないか？と思うかもしれません。私も昨日まで完全にそう思っていました。が、ここで先ほど述べた</p>

<p>『<em>一意の秘密鍵と証明書を使用してサービスへの認証を行うことでTLS接続を確立する</em>』</p>

<p>が意味を成すのです。<br/>
そう、秘密鍵と証明書を使用してTLS接続を確立している時点でアプリAへの依頼なのかアプリBへの依頼なのか決まっているのです。</p>

<h4>因みに&hellip;</h4>

<p>因みに、そもそも私がデバイストークンとは端末のアプリごとに異なると思っていた理由を紹介しましょう。<br/>
先ほどの説明の中でデバイストークンは１端末につき１つのデバイストークンと言いましたが、それをいきなり覆します！<br/>
実はDevelopment版とProduction版でデバイストークンは異なるんです！<br/>
これに私は完全に翻弄されてしまったのです(汗)<br/>
そして、プッシュの証明書が異なれば(つまりはアプリごと)デバイストークンは異なるのだと思いこんでしまったのです&hellip;。</p>

<p>ではなぜDevelopment版とProduction版でデバイストークンは異なるのでしょうか？完全なる答えはわかりませんが、<br/>
Development版はプロバイダアプリケーションの初版の開発とテストに使用されるサンドボックス環境であり、アクセス先として『<em>gateway.sandbox.push.apple.com</em>』を設定します。<br/>
一方でProduction版のアクセス先はsandboxを外した『<em>gateway.push.apple.com</em>』を設定します。<br/>
なるほど、アクセス先が違うのでデバイストークンが変わりそうな気がします&hellip;<br/>
参考までにサイトのページを載せておきます。<br/>
<img src="/images/apple_developer_site1.png" alt="Apple Developer サイト" /></p>

<p>ここまで説明した内容は全てiOS6.1以前のものであり、iOS7は含みません。<a href="http://blog.katty.in/4162" title="iOS7でプッシュ通知のデバイストークンに大きな変更">iOS7からはアプリごとに異なるといった記事</a>も見られるので、またのちほど実験していくつもりです。</p>

<p>皆さんもぜひ自分の眼でお試しあれ<br/>
しかし、今回は全部、文字になってしまったな〜。気が向いたらもう少しわかりやすく編集し直します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 広告2 -->


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
