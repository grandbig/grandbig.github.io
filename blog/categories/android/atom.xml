<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-10-29T01:34:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android StudioにKotlinを導入しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/25/kotlin-android/"/>
    <updated>2015-10-25T19:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/25/kotlin-android</id>
    <content type="html"><![CDATA[<h4>AndroidアプリはKotlinで書く時代！？</h4>

<p>さて、本日は久々にAndroidについて書きたいと思います。<br/>
<strong>Kotlin</strong> はどの程度、世に普及しているのでしょうか？ほとんどのAndroidアプリ開発者はJavaで開発していると思うのですが、今後はiOSのObjective-C/Swiftのように開発言語としてJava/Kotlinを選択することになるかもしれません。</p>

<p>KotlinはAndroid StudioのベースとなっているIntelliJを開発しているJetBrains社が開発したJVM言語であるため、Android Studioへの導入も簡単で親和性も高いらしいです。<br/>
また、iOSアプリをSwiftで開発していた開発者は書き方が似ているKotlinの方が開発が幾分か楽かもしれません。<br/>
コード補完や参照ジャンプなどの基本的なIDEサポートもあるのでAndroid Studioでも問題なくKotlinを使えるのではないでしょうか。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Kotlinの導入方法</h4>

<p>Kotlinの導入方法を書いていきます。と言ってもほとんどないです笑。</p>

<p>【導入手順】</p>

<p>1．Android Stuioを起動<br/>
2．Android Studio > Preferences > Plugins > Install JetBrains plugin&hellip;を選択<br/>
3．リストからKotlinを選択して、Install pluginを選択
<img src="/images/kotlin_install_1.png" alt="Kotlinのインストール" /></p>

<p>4．インストール完了後, Android Studiomを再起動<br/>
<img src="/images/kotlin_install_2.png" alt="Android Studioの再起動" /></p>

<p>5．javaパッケージをkotlinパッケージにリネーム<br/>
javaパッケージを右クリック > Refactor > Rename を選択<br/>
最終的に下図のようになればOKです。<br/>
<img src="/images/kotlin_install_3.png" alt="ペッケージ名の変更" /></p>

<p>6．javaファイルをkotlinファイルに変換<br/>
javaファイルを選択して、Code > Convert Java File to Kotlin File を選択<br/>
MainActivity(メインファイル)だけでなくApplicationTestも変換しておきましょう。<br/>
<img src="/images/kotlin_install_4.png" alt="kotlinファイルに変換" /></p>

<p>7．build.gradle(app)をkotlin用に修正
Tools > Kotlin > Configure Kotlin in Project を選択すると、build.gradle(app)ファイルにKotlin対応用の記述が自動で追加されます。<br/>
筆者の場合は下記のような感じになりました。</p>

<p>```java
apply plugin: &lsquo;com.android.application&rsquo;
apply plugin: &lsquo;kotlin-android&rsquo;</p>

<p>android {</p>

<pre><code>compileSdkVersion 21
buildToolsVersion "22.0.1"

defaultConfig {
    applicationId "com.example.kato_takahiro.kotlinsample"
    minSdkVersion 21
    targetSdkVersion 21
    versionCode 1
    versionName "1.0"
}
buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
testCompile 'junit:junit:4.12'
compile 'com.android.support:appcompat-v7:21.0.3'
compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
</code></pre>

<p>}
buildscript {</p>

<pre><code>ext.kotlin_version = '1.0.0-beta-1038'
repositories {
    mavenCentral()
}
dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
}
</code></pre>

<p>}
repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}
```</p>

<p>8．ビルドしてデバッグ<br/>
ここまでくれば設定は完了したはずなので、Build > Clean Projectしてエラーが発生しないかチェック<br/>
問題なければ、実機を繋いでデバッグしちゃいましょう！</p>

<h4>Kotlinでコードを書いてみよう！</h4>

<p>さて、使えることにしただけでは何なので、以前書いた<a href="http://grandbig.github.io/blog/2015/05/16/altbeacon/">AltBeaconを使ってAndroidでiBeaconを検知しよう</a>をKotlinで書き直してみました。</p>

<p>```java
&lt;省略></p>

<p>// AltBeacon関連のライブラリをimport
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.Identifier;
import org.altbeacon.beacon.MonitorNotifier;
import org.altbeacon.beacon.Region;</p>

<p>class MainActivity : ActionBarActivity(), BeaconConsumer {</p>

<pre><code>private val TAG = "AltBeacon Sample"

// BeaconManagerクラスの変数を定義
private var beaconManager: BeaconManager? = null

public val IBEACON_FORMAT = "m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24"

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)

    // staticメソッドでBeaconManagerクラスのインスタンスを取得
    beaconManager = BeaconManager.getInstanceForApplication(this)
    // BeaconParseをBeaconManagerに設定
    beaconManager!!.beaconParsers.add(BeaconParser().setBeaconLayout(IBEACON_FORMAT))
}

override fun onCreateOptionsMenu(menu: Menu): Boolean {
    // Inflate the menu; this adds items to the action bar if it is present.
    menuInflater.inflate(R.menu.menu_main, menu)
    return true
}

override fun onOptionsItemSelected(item: MenuItem): Boolean {
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    val id = item.itemId

    //noinspection SimplifiableIfStatement
    if (id == R.id.action_settings) {
        return true
    }

    return super.onOptionsItemSelected(item)
}

override fun onBeaconServiceConnect() {
    // BeaconManagerクラスのモニタリング通知受取り処理
    beaconManager!!.setMonitorNotifier(object : MonitorNotifier {
        override fun didEnterRegion(region: Region) {
            // 領域進入時に実行
            Log.d(TAG, "didEnterRegion")
        }

        override fun didExitRegion(region: Region) {
            // 領域退出時に実行
            Log.d(TAG, "didExitRegion")
        }

        override fun didDetermineStateForRegion(i: Int, region: Region) {
            // 領域への侵入/退出のステータスが変化したときに実行
            Log.d(TAG, "didDetermineStateForRegion")
        }
    })

    try {
        // UUIDの作成
        val identifier = Identifier.parse("434B4666-E4B2-4B78-8C13-901AFEE3DBB6")
        // モニタリングの開始
        beaconManager!!.startMonitoringBeaconsInRegion(Region("unique-id-001", identifier, null, null))
    } catch (e: RemoteException) {
        // 例外が発生した場合の処理
        e.printStackTrace()
    }
}

override fun onPause() {
    super.onPause()
    beaconManager!!.unbind(this)
}

override fun onResume() {
    super.onPause()
    beaconManager!!.bind(this)
}
</code></pre>

<p>}
```</p>

<p>こう書いてみると、確かにSwiftに似ていますね。<br/>
気になったのは下記の通りです。</p>

<ul>
<li>Swiftで言うところの<code>let</code>がKotlinでは<code>val</code>と書くこと</li>
<li>Swiftで言うところの<code>delegate</code>の設定の仕方とKotlinで言うところの<code>implements</code>が同じ</li>
<li>Kotlinで変数が<code>null</code>のときにメソッドを実行しないよう <strong>!!</strong> が必要</li>
</ul>


<p>これからはJavaだけでなく、Kotlinでも書けるように力を蓄えていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="http://qiita.com/shoma2da/items/31edef012f224f99323c">SwiftでAndroidアプリを作る!?</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android5.0から5.1にアップデートして文鎮化した事件簿]]></title>
    <link href="http://grandbig.github.io/blog/2015/10/05/android-update-crash/"/>
    <updated>2015-10-05T22:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/10/05/android-update-crash</id>
    <content type="html"><![CDATA[<h4>Android OSのアップデートは恐ろしい</h4>

<p>さて、本日はAndroid OSのアップデートに関するお話です。<br/>
筆者は最近、Nexus6をAndroid5.0から5.1にアップデートしようとしたのですが、途中で失敗して端末が文鎮化するという悲劇が発生してしまったので、備忘録です。</p>

<h5>文鎮化までの軌跡</h5>

<p>まずは、如何にしてNexus6が文鎮化したかまで説明します。</p>

<ol>
<li>端末の通知センターからバージョンアップのためのデータをダウンロード</li>
<li>端末を再起動して、インストールしますか？と聞かれるのでYESを選択</li>
<li>アップデートに失敗しました。という文言と共に下図が&hellip;</li>
</ol>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p><img src="/images/android-update.png" alt="エラー発生" /></p>

<ol>
<li>嘘だろ&hellip;と思って端末の電源長押しで再起動
永久、再起動ループに&hellip;</li>
<li>電源 + 音量Downボタンを長押しでReboot起動
すると下図のような感じで起動します。<br/>
START, Recovery, Factory&hellip;などのメニューから仕掛けたい動作を選択できます。<br/>
<img src="/images/android-update2.png" alt="Reboot起動" /></li>
<li>順番に全部やっているけど、どれも無限ループに&hellip;</li>
</ol>


<p>はい！文鎮化しましたね。</p>

<h4>文鎮化Nexus6を復旧するまでの軌跡</h4>

<p>まさか文鎮化したNexus6を放っておくわけにはいきません。<br/>
復旧させましょう！</p>

<ol>
<li>LOCKを外す
<code>fastboot oem unlock</code>を実行して、端末のLOCKを解除しましょう。</li>
<li><a href="https://developers.google.com/android/nexus/images?hl=ja">Google Developerサイト</a>からFactory Imageをダウンロード
筆者は5.0.1 (LRX22C)を落としました。</li>
<li>ダウンロードしたフォルダ内にzipファイルがあるので、解凍する</li>
<li>下記のコマンドを実行</li>
</ol>


<p><code>
fastboot flash bootloader bootloader-shamu-moto-apq8084-71.05.img
fastboot reboot-bootloader
sleep 5
fastboot flash radio radio-shamu-d4.0-9625-02.55.04.img
fastboot reboot-bootloader
sleep 5
cd "zipを解凍したフォルダ"
fastboot flash boot boot.img
fastboot flash cache cache.img
fastboot flash recovery recovery.img
fastboot flash system system.img
fastboot flash userdata userdata.img
flashboot reboot
</code></p>

<ol>
<li>再起動したAndroidで初期設定</li>
</ol>


<p>これで復旧させることができました。やったね!!</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでRealmで保存した値を確認しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/22/android-realmbrowser/"/>
    <updated>2015-06-22T00:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/22/android-realmbrowser</id>
    <content type="html"><![CDATA[<h4>Android Realm Browserを使おう</h4>

<p>さて、<a href="http://grandbig.github.io/blog/2015/06/20/android-realm/">前回の記事</a>で実装したRealmですが、値を確かめたいことがあると思います。<br/>
その方法について見て行きましょう。</p>

<p><a href="https://github.com/dmytrodanylyk/realm-browser">Android Realm Browser</a>を利用することでアプリ上で直接、値を確認することが可能です。</p>

<p>実装手順</p>

<p>１. GradleScripts > build.gradle(Module: app) のdependenciesを修正
<code>compile 'com.github.dmytrodanylyk.realm-browser:library:0.0.2'</code>を<code>dependencies { ... }</code>に追加します。<br/>
２. <code>RealmFilesActivity</code>を起動する処理を追加</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```java
// MainActivity.java
public class MainActivity extends Activity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ...
    if(result.size() &gt; 0) {
        ...
        // Realmデータ閲覧用のActivityを起動
        RealmBrowser.getInstance().addRealmModel(Engineer.class);
        RealmFilesActivity.start(this);
    } else {
        ...
    }
}
...
</code></pre>

<p>}
```</p>

<p>さて、これでアプリを実行してみましょう。<br/>
下記のような画面を見ることができるはずです。</p>

<p><img src="/images/android-realmbrowser.png" alt="Realmデータ確認画面" /></p>

<h4>ADBで確認する方法</h4>

<p>他にも確認する方法があります。<br/>
Android StudioをPC上で使えるように設定するにあたって、意識せずにADBというツールがインストールされています。<br/>
このADBコマンドを利用することでデバイスの中身を直接見ることが可能となります。</p>

<p>ADB設定手順</p>

<p>１. <code>.bashrc</code>ファイルにADBツールのパスを設定
<code>.bashrc</code>ファイルに<code>export PATH=$PATH:/Users/&lt;ユーザ名&gt;/Library/Android/sdk/platform-tools</code>とパスを設定しましょう。<br/>
２. <code>.bashrc</code>ファイルの変更を反映
<code>source ~/.bashrc</code>を実行</p>

<p>これでADBコマンドを利用可能になりました。<br/>
続いて下記手順で、Realmデータの中身を見て行きましょう。</p>

<p><code>java
$ adb shell
$ run-as com.example.takahiro.realmsample
$ cd files/
$ cat default.realm
</code></p>

<p>日本語を保存している場合は文字化けして見えますが、保存されていることは確認できます。<br/>
本当は<code>adb pull</code>コマンドを使ってPCに<code>default.realm</code>を持ってきて、Realm Browserアプリで中身を見たいのですが、<br/>
今のところうまくコピーできず見れていません&hellip;。<br/>
(因みに端末はNexus6を利用しています。)</p>

<p>とりあえず、<code>Android Realm Browser</code>で見るしかないかな〜といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでRealmを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/20/android-realm/"/>
    <updated>2015-06-20T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/20/android-realm</id>
    <content type="html"><![CDATA[<h4>Realmを読み込もう！</h4>

<p>AndroidでもRealmを導入してみたいと思います。<br/>
今後、SQLite同様、非常に重宝されるライブラリであることは間違いないですし。</p>

<h5>Realmの導入方法</h5>

<p>ここに関しては、<a href="https://realm.io/jp/docs/java/latest/">公式サイト</a>を見れば、特に困ることはないと思いますが、筆者と同様にAndroidアプリ開発の初心者は躓くかもしれないので、詳しく書いてみようと思います。</p>

<p>まず、 <strong>Realm Android</strong> を検索すると、『 <strong>Realm Java(0.☓☓.☓)</strong> 』のような検索結果が出てくると思います。<br/>
ここで注意して頂きたいのが、そのページが最新版のページになっているか否かということです。<br/>
旧バージョンの場合、URLが <strong><a href="https://realm.io/jp/docs/java/0.%E2%98%93%E2%98%93.%E2%98%93/**">https://realm.io/jp/docs/java/0.%E2%98%93%E2%98%93.%E2%98%93/**</a> のようにバージョンが含まれています。<br/>
最新版の場合は、URLが </strong><a href="https://realm.io/jp/docs/java/latest/**">https://realm.io/jp/docs/java/latest/**</a> のように <strong>latest</strong> というワードが含まれています。</p>

<p>現在(2015/06/20)は <strong>0.80.3</strong> が最新版となっています。</p>

<p>では、導入していきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>１. GradleScripts > build.gradle(Module: app) のdependenciesを修正
<code>compile 'io.realm:realm-android:0.80.3'</code>を<code>dependencies { ... }</code>に追加します。<br/>
２. メニューのFile > Project Structure&hellip; > Modulesのapp > Build Types > release > Minify Enabledをtrueに変更
<img src="/images/android-realm1.png" alt="Minify Enabledを設定" /><br/>
これにより、GradleScripts > build.gradle(Module: app)に</p>

<p>```java
android {</p>

<pre><code>...
buildTypes {
    release {
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
...
</code></pre>

<p>}
```</p>

<p>という記述が追加されます。<br/>
３. GradleScripts > proguard-rules.proに記述を追加</p>

<p><code>java
-keepnames public class * extends io.realm.RealmObject
-keep class io.realm.** { *; }
-dontwarn javax.**
-dontwarn io.realm.**
</code></p>

<p>これでRealmを利用する準備が整いました。<br/>
実際にコードを書いていきましょう。</p>

<h5>保存オブジェクトの生成</h5>

<p>Realmでは保存する対象を<code>RLMObject</code>として作成します。<br/>
SQLiteでいうところのテーブルを生成しているイメージでしょうか。</p>

<p>今回は練習として<code>Engineer.java</code>内で<code>Engineer</code>クラスを作ってみました。</p>

<p>```java
// Engineer.java
public class Engineer extends RealmObject {</p>

<pre><code>@PrimaryKey
private int id;
private int level;
private String name;
private String businessTitle;
private RealmList&lt;Skill&gt; skills;
private Date createDateTime;
private Date updateDateTime;

public int getId() {
    return id;
}
public void setId(int id) {
    this.id = id;
}

public int getLevel() {
    return level;
}
public void setLevel(int level) {
    this.level = level;
}

public String getName() {
    return name;
}
public void setName(String name) {
    this.name = name;
}

public String getBusinessTitle() {
    return businessTitle;
}
public void setBusinessTitle(String businessTitle) {
    this.businessTitle = businessTitle;
}

public RealmList&lt;Skill&gt; getSkills() {
    return skills;
}
public void setSkills(RealmList&lt;Skill&gt; skills) {
    this.skills = skills;
}

public Date getCreateDateTime() {
    return createDateTime;
}
public void setCreateDateTime(Date createDateTime) {
    this.createDateTime = createDateTime;
}

public Date getUpdateDateTime() {
    return updateDateTime;
}
public void setUpdateDateTime(Date updateDateTime) {
    this.updateDateTime = updateDateTime;
}
</code></pre>

<p>}
```</p>

<p>```java
// Skill.java
public class Skill extends RealmObject {</p>

<pre><code>@PrimaryKey
private int id;
private String skill;

public int getId() {
    return id;
}
public void setId(int id) {
    this.id = id;
}

public String getSkill() {
    return skill;
}
public void setSkill(String skill) {
    this.skill = skill;
}
</code></pre>

<p>}
```</p>

<p>ポイントとしては、<code>skills</code>のように配列の形で値を保持したい場合は<code>RealmList</code>を利用するということです。</p>

<h5>オブジェクトのセレクト/インサート</h5>

<p>続いて先ほど生成したオブジェクトをセレクト/インサートしてみましょう。</p>

<p>```java
// MainActivity.java
public class MainActivity extends Activity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Realm realm = Realm.getInstance(this);
    RealmQuery&lt;Engineer&gt; query = realm.where(Engineer.class);
    query.equalTo("name", "ABC123");
    RealmResults&lt;Engineer&gt; result = query.findAll();

    if(result.size() &gt; 0) {
        // 検索結果が見つかった場合
        Engineer engineer = result.first();
        int level = engineer.getLevel();
        String name = engineer.getName();
        String businessTitle = engineer.getBusinessTitle();
        RealmList&lt;Skill&gt; skills = engineer.getSkills();
        Date createDateTime = engineer.getCreateDateTime();

        Log.d("MainActivity", "name: " + name + ", businessTitle: " + businessTitle);
    } else {
        // 検索結果が見つからなかった場合
        realm.beginTransaction();
        Engineer engineer = realm.createObject(Engineer.class);
        engineer.setLevel(1);
        engineer.setName("ABC123");
        engineer.setBusinessTitle("新米エンジニア");

        Skill skill = realm.createObject(Skill.class);
        skill.setSkill("Java");
        engineer.getSkills().add(skill);
        engineer.setCreateDateTime(new Date());

        realm.commitTransaction();
    }
}
....
</code></pre>

<p>}
```</p>

<p>ここでは<code>name = "ABC123"</code>のデータを検索して、見つからない場合は新規データをインサートし、見つかった場合はデータをログに出力しています。<br/>
書込みには<code>beginTransaction()</code>と<code>commitTransaction()</code>を利用しています。</p>

<h5>データの確認</h5>

<p>Realm Browserを使いたいところですが、現在調査中です&hellip;。<br/>
デバイス内のどこにファイルがあるのかについてはわかったのですが、うまくファイルをPCに取り込めません&hellip;。<br/>
継続調査をし、ブログにアップしますね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでBackgroundでiBeaconを検知しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/06/altbeacon-service/"/>
    <updated>2015-06-06T22:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/06/altbeacon-service</id>
    <content type="html"><![CDATA[<h4>AltBeaconでiBeacon検知(アプリBG起動編)</h4>

<p>さて、以前、<a href="http://grandbig.github.io/blog/2015/05/16/altbeacon/">AltBeaconを使ってAndroidでiBeaconを検知しよう</a>で基本的な使い方を説明させて頂きました。<br/>
今回はアプリをBackgroundで起動しているときにもiBeaconを検知できるようにしてみようと思います。<br/>
Background起動だけであれば、Applicationクラスを使うことで実現できますが、<br/>
Serviceクラスを使えば、アプリをBackgroundから削除したとしても動作させることができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>では早速、ソースコードを見て行きましょう。</p>

<p>```java
// BeaconServiceクラス
// Serviceを拡張し、BootstrapNotifierをインターフェースとしたBeaconServiceクラス
public class BeaconService extends Service implements BootstrapNotifier {</p>

<pre><code>public static final String TAG = org.altbeacon.beacon.service.BeaconService.class.getSimpleName();

// iBeaconのデータを認識するためのParserフォーマット
public static final String IBEACON_FORMAT = "m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24";
// BGで監視するiBeacon領域
private RegionBootstrap regionBootstrap;
// iBeacon検知用のマネージャー
private BeaconManager beaconManager;
// UUID設定用
private Identifier identifier;
// iBeacon領域
private Region region;
// 監視するiBeacon領域の名前
private String beaconName;

@Override
public void onCreate() {
    super.onCreate();

    // iBeaconのデータを受信できるようにParserを設定
    beaconManager = BeaconManager.getInstanceForApplication(this);
    beaconManager.getBeaconParsers().add(new BeaconParser().setBeaconLayout(IBEACON_FORMAT));
    // BGでiBeacon領域を監視(モニタリング)するスキャン間隔を設定
    beaconManager.setBackgroundBetweenScanPeriod(1000);

    // UUIDの作成
    identifier = Identifier.parse("A56BA1E1-C06E-4C08-8467-DB6F5BD04486");
    // Beacon名の作成
    beaconName = "MyBeacon-000206C6";
    // major, minorの指定はしない
    region = new Region(beaconName, identifier, null, null);
    regionBootstrap = new RegionBootstrap(this, region);

    beaconManager.setRangeNotifier(new RangeNotifier() {
        @Override
        public void didRangeBeaconsInRegion(Collection&lt;Beacon&gt; beacons, Region region) {
            // 検出したビーコンの情報を全部Logに書き出す
            for(Beacon beacon : beacons) {
                Log.d(TAG, "UUID:" + beacon.getId1() + ", major:" + beacon.getId2() + ", minor:" + beacon.getId3() + ", Distance:" + beacon.getDistance() + ",RSSI" + beacon.getRssi() + ", TxPower" + beacon.getTxPower());
            }
        }
    });
}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
    return super.onStartCommand(intent, flags, startId);
}

@Override
public void onDestroy() {
    super.onDestroy();
}

@Override
public IBinder onBind(Intent intent) {
    return null;
}

@Override
public void didEnterRegion(Region region) {
    // 領域侵入
    Log.d(TAG, "Enter Region");
    // アプリをFG起動させる
    Intent intent = new Intent(this, MainActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);

    try {
        // レンジング開始
        beaconManager.startRangingBeaconsInRegion(region);
    } catch(RemoteException e) {
        // 例外が発生した場合
        e.printStackTrace();
    }
}

@Override
public void didExitRegion(Region region) {
    // 領域退出
    Log.d(TAG, "Exit Region");
    try {
        // レンジング停止
        beaconManager.stopRangingBeaconsInRegion(region);
    } catch() {
        // 例外が発生した場合
        e.printStackTrace();
    }
}

@Override
public void didDetermineStateForRegion(int i, Region region) {
    // 領域に対する状態が変化
    Log.d(TAG, "Determine State: " + i);
}
</code></pre>

<p>}
```</p>

<p><strong>領域進入時にアプリをFG起動</strong> させているので、アプリがFG起動したらiBeacon領域に侵入したと言えます。<br/>
さあ、これでiOSとほぼ同じ挙動を実現できました。</p>

<p>蛇足かもしれませんが、<code>MainActivity.java</code>でサービスを起動する部分も書いておきます。</p>

<p>```java
// MainActivity.java</p>

<p>public class MainActivity extends ActionBarActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // サービス起動
    startService(new Intent(MainActivity.this, BeaconService.class));
}

&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>ソースコードは<a href="https://github.com/grandbig/altBeaconSample/tree/service">こちら</a>から。<br/>
serviceブランチを参照ください。</p>

<p>といったところで本日はここまで。</p>

<p>参考:<br/>
<a href="http://dev.classmethod.jp/smartphone/android-beacon-library-introduction-5/">[Android][iBeacon] Android Beacon Library パラっと解説 その5 [バックグラウンド領域監視]</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
