<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-02-11T16:19:33+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TableLayoutを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/11/android-tablelayout/"/>
    <updated>2016-02-11T15:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/11/android-tablelayout</id>
    <content type="html"><![CDATA[<h4>TableLayoutとは</h4>

<p><code>TabLayout</code>に続いて、本日は、<code>TableLayout</code>を使った画面作成をしたいと思います。<br/>
Androidでの<code>TableLayout</code>はHTMLで言うところの<code>&lt;table&gt;</code>タグに当たり、<br/>
iOSで言うところの<code>UITableView</code>が使いどころとしては近いと思います。</p>

<p>筆者が思うに<code>TableLayout</code>は決まったレイアウトの実装には向いていますが、<br/>
複雑かつオリジナリティの高い画面を作成する際に使うには難しいのかなと感じています。<br/>
何はともあれ、実装に入っていきましょう。</p>

<p>本記事で利用しているAndroid Studioは <strong>Android Studio 2.0 Beta 3</strong> になります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>TableLayoutを使ってみよう！</h4>

<p>順を追って説明していきます。<br/>
目標として、下図のような画面作成を目指したいと思います。</p>

<p><img src="/images/android-tablelayout.png" alt="TableLayoutを使った画面" /></p>

<p>これは1行目と4行目は1つのカラムで、2行目と3行目は2つのカラムで構成しています。</p>

<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tablelayoutapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tablelayoutapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tablelayoutapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2．<code>content_main.xml</code>に<code>TableLayout</code>を追加<br/>
続いて、<code>TableLayout</code>をレイアウトファイルに実装していきましょう。</p>

<p>```java
// content_main.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="0dp"
android:paddingLeft="0dp"
android:paddingRight="0dp"
android:paddingTop="0dp"
android:background="#efeff4"
app:layout_behavior="@string/appbar_scrolling_view_behavior"
tools:context="com.example.ec_dev.tablelayoutapplication.MainActivity"
tools:showIn="@layout/activity_main"&gt;

&lt;!-- 構成要素が多くなる場合を踏まえて、画面スクロールを可能にしておく --&gt;
&lt;ScrollView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/scrollView"&gt;

    &lt;TableLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:stretchColumns="0"&gt;

        &lt;!-- 1行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?android:attr/textAppearanceLarge"
                android:text="@string/top_message"
                android:layout_span="2"
                android:id="@+id/textView"
                android:textSize="18sp"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;!-- 2行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#ffffff"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="44dp"
                android:text="@string/androidText"
                android:id="@+id/textView2"
                android:textSize="20sp"
                android:gravity="center_vertical"
                android:paddingRight="8dp"
                android:paddingLeft="@dimen/8dp"/&gt;

            &lt;ImageButton
                android:layout_width="44dp"
                android:layout_height="44dp"
                android:id="@+id/imageButton"
                android:src="@drawable/ic_android_white_18dp"
                android:background="@color/colorAccent"
                android:layout_marginRight="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;-- 3行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#ffffff"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="44dp"
                android:text="@string/animalText"
                android:id="@+id/textView2"
                android:textSize="20sp"
                android:gravity="center_vertical"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;

            &lt;ImageButton
                android:layout_width="44dp"
                android:layout_height="44dp"
                android:id="@+id/imageButton"
                android:src="@drawable/ic_pets_white_18dp"
                android:background="@color/colorAccent"
                android:layout_marginRight="8dp"/&gt;
        &lt;/TableRow&gt;

        &lt;!-- 4行目 --&gt;
        &lt;TableRow
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:paddingBottom="8dp"
            android:paddingTop="8dp"&gt;

            &lt;TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?android:attr/textAppearanceLarge"
                android:text="@string/last_message"
                android:layout_span="2"
                android:id="@+id/textView"
                android:textSize="18sp"
                android:paddingRight="8dp"
                android:paddingLeft="8dp"/&gt;
        &lt;/TableRow&gt;
    &lt;/TableLayout&gt;
&lt;/ScrollView&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>ポイントは下記です。</p>

<ul>
<li><code>TableLayout</code>に<code>android:stretchColumns="0"</code>を設定して、0番目のカラム幅を極力大きくする</li>
<li>1行目と4行目<code>TableRow</code>の<code>TextView</code>は<code>android:layout_span="2"</code>を設定して、カラム2つ分とする</li>
</ul>


<p>その他、必要なケースに合わせてデザインを整えましょう。</p>

<p>因みに、<code>activity_main.xml</code>は以下にしています。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:fitsSystemWindows="true"
tools:context="com.example.takahiro.tablelayoutapplication.MainActivity"&gt;

&lt;android.support.design.widget.AppBarLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:theme="@style/AppTheme.AppBarOverlay"&gt;

    &lt;android.support.v7.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        app:popupTheme="@style/AppTheme.PopupOverlay" /&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include layout="@layout/content_main" /&gt;
</code></pre>

<p>&lt;/android.support.design.widget.CoordinatorLayout>
```</p>

<p>デフォルトでは<code>FloatingActionButton</code>が作成されますが、不要なので削除しています。</p>

<p>合わせて、<code>strings.xml</code>も編集しています。</p>

<p>```java
<resources></p>

<pre><code>&lt;string name="app_name"&gt;TableLayoutApplication&lt;/string&gt;
&lt;string name="action_settings"&gt;Settings&lt;/string&gt;
&lt;string name="top_message"&gt;Congratulation!!&lt;/string&gt;
&lt;string name="androidText"&gt;Android&lt;/string&gt;
&lt;string name="animalText"&gt;Animals&lt;/string&gt;
&lt;string name="last_message"&gt;
    - this page is simple sample.\n- this app is simple sample application.\n- GO! GO!
&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>レイアウトを作成している途中、レイアウトが想定していない形になったり、崩れてしまったりすることがあるかもしれません。<br/>
そんなときはレイアウトファイル上でリフレッシュボタンをクリックして更新しましょう。</p>

<p><img src="/images/android-tablelayout-2.png" alt="レイアウトのリフレッシュ" /></p>

<p>さて、如何だったでしょうか？
今回の記事で紹介したProjectのソースは<a href="https://github.com/grandbig/TableLayoutSample">GitHub grandbig/TableLayoutSample</a>に載せてあります。<br/>
ご自由にご利用ください。</p>

<p>因みに、今回はレイアウトの作成に注目して記事を書きました。<br/>
そのため、ボタンアクションなど必要な場合は<code>MainActivity.java</code>に処理を追加してください。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabLayoutを使ってTabを画面最下部に配置しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/11/android-tablayout-2/"/>
    <updated>2016-02-11T14:08:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/11/android-tablayout-2</id>
    <content type="html"><![CDATA[<h4>Tabを最下部に配置する方法について</h4>

<p>さて、本日は簡単な話なのですが、案外ハマったので、メモ代わりに書いておきたいと思います。<br/>
以前、<a href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/">Android Studio2.0: TabLayoutを使ってみよう！</a>でTabLayoutを使ったTabデザインの実装方法について紹介させて頂きました。<br/>
そのときはTabをToolbarのすぐ下に配置していましたが、画面最下部に配置したいことも出てくることでしょう。<br/>
その方法について書きたいと思います。</p>

<p>TabLayoutの配置は<code>content_main.xml</code>に下記のように書きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```java
// content_main.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
app:layout_behavior="@string/appbar_scrolling_view_behavior"
tools:context="com.example.takahiro.tablayoutsample2.MainActivity"
tools:showIn="@layout/activity_main"&gt;

&lt;android.support.v4.view.ViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_above="@+id/tabs"/&gt;

&lt;android.support.design.widget.TabLayout
    android:id="@+id/tabs"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/colorPrimary"
    app:tabSelectedTextColor="@color/colorAccent"
    app:tabTextColor="#ffffff"
    android:layout_alignParentBottom="true"
    android:layout_alignParentLeft="true"
    android:layout_alignParentStart="true"/&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>ポイントは、</p>

<ul>
<li><code>android.support.v4.view.ViewPager</code>に<code>android:layout_above="@+id/tabs"</code>設定</li>
<li><code>android.support.design.widget.TabLayout</code>に<code>android:layout_alignParentBottom</code>, <code>android:layout_alignParentLeft</code>, <code>android:layout_alignParentStart</code>の3つをtrueで設定</li>
</ul>


<p>です。<br/>
これにより、下図のような配置ができているはずです。</p>

<p><img src="/images/android-tablayout-2.png" alt="Tabを最下部配置" /></p>

<p>なんてことはない単純な話なのですが、<strong>Android Design Support Library</strong> に惑わされてしまいました。  <br/>
もっとAndroidアプリの特にUI・UX周りの開発に精進したいと思います。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioでの初回作成Activityから考えるログイン画面]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/07/android-login-activity/"/>
    <updated>2016-02-07T22:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/07/android-login-activity</id>
    <content type="html"><![CDATA[<h4>Androidアプリでのログイン画面を考えてみる</h4>

<p>筆者はこれまでAndroidアプリでログイン画面を作成するとき、</p>

<ul>
<li>Person Name / E-mail / Phone などの必須入力項目用のText Fields</li>
<li>Password / Password(Numeric) のパスワード入力用のText Fields</li>
<li>ログインするためのアクション用のButton</li>
</ul>


<p>のみを配置することを考えていました。<br/>
今回はAndroid Studioで初回プロジェクト作成時に<code>Login Activity</code>を選択することで、<br/>
Google側の意図を読み取ってみようと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Login画面のレイアウト</h4>

<p>では、早速、Android Studioを起動して<code>Login Activity</code>を選択したプロジェクトを作成しましょう。<br/>
(本ブログでは <strong>Android Studio 2.0 Beta2</strong> を利用しています。)</p>

<p>プロジェクト作成時に<code>Add an Activity to Mobile</code>のところで<code>Login Activity</code>を選択してみましょう。</p>

<p><img src="/images/login-activity-1.png" alt="Login Activityを選択する" /></p>

<p>すると、下記のようなレイアウトファイルが作成されます。</p>

<p>```java
// activity_login.xml
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
...
tools:context="com.example.takahiro.loginapplicationsample.LoginActivity"&gt;

&lt;!-- Login progress --&gt;
&lt;ProgressBar
    android:id="@+id/login_progress"
    style="?android:attr/progressBarStyleLarge"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginBottom="8dp"
    android:visibility="gone" /&gt;

&lt;ScrollView
    android:id="@+id/login_form"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;LinearLayout
        android:id="@+id/email_login_form"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;

        &lt;android.support.design.widget.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;AutoCompleteTextView
                android:id="@+id/email"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/prompt_email"
                android:inputType="textEmailAddress"
                android:maxLines="1"
                android:singleLine="true" /&gt;

        &lt;/android.support.design.widget.TextInputLayout&gt;

        &lt;android.support.design.widget.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;EditText
                android:id="@+id/password"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/prompt_password"
                android:imeActionId="@+id/login"
                android:imeActionLabel="@string/action_sign_in_short"
                android:imeOptions="actionUnspecified"
                android:inputType="textPassword"
                android:maxLines="1"
                android:singleLine="true" /&gt;

        &lt;/android.support.design.widget.TextInputLayout&gt;

        &lt;Button
            android:id="@+id/email_sign_in_button"
            style="?android:textAppearanceSmall"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/action_sign_in"
            android:textStyle="bold" /&gt;

    &lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>実際に画面はこのようになっています。<br/>
<img src="/images/login-activity-2.png" alt="ログイン画面" /></p>

<p>その成り立ちを見てみましょう。</p>

<h5>ProgressBarが配置されている</h5>

<p>まず、目についたのは<code>ProgressBar</code>です。<br/>
ログインボタンをタップした後に、サーバへの問い合わせをすることが通常だと思います。<br/>
サーバ通信後、データを受け取るまでにはそれなりに時間がかかる可能性があります。<br/>
なので、ユーザにロード中であることを知らせる<code>ProgressBar</code>は必要であるということなのでしょう。</p>

<h5>ScrollViewが配置されている</h5>

<p>続いて、<code>ScrollView</code>に着目しました。<br/>
デフォルトでは、EmailとPasswordに加えて、ログインボタンが設置されているのみですが、<br/>
場合によってはユーザ名, 電話番号, 住所, クレジットカード番号などなど必要とされる項目が多くなる可能性があります。<br/>
初めからそういったことを想定した作りになっているということでしょう。</p>

<h5>TextInputLayoutが配置されている</h5>

<p>そして、何と言っても、<code>android.support.design.widget.TextInputLayout</code>は目立つのではないでしょうか？<br/>
これは <strong>Android Design Support Library</strong> に含まれるマテリアルデザインを体現したパーツとなります。<br/>
<code>TextView</code>等を囲むことで、ユーザの入力アクションに合わせて、入力項目タイトルがスムーズに移動するデザインを実装することができます。<br/>
いわゆる<a href="https://www.google.com/design/spec/components/text-fields.html#">Floating Label</a>というものですね。</p>

<h5>AutoCompleteTextViewが使われている</h5>

<p>今回はEmailの入力が必要とのことで、<code>AutoCompleteTextView</code>によるユーザ補助機能がついています。<br/>
もちろん、<code>AutoCompleteTextView</code>をレイアウト上で設定しても補助機能を実装することはできず、<br/>
<code>AndroidManifest.xml</code>で設定が必要です。</p>

<p>```java
// AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.loginapplicationsample"&gt;

&lt;!-- To auto-complete the email text field in the login form with the user's emails --&gt;
&lt;uses-permission android:name="android.permission.GET_ACCOUNTS" /&gt;
&lt;uses-permission android:name="android.permission.READ_PROFILE" /&gt;
&lt;uses-permission android:name="android.permission.READ_CONTACTS" /&gt;

...
</code></pre>

<p></manifest>
```</p>

<p>このように<code>GET_ACCOUNTS</code>, <code>READ_PROFILE</code>, <code>READ_CONTACTS</code>の3つのパーミッションを設定します。<br/>
これによって、下図のようにアプリ起動後に連絡先へのアクセス許可を求めるアラートを表示することができます。</p>

<p><img src="/images/login-activity-3.png" alt="連絡先へのアクセス許可アラート" /></p>

<h4>LoginActivityについて</h4>

<p>続いて、<code>LoginActivity</code>はどのようになっているのか見ていきましょう。</p>

<h5>LoaderManagerを利用</h5>

<p><code>LoginActivity</code>では<code>LoaderManager</code>を利用しています。</p>

<p>```java
// LoginActivity.java
public class LoginActivity extends AppCompatActivity implements LoaderCallbacks<Cursor> {</p>

<pre><code>...
@Override
public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {
    return new CursorLoader(this,
        // Retrieve data rows for the device user's 'profile' contact.
        Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
            ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,

        // Select only email addresses.
        ContactsContract.Contacts.Data.MIMETYPE +
            " = ?", new String[]{ContactsContract.CommonDataKinds.Email
        .CONTENT_ITEM_TYPE},

        // Show primary email addresses first. Note that there won't be
        // a primary email address if the user hasn't specified one.
        ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");
}

@Override
public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {
    List&lt;String&gt; emails = new ArrayList&lt;&gt;();
    cursor.moveToFirst();
    while (!cursor.isAfterLast()) {
        emails.add(cursor.getString(ProfileQuery.ADDRESS));
        cursor.moveToNext();
    }

    addEmailsToAutoComplete(emails);
}

@Override
public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {

}
...
</code></pre>

<p>}
```</p>

<p><code>LoaderCallbacks&lt;Cursor&gt;</code>を <strong>implements</strong> しているのは、<br/>
<code>onCreateLoader</code>, <code>onLoadFinished</code>でEmailのオートコンプリート機能を実装するためです。</p>

<h5>showProgressメソッドの実装</h5>

<p>レイアウトで実装した<code>ProgressBar</code>のアニメーションまで実装されています。<br/>
また、AndroidのOSバージョンに合わせて適切な処理分けもされています。</p>

<p>```java
// LoginActivity.java
@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
private void showProgress(final boolean show) {</p>

<pre><code>// On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
// for very easy animations. If available, use these APIs to fade-in
// the progress spinner.
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {
    int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
    mLoginFormView.animate().setDuration(shortAnimTime).alpha(
            show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
        @Override
        public void onAnimationEnd(Animator animation) {
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    });

    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
    mProgressView.animate().setDuration(shortAnimTime).alpha(
            show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
        @Override
        public void onAnimationEnd(Animator animation) {
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
        }
    });
} else {
    // The ViewPropertyAnimator APIs are not available, so simply show
    // and hide the relevant UI components.
    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
}
</code></pre>

<p>}
```</p>

<h5>非同期通信処理の実装</h5>

<p>ログイン処理は通常、必ずサーバ通信を伴います。<br/>
そのため、バックグラウンドでの通信処理が必要となるんですが、それが既に側だけ実装されています。</p>

<p>```java
// LoginActivity.java
public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean> {</p>

<pre><code>private final String mEmail;
private final String mPassword;

UserLoginTask(String email, String password) {
    mEmail = email;
    mPassword = password;
}

@Override
protected Boolean doInBackground(Void... params) {
    // TODO: attempt authentication against a network service.

    try {
        // Simulate network access.
        Thread.sleep(2000);
    } catch (InterruptedException e) {
        return false;
    }

    for (String credential : DUMMY_CREDENTIALS) {
        String[] pieces = credential.split(":");
        if (pieces[0].equals(mEmail)) {
            // Account exists, return true if the password matches.
            return pieces[1].equals(mPassword);
        }
    }

    // TODO: register the new account here.
    return true;
}
</code></pre>

<p>}
```</p>

<p>さて、いかがだったでしょうか？<br/>
レイアウトはまだしも、オートコンプリートの実装まで必要な場合は、自作するよりも、Android Studioでデフォルト実装してくれる<code>LoginActivity</code>の方が工数省略ができそうですよね！
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabLayoutを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/"/>
    <updated>2016-01-30T14:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/30/android-tablayout</id>
    <content type="html"><![CDATA[<h4>TabHostとTabLayoutについて</h4>

<p>前回、AndroidでTabHostを使ったアプリの作り方について見ていきましたが、本日は <strong>TabLayout</strong> を使ったアプリの作り方を見ていきたいと思います。<br/>
なぜ似たような名前のクラスがあるのかと思いますよね？<br/>
実はTabHostはもう随分前から非推奨とされており、同様の機能を実装するために <strong>TabLayout</strong> が提供されているようなんです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>もう少し、詳しく説明すると、<br/>
『Google I/O 2014』にて<a href="https://www.google.com/design/spec/material-design/introduction.html">Material Design</a>が発表されました。<br/>
(これはGoogleが提唱するパソコンやスマートフォン向けのアプリまたはWebサイト等の新しいデザイン方式です。)</p>

<p>そして、『<a href="https://events.google.com/io2015/#">Google I/O 2015</a>』にてMaterial Designを実現するためのサポートライブラリ『 <strong>Android Design Support Library</strong> 』が発表されました。<br/>
<strong>TabLayout</strong> はこの <strong>Android Design Support Library</strong> に含まれるコンポーネントの1つなのです。</p>

<p>また、現在(2016/01/30時点)、公式でリリースされているAndroid Studioでは自身で<code>build.gradle</code>に<code>compile 'com.android.support:design:23.+'</code>と追記する必要がありますが、Preview版として提供されている <strong>Android Studio 2.0</strong> では、Blank Activityですらデフォルトで <strong>Android Design Support Library</strong> を利用するように組み込まれています。</p>

<p>さて、今日はそんな <strong>Android Design Support Library</strong> のコンポーネントの1つ <strong>TabLayout</strong> について見ていきたいと思います。</p>

<!-- more -->


<h4>TabLayoutを使ってみよう！</h4>

<p>TabHostを書いた時と同じ書式で書いていきます。</p>

<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tabhostapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tabhostapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tabhostapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2．<code>content_main.xml</code>にTabLayoutを追加<br/>
ページ遷移のためにViewPagerも追加しておきます。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>....
tools:showIn="@layout/activity_main"&gt;

&lt;android.support.design.widget.TabLayout
    android:id="@+id/tabs"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" /&gt;

&lt;android.support.v4.view.ViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_below="@+id/tabs" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>因みに、<code>activity_main.xml</code>は以下にしています。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:fitsSystemWindows="true"
tools:context="com.example.takahiro.tablayoutsample2.MainActivity"&gt;

&lt;android.support.design.widget.AppBarLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:theme="@style/AppTheme.AppBarOverlay"&gt;

    &lt;android.support.v7.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        app:popupTheme="@style/AppTheme.PopupOverlay" /&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include layout="@layout/content_main" /&gt;
</code></pre>

<p>&lt;/android.support.design.widget.CoordinatorLayout>
```</p>

<p>デフォルトで<code>FloatingActionButton</code>が作成されますが、こちらは今回不要なので削除しています。</p>

<p>3．表示ページ用に<code>Fragment</code>を継承した<code>PageFragment</code>を作成<br/>
メニューから<code>BlankFragment</code>を追加すると、ある程度デフォルトで処理を作成してくれます。<br/>
まずは<code>PageFragment.java</code>ファイルは下記に一部修正しました。</p>

<p>```java
package com.example.takahiro.tablayoutapplication;</p>

<p>import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;</p>

<p>public class PageFragment extends Fragment {</p>

<pre><code>private static final String ARG_PARAM = "page";
private String mParam;
private OnFragmentInteractionListener mListener;

// コンストラクタ
public PageFragment() {
}

public static PageFragment newInstance(int page) {
    PageFragment fragment = new PageFragment();
    Bundle args = new Bundle();
    args.putInt(ARG_PARAM, page);
    fragment.setArguments(args);
    return fragment;
}

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    if (getArguments() != null) {
        mParam = getArguments().getString(ARG_PARAM);
    }
}

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
    Bundle savedInstanceState) {
    // Inflate the layout for this fragment
    int page = getArguments().getInt(ARG_PARAM, 0);
    View view = inflater.inflate(R.layout.fragment_page, container, false);
    (TextView)view.findViewById(R.id.textView)).setText("Page" + page);

    return view;
}

public void onButtonPressed(Uri uri) {
    if (mListener != null) {
        mListener.onFragmentInteraction(uri);
    }
}

@Override
public void onAttach(Context context) {
    super.onAttach(context);
    if (context instanceof OnFragmentInteractionListener) {
        mListener = (OnFragmentInteractionListener) context;
    } else {
        throw new RuntimeException(context.toString()
            + " must implement OnFragmentInteractionListener");
    }
}

@Override
public void onDetach() {
    super.onDetach();
    mListener = null;
}

public interface OnFragmentInteractionListener {
    void onFragmentInteraction(Uri uri);
}
</code></pre>

<p>}
```</p>

<p>続いて、XMLファイルは下記です。</p>

<p>```java
&lt;FrameLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context="com.example.takahiro.tablayoutapplication.PageFragment"&gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Page"
    android:id="@+id/textView"
    android:layout_centerVertical="true"
    android:layout_centerHorizontal="true"
    android:textSize="32sp" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>4．<code>MainActivity.java</code>にTabLayoutとViewPagerを組み込み</p>

<p>```java
public class MainActivity extends AppCompatActivity implements ViewPager.OnPageChangeListener,</p>

<pre><code>    PageFragment.OnFragmentInteractionListener {

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);

    // xmlからTabLayoutの取得
    TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
    // xmlからViewPagerを取得
    ViewPager viewPager = (ViewPager) findViewById(R.id.pager);
    // ページタイトル配列
    final String[] pageTitle = {"HOME", "EVENT", "SETTING"};

    // 表示Pageに必要な項目を設定
    FragmentPagerAdapter adapter = new FragmentPagerAdapter(getSupportFragmentManager()) {
        @Override
        public Fragment getItem(int position) {
            return PageFragment.newInstance(position + 1);
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return pageTitle[position];
        }

        @Override
        public int getCount() {
            return pageTitle.length;
        }
    };

    // ViewPagerにページを設定
    viewPager.setAdapter(adapter);
    viewPager.addOnPageChangeListener(this);

    // ViewPagerをTabLayoutを設定
    tabLayout.setupWithViewPager(viewPager);
}
....

@Override
public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
}

@Override
public void onPageSelected(int position) {
}

@Override
public void onPageScrollStateChanged(int state) {
}

@Override
public void onFragmentInteraction(Uri uri) {
}
</code></pre>

<p>}
```</p>

<p>これでタブによる画面遷移が完成です。</p>

<p><img src="/images/android-tablayout.png" alt="TabLayoutによるアプリ画面" /></p>

<h4>スワイプを禁止した単純なTab遷移にするためには</h4>

<p>筆者のTabの印象には、横スワイプによる画面切替は含まれていませんでした。<br/>
なので、スワイプによる画面切替を禁止してみましょう。<br/>
<a href="http://pastebin.com/J63dvdDB">HoldableViewPager</a>をまんま使います。</p>

<p><code>ViewPager</code>を継承した<code>HoldableViewPager</code>を作成します。</p>

<p>```java
package com.example.takahiro.tablayoutapplication;</p>

<p>import android.content.Context;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.view.MotionEvent;</p>

<p>public class HoldableViewPager extends ViewPager {</p>

<pre><code>// スワイプの禁止フラグ(true: スワイプ禁止, false: スワイプOK)
boolean isSwipeHold = false;

public void setSwipeHold(boolean enabled) {
    isSwipeHold = enabled;
}

// コンストラクタ
public HoldableViewPager(Context context) {
    super(context);
}

// コンストラクタ
public HoldableViewPager(Context context, AttributeSet attributeSet) {
    super(context, attributeSet);
}

@Override
public boolean onTouchEvent(MotionEvent motionEvent) {
    if(isSwipeHold) {
        // スワイプ禁止の場合
        return false;
    }

    return super.onTouchEvent(motionEvent);
}

@Override
public boolean onInterceptTouchEvent(MotionEvent event) {
    if(isSwipeHold) {
        // スワイプ禁止の場合
        return false;
    }

    return super.onInterceptTouchEvent(event);
}
</code></pre>

<p>}
```</p>

<p>この<code>HoldableViewPager</code>を<code>MainActivity.java</code>で使います。<br/>
使い方は簡単で<code>ViewPager</code>を<code>HoldableViewPager</code>で置き換えて、<code>isSwipeHold</code>をtrueにするだけです。</p>

<p>```java
&hellip;.</p>

<p>@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>....
// xmlからTabLayoutの取得
TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
// xmlからViewPagerを取得
HoldableViewPager viewPager = (HoldableViewPager)findViewById(R.id.pager);
// スワイプ禁止設定の追加
viewPager.setSwipeHold(true);
....
</code></pre>

<p>}
&hellip;.
```</p>

<p>また、<code>content_main.xml</code>も<code>ViewPager</code>から<code>HoldableViewPager</code>に変更する必要があります。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>...
&lt;com.example.takahiro.tablayoutapplication.HoldableViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_below="@+id/tabs"
 /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabHostを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/27/android-tabhost/"/>
    <updated>2016-01-27T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/27/android-tabhost</id>
    <content type="html"><![CDATA[<h4>始めに</h4>

<p>たまには本格的にAndroid開発についてブログを書こうと思います。<br/>
最近は特に期待のAndroid Studio2.0の本リリースが近づいていると思いますし、筆者的にもiOS開発が集中してしまっていたのでモチベーションがAndroidによっています。<br/>
何はともあれシリーズ化を目指して、一先ず <strong>TabHost</strong> から扱ってみたいと思います。</p>

<h4>TabHostを使ってみよう</h4>

<p>さて、早速、TabHostを実装してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tabhostapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tabhostapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tabhostapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2． <code>content_main.xml</code>にTabHostを追加<br/>
下記のようなxmlが作成されます。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>.....
tools:showIn="@layout/activity_main"&gt;

&lt;TabHost
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/tabHost"
    android:layout_alignParentTop="true"
    android:layout_alignParentStart="true"&gt;

    &lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;

        &lt;TabWidget
            android:id="@android:id/tabs"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;&lt;/TabWidget&gt;

        &lt;FrameLayout
            android:id="@android:id/tabcontent"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;
        &lt;/FrameLayout&gt;
    &lt;/LinearLayout&gt;
&lt;/TabHost&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>3．各Tabで表示するためのActivityを作成<br/>
右クリックして、NEW > Activity > Empty Activityを追加したいタブ数分 追加する。</p>

<p>各Tabのレイアウトやデザインは各xmlファイルに書きたいので、<br/>
先ほどの<code>content_main.xml</code>を修正します。</p>

<p>```java
&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab1" /&gt;
</code></pre>

<p></LinearLayout></p>

<p>&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout2"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab2" /&gt;
</code></pre>

<p></LinearLayout></p>

<p>&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout3"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab3" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p><code>&lt;include layout="@layout/activity_tab1"&gt;</code>のようにファイルのインクルードを指定します。</p>

<p>4．<code>MainActivity.java</code>に<code>TabHost</code>の初期化および設定をする</p>

<p>```java
public class MainActivity extends AppCompatActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // TabHostの初期化および設定処理
    initTabs();

    .....
}

....

protected void initTabs() {
    try {
        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
        tabHost.setup();
        TabHost.TabSpec spec;

        // Tab1
        spec = tabHost.newTabSpec("Tab1")
                .setIndicator("Home", ContextCompat.getDrawable(this, R.drawable.ic_home_white_36dp))
                .setContent(R.id.linearLayout);
        tabHost.addTab(spec);

        // Tab2
        spec = tabHost.newTabSpec("Tab2")
                .setIndicator("Event", ContextCompat.getDrawable(this, R.drawable.ic_event_white_36dp))
                .setContent(R.id.linearLayout2);
        tabHost.addTab(spec);

        // Tab3
        spec = tabHost.newTabSpec("Tab3")
                .setIndicator("Event", ContextCompat.getDrawable(this, R.drawable.ic_event_white_36dp))
                .setContent(R.id.linearLayout3);
        tabHost.addTab(spec);

        tabHost.setCurrentTab(0);
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (RuntimeException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>これでタブでの画面遷移完成です！<br/>
完成した画面がこちら(<code>TabHost</code>しか実装してないので、簡素ですが&hellip;)</p>

<p><img src="/images/android-tabhost.png" alt="TabHost実装画面" /></p>

<p>本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
