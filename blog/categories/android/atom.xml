<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-02-06T12:15:57+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabLayoutを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/30/android-tablayout/"/>
    <updated>2016-01-30T14:32:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/30/android-tablayout</id>
    <content type="html"><![CDATA[<h4>TabHostとTabLayoutについて</h4>

<p>前回、AndroidでTabHostを使ったアプリの作り方について見ていきましたが、本日は <strong>TabLayout</strong> を使ったアプリの作り方を見ていきたいと思います。<br/>
なぜ似たような名前のクラスがあるのかと思いますよね？<br/>
実はTabHostはもう随分前から非推奨とされており、同様の機能を実装するために <strong>TabLayout</strong> が提供されているようなんです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>もう少し、詳しく説明すると、<br/>
『Google I/O 2014』にて<a href="https://www.google.com/design/spec/material-design/introduction.html">Material Design</a>が発表されました。<br/>
(これはGoogleが提唱するパソコンやスマートフォン向けのアプリまたはWebサイト等の新しいデザイン方式です。)</p>

<p>そして、『<a href="https://events.google.com/io2015/#">Google I/O 2015</a>』にてMaterial Designを実現するためのサポートライブラリ『 <strong>Android Design Support Library</strong> 』が発表されました。<br/>
<strong>TabLayout</strong> はこの <strong>Android Design Support Library</strong> に含まれるコンポーネントの1つなのです。</p>

<p>また、現在(2016/01/30時点)、公式でリリースされているAndroid Studioでは自身で<code>build.gradle</code>に<code>compile 'com.android.support:design:23.+'</code>と追記する必要がありますが、Preview版として提供されている <strong>Android Studio 2.0</strong> では、Blank Activityですらデフォルトで <strong>Android Design Support Library</strong> を利用するように組み込まれています。</p>

<p>さて、今日はそんな <strong>Android Design Support Library</strong> のコンポーネントの1つ <strong>TabLayout</strong> について見ていきたいと思います。</p>

<!-- more -->


<h4>TabLayoutを使ってみよう！</h4>

<p>TabHostを書いた時と同じ書式で書いていきます。</p>

<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tabhostapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tabhostapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tabhostapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2．<code>content_main.xml</code>にTabLayoutを追加<br/>
ページ遷移のためにViewPagerも追加しておきます。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>....
tools:showIn="@layout/activity_main"&gt;

&lt;android.support.design.widget.TabLayout
    android:id="@+id/tabs"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" /&gt;

&lt;android.support.v4.view.ViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_below="@+id/tabs" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>3．表示ページ用に<code>Fragment</code>を継承した<code>PageFragment</code>を作成<br/>
メニューから<code>BlankFragment</code>を追加すると、ある程度デフォルトで処理を作成してくれます。<br/>
まずは<code>PageFragment.java</code>ファイルは下記に一部修正しました。</p>

<p>```java
package com.example.takahiro.tablayoutapplication;</p>

<p>import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;</p>

<p>public class PageFragment extends Fragment {</p>

<pre><code>private static final String ARG_PARAM = "page";
private String mParam;
private OnFragmentInteractionListener mListener;

// コンストラクタ
public PageFragment() {
}

public static PageFragment newInstance(int page) {
    PageFragment fragment = new PageFragment();
    Bundle args = new Bundle();
    args.putInt(ARG_PARAM, page);
    fragment.setArguments(args);
    return fragment;
}

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    if (getArguments() != null) {
        mParam = getArguments().getString(ARG_PARAM);
    }
}

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
    Bundle savedInstanceState) {
    // Inflate the layout for this fragment
    int page = getArguments().getInt(ARG_PARAM, 0);
    View view = inflater.inflate(R.layout.fragment_page, container, false);
    (TextView)view.findViewById(R.id.textView)).setText("Page" + page);

    return view;
}

public void onButtonPressed(Uri uri) {
    if (mListener != null) {
        mListener.onFragmentInteraction(uri);
    }
}

@Override
public void onAttach(Context context) {
    super.onAttach(context);
    if (context instanceof OnFragmentInteractionListener) {
        mListener = (OnFragmentInteractionListener) context;
    } else {
        throw new RuntimeException(context.toString()
            + " must implement OnFragmentInteractionListener");
    }
}

@Override
public void onDetach() {
    super.onDetach();
    mListener = null;
}

public interface OnFragmentInteractionListener {
    void onFragmentInteraction(Uri uri);
}
</code></pre>

<p>}
```</p>

<p>続いて、XMLファイルは下記です。</p>

<p>```java
&lt;FrameLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context="com.example.takahiro.tablayoutapplication.PageFragment"&gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Page"
    android:id="@+id/textView"
    android:layout_centerVertical="true"
    android:layout_centerHorizontal="true"
    android:textSize="32sp" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>4．<code>MainActivity.java</code>にTabLayoutとViewPagerを組み込み</p>

<p>```java
public class MainActivity extends AppCompatActivity implements ViewPager.OnPageChangeListener, PageFragment.OnFragmentInteractionListener {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);

    // xmlからTabLayoutの取得
    TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
    // xmlからViewPagerを取得
    ViewPager viewPager = (ViewPager) findViewById(R.id.pager);
    // ページタイトル配列
    final String[] pageTitle = {"HOME", "EVENT", "SETTING"};

    // 表示Pageに必要な項目を設定
    FragmentPagerAdapter adapter = new FragmentPagerAdapter(getSupportFragmentManager()) {
        @Override
        public Fragment getItem(int position) {
            return PageFragment.newInstance(position + 1);
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return pageTitle[position];
        }

        @Override
        public int getCount() {
            return pageTitle.length;
        }
    }

    // ViewPagerにページを設定
    viewPager.setAdapter(adapter);
    viewPager.addOnPageChangeListener(this);

    // ViewPagerをTabLayoutを設定
    tabLayout.setupWithViewPager(viewPager);
}
....

@Override
public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
}

@Override
public void onPageSelected(int position) {
}

@Override
public void onPageScrollStateChanged(int state) {
}

@Override
public void onFragmentInteraction(Uri uri) {
}
</code></pre>

<p>}
```</p>

<p>これでタブによる画面遷移が完成です。</p>

<p><img src="/images/android-tablayout.png" alt="TabLayoutによるアプリ画面" /></p>

<h4>スワイプを禁止した単純なTab遷移にするためには</h4>

<p>筆者のTabの印象には、横スワイプによる画面切替は含まれていませんでした。<br/>
なので、スワイプによる画面切替を禁止してみましょう。<br/>
<a href="http://pastebin.com/J63dvdDB">HoldableViewPager</a>をまんま使います。</p>

<p><code>ViewPager</code>を継承した<code>HoldableViewPager</code>を作成します。</p>

<p>```java
package com.example.takahiro.tablayoutapplication;</p>

<p>import android.content.Context;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.view.MotionEvent;</p>

<p>public class HoldableViewPager extends ViewPager {</p>

<pre><code>// スワイプの禁止フラグ(true: スワイプ禁止, false: スワイプOK)
boolean isSwipeHold = false;

public void setSwipeHold(boolean enabled) {
    isSwipeHold = enabled;
}

// コンストラクタ
public HoldableViewPager(Context context) {
    super(context);
}

// コンストラクタ
public HoldableViewPager(Context context, AttributeSet attributeSet) {
    super(context, attributeSet);
}

@Override
public boolean onTouchEvent(MotionEvent motionEvent) {
    if(isSwipeHold) {
        // スワイプ禁止の場合
        return false;
    }

    return super.onTouchEvent(motionEvent);
}

@Override
public boolean onInterceptTouchEvent(MotionEvent event) {
    if(isSwipeHold) {
        // スワイプ禁止の場合
        return false;
    }

    return super.onInterceptTouchEvent(event);
}
</code></pre>

<p>}
```</p>

<p>この<code>HoldableViewPager</code>を<code>MainActivity.java</code>で使います。<br/>
使い方は簡単で<code>ViewPager</code>を<code>HoldableViewPager</code>で置き換えて、<code>isSwipeHold</code>をtrueにするだけです。</p>

<p>```java
&hellip;.</p>

<p>@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>....
// xmlからTabLayoutの取得
TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
// xmlからViewPagerを取得
HoldableViewPager viewPager = (HoldableViewPager)findViewById(R.id.pager);
// スワイプ禁止設定の追加
viewPager.setSwipeHold(true);
....
</code></pre>

<p>}
&hellip;.
```</p>

<p>また、<code>content_main.xml</code>も<code>ViewPager</code>から<code>HoldableViewPager</code>に変更する必要があります。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>...
&lt;com.example.takahiro.tablayoutapplication.HoldableViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_below="@+id/tabs"
 /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio2.0: TabHostを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/27/android-tabhost/"/>
    <updated>2016-01-27T23:14:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/27/android-tabhost</id>
    <content type="html"><![CDATA[<h4>始めに</h4>

<p>たまには本格的にAndroid開発についてブログを書こうと思います。<br/>
最近は特に期待のAndroid Studio2.0の本リリースが近づいていると思いますし、筆者的にもiOS開発が集中してしまっていたのでモチベーションがAndroidによっています。<br/>
何はともあれシリーズ化を目指して、一先ず <strong>TabHost</strong> から扱ってみたいと思います。</p>

<h4>TabHostを使ってみよう</h4>

<p>さて、早速、TabHostを実装してみたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>1． Android Studioで<code>Blank Activity</code>を選択して、プロジェクトを新規作成<br/>
下記のようなプロジェクト構成ができあがります。</p>

<p>```java
app
 ┣━━ manifests
 ┃    ┗━━ AndroidManifest.xml
 ┣━━ java
 ┃    ┣━━ com.example.takahiro.tabhostapplication
 ┃    ┃      ┗━━ MainActivity
 ┃    ┣━━ com.example.takahiro.tabhostapplication(androidTest)
 ┃    ┃      ┗━━ ApplicationTest
 ┃    ┗━━ com.example.takahiro.tabhostapplication(test)
 ┃           ┗━━ ExampleUnitTest
 ┗━━ res</p>

<pre><code>  ┣━━ drawable
  ┣━━ layout
  ┃     ┣━━ activity_main.xml
  ┃     ┗━━ content_main.xml
  ┣━━ menu
  ┣━━ mipmap
  ┗━━ values
</code></pre>

<p>```</p>

<p>2． <code>content_main.xml</code>にTabHostを追加<br/>
下記のようなxmlが作成されます。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>.....
tools:showIn="@layout/activity_main"&gt;

&lt;TabHost
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/tabHost"
    android:layout_alignParentTop="true"
    android:layout_alignParentStart="true"&gt;

    &lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;

        &lt;TabWidget
            android:id="@android:id/tabs"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;&lt;/TabWidget&gt;

        &lt;FrameLayout
            android:id="@android:id/tabcontent"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;

            &lt;LinearLayout
                android:id="@+id/linearLayout3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;
        &lt;/FrameLayout&gt;
    &lt;/LinearLayout&gt;
&lt;/TabHost&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>3．各Tabで表示するためのActivityを作成<br/>
右クリックして、NEW > Activity > Empty Activityを追加したいタブ数分 追加する。</p>

<p>各Tabのレイアウトやデザインは各xmlファイルに書きたいので、<br/>
先ほどの<code>content_main.xml</code>を修正します。</p>

<p>```java
&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab1" /&gt;
</code></pre>

<p></LinearLayout></p>

<p>&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout2"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab2" /&gt;
</code></pre>

<p></LinearLayout></p>

<p>&lt;LinearLayout</p>

<pre><code>android:id="@+id/linearLayout3"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"&gt;
&lt;include layout="@layout/activity_tab3" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p><code>&lt;include layout="@layout/activity_tab1"&gt;</code>のようにファイルのインクルードを指定します。</p>

<p>4．<code>MainActivity.java</code>に<code>TabHost</code>の初期化および設定をする</p>

<p>```java
public class MainActivity extends AppCompatActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // TabHostの初期化および設定処理
    initTabs();

    .....
}

....

protected void initTabs() {
    try {
        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
        tabHost.setup();
        TabHost.TabSpec spec;

        // Tab1
        spec = tabHost.newTabSpec("Tab1")
                .setIndicator("Home", ContextCompat.getDrawable(this, R.drawable.ic_home_white_36dp))
                .setContent(R.id.linearLayout);
        tabHost.addTab(spec);

        // Tab2
        spec = tabHost.newTabSpec("Tab2")
                .setIndicator("Event", ContextCompat.getDrawable(this, R.drawable.ic_event_white_36dp))
                .setContent(R.id.linearLayout2);
        tabHost.addTab(spec);

        // Tab3
        spec = tabHost.newTabSpec("Tab3")
                .setIndicator("Event", ContextCompat.getDrawable(this, R.drawable.ic_event_white_36dp))
                .setContent(R.id.linearLayout3);
        tabHost.addTab(spec);

        tabHost.setCurrentTab(0);
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (RuntimeException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>これでタブでの画面遷移完成です！<br/>
完成した画面がこちら(<code>TabHost</code>しか実装してないので、簡素ですが&hellip;)</p>

<p><img src="/images/android-tabhost.png" alt="TabHost実装画面" /></p>

<p>本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlinを使ってみよう！(2) : OkHttp編]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/23/kotlin-okhttp/"/>
    <updated>2016-01-23T16:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/23/kotlin-okhttp</id>
    <content type="html"><![CDATA[<h4>今回のKotlinのお題は？</h4>

<p>さて、久々にKotlinについて勉強をしたいと思います。<br/>
今回のお題は<a href="http://grandbig.github.io/blog/2016/01/19/android-okhttp/">Android StudioでOkHttp3.0.1を使おう！</a>にしたいと思います。<br/>
では、早速見ていきましょう！</p>

<h4>KotlinでOkHttp3.0.1を使うソースを書いてみる</h4>

<p>まずは、OkHttp3.0.1を使ったソースを書いてみます。<br/>
OkHttpの導入はJavaと同じです。</p>

<p>build.gradle(app)に下記を追加しましょう。</p>

<p>```java
dependencies {</p>

<pre><code>...
compile 'com.squareup.okhttp3:okhttp:3.0.1'
</code></pre>

<p>}
```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>Javaで紹介したときと同様に、Open Weather Map APIを使ったGETリクエストを利用します。<br/>
OkHttpでは通信処理をメインスレッドで実行しようとするとエラーが発生してしまうので、<code>AsyncTask</code>を利用します。<br/>
<code>AsyncTask</code>を継承したクラスを書きます。</p>

<p>```java
package com.example.takahiro.simpleapplication</p>

<p>import android.os.AsyncTask</p>

<p>open class MyAsyncTask : AsyncTask&lt;Void, Void, String>() {</p>

<pre><code>override fun doInBackground(vararg params: Void): String? {
    return null
}
</code></pre>

<p>}
```</p>

<p>ここでKotlinの書き方を説明しましょう。</p>

<ul>
<li><code>open</code>

<ul>
<li>他のクラスからの継承を許可するアノテーション</li>
<li><code>MainActivity</code>で<code>doInBackground</code>メソッドをオーバーライドするために設定<br/>
　</li>
</ul>
</li>
<li><code>vararg</code>

<ul>
<li>可変長にしたい引数の名前に設定</li>
<li><code>donInBackground</code>は引数が1つ以上設定可能な可変長なものを持つため利用</li>
</ul>
</li>
</ul>


<p>続いて、<code>MainActivity</code>を書いていきます。</p>

<p>```java
package com.example.takahiro.simpleapplication</p>

<p>import android.os.AsyncTask
&hellip;
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response</p>

<p>class MainActivity:AppCompatActivity() {</p>

<pre><code>internal var client = OkHttpClient()

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)
    val toolbar = findViewById(R.id.toolbar) as Toolbar
    setSupportActionBar(toolbar)

    &lt;省略&gt;

    // GET Weatherボタンを取得して、クリック処理を実装
    val btn = findViewById(R.id.button) as Button
    btn.setOnClickListener {
        object: MyAsyncTask() {
            override fun doInBackground(vararg params: Void): String {
                var res: String = ""
                try {
                    res = run("http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&amp;q=Tokyo")
                    val resJson = JsonObject(res)
                    val weathers = resJson.getJSONArray("weather")
                    val weather = weathers.getJsonObject(0)
                    val description = weather.getString("description")
                    Log.i("MainActivity", description)
                    res = description
                } catch(e: IOException) {
                    e.printStackTrace()
                } catch(e: JSONException) {
                    e.printStackTrace()
                }
            }
        }.execute()
    }
}

fun run(url: String): String {
    val request = Request.Builder().url(url).build()

    val response = client.newCall(request).execute()
    return response.body().string()
}
</code></pre>

<p>}
```</p>

<p>ここでもKotlinの書き方を説明します。</p>

<ul>
<li><code>object</code>

<ul>
<li>匿名サブクラスのインスタンスの返却式</li>
<li>setOnClickListenerの引数にMyAsyncTaskを匿名クラスとして指定するために利用</li>
<li>Kotlinではインスタンス生成に<code>new</code>は利用しない</li>
</ul>
</li>
</ul>


<p>さて、いかがでしたでしょうか？<br/>
KotlinはSwiftに近い書式で書けるため、筆者にとっては非常にわかりやすいです。<br/>
ただ、Javaとの互換性が非常に高いため、やはりそれなりに覚えなくてはならないことがありますね。</p>

<p>これからも少しずつではありますが、Kotlinを見ていきたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでOkHttp3.0.1を使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/19/android-okhttp/"/>
    <updated>2016-01-19T00:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/19/android-okhttp</id>
    <content type="html"><![CDATA[<h4>Volleyではなく、OkHttpを使おう！</h4>

<p>さて、本日は久しぶりにAndroidの話です。<br/>
これまでAndroidの通信ライブラリとして活躍してきた <strong>Volley</strong> が敬遠されている傾向があります。<br/>
と言うのも、Volleyが依存しているApache Http ClientがAPI Level22からdeprecatedになったためです。</p>

<p>では、今後は何を使っていけば良いのでしょうか？<br/>
もちろん開発者自身で通信処理を0から実装することも悪いことではないのですが、<br/>
やはり、少しでも開発効率を良くするためにオープンソースを利用したいところですよね。</p>

<p>そこで、昨今、皆が使っているものとして<a href="http://square.github.io/okhttp/">OkHttp</a>というものがあります。<br/>
これは <strong>HTTP</strong> だけでなく、 <strong>HTTP/2</strong> も対応しているため、きちんと最新を追えているという安心感がある点も良い印象です。</p>

<p>また、<a href="http://techlife.cookpad.com/entry/2015/06/25/093507">クックパッド開発者ブログ</a>でも <strong>OkHttp</strong> への移行を進める旨が書かれていますので、知っていて損はなさそうです。</p>

<p>今回は、OKHttpを使ったサンプルを載せたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>OKHttpの導入</h4>

<p>Android StudioにOKHttpを導入しましょう。<br/>
導入は超簡単です。</p>

<p>```java
dependencies {</p>

<pre><code>...
compile 'com.squareup.okhttp3:okhttp:3.0.1'
</code></pre>

<p>}
```</p>

<p>はい。以上です。</p>

<h4>OKHttpでGETリクエストを実行</h4>

<p>さて、GETリクエストを実行してみましょう。<br/>
今回は下記のようなサンプルアプリを作成しました。<br/>
<img src="/images/android-okhttp.png" alt="サンプルアプリ" /></p>

<p>まずは、<code>AsyncTask</code>を継承したクラスを下記のように作ります。</p>

<p>```java
package com.example.takahiro.simpleapplication;</p>

<p>import android.os.AsyncTask;</p>

<p>/<em>*
 * Created by kato_takahiro on 2016/01/19.
 </em>/
public class MyAsyncTask extends AsyncTask&lt;Void, Void, String> {</p>

<pre><code>// コンストラクタ
public MyAsyncTask() {
    super();
}

@Override
protected String doInBackground(Void... params) {
    return null;
}
</code></pre>

<p>}
```</p>

<p>さて、<code>MainActivity.java</code>内で実行してみます。<br/>
このとき、 <strong>GET Weather</strong> ボタンをタップしたときに天気情報を取得するものとします。</p>

<p>```java
public class MainActivity extends AppCompatActivity {</p>

<pre><code>OkHttpClient client = new OkHttpClient();

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);

    &lt;省略&gt;

    // GET Weatherボタンを取得して、クリック処理を実装
    Button btn = (Button) findViewById(R.id.button);
    btn.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            new MyAsyncTask() {
                @Override
                protected String doInBackground(Void... params) {
                    String res = null;
                    try {
                        String result = run("http://api.openweathermap.org/data/2.5/weather?APPID=&lt;自身のAPPID&gt;&amp;q=Tokyo");
                        JSONObject resJson = new JSONObject(result);
                        JSONArray weathers = resJson.getJSONArray("weather");
                        JSONObject weather = weathers.getJSONObject(0);
                        String description = weather.getString("description");

                        res = description;
                    } catch(IOException e) {
                        e.printStackTrace();
                    } catch(JSONException e) {
                        e.printStackTrace();
                    }

                    return res;
                }
            }.execute();
        }
    }
}

// OKHttpを使った通信処理
public String run(String url) throws IOException {
    Request request = new Request.Builder()
            .url(url)
            .build();

    Response response = client.newCall(request).execute();
    return response.body().string();
}
</code></pre>

<p>}
```</p>

<p>忘れずに<code>AndroidManifest.xml</code>で通信許可しておきましょう。</p>

<p>```java
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.simpleapplication"&gt;

&lt;uses-permission android:name="android.permission.INTERNET" &gt;&lt;/uses-permission&gt;

&lt;省略&gt;
</code></pre>

<p></manifest>
```</p>

<p>まだ、GETしか試していませんが、割りと簡単に実装できますね。</p>

<h4>注意点</h4>

<p>初め、実装するにあたって、躓いたことを書いておきます。<br/>
何となしに<code>OKHttp</code>を実装し、デバッグしたところ、<code>android.os.NetworkOnMainThreadException</code>が発生しました。</p>

<p>これは、通信処理をメインスレッドで実行しようとしたために発生しました。<br/>
そのため、<code>AsyncTask</code>を使って別スレッドで通信処理を実行するように改修する必要がありました。</p>

<p>さて、今回は筆者用のメモの意味合いが強いのですが、Androidアプリの開発に関する記事も今度どんどん増やしていきたいと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlinを使ってみよう！(1)]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/kotlin-android-2/"/>
    <updated>2015-11-08T23:54:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/kotlin-android-2</id>
    <content type="html"><![CDATA[<h3>Kotlinを勉強しよう</h3>

<p>さて、本日はKotlinを勉強してみたいと思います。<br/>
勉強の題材としては、<a href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-android/">Google Sign-In SDK for Androidを使ってみよう！</a>で取り上げた <strong>Google Sign-In SDKによるOAuth2.0認証</strong> にしたいと思います。<br/>
その中で筆者が抑えておくべきと思ったところを基礎からメモっていきます。</p>

<p>(KotlinをAndroid Studioに導入する方法は以前書いた<a href="http://grandbig.github.io/blog/2015/10/25/kotlin-android/">Android StudioにKotlinを導入しよう！</a>を参照ください。)</p>

<p>では、早速、見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Kotlinで変数/定数の書き方</h4>

<p>最も基本的なことですが、変数/定数の書き方から異なります。</p>

<p>Javaの場合</p>

<p><code>java
private final String TAG = "MainActivity";  // 定数
private GoogleApiClient mGoogleApiClient;   // 変数
</code></p>

<p>Kotlinの場合</p>

<p><code>java
private val TAG:Int = "MainActivity"                    // 定数
private var mGoogleApiClient:GoogleApiClient? = null    // 変数
</code></p>

<p>ポイントは下記です。</p>

<ul>
<li>定数は<code>val</code>で変数は<code>var</code>を使う</li>
<li>定数は、val 定数名:型名 = 値</li>
<li>変数は、var 変数名:型名 = 値</li>
<li>初期値未定の変数は型名の後ろに<code>?</code>をつけて、<code>null</code>を代入<br/>
これをしないと『Property must be initialized or be abstract』エラーが発生する</li>
</ul>


<h4>Kotlinでのstatic定数の書き方</h4>

<p>Kotlinでは<code>static</code>は使いません。</p>

<p>Javaの場合</p>

<p><code>java
private static final String TAG = "MainActivity";
private static final int RC_SIGN_IN = 9001;
</code></p>

<p>Kotlinの場合</p>

<p>```java
companion object {</p>

<pre><code>val TAG = "MainActivity"
val RC_SIGN_IN = 9001
</code></pre>

<p>}
```</p>

<h4>Kotlinでimplementの書き方</h4>

<p>Google Sign-In SDKでOAuth2.0認証をする際に、<code>GoogleApiClient.OnConnectionFailedListener</code>と<code>View.OnClickListener</code>のインターフェースを継承していました。</p>

<p>Javaの場合</p>

<p>```java
public class MainActivity extends AppCompatActivity implements GoogleApiClient.OnConnectionFailedListener, View.OnClickListener {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>Kotlinの場合</p>

<p>```java
class MainActivity : AppCompatActivity(), GoogleApiClient.OnConnectionFailedListener, View.OnClickListener {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>Kotlionでは<code>implements</code>ワードは書かずに<code>extends</code>したクラスの後ろに<code>,</code>区切りで書きます。</p>

<h4>Kotlinでキャストの書き方</h4>

<p>Google Sign-Inを実行するために置いていたボタンをソース上で取り出すときに<code>SignInButton</code>でキャストしていました。</p>

<p>Javaの場合</p>

<p><code>java
SignInButton signInButton = (SignInButton) findViewById(R.id.button_sign_in);
</code></p>

<p>Kotlinの場合</p>

<p><code>java
var signInButton:SignInButton = findViewById(R.id.button_sign_in) as SignInButton
</code></p>

<p>Kotlinでは<code>as</code>を使ってキャストします。</p>

<h4>KotlinでOverrideの書き方</h4>

<p>Javaの場合</p>

<p>```java
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>Kotlinの場合</p>

<p>```java
override fun onCreate(savedInstanceState: Bundle?) {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>Kotlinでは、<code>@</code>は不要で<code>fun</code>の前に書きます。<br/>
(Swiftと違って、<code>func</code>とは書かないんです。)</p>

<h4>Kotlinでメソッドの戻り値の書き方</h4>

<p>Javaの場合</p>

<p>```java
@Override
public boolean onCreateOptionsMenu(Menu menu) {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>Kotlinの場合</p>

<p>```java
override fun onCreateOptionsMenu(menu: Menu): Boolean {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>『fun メソッド名(引数名: 引数の型): 戻り値の型』 と書きます。</p>

<h4>Kotlinでswitch文の書き方</h4>

<p>```java
@Override
public void onClick(View v) {</p>

<pre><code>switch (v.getId()) {
    case R.id.button_sign_in:
        signIn();
        break;
}
</code></pre>

<p>}
```</p>

<p>Kotlinの場合</p>

<p>```java
override fun onClick(view:View) {</p>

<pre><code>when(view.id) {
    R.id.button_sign_in -&gt; {
        signIn()
    }
}
</code></pre>

<p>}
```</p>

<p>Kotlinでは<code>switch</code>ワードを使いません。<code>when</code>を使います。<br/>
<code>case 条件:</code>という書き方が<code>条件 -&gt;</code>になります。</p>

<p>さて、今回気になったのはこんなところです。<br/>
これからもどんどんKotlinでの書き方に慣れていきたいと思います。</p>

<p>因みに、今回のソースは、<a href="https://github.com/grandbig/KotlinGoogleSignInSample">GitHub</a>に上げてあります。<br/>
ご自由にお使いください。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
