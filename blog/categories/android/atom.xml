<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2015-06-21T02:27:44+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android StudioでRealmを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/20/android-realm/"/>
    <updated>2015-06-20T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/20/android-realm</id>
    <content type="html"><![CDATA[<h4>Realmを読み込もう！</h4>

<p>AndroidでもRealmを導入してみたいと思います。<br/>
今後、SQLite同様、非常に重宝されるライブラリであることは間違いないですし。</p>

<h5>Realmの導入方法</h5>

<p>ここに関しては、<a href="https://realm.io/jp/docs/java/latest/">公式サイト</a>を見れば、特に困ることはないと思いますが、筆者と同様にAndroidアプリ開発の初心者は躓くかもしれないので、詳しく書いてみようと思います。</p>

<p>まず、 <strong>Realm Android</strong> を検索すると、『 <strong>Realm Java(0.☓☓.☓)</strong> 』のような検索結果が出てくると思います。<br/>
ここで注意して頂きたいのが、そのページが最新版のページになっているか否かということです。<br/>
旧バージョンの場合、URLが <strong><a href="https://realm.io/jp/docs/java/0.%E2%98%93%E2%98%93.%E2%98%93/**">https://realm.io/jp/docs/java/0.%E2%98%93%E2%98%93.%E2%98%93/**</a> のようにバージョンが含まれています。<br/>
最新版の場合は、URLが </strong><a href="https://realm.io/jp/docs/java/latest/**">https://realm.io/jp/docs/java/latest/**</a> のように <strong>latest</strong> というワードが含まれています。</p>

<p>現在(2015/06/20)は <strong>0.80.3</strong> が最新版となっています。</p>

<p>では、導入していきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>１. GradleScripts > build.gradle(Module: app) のdependenciesを修正
<code>compile 'io.realm:realm-android:0.80.3'</code>を<code>dependencies { ... }</code>に追加します。<br/>
２. メニューのFile > Project Structure&hellip; > Modulesのapp > Build Types > release > Minify Enabledをtrueに変更
<img src="/images/android-realm1.png" alt="Minify Enabledを設定" /><br/>
これにより、GradleScripts > build.gradle(Module: app)に</p>

<p>```java
android {</p>

<pre><code>...
buildTypes {
    release {
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
...
</code></pre>

<p>}
```</p>

<p>という記述が追加されます。<br/>
３. GradleScripts > proguard-rules.proに記述を追加</p>

<p><code>java
-keepnames public class * extends io.realm.RealmObject
-keep class io.realm.** { *; }
-dontwarn javax.**
-dontwarn io.realm.**
</code></p>

<p>これでRealmを利用する準備が整いました。<br/>
実際にコードを書いていきましょう。</p>

<h5>保存オブジェクトの生成</h5>

<p>Realmでは保存する対象を<code>RLMObject</code>として作成します。<br/>
SQLiteでいうところのテーブルを生成しているイメージでしょうか。</p>

<p>今回は練習として<code>Engineer.java</code>内で<code>Engineer</code>クラスを作ってみました。</p>

<p>```java
// Engineer.java
public class Engineer extends RealmObject {</p>

<pre><code>@PrimaryKey
private int id;
private int level;
private String name;
private String businessTitle;
private RealmList&lt;Skill&gt; skills;
private Date createDateTime;
private Date updateDateTime;

public int getId() {
    return id;
}
public void setId(int id) {
    this.id = id;
}

public int getLevel() {
    return level;
}
public void setLevel(int level) {
    this.level = level;
}

public String getName() {
    return name;
}
public void setName(String name) {
    this.name = name;
}

public String getBusinessTitle() {
    return businessTitle;
}
public void setBusinessTitle(String businessTitle) {
    this.businessTitle = businessTitle;
}

public RealmList&lt;Skill&gt; getSkills() {
    return skills;
}
public void setSkills(RealmList&lt;Skill&gt; skills) {
    this.skills = skills;
}

public Date getCreateDateTime() {
    return createDateTime;
}
public void setCreateDateTime(Date createDateTime) {
    this.createDateTime = createDateTime;
}

public Date getUpdateDateTime() {
    return updateDateTime;
}
public void setUpdateDateTime(Date updateDateTime) {
    this.updateDateTime = updateDateTime;
}
</code></pre>

<p>}
```</p>

<p>```java
// Skill.java
public class Skill extends RealmObject {</p>

<pre><code>@PrimaryKey
private int id;
private String skill;

public int getId() {
    return id;
}
public void setId(int id) {
    this.id = id;
}

public String getSkill() {
    return skill;
}
public void setSkill(String skill) {
    this.skill = skill;
}
</code></pre>

<p>}
```</p>

<p>ポイントとしては、<code>skills</code>のように配列の形で値を保持したい場合は<code>RealmList</code>を利用するということです。</p>

<h5>オブジェクトのセレクト/インサート</h5>

<p>続いて先ほど生成したオブジェクトをセレクト/インサートしてみましょう。</p>

<p>```java
// MainActivity.java
public class MainActivity extends Activity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Realm realm = Realm.getInstance(this);
    RealmQuery&lt;Engineer&gt; query = realm.where(Engineer.class);
    query.equalTo("name", "ABC123");
    RealmResults&lt;Engineer&gt; result = query.findAll();

    if(result.size() &gt; 0) {
        // 検索結果が見つかった場合
        Engineer engineer = result.first();
        int level = engineer.getLevel();
        String name = engineer.getName();
        String businessTitle = engineer.getBusinessTitle();
        RealmList&lt;Skill&gt; skills = engineer.getSkills();
        Date createDateTime = engineer.getCreateDateTime();

        Log.d("MainActivity", "name: " + name + ", businessTitle: " + businessTitle);
    } else {
        // 検索結果が見つからなかった場合
        realm.beginTransaction();
        Engineer engineer = realm.createObject(Engineer.class);
        engineer.setLevel(1);
        engineer.setName("ABC123");
        engineer.setBusinessTitle("新米エンジニア");

        Skill skill = realm.createObject(Skill.class);
        skill.setSkill("Java");
        engineer.getSkills().add(skill);
        engineer.setCreateDateTime(new Date());

        realm.commitTransaction();
    }
}
....
</code></pre>

<p>}
```</p>

<p>ここでは<code>name = "ABC123"</code>のデータを検索して、見つからない場合は新規データをインサートし、見つかった場合はデータをログに出力しています。<br/>
書込みには<code>beginTransaction()</code>と<code>commitTransaction()</code>を利用しています。</p>

<h5>データの確認</h5>

<p>Realm Browserを使いたいところですが、現在調査中です&hellip;。<br/>
デバイス内のどこにファイルがあるのかについてはわかったのですが、うまくファイルをPCに取り込めません&hellip;。<br/>
継続調査をし、ブログにアップしますね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでBackgroundでiBeaconを検知しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/06/altbeacon-service/"/>
    <updated>2015-06-06T22:00:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/06/altbeacon-service</id>
    <content type="html"><![CDATA[<h4>AltBeaconでiBeacon検知(アプリBG起動編)</h4>

<p>さて、以前、<a href="http://grandbig.github.io/blog/2015/05/16/altbeacon/">AltBeaconを使ってAndroidでiBeaconを検知しよう</a>で基本的な使い方を説明させて頂きました。<br/>
今回はアプリをBackgroundで起動しているときにもiBeaconを検知できるようにしてみようと思います。<br/>
Background起動だけであれば、Applicationクラスを使うことで実現できますが、<br/>
Serviceクラスを使えば、アプリをBackgroundから削除したとしても動作させることができます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>では早速、ソースコードを見て行きましょう。</p>

<p>```java
// BeaconServiceクラス
// Serviceを拡張し、BootstrapNotifierをインターフェースとしたBeaconServiceクラス
public class BeaconService extends Service implements BootstrapNotifier {</p>

<pre><code>public static final String TAG = org.altbeacon.beacon.service.BeaconService.class.getSimpleName();

// iBeaconのデータを認識するためのParserフォーマット
public static final String IBEACON_FORMAT = "m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24";
// BGで監視するiBeacon領域
private RegionBootstrap regionBootstrap;
// iBeacon検知用のマネージャー
private BeaconManager beaconManager;
// UUID設定用
private Identifier identifier;
// iBeacon領域
private Region region;
// 監視するiBeacon領域の名前
private String beaconName;

@Override
public void onCreate() {
    super.onCreate();

    // iBeaconのデータを受信できるようにParserを設定
    beaconManager = BeaconManager.getInstanceForApplication(this);
    beaconManager.getBeaconParsers().add(new BeaconParser().setBeaconLayout(IBEACON_FORMAT));
    // BGでiBeacon領域を監視(モニタリング)するスキャン間隔を設定
    beaconManager.setBackgroundBetweenScanPeriod(1000);

    // UUIDの作成
    identifier = Identifier.parse("A56BA1E1-C06E-4C08-8467-DB6F5BD04486");
    // Beacon名の作成
    beaconName = "MyBeacon-000206C6";
    // major, minorの指定はしない
    region = new Region(beaconName, identifier, null, null);
    regionBootstrap = new RegionBootstrap(this, region);

    beaconManager.setRangeNotifier(new RangeNotifier() {
        @Override
        public void didRangeBeaconsInRegion(Collection&lt;Beacon&gt; beacons, Region region) {
            // 検出したビーコンの情報を全部Logに書き出す
            for(Beacon beacon : beacons) {
                Log.d(TAG, "UUID:" + beacon.getId1() + ", major:" + beacon.getId2() + ", minor:" + beacon.getId3() + ", Distance:" + beacon.getDistance() + ",RSSI" + beacon.getRssi() + ", TxPower" + beacon.getTxPower());
            }
        }
    });
}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
    return super.onStartCommand(intent, flags, startId);
}

@Override
public void onDestroy() {
    super.onDestroy();
}

@Override
public IBinder onBind(Intent intent) {
    return null;
}

@Override
public void didEnterRegion(Region region) {
    // 領域侵入
    Log.d(TAG, "Enter Region");
    // アプリをFG起動させる
    Intent intent = new Intent(this, MainActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);

    try {
        // レンジング開始
        beaconManager.startRangingBeaconsInRegion(region);
    } catch(RemoteException e) {
        // 例外が発生した場合
        e.printStackTrace();
    }
}

@Override
public void didExitRegion(Region region) {
    // 領域退出
    Log.d(TAG, "Exit Region");
    try {
        // レンジング停止
        beaconManager.stopRangingBeaconsInRegion(region);
    } catch() {
        // 例外が発生した場合
        e.printStackTrace();
    }
}

@Override
public void didDetermineStateForRegion(int i, Region region) {
    // 領域に対する状態が変化
    Log.d(TAG, "Determine State: " + i);
}
</code></pre>

<p>}
```</p>

<p><strong>領域進入時にアプリをFG起動</strong> させているので、アプリがFG起動したらiBeacon領域に侵入したと言えます。<br/>
さあ、これでiOSとほぼ同じ挙動を実現できました。</p>

<p>蛇足かもしれませんが、<code>MainActivity.java</code>でサービスを起動する部分も書いておきます。</p>

<p>```java
// MainActivity.java</p>

<p>public class MainActivity extends ActionBarActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // サービス起動
    startService(new Intent(MainActivity.this, BeaconService.class));
}

&lt;省略&gt;
</code></pre>

<p>}</p>

<p>```</p>

<p>ソースコードは<a href="https://github.com/grandbig/altBeaconSample/tree/service">こちら</a>から。<br/>
serviceブランチを参照ください。</p>

<p>といったところで本日はここまで。</p>

<p>参考:<br/>
<a href="http://dev.classmethod.jp/smartphone/android-beacon-library-introduction-5/">[Android][iBeacon] Android Beacon Library パラっと解説 その5 [バックグラウンド領域監視]</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studioでvolley frameworkを利用するまで]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/24/android-volley/"/>
    <updated>2015-05-24T20:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/24/android-volley</id>
    <content type="html"><![CDATA[<h4>volley frameworkを使ったプロジェクトをGitHubにアップする</h4>

<p>本日はAndroidについて書きます。<br/>
Androidアプリを開発する上で、通信系のframeworkを使うなら、<a href="https://android.googlesource.com/platform/frameworks/volley">volley framework</a>を選択すると思います。<br/>
非常に便利なframworkである反面、導入が面倒だったりします。<br/>
筆者はiOSエンジニアなので、<a href="https://cocoapods.org/">CocoaPods</a>をよく使うのですが、如何に便利なツールなのかがよくわかりました笑</p>

<h5>プロジェクトの作成</h5>

<p>まずは、Android Studioでプロジェクトを作成して、GitHubにアップしましょう。</p>

<ol>
<li>Android Studioでプロジェクトを作成(VolleySampleを作成)</li>
<li>GitHubで新規repogitoryを作成</li>
<li>Android Studioのプロジェクトのルート(VolleySample/)配下に移動して、下記コマンドを実行しましょう。</li>
</ol>


<p><code>java
$ echo "# VolleySample" &gt;&gt; README.md
$ git init
$ git add .
$ git commit -m "first commit"
$ git remote add origin https://github.com/grandbig/VolleySample.git
$ git push -u origin master
</code></p>

<p>下記のようになればOKです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p><img src="/images/android-volley-1.png" alt="プロジェクトをGitHubにアップ" /></p>

<h5>volleyの導入</h5>

<p>次にvolley frameworkを自身のプロジェクトに導入します。<br/>
導入にはgit submoduleを使います。</p>

<p>先ほど作成したAndroid Studioプロジェクトのルート(VolleySample/)配下で下記コマンドを実行</p>

<p><code>java
$ git submodule add https://android.googlesource.com/platform/frameworks/volley modules/volley
</code></p>

<p>これにより、VolleySample/.gitmodulesが作成されます。<br/>
中身はというと、</p>

<p>```java
[submodule &ldquo;modules/volley&rdquo;]</p>

<pre><code>path = modules/volley
url = https://android.googlesource.com/platform/frameworks/volley
</code></pre>

<p>```</p>

<p>になっているはずです。
続いて、<code>settings.gradle(Project Settings)</code>に下記1行を追加します。</p>

<p><code>java
include ':modules:volley'
</code></p>

<p><img src="/images/android-volley-2.png" alt="settings.gradleの設定" /></p>

<p>そして、<code>build.gradle(Module: app)</code>の<code>dependencies</code>に1行追加しましょう。</p>

<p>```java
dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:21.0.3'
compile project(':modules:volley')  .... ここを追加しましょう
</code></pre>

<p>}
```</p>

<p><img src="/images/android-volley-3.png" alt="build.gradleの設定" /></p>

<p>ここまできたら、一旦、GradleをSyncさせましょう。<br/>
足りないものがあればインストールを求められるはずなので、その場合はインストールしておきましょう。</p>

<p>では、GitHubにこれまでの作業分を更新させましょう。</p>

<p><img src="/images/android-volley-4.png" alt="volleyを追加した状態でGitHubにアップ" /></p>

<h5>volleyの利用</h5>

<p>実際にvolleyを使ってみましょう。<br/>
<a href="http://grandbig.github.io/blog/2015/05/24/swift-alamofire1/">Swift Alamofireライブラリを使ってみよう！</a>と<a href="http://grandbig.github.io/blog/2015/05/24/swift-afnetworking/">Swift AFNetworkingライブラリを使ってみよう！</a>で例として使ったOpen Weather Map APIをここでも利用します。</p>

<p>```java
// MainActivity.java
package com.example.takahiro.volleysample;</p>

<p>import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;</p>

<p>import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.VolleyError;
import com.android.volley.Response;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;</p>

<p>import org.json.JSONObject;</p>

<p>public class MainActivity extends ActionBarActivity {</p>

<pre><code>private RequestQueue mRequestQueue;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    if (mRequestQueue == null) {
        mRequestQueue = Volley.newRequestQueue(getApplicationContext());
    }

    // URLの指定
    String url = "http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp";

    mRequestQueue.add(new JsonObjectRequest(Request.Method.GET, url, null, new Response.Listener&lt;JSONObject&gt;() {
        @Override
        public void onResponse(JSONObject response) {
            // 通信に成功した場合
            Log.d("VolleySample", response.toString());
        }
    }, new Response.ErrorListener() {
        @Override
        public void onErrorResponse(VolleyError error) {
            // エラーが発生した場合
            Log.d("VolleySample", error.toString());
        }
    });
}

&lt;省略&gt;
</code></pre>

<p>}
```</p>

<p>因みに、<code>AndroidManifest.xml</code>にインターネットの通信許可を与えることを忘れずに。</p>

<p>```java
// AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.volleysample" &gt;

&lt;uses-permission android:name="android.permission.INTERNET" /&gt;

&lt;application
    &lt;省略&gt;
&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<p>無事、通信が成功しましたね！<br/>
ってところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AltBeaconを使ってAndroidでiBeaconを検知しよう]]></title>
    <link href="http://grandbig.github.io/blog/2015/05/16/altbeacon/"/>
    <updated>2015-05-16T19:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/05/16/altbeacon</id>
    <content type="html"><![CDATA[<h4>AltBeaconを使って手軽にAndroidでiBeaconを検知しよう</h4>

<p>本日はAndroidでのiBeacon検知をやってみようと思います。<br/>
自作することも簡単だと聞きますが、Radius Networks社が出している<a href="https://github.com/AltBeacon/android-beacon-library">AltBeacon</a>が非常に便利なようです。</p>

<p>何と言ってもiOSのCoreLocation.frameworkと同じ感覚で扱えるというのが強みでしょう。<br/>
(iOSアプリエンジニアにとっては非常に助かります笑)</p>

<p>さて、実際に実装方法を見て行きましょう。</p>

<p>実装方法や設定に関しては、<a href="http://dev.classmethod.jp/series/android-x-ibeacon/">Developers.IO Android x iBeacon – シリーズ –</a>を踏襲させて頂きました。<br/>
めちゃくちゃわかりやすいサイトなので、他のページも参考にすると良いです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>本記事のAndroid Studioのバージョンは1.2となります。</p>

<p><img src="/images/altbeacon_1.png" alt="Android Studioバージョン" /></p>

<h5>AltBeaconのライブラリを使うための準備</h5>

<p>AltBeaconライブラリを導入します。</p>

<p>１. Gradle Scripts > build.gradle(Module: app)の編集
<code>compile 'org.altbeacon:android-beacon-library:2+'</code>を<code>dependencies</code>に追加</p>

<p>```java
apply plugin: &lsquo;com.android.application&rsquo;</p>

<p>android {</p>

<pre><code>&lt;省略&gt;
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:21.0.3'
compile 'org.altbeacon:android-beacon-library:2+'
</code></pre>

<p>}
```</p>

<p>２. app > manifests > AndroidManifest.xmlの編集
Bluetooth関連のpermissionを追加</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.altbeaconsample" &gt;

&lt;!-- ここを追加 --&gt;
&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt;
&lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt;
&lt;uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/&gt;

&lt;application

    &lt;省略&gt;

&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<h5>iBeaconの検知を実装</h5>

<p>早速、iBeaconの検知(モニタリング)を実装します。</p>

<p>```java
package com.example.takahiro.altbeaconsample;</p>

<p>import android.os.RemoteException;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;</p>

<p>// AltBeacon関連のライブラリをimport
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.Identifier;
import org.altbeacon.beacon.MonitorNotifier;
import org.altbeacon.beacon.Region;</p>

<p>public class MainActivity extends ActionBarActivity implements BeaconConsumer {</p>

<pre><code>// BeaconConsumerインターフェースを実装
private static String TAG = "AltBeacon Sample";
// BeaconManagerクラスの変数を定義
private BeaconManager beaconManager;

// iBeaconのデータを認識するためのParserフォーマット
public static final String IBEACON_FORMAT = "m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // staticメソッドでBeaconManagerクラスのインスタンスを取得
    beaconManager = BeaconManager.getInstanceForApplication(this);
    // BeaconParseをBeaconManagerに設定
    beaconManager.getBeaconParsers().add(new BeaconParser().setBeaconLayout(IBEACON_FORMAT));
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.menu_main, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    int id = item.getItemId();

    //noinspection SimplifiableIfStatement
    if(id == R.id.action_settings) {
        return true;
    }

    return super.onOptionsItemSelected(item);
}

@Override
public void onBeaconServiceConnect() {
    // BeaconManagerクラスのモニタリング通知受取り処理
    beaconManager.setMonitorNotifier(new MonitorNotifier() {
        @Override
        public void didEnterRegion(Region region) {
            // 領域進入時に実行
            Log.d(TAG, "didEnterRegion");
        }

        @Override
        public void didExitRegion(Region region) {
            // 領域退出時に実行
            Log.d(TAG, "didExitRegion");
        }

        @Override
        public void didDetermineStateForRegion(int i, Region region) {
            // 領域への侵入/退出のステータスが変化したときに実行
            Log.d(TAG, "didDetermineStateForRegion");
        }
    });

    try {
        // UUIDの作成
        Identifier identifier = Identifier.parse("434B4666-E4B2-4B78-8C13-901AFEE3DBB6");
        // モニタリングの開始
        beaconManager.startMonitoringBeaconsInRegion(new Region("unique-id-001", identifier, null, null));
    } catch(RemoteException e) {
        // 例外が発生した場合の処理
        e.printStackTrace();
    }
}

@Override
protected void onPause() {
    super.onPause();
    beaconManager.unbind(this);
}

@Override
protected void onResume() {
    super.onPause();
    beaconManager.bind(this);
}
</code></pre>

<p>}
```</p>

<p>ポイントは下記です。</p>

<ul>
<li>iBeacon検知のためにBeaconParserを定義して、BeaconLayoutに設定</li>
<li><code>startMonitoringBeaconsInRegion</code>する際の引数であるRegionへの定義
各引数は<code>Region("監視対象ID", "UUID", "major", "minor")</code>のようになっています。<br/>
<strong>監視対象ID</strong> さえ設定すれば、iBeaconを検知可能です。UUID, major, minorを設定すると、該当するiBeaconのみ検知するようになります。</li>
</ul>


<h5>iBeaconで距離計測</h5>

<p>次にiBeaconの距離計測をしてみましょう。<br/>
今回は領域観測をして、領域に入ったタイミングで距離計測を開始し、領域を出たタイミングで距離計測を停止します。</p>

<p>```java</p>

<p>&lt;省略></p>

<p>@Override
public void onBeaconServiceConnect() {</p>

<pre><code>// BeaconManagerクラスのモニタリング設定
beaconManager.setMonitorNotifier(new MonitorNotifier() {
    @Override
    public void didEnterRegion(Region region) {
        // 領域侵入時に実行
        Log.d(TAG, "didEnterRegion");

        try {
            // レンジングの開始
            beaconManager.startRangingBeaconsInRegion(new Region("unique-id-001", identifier, null, null));
        } catch(RemoteException e) {
            // 例外が発生した場合
            e.printStackTrace();
        }
    }

    @Override
    public void didExitRegion(Region region) {
        // 領域退出時に実行
        Log.d(TAG, "didExitRegion");

        try {
            // レンジングの停止
            beaconManager.stopRangingBeaconsInRegion(new Region("unique-id-001", identifier, null, null));
        } catch(RemoteException e) {
            // 例外が発生した場合
            e.printStackTrace();
        }
    }
}

// BeaconManagerクラスのレンジング設定
beaconManager.setRangeNotifier(new RangeNotifier() {
    @Override
    public void didRangeBeaconsInRegion(Collection&lt;Beacon&gt; beacons, Region region) {
        // 検出したビーコンの情報を全部Logに書き出す
        for(Beacon beacon : beacons) {
            Log.d(TAG, "UUID:" + beacon.getId1() + ", major:" + beacon.getId2() + ", minor:" + beacon.getId3() + ", Distance:" + beacon.getDistance() + ",RSSI" + beacon.getRssi() + ", TxPower" + beacon.getTxPower());
        }
    }
}

try {
    // モニタリングの開始
    beaconManager.startMonitoringBeaconsInRegion(new Region("unique-id-001", identifier, null, null));
} catch(RemoteException e) {
    e.printStackTrace();
}
</code></pre>

<p>}</p>

<p>&lt;省略></p>

<p>```</p>

<p>AltBeaconライブラリはだいぶ使いやすいですね！<br/>
iBeaconはiOS先行でサービスを始めることが多いと思うので、iOSの仕様に合わせてプログラミングを組めるのはエンジニアとしてありがたいですね。<br/>
(Androidユーザが多いとは言えない日本にとっては、Android特有の機能を設けることは工数的に優先すべきではなかったりしますしね。趣味として取り入れたい気持ちはありますが&hellip;。)</p>

<p>と言ったところで本日はここまで。</p>

<p><a href="https://github.com/grandbig/altBeaconSample">本記事のレポジトリはこちら</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CROSSWALKの性能を確かめよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/12/crosswalk-test/"/>
    <updated>2015-04-12T16:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/12/crosswalk-test</id>
    <content type="html"><![CDATA[<h4>CROSSWALKは果たして優秀なのか！？</h4>

<p>以前、CROSSWALKについて紹介させて頂きました。<br/>
メリット/デメリットはいろいろなサイトで紹介されていますが、実際に性能はどうなのか気になりますよね？<br/>
そこで今回は幾つかの端末を用いて試験をしてみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Sunspiderでベンチマーク</h5>

<p>試験に利用した端末は下記3つです。</p>

<ul>
<li>Android4.4.2 / AQOUS 305SH</li>
<li>Android4.2.2 / AQOUS 303SH</li>
</ul>


<p>これら端末で下記4つのWebの性能を確かめました。</p>

<ul>
<li>CROSSWALK</li>
<li>標準のWebView</li>
<li>標準のブラウザ</li>
<li>Chrome</li>
</ul>


<p>早速ですが、結果を載せます。</p>

<p><img src="/images/crosswalk_sunspider_305sh.png" alt="Android4.4.2, AQOUS 305SH, Sunspider結果" /><br/>
<img src="/images/crosswalk_sunspider_303sh.png" alt="Android4.2.2, AQOUS 303SH, Sunspider結果" /></p>

<p>結果を見ると、処理速度だけで言えば、必ずしもCROSSWALKが優秀とは言えないことがわかります。<br/>
しかし、CROSSWALKの良さは処理速度に限ったことではありません。<br/>
何と言っても最新のChromiumと同じHTML, CSSの対応度合いが肝です。<br/>
では続けて、HTMLとCSSに関して試験してみましょう。</p>

<h5>HTML5のテスト</h5>

<p>まずは、HTML5の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="https://html5test.com/">HTML5test</a>です。<br/>
HTML5testは550点満点なので、数値が550に近いほど優秀と言えます。</p>

<p><img src="/images/crosswalk_html5test_305sh.png" alt="Android4.4.2, AQOUS 305SH, HTML5Test結果" /><br/>
<img src="/images/crosswalk_html5test_303sh.png" alt="Android4.2.2, AQOUS 303SH, HTML5Test結果" /></p>

<p>これはさすがの結果と言えるでしょう。<br/>
Chromeの方が高かったりしますが、標準のWebViewや標準のブラウザに比べれば遥かに優秀であると言えます。</p>

<h5>CSS3のテスト</h5>

<p>次に、CSS3の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="http://css3test.com/">The CSS3 Test</a>です。<br/>
The CSS3 Testは100%満点の%で表現されます。</p>

<p><img src="/images/crosswalk_css3test_305sh.png" alt="Android4.4.2 AQOUS 305SH, CSS3Test結果" /><br/>
<img src="/images/crosswalk_css3test_303sh.png" alt="Android4.2.2 AQOUS 303SH, CSS3Test結果" /></p>

<p>こちらもCROSSWALKがメリットとなる結果と言えるでしょう。<br/>
Chromeと同じ対応度合いであったので、全く問題がないと言えると思います。</p>

<h5>まとめ</h5>

<p>以上の結果を見ると、処理速度が気になるものの、WebSocketやWebGL, WebRTCなどに対応した上で、ターゲットにAndroid4.0〜4.3を含めたいのであれば、CROSSWALKは入れるべきと言えるでしょう。<br/>
Android5.0以上がほとんどを占める世の中になったとしたら、何も考えずに標準のWebViewを使えば良いのかもしれないですが、まだまだ先の話でしょう。<br/>
と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
