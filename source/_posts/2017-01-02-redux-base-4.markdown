---
layout: post
title: "iOSエンジニアが苦しんだReduxの基礎(4)"
date: 2017-01-02 23:56
comments: true
categories: redux web FE javascript
---

###はじめに
[前回](http://grandbig.github.io/blog/2017/01/01/redux-base-3/)で`connect()`を使ったReact&ReduxでのWebサイトの実装について見ていきました。  
今回は処理簡略化するためによく使われる`redux-actions`を利用した書き方について見ていきましょう。  
これもまた基本が理解できていないとハマりポイントとなるため、知っておきたい内容の１つになります。  

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<!-- more -->

###Counterサンプルで学ぼう！
[公式ReduxページのExample](http://redux.js.org/docs/introduction/Examples.html)の先頭に書かれている **Counter** を見ていきましょう。  
今回もわかりやすさのために同じサンプルを利用します。(`redux-actions`を利用した実装に改変しています。)  
実装するWebサイトは下図の通りです。  

![Counter Example画面](/images/redux_base_1.png)  

実装されている機能としては下記の4つになります。  

* 「+」ボタンを選択するとClick数が+1される  
* 「-」ボタンを選択するとClick数が-1される  
* 「Increment if odd」ボタンを選択するとClick数が奇数のときのみ+1される  
* 「Increment async」ボタンを選択すると1秒後にClick数が+1される  

####フォルダ構成
まずは例によってフォルダ構成を見ていきます。  

```javascript
counter
├── public
│     └── index.html
└── src
     ├── index.js
     ├── actions
     │     └── index.js
     ├── reducers
     │     └── index.js
     ├── components
     │     └── Counter.js
     └── node_modules
```

####redux-actionsを利用したActionsの実装
これまで`Actions`および`Create Actions`はシンプルに下記のように実装していました。  

```javascript
// actions/index.js
const INCREMENT = { type: 'INCREMENT' }
const DECREMENT = { type: 'DECREMENT' }

export function increment() {
  return INCREMENT;
}
export function decrement() {
  return DECREMENT;
}
```

これを`redux-actions`を利用すると下記のように実装できます。  

```javascript
// actions/index.js
import { createAction } from 'redux-actions'

export const INCREMENT = ('INCREMENT')
export const DECREMENT = ('DECREMENT')

export const increment = createAction(INCREMENT)
export const decrement = createAction(DECREMENT)
```

ポイントは`createAction`メソッドを利用している点です。  
このメソッドは「第一引数を指定すること」 = 「`type`プロパティを設定したオブジェクトを返却すること」になります。  
つまり、  

```javascript
export const increment = createAction(INCREMENT)

/*
createActionでやっていることを素で書くと下記の通り
export const increment = () => {
  return { type: 'INCREMENT' }
}
*/
```

ということです。  

####redux-actionsを利用したReducersの実装
これまで`Reducers`の実装は下記のようにしていました。  

```javascript
// reducers/index.js
export default (state = 0, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}
```

これを`redux-actions`を利用すると下記のように実装できます。

```javascript
// reducers/index.js
import { handleActions } from 'redux-actions'

const initialState = 0

export default handleActions({
  INCREMENT: (state, action) => {
    return state + 1
  },
  DECREMENT: (state, action) => {
    return state - 1
  }
}, initialState)
```

ポイントは`handleActions`メソッドを利用している点です。  
`handleActions`は第一引数に各`Reducer`をマッピングするのに利用し、第二引数で`state`の初期値を設定します。  
第二引数で設定する初期値を予め`const initialState = 0`とすることで、`(state = 0, action)`の代わりの役目を果たしています。  

###まとめ
今回はおまけ回として書いてみました。  
やっと基本的なことが少しずつわかってきた段階なので、これからもっと学ばなければいけないことが多いと感じています。  
`Redux`は他の言語でも特徴をまねたライブラリがわんさか出てきているので、ここで学んだことがWebに閉じた話ではなく、いろいろなところで活かせると信じています。  
これからも機を見て、`Redux`について書いていければと思います。  
ということで本日はここまで。  

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
